Analysis object initialized
{'': 1, 'nagt': 1, 'nahht': 2, 'naht': 2, 'nachte': 1, 'naist': 1, 'naiste': 1, 'naite': 1, 'naȝte': 1, 'nicst': 1, 'nicste': 1, 'nict': 1, 'nicth': 1, 'nieht': 1, 'nig': 1, 'night': 3, 'nigt': 28, 'nigte': 1, 'nih': 1, 'nihcte': 1, 'nihht': 2, 'niht': 102, 'nihte': 31, 'nich': 1, 'nichit': 1, 'nicht': 19, 'nichte': 3, 'nikte': 1, 'nist': 6, 'niste': 2, 'nit': 1, 'nite': 1, 'nitf': 1, 'nith': 1, 'nithe': 1, 'niþt': 8, 'niþte': 2, 'niȝht': 5, 'niȝhte': 3, 'niȝt': 77, 'niȝte': 20, 'niȝth': 1, 'niȝtt': 3, 'niȝtte': 8, 'nyht': 13, 'nyhte': 8, 'nyhyt': 1, 'nyt': 7, 'nyth': 3, 'nythe': 1, 'nyȝht': 1}
Lexel initialized
[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 2}]]
MIN pattern length=5
Pattern CCCCV is invalid
Pattern CVCCV is valid
Pattern CVCCC is valid
Pattern CCCCCV is invalid
Pattern CCC is invalid
Pattern CVC is invalid
Pattern CVCCCV is valid
Pattern CCCC is invalid
Pattern CCCV is invalid
Pattern CCCCC is invalid
Pattern CVCC is invalid
{'value': 8, 'patterns': ['CVCCV']}
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern CCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCCV is valid
	Pattern CCCC is invalid
	Pattern CCCV is invalid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: nihte
				adding littera based on matching pattern
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niste
				adding littera based on matching pattern
				ANALYSING: niþte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nyhte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: n
					> version: n/a/hh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: n
					> version: n/i/g/h/t
					TRYING: n
					> version: n/i/gh/t
					TRYING: n
					> version: n/i/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: n
					> version: n/i/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: n
					> version: n/i/h/h/t
					TRYING: n
					> version: n/i/hh/t
					TRYING: n
					> version: n/i/hh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: n
					> version: n/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: n
					> version: n/i/c/h/t
					TRYING: n
					> version: n/i/ch/t
					TRYING: n
					> version: n/i/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: n
					> version: n/i/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: n
					> version: n/i/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: n
					> version: n/i/ȝ/h/t
					TRYING: n
					> version: n/i/ȝh/t
					TRYING: n
					> version: n/i/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: n
					> version: n/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: n
					> version: n/i/ȝ/t/t
					TRYING: n
					> version: n/i/ȝ/tt
					TRYING: n
					> version: n/i/ȝ/tt
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: n
					> version: n/y/h/t
					TRYING: n
					> version: n/yh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: n
					> version: n/y/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: n
					> version: n/y/t/h
					TRYING: n
					> version: n/y/th
					TRYING: n
					> version: n/y/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCV : 1___
				ANALYSING: nihte
				adding littera based on matching pattern
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niste
				adding littera based on matching pattern
				ANALYSING: niþte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nyhte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: a
					> version: n/a/hh/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: i
					> version: n/i/g/h/t
					TRYING: i
					> version: n/i/gh/t
					TRYING: i
					> version: n/i/gh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: i
					> version: n/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: i
					> version: n/i/h/h/t
					TRYING: i
					> version: n/i/hh/t
					TRYING: i
					> version: n/i/hh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: i
					> version: n/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: i
					> version: n/i/c/h/t
					TRYING: i
					> version: n/i/ch/t
					TRYING: i
					> version: n/i/ch/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: i
					> version: n/i/s/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: i
					> version: n/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: i
					> version: n/i/ȝ/h/t
					TRYING: i
					> version: n/i/ȝh/t
					TRYING: i
					> version: n/i/ȝh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: i
					> version: n/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: i
					> version: n/i/ȝ/t/t
					TRYING: i
					> version: n/i/ȝ/tt
					TRYING: i
					> version: n/i/ȝ/tt
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: y
					> version: n/y/h/t
					TRYING: y
					> version: n/yh/t
					TRYING: yh
					RESULT:  ['y']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n/yh', 'rgx': '((n))/((y))$'}
				_____REMOVING________['n', 'yh', 't']
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: y
					> version: n/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: y
					> version: n/y/t/h
					TRYING: y
					> version: n/y/th
					TRYING: y
					> version: n/y/th
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
			___CVCCV : 2___
				ANALYSING: nihte
				adding littera based on matching pattern
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niste
				adding littera based on matching pattern
				ANALYSING: niþte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nyhte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, s, ȝh, ch, þ, h
					> version: n/a/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, ȝ, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'hh', 't']
				n/a/h/h/t(CVCCC)
n/a/hh/t(CVCC)
n/a/_/h/h/t(CVACCC)
n/a/_/hh/t(CVACC)
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 'h', 't']
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n/a/hh', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'hh', 't']
				version split: ['n', 'a', '_', 'h', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'hh', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'h', 't']
				n/a/h/t(CVCC)
n/a/_/h/t(CVACC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', '_', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, _, gh, s, ȝh, ch, þ, h
					> version: n/i/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, _, gh, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'gh', 't']
				adding dashed alternative: ['n', 'i', '_', 'gh', 't']
				n/i/g/h/t(CCCCC)
n/i/g/h/t(CVCCC)
n/i/gh/t(CCCC)
n/i/gh/t(CVCC)
n/i/_/g/h/t(CAACCC)
n/i/_/g/h/t(CAACCC)
n/i/_/gh/t(CAACC)
n/i/_/gh/t(CAACC)
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 'h', 't']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 'h', 't']
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', 't']
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', 't']
				version split: ['n', 'i', '_', 'g', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'g', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'gh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'gh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: g
					adding blocked set: C = C >> g, ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/g/t
					TRYING: g
					adding blocked set: C = C >> g, ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'g', 't']
				adding dashed alternative: ['n', 'i', '_', 'g', 't']
				n/i/g/t(CCCC)
n/i/g/t(CVCC)
n/i/_/g/t(CAACC)
n/i/_/g/t(CAACC)
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', '_', 'g', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'g', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/h/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'hh', 't']
				adding dashed alternative: ['n', 'i', '_', 'hh', 't']
				n/i/h/h/t(CCCCC)
n/i/h/h/t(CVCCC)
n/i/hh/t(CCCC)
n/i/hh/t(CVCC)
n/i/_/h/h/t(CAACCC)
n/i/_/h/h/t(CAACCC)
n/i/_/hh/t(CAACC)
n/i/_/hh/t(CAACC)
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 'h', 't']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 'h', 't']
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', 't']
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', 't']
				version split: ['n', 'i', '_', 'h', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'h', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'hh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'hh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'h', 't']
				n/i/h/t(CCCC)
n/i/h/t(CVCC)
n/i/_/h/t(CAACC)
n/i/_/h/t(CAACC)
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', '_', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, _, s, ȝh, ch, þ, h
					> version: n/i/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, _, s, ȝh, ch, þ, h
					> version: n/i/ch/t
					TRYING: ch
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ch/t
					TRYING: ch
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'ch', 't']
				adding dashed alternative: ['n', 'i', '_', 'ch', 't']
				n/i/c/h/t(CCCCC)
n/i/c/h/t(CVCCC)
n/i/ch/t(CCCC)
n/i/ch/t(CVCC)
n/i/_/c/h/t(CAACCC)
n/i/_/c/h/t(CAACCC)
n/i/_/ch/t(CAACC)
n/i/_/ch/t(CAACC)
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't']
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't']
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't']
				version split: ['n', 'i', '_', 'c', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'c', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ch', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ch', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: s
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/s/t
					TRYING: s
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 's', 't']
				adding dashed alternative: ['n', 'i', '_', 's', 't']
				n/i/s/t(CCCC)
n/i/s/t(CVCC)
n/i/_/s/t(CAACC)
n/i/_/s/t(CAACC)
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', '_', 's', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 's', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				n/i/þ/t(CCCC)
n/i/þ/t(CVCC)
n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝh', 't']
				n/i/ȝ/h/t(CCCCC)
n/i/ȝ/h/t(CVCCC)
n/i/ȝh/t(CCCC)
n/i/ȝh/t(CVCC)
n/i/_/ȝ/h/t(CAACCC)
n/i/_/ȝ/h/t(CAACCC)
n/i/_/ȝh/t(CAACC)
n/i/_/ȝh/t(CAACC)
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't']
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't']
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't']
				version split: ['n', 'i', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝh', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 't']
				n/i/ȝ/t(CCCC)
n/i/ȝ/t(CVCC)
n/i/_/ȝ/t(CAACC)
n/i/_/ȝ/t(CAACC)
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', '_', 'ȝ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝ/t/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝ/tt
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/i/ȝ/tt
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 'tt']
				adding dashed alternative: ['n', 'i', '_', 'ȝ', 'tt']
				n/i/ȝ/t/t(CCCCC)
n/i/ȝ/t/t(CVCCC)
n/i/ȝ/tt(CCCC)
n/i/ȝ/tt(CVCC)
n/i/_/ȝ/t/t(CAACCC)
n/i/_/ȝ/t/t(CAACCC)
n/i/_/ȝ/tt(CAACC)
n/i/_/ȝ/tt(CAACC)
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't']
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt']
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt']
				version split: ['n', 'i', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝ', 'tt']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'ȝ', 'tt']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					> version: n/y/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 'h', 't']
				adding dashed alternative: ['n', 'y', '_', 'h', 't']
				n/y/h/t(CCCC)
n/y/h/t(CVCC)
n/y/_/h/t(CAACC)
n/y/_/h/t(CAACC)
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', '_', 'h', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 'h', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> ȝ, _, t, s, ȝh, ch, þ, h
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> ȝ, _, t, s, ȝh, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't']
				adding dashed alternative: ['n', 'y', '_', 't']
				n/y/t(CCC)
n/y/t(CVC)
n/y/_/t(CAAC)
n/y/_/t(CAAC)
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> ȝ, _, t, s, ȝh, ch, þ, h
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> ȝ, _, t, s, ȝh, ch, þ, h
					> version: n/y/th
					TRYING: th
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, th, h
					> version: n/y/th
					TRYING: th
					adding blocked set: C = C >> ȝ, _, s, ȝh, ch, þ, th, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't', 'h']
				adding dashed alternative: ['n', 'y', '_', 't', 'h']
				adding dashed alternative: ['n', 'y', '_', 'th']
				adding dashed alternative: ['n', 'y', '_', 'th']
				n/y/t/h(CCCC)
n/y/t/h(CVCC)
n/y/th(CCC)
n/y/th(CVC)
n/y/_/t/h(CAACC)
n/y/_/t/h(CAACC)
n/y/_/th(CAAC)
n/y/_/th(CAAC)
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 'th']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 'th']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
			___CVCCV : 3___
				ANALYSING: nihte
				adding littera based on matching pattern
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niste
				adding littera based on matching pattern
				ANALYSING: niþte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nyhte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, t
					> version: n/a/_/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, tt, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'hh', 't']
				n/a/_/h/h/t(CVACCC)
n/a/_/hh/t(CVACC)
n/a/_/_/h/h/t(CVAACCC)
n/a/_/_/hh/t(CVAACC)
				version split: ['n', 'a', '_', 'h', 'h', 't']
				{'string': 'n/a/_/h', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'h', 'h', 't']
				version split: ['n', 'a', '_', 'hh', 't']
				{'string': 'n/a/_/hh', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'hh', 't']
				version split: ['n', 'a', '_', '_', 'h', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'hh', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'h', 't']
				n/a/_/h/t(CVACC)
n/a/_/_/h/t(CVAACC)
				version split: ['n', 'a', '_', 'h', 't']
				{'string': 'n/a/_/h', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'h', 't']
				version split: ['n', 'a', '_', '_', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, tt, _, t
					> version: n/i/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, tt, _, t
					> version: n/i/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> tt, _, t, gh
					> version: n/i/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> tt, _, t, gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'gh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'gh', 't']
				n/i/_/g/h/t(CAACCC)
n/i/_/g/h/t(CAACCC)
n/i/_/gh/t(CAACC)
n/i/_/gh/t(CAACC)
n/i/_/_/g/h/t(CAAACCC)
n/i/_/_/g/h/t(CAAACCC)
n/i/_/_/gh/t(CAAACC)
n/i/_/_/gh/t(CAAACC)
				version split: ['n', 'i', '_', 'g', 'h', 't']
				{'string': 'n/i/_/g', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', 'g', 'h', 't']
				{'string': 'n/i/_/g', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', 'gh', 't']
				{'string': 'n/i/_/gh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'gh', 't']
				version split: ['n', 'i', '_', 'gh', 't']
				{'string': 'n/i/_/gh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'gh', 't']
				version split: ['n', 'i', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> g, tt, _, t
					> version: n/i/_/g/t
					TRYING: g
					adding blocked set: C = C >> g, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'g', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'g', 't']
				n/i/_/g/t(CAACC)
n/i/_/g/t(CAACC)
n/i/_/_/g/t(CAAACC)
n/i/_/_/g/t(CAAACC)
				version split: ['n', 'i', '_', 'g', 't']
				{'string': 'n/i/_/g', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'g', 't']
				version split: ['n', 'i', '_', 'g', 't']
				{'string': 'n/i/_/g', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'g', 't']
				version split: ['n', 'i', '_', '_', 'g', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'g', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					> version: n/i/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					> version: n/i/_/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, tt, _, t
					> version: n/i/_/hh/t
					TRYING: hh
					adding blocked set: C = C >> hh, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'hh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'hh', 't']
				n/i/_/h/h/t(CAACCC)
n/i/_/h/h/t(CAACCC)
n/i/_/hh/t(CAACC)
n/i/_/hh/t(CAACC)
n/i/_/_/h/h/t(CAAACCC)
n/i/_/_/h/h/t(CAAACCC)
n/i/_/_/hh/t(CAAACC)
n/i/_/_/hh/t(CAAACC)
				version split: ['n', 'i', '_', 'h', 'h', 't']
				{'string': 'n/i/_/h', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', 'h', 'h', 't']
				{'string': 'n/i/_/h', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', 'hh', 't']
				{'string': 'n/i/_/hh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'hh', 't']
				version split: ['n', 'i', '_', 'hh', 't']
				{'string': 'n/i/_/hh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'hh', 't']
				version split: ['n', 'i', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					> version: n/i/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'h', 't']
				n/i/_/h/t(CAACC)
n/i/_/h/t(CAACC)
n/i/_/_/h/t(CAAACC)
n/i/_/_/h/t(CAAACC)
				version split: ['n', 'i', '_', 'h', 't']
				{'string': 'n/i/_/h', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'h', 't']
				version split: ['n', 'i', '_', 'h', 't']
				{'string': 'n/i/_/h', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'h', 't']
				version split: ['n', 'i', '_', '_', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> tt, _, t, c
					> version: n/i/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> tt, _, t, c
					> version: n/i/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> tt, _, t, ch
					> version: n/i/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> tt, _, t, ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ch', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ch', 't']
				n/i/_/c/h/t(CAACCC)
n/i/_/c/h/t(CAACCC)
n/i/_/ch/t(CAACC)
n/i/_/ch/t(CAACC)
n/i/_/_/c/h/t(CAAACCC)
n/i/_/_/c/h/t(CAAACCC)
n/i/_/_/ch/t(CAAACC)
n/i/_/_/ch/t(CAAACC)
				version split: ['n', 'i', '_', 'c', 'h', 't']
				{'string': 'n/i/_/c', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', 'c', 'h', 't']
				{'string': 'n/i/_/c', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', 'ch', 't']
				{'string': 'n/i/_/ch', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ch', 't']
				version split: ['n', 'i', '_', 'ch', 't']
				{'string': 'n/i/_/ch', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ch', 't']
				version split: ['n', 'i', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/_/s/t
					TRYING: s
					adding blocked set: C = C >> s, tt, _, t
					> version: n/i/_/s/t
					TRYING: s
					adding blocked set: C = C >> s, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 's', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 's', 't']
				n/i/_/s/t(CAACC)
n/i/_/s/t(CAACC)
n/i/_/_/s/t(CAAACC)
n/i/_/_/s/t(CAAACC)
				version split: ['n', 'i', '_', 's', 't']
				{'string': 'n/i/_/s', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 's', 't']
				version split: ['n', 'i', '_', 's', 't']
				{'string': 'n/i/_/s', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 's', 't']
				version split: ['n', 'i', '_', '_', 's', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 's', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, tt, _, t
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/t(CAAACC)
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/_/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝh, tt, _, t
					> version: n/i/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝh, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝh', 't']
				n/i/_/ȝ/h/t(CAACCC)
n/i/_/ȝ/h/t(CAACCC)
n/i/_/ȝh/t(CAACC)
n/i/_/ȝh/t(CAACC)
n/i/_/_/ȝ/h/t(CAAACCC)
n/i/_/_/ȝ/h/t(CAAACCC)
n/i/_/_/ȝh/t(CAAACC)
n/i/_/_/ȝh/t(CAAACC)
				version split: ['n', 'i', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', 'ȝh', 't']
				{'string': 'n/i/_/ȝh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝh', 't']
				version split: ['n', 'i', '_', 'ȝh', 't']
				{'string': 'n/i/_/ȝh', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝh', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 't']
				n/i/_/ȝ/t(CAACC)
n/i/_/ȝ/t(CAACC)
n/i/_/_/ȝ/t(CAAACC)
n/i/_/_/ȝ/t(CAAACC)
				version split: ['n', 'i', '_', 'ȝ', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 't']
				version split: ['n', 'i', '_', 'ȝ', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/_/ȝ/t/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝ/t/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝ/tt
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					> version: n/i/_/ȝ/tt
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 'tt']
				adding dashed alternative: ['n', 'i', '_', '_', 'ȝ', 'tt']
				n/i/_/ȝ/t/t(CAACCC)
n/i/_/ȝ/t/t(CAACCC)
n/i/_/ȝ/tt(CAACC)
n/i/_/ȝ/tt(CAACC)
n/i/_/_/ȝ/t/t(CAAACCC)
n/i/_/_/ȝ/t/t(CAAACCC)
n/i/_/_/ȝ/tt(CAAACC)
n/i/_/_/ȝ/tt(CAAACC)
				version split: ['n', 'i', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 'tt']
				version split: ['n', 'i', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'ȝ', 'tt']
				version split: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					> version: n/y/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'y', '_', '_', 'h', 't']
				n/y/_/h/t(CAACC)
n/y/_/h/t(CAACC)
n/y/_/_/h/t(CAAACC)
n/y/_/_/h/t(CAAACC)
				version split: ['n', 'y', '_', 'h', 't']
				{'string': 'n/y/_/h', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 'h', 't']
				version split: ['n', 'y', '_', 'h', 't']
				{'string': 'n/y/_/h', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 'h', 't']
				version split: ['n', 'y', '_', '_', 'h', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				version split: ['n', 'y', '_', '_', 'h', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/t
					TRYING: t
					> version: n/y/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))$'}
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/_/t/h
					TRYING: t
					> version: n/y/_/t/h
					TRYING: t
					> version: n/y/_/th
					TRYING: th
					adding blocked set: C = C >> th, tt, _, t
					> version: n/y/_/th
					TRYING: th
					adding blocked set: C = C >> th, tt, _, t
					RESULT:  ['t']
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))$'}
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))$'}
				version split: ['n', 'y', '_', 'th']
				{'string': 'n/y/_/th', 'rgx': '((n))/((y))/((_))/((t))$'}
				_____REMOVING________['n', 'y', '_', 'th']
				version split: ['n', 'y', '_', 'th']
				{'string': 'n/y/_/th', 'rgx': '((n))/((y))/((_))/((t))$'}
				_____REMOVING________['n', 'y', '_', 'th']
			___CVCCV : 4___
				ANALYSING: nihte
				adding littera based on matching pattern
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niste
				adding littera based on matching pattern
				ANALYSING: niþte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nyhte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/_/_/h/h/t
					TRYING: h
					> version: n/a/_/_/hh/t
					TRYING: hh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'hh', 't']
				n/a/_/_/h/h/t(CVAACCC)
n/a/_/_/hh/t(CVAACC)
n/a/_/_/_/h/h/t(CVAAACCC)
n/a/_/_/_/hh/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 'h', 'h', 't']
				{'string': 'n/a/_/_/h/h', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'h', 'h', 't']
				version split: ['n', 'a', '_', '_', 'hh', 't']
				{'string': 'n/a/_/_/hh/t', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'hh', 't']
				version split: ['n', 'a', '_', '_', '_', 'h', 'h', 't']
				{'string': 'n/a/_/_/_/h', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'h', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'hh', 't']
				{'string': 'n/a/_/_/_/hh', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'hh', 't']
				ANALYSING: naht
					resolving (1)
					> version: n/a/_/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'h', 't']
				n/a/_/_/h/t(CVAACC)
n/a/_/_/_/h/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 'h', 't']
				{'string': 'n/a/_/_/h/t', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'h', 't']
				{'string': 'n/a/_/_/_/h', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'h', 't']
				ANALYSING: night
					resolving (4)
					> version: n/i/_/_/g/h/t
					TRYING: g
					> version: n/i/_/_/g/h/t
					TRYING: g
					> version: n/i/_/_/gh/t
					TRYING: gh
					> version: n/i/_/_/gh/t
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'gh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'gh', 't']
				n/i/_/_/g/h/t(CAAACCC)
n/i/_/_/g/h/t(CAAACCC)
n/i/_/_/gh/t(CAAACC)
n/i/_/_/gh/t(CAAACC)
n/i/_/_/_/g/h/t(CAAAACCC)
n/i/_/_/_/g/h/t(CAAAACCC)
n/i/_/_/_/gh/t(CAAAACC)
n/i/_/_/_/gh/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_/g/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_/g/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_/gh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'gh', 't']
				version split: ['n', 'i', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_/gh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'gh', 't']
				version split: ['n', 'i', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_/_/g', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/i/_/_/_/g', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_/_/gh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'gh', 't']
				version split: ['n', 'i', '_', '_', '_', 'gh', 't']
				{'string': 'n/i/_/_/_/gh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'gh', 't']
				ANALYSING: nigt
					resolving (2)
					> version: n/i/_/_/g/t
					TRYING: g
					> version: n/i/_/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'g', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'g', 't']
				n/i/_/_/g/t(CAAACC)
n/i/_/_/g/t(CAAACC)
n/i/_/_/_/g/t(CAAAACC)
n/i/_/_/_/g/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'g', 't']
				{'string': 'n/i/_/_/g/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'g', 't']
				version split: ['n', 'i', '_', '_', 'g', 't']
				{'string': 'n/i/_/_/g/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'g', 't']
				version split: ['n', 'i', '_', '_', '_', 'g', 't']
				{'string': 'n/i/_/_/_/g', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'g', 't']
				version split: ['n', 'i', '_', '_', '_', 'g', 't']
				{'string': 'n/i/_/_/_/g', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'g', 't']
				ANALYSING: nihht
					resolving (4)
					> version: n/i/_/_/h/h/t
					TRYING: h
					> version: n/i/_/_/h/h/t
					TRYING: h
					> version: n/i/_/_/hh/t
					TRYING: hh
					> version: n/i/_/_/hh/t
					TRYING: hh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'h', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'hh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'hh', 't']
				n/i/_/_/h/h/t(CAAACCC)
n/i/_/_/h/h/t(CAAACCC)
n/i/_/_/hh/t(CAAACC)
n/i/_/_/hh/t(CAAACC)
n/i/_/_/_/h/h/t(CAAAACCC)
n/i/_/_/_/h/h/t(CAAAACCC)
n/i/_/_/_/hh/t(CAAAACC)
n/i/_/_/_/hh/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_/h/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_/h/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_/hh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'hh', 't']
				version split: ['n', 'i', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_/hh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'hh', 't']
				version split: ['n', 'i', '_', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_/_/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'h', 'h', 't']
				{'string': 'n/i/_/_/_/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'h', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_/_/hh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'hh', 't']
				version split: ['n', 'i', '_', '_', '_', 'hh', 't']
				{'string': 'n/i/_/_/_/hh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'hh', 't']
				ANALYSING: niht
					resolving (2)
					> version: n/i/_/_/h/t
					TRYING: h
					> version: n/i/_/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'h', 't']
				n/i/_/_/h/t(CAAACC)
n/i/_/_/h/t(CAAACC)
n/i/_/_/_/h/t(CAAAACC)
n/i/_/_/_/h/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'h', 't']
				{'string': 'n/i/_/_/h/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'h', 't']
				version split: ['n', 'i', '_', '_', 'h', 't']
				{'string': 'n/i/_/_/h/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'h', 't']
				{'string': 'n/i/_/_/_/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'h', 't']
				{'string': 'n/i/_/_/_/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'h', 't']
				ANALYSING: nicht
					resolving (4)
					> version: n/i/_/_/c/h/t
					TRYING: c
					> version: n/i/_/_/c/h/t
					TRYING: c
					> version: n/i/_/_/ch/t
					TRYING: ch
					> version: n/i/_/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ch', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ch', 't']
				n/i/_/_/c/h/t(CAAACCC)
n/i/_/_/c/h/t(CAAACCC)
n/i/_/_/ch/t(CAAACC)
n/i/_/_/ch/t(CAAACC)
n/i/_/_/_/c/h/t(CAAAACCC)
n/i/_/_/_/c/h/t(CAAAACCC)
n/i/_/_/_/ch/t(CAAAACC)
n/i/_/_/_/ch/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_/c/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_/c/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_/ch/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ch', 't']
				version split: ['n', 'i', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_/ch/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ch', 't']
				version split: ['n', 'i', '_', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_/_/c', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'c', 'h', 't']
				{'string': 'n/i/_/_/_/c', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'c', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_/_/ch', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ch', 't']
				version split: ['n', 'i', '_', '_', '_', 'ch', 't']
				{'string': 'n/i/_/_/_/ch', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ch', 't']
				ANALYSING: nist
					resolving (2)
					> version: n/i/_/_/s/t
					TRYING: s
					> version: n/i/_/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 's', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 's', 't']
				n/i/_/_/s/t(CAAACC)
n/i/_/_/s/t(CAAACC)
n/i/_/_/_/s/t(CAAAACC)
n/i/_/_/_/s/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 's', 't']
				{'string': 'n/i/_/_/s/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 's', 't']
				version split: ['n', 'i', '_', '_', 's', 't']
				{'string': 'n/i/_/_/s/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 's', 't']
				version split: ['n', 'i', '_', '_', '_', 's', 't']
				{'string': 'n/i/_/_/_/s', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 's', 't']
				version split: ['n', 'i', '_', '_', '_', 's', 't']
				{'string': 'n/i/_/_/_/s', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 's', 't']
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/_/þ/t
					TRYING: þ
					> version: n/i/_/_/þ/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'þ', 't']
				n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/t(CAAACC)
n/i/_/_/_/þ/t(CAAAACC)
n/i/_/_/_/þ/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'þ', 't']
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/_/_/ȝ/h/t
					TRYING: ȝ
					> version: n/i/_/_/ȝ/h/t
					TRYING: ȝ
					> version: n/i/_/_/ȝh/t
					TRYING: ȝh
					> version: n/i/_/_/ȝh/t
					TRYING: ȝh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝh', 't']
				n/i/_/_/ȝ/h/t(CAAACCC)
n/i/_/_/ȝ/h/t(CAAACCC)
n/i/_/_/ȝh/t(CAAACC)
n/i/_/_/ȝh/t(CAAACC)
n/i/_/_/_/ȝ/h/t(CAAAACCC)
n/i/_/_/_/ȝ/h/t(CAAAACCC)
n/i/_/_/_/ȝh/t(CAAAACC)
n/i/_/_/_/ȝh/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_/ȝ/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_/ȝ/h', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_/ȝh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝh', 't']
				version split: ['n', 'i', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_/ȝh/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝh', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_/_/ȝh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝh', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝh', 't']
				{'string': 'n/i/_/_/_/ȝh', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝh', 't']
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/_/_/ȝ/t
					TRYING: ȝ
					> version: n/i/_/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 't']
				n/i/_/_/ȝ/t(CAAACC)
n/i/_/_/ȝ/t(CAAACC)
n/i/_/_/_/ȝ/t(CAAAACC)
n/i/_/_/_/ȝ/t(CAAAACC)
				version split: ['n', 'i', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_/ȝ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_/ȝ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 't']
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/_/_/ȝ/t/t
					TRYING: ȝ
					> version: n/i/_/_/ȝ/t/t
					TRYING: ȝ
					> version: n/i/_/_/ȝ/tt
					TRYING: ȝ
					> version: n/i/_/_/ȝ/tt
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				adding dashed alternative: ['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				n/i/_/_/ȝ/t/t(CAAACCC)
n/i/_/_/ȝ/t/t(CAAACCC)
n/i/_/_/ȝ/tt(CAAACC)
n/i/_/_/ȝ/tt(CAAACC)
n/i/_/_/_/ȝ/t/t(CAAAACCC)
n/i/_/_/_/ȝ/t/t(CAAAACCC)
n/i/_/_/_/ȝ/tt(CAAAACC)
n/i/_/_/_/ȝ/tt(CAAAACC)
				version split: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_/ȝ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_/ȝ/t', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_/ȝ/tt', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 'tt']
				version split: ['n', 'i', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_/ȝ/tt', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'ȝ', 'tt']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 't', 't']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				version split: ['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				{'string': 'n/i/_/_/_/ȝ', 'rgx': '((n))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', '_', 'ȝ', 'tt']
				ANALYSING: nyht
					resolving (2)
					> version: n/y/_/_/h/t
					TRYING: h
					> version: n/y/_/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'y', '_', '_', '_', 'h', 't']
				n/y/_/_/h/t(CAAACC)
n/y/_/_/h/t(CAAACC)
n/y/_/_/_/h/t(CAAAACC)
n/y/_/_/_/h/t(CAAAACC)
				version split: ['n', 'y', '_', '_', 'h', 't']
				{'string': 'n/y/_/_/h/t', 'rgx': '((n))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', 'h', 't']
				version split: ['n', 'y', '_', '_', 'h', 't']
				{'string': 'n/y/_/_/h/t', 'rgx': '((n))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', 'h', 't']
				version split: ['n', 'y', '_', '_', '_', 'h', 't']
				{'string': 'n/y/_/_/_/h', 'rgx': '((n))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', '_', 'h', 't']
				version split: ['n', 'y', '_', '_', '_', 'h', 't']
				{'string': 'n/y/_/_/_/h', 'rgx': '((n))/((y))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', '_', 'h', 't']
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/t
					> version: n/y/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't', '_']
				adding dashed alternative: ['n', 'y', '_', 't', '_']
				n/y/_/t(CAAC)
n/y/_/t(CAAC)
n/y/_/t/_(CAACA)
n/y/_/t/_(CAACA)
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', 't', '_']
				{'string': 'n/y/_/t/_', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				version split: ['n', 'y', '_', 't', '_']
				{'string': 'n/y/_/t/_', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/_/t/h
					TRYING: h
					> version: n/y/_/t/h
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't', '_', 'h']
				adding dashed alternative: ['n', 'y', '_', 't', '_', 'h']
				n/y/_/t/h(CAACC)
n/y/_/t/h(CAACC)
n/y/_/t/_/h(CAACAC)
n/y/_/t/_/h(CAACAC)
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_/t/h', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't', 'h']
				version split: ['n', 'y', '_', 't', 'h']
				{'string': 'n/y/_/t/h', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't', 'h']
				version split: ['n', 'y', '_', 't', '_', 'h']
				{'string': 'n/y/_/t/_/h', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't', '_', 'h']
				version split: ['n', 'y', '_', 't', '_', 'h']
				{'string': 'n/y/_/t/_/h', 'rgx': '((n))/((y))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't', '_', 'h']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'y', '_', 't', '_']
		FAIL: 
		SPLIT: ['n', 'i', 'h', 't', 'e']
		SPLIT: ['n', 'i', 'ch', 't', 'e']
		SPLIT: ['n', 'i', 's', 't', 'e']
		SPLIT: ['n', 'i', 'þ', 't', 'e']
		SPLIT: ['n', 'i', 'ȝh', 't', 'e']
		SPLIT: ['n', 'i', 'ȝ', 't', 'e']
		SPLIT: ['n', 'i', 'ȝ', 'tt', 'e']
		SPLIT: ['n', 'y', 'h', 't', 'e']
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['y']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'y', '_', 't', '_']
		['n', 'y', '_', 't', '_']
		['n', 'y', '_', 't', '_']
		SPLIT: ["['n']", "['y']", "['_']", "['t']", "['_']"]
		version for pattern CVCCV is INVALID
		[{'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'h'}]
		14
		OVERVIEW: version for pattern CVCCV
{'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'h'}
faulty splits: 14
['n']['a'][''][''][''] <-! nahht
['n']['a'][''][''][''] <-! naht
['n']['i'][''][''][''] <-! night
['n']['i'][''][''][''] <-! nigt
['n']['i'][''][''][''] <-! nihht
['n']['i'][''][''][''] <-! niht
['n']['i'][''][''][''] <-! nicht
['n']['i'][''][''][''] <-! nist
['n']['i'][''][''][''] <-! niþt
['n']['i'][''][''][''] <-! niȝht
['n']['i'][''][''][''] <-! niȝt
['n']['i'][''][''][''] <-! niȝtt
['n']['y'][''][''][''] <-! nyht
['n']['y']['']['t'][''] <-! nyth
n | i | h | t | e
n | i | ch | t | e
n | i | s | t | e
n | i | þ | t | e
n | i | ȝh | t | e
n | i | ȝ | t | e
n | i | ȝ | tt | e
n | y | h | t | e
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['_']
['n'] | ['y'] | ['_'] | ['_'] | ['_']
n | y | _ | t | _
['n'] | ['y'] | ['_'] | ['t'] | ['_']
2 : {'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'th', 'h'},{'ȝ', '_', 't', 's', 'ȝh', 'ch', 'þ', 'h'},{'ȝ', 's', 'ȝh', 'ch', 'þ', 'h'},{'ȝ', 'c', '_', 's', 'ȝh', 'ch', 'þ', 'h'},{'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'h'},{'ȝ', '_', 'gh', 's', 'ȝh', 'ch', 'þ', 'h'},{'hh', 'ȝ', 's', 'ȝh', 'ch', 'þ', 'h'},{'g', 'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'h'},{'hh', 'ȝ', '_', 's', 'ȝh', 'ch', 'þ', 'h'}
3 : {'hh', 'tt', 't'},{'ȝh', 'tt', '_', 't'},{'hh', 'tt', '_', 't'},{'ȝ', 'tt', '_', 't'},{'h', 'tt', 't'},{'g', 'tt', '_', 't'},{'tt', '_', 't', 'gh'},{'h', 'tt', '_', 't'},{'tt', '_', 't', 'c'},{'tt', '_', 't', 'ch'},{'s', 'tt', '_', 't'},{'þ', 'tt', '_', 't'}
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern CCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCCV is valid
	Pattern CCCC is invalid
	Pattern CCCV is invalid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: nahht
				adding littera based on matching pattern
				ANALYSING: night
				adding littera based on matching pattern
				ANALYSING: nihht
				adding littera based on matching pattern
				ANALYSING: nicht
				adding littera based on matching pattern
				ANALYSING: niȝht
				adding littera based on matching pattern
				ANALYSING: niȝtt
				adding littera based on matching pattern
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: n
					> version: n/i/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: n
					> version: n/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: n
					> version: n/i/h/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nichte
					resolving (4)
					> version: n/i/c/h/t/e
					TRYING: n
					> version: n/i/c/h/t/e
					TRYING: n
					> version: n/i/ch/t/e
					TRYING: n
					> version: n/i/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: n
					> version: n/i/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: n
					> version: n/i/s/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: n
					> version: n/i/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: n
					> version: n/i/þ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝhte
					resolving (4)
					> version: n/i/ȝ/h/t/e
					TRYING: n
					> version: n/i/ȝ/h/t/e
					TRYING: n
					> version: n/i/ȝh/t/e
					TRYING: n
					> version: n/i/ȝh/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: n
					> version: n/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: n
					> version: n/i/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝtte
					resolving (4)
					> version: n/i/ȝ/t/t/e
					TRYING: n
					> version: n/i/ȝ/t/t/e
					TRYING: n
					> version: n/i/ȝ/tt/e
					TRYING: n
					> version: n/i/ȝ/tt/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: n
					> version: n/y/h/t
					TRYING: n
					> version: n/yh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyhte
					resolving (3)
					> version: n/y/h/t/e
					TRYING: n
					> version: n/y/h/t/e
					TRYING: n
					> version: n/yh/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'yh', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: n
					> version: n/y/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: n
					> version: n/y/t/h
					TRYING: n
					> version: n/y/th
					TRYING: n
					> version: n/y/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCC : 1___
				ANALYSING: nahht
				adding littera based on matching pattern
				ANALYSING: night
				adding littera based on matching pattern
				ANALYSING: nihht
				adding littera based on matching pattern
				ANALYSING: nicht
				adding littera based on matching pattern
				ANALYSING: niȝht
				adding littera based on matching pattern
				ANALYSING: niȝtt
				adding littera based on matching pattern
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: i
					> version: n/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: i
					> version: n/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: i
					> version: n/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nichte
					resolving (4)
					> version: n/i/c/h/t/e
					TRYING: i
					> version: n/i/c/h/t/e
					TRYING: i
					> version: n/i/ch/t/e
					TRYING: i
					> version: n/i/ch/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: i
					> version: n/i/s/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: i
					> version: n/i/s/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: i
					> version: n/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: i
					> version: n/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝhte
					resolving (4)
					> version: n/i/ȝ/h/t/e
					TRYING: i
					> version: n/i/ȝ/h/t/e
					TRYING: i
					> version: n/i/ȝh/t/e
					TRYING: i
					> version: n/i/ȝh/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: i
					> version: n/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: i
					> version: n/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝtte
					resolving (4)
					> version: n/i/ȝ/t/t/e
					TRYING: i
					> version: n/i/ȝ/t/t/e
					TRYING: i
					> version: n/i/ȝ/tt/e
					TRYING: i
					> version: n/i/ȝ/tt/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: y
					> version: n/y/h/t
					TRYING: y
					> version: n/yh/t
					TRYING: yh
					RESULT:  ['y']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n/yh', 'rgx': '((n))/((y))$'}
				_____REMOVING________['n', 'yh', 't']
				ANALYSING: nyhte
					resolving (3)
					> version: n/y/h/t/e
					TRYING: y
					> version: n/y/h/t/e
					TRYING: y
					> version: n/yh/t/e
					TRYING: yh
					RESULT:  ['y']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'yh', 't', 'e']
				{'string': 'n/yh', 'rgx': '((n))/((y))$'}
				_____REMOVING________['n', 'yh', 't', 'e']
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: y
					> version: n/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: y
					> version: n/y/t/h
					TRYING: y
					> version: n/y/th
					TRYING: y
					> version: n/y/th
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
			___CVCCC : 2___
				ANALYSING: nahht
				adding littera based on matching pattern
				ANALYSING: night
				adding littera based on matching pattern
				ANALYSING: nihht
				adding littera based on matching pattern
				ANALYSING: nicht
				adding littera based on matching pattern
				ANALYSING: niȝht
				adding littera based on matching pattern
				ANALYSING: niȝtt
				adding littera based on matching pattern
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: g
					> version: n/i/g/t
					TRYING: g
					RESULT:  ['g']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: h
					> version: n/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: h
					> version: n/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				ANALYSING: nichte
					resolving (4)
					> version: n/i/c/h/t/e
					TRYING: c
					> version: n/i/c/h/t/e
					TRYING: c
					> version: n/i/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: n/i/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((c)|(ch))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: s
					> version: n/i/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: s
					> version: n/i/s/t/e
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> g, ȝ, c, s, ch, þ, h
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> g, ȝ, c, s, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				n/i/þ/t(CCCC)
n/i/þ/t(CVCC)
n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> g, ȝ, c, _, s, ch, þ, h
					> version: n/i/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> g, ȝ, c, _, s, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't', 'e']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't', 'e']
				n/i/þ/t/e(CCCCV)
n/i/þ/t/e(CVCCV)
n/i/_/þ/t/e(CAACCV)
n/i/_/þ/t/e(CAACCV)
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't', 'e']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't', 'e']
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niȝhte
					resolving (4)
					> version: n/i/ȝ/h/t/e
					TRYING: ȝ
					> version: n/i/ȝ/h/t/e
					TRYING: ȝ
					> version: n/i/ȝh/t/e
					TRYING: ȝh
					adding blocked set: C = C >> g, ȝ, c, _, s, ȝh, ch, h
					> version: n/i/ȝh/t/e
					TRYING: ȝh
					adding blocked set: C = C >> g, ȝ, c, _, s, ȝh, ch, h
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((ȝ))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't', 'e']
				version split: ['n', 'i', 'ȝh', 't', 'e']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((ȝ))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't', 'e']
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: ȝ
					> version: n/i/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: ȝ
					> version: n/i/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: niȝtte
					resolving (4)
					> version: n/i/ȝ/t/t/e
					TRYING: ȝ
					> version: n/i/ȝ/t/t/e
					TRYING: ȝ
					> version: n/i/ȝ/tt/e
					TRYING: ȝ
					> version: n/i/ȝ/tt/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/t
					TRYING: h
					> version: n/y/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/t/e
					TRYING: h
					> version: n/y/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> g, ȝ, c, _, t, s, ch, h
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> g, ȝ, c, _, t, s, ch, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't']
				adding dashed alternative: ['n', 'y', '_', 't']
				n/y/t(CCC)
n/y/t(CVC)
n/y/_/t(CAAC)
n/y/_/t(CAAC)
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> g, ȝ, c, _, t, s, ch, h
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> g, ȝ, c, _, t, s, ch, h
					> version: n/y/th
					TRYING: th
					> version: n/y/th
					TRYING: th
					RESULT:  ['th']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((th))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((th))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))$'}
			___CVCCC : 3___
				ANALYSING: nahht
				adding littera based on matching pattern
				ANALYSING: night
				adding littera based on matching pattern
				ANALYSING: nihht
				adding littera based on matching pattern
				ANALYSING: nicht
				adding littera based on matching pattern
				ANALYSING: niȝht
				adding littera based on matching pattern
				ANALYSING: niȝtt
				adding littera based on matching pattern
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					adding blocked set: C = C >> h, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/g/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'g', '_', 't']
				adding dashed alternative: ['n', 'i', 'g', '_', 't']
				n/i/g/t(CCCC)
n/i/g/t(CVCC)
n/i/g/_/t(CACAC)
n/i/g/_/t(CACAC)
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g/t', 'rgx': '((n))/((i))/((g))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g/t', 'rgx': '((n))/((i))/((g))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g))/((_))$'}
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g))/((_))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't']
				adding dashed alternative: ['n', 'i', 'h', '_', 't']
				n/i/h/t(CCCC)
n/i/h/t(CVCC)
n/i/h/_/t(CACAC)
n/i/h/_/t(CACAC)
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', 'e']
				n/i/h/t/e(CCCCV)
n/i/h/t/e(CVCCV)
n/i/h/_/t/e(CACACV)
n/i/h/_/t/e(CACACV)
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't', 'e']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't', 'e']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				ANALYSING: nichte
					resolving (4)
					> version: n/i/c/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/c/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/ch/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ch/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'c', '_', 'h', 't', 'e']
				adding dashed alternative: ['n', 'i', 'c', '_', 'h', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't', 'e']
				n/i/c/h/t/e(CCCCCV)
n/i/c/h/t/e(CVCCCV)
n/i/ch/t/e(CCCCV)
n/i/ch/t/e(CVCCV)
n/i/c/_/h/t/e(CACACCV)
n/i/c/_/h/t/e(CACACCV)
n/i/ch/_/t/e(CACACV)
n/i/ch/_/t/e(CACACV)
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i/c/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't', 'e']
				version split: ['n', 'i', 'c', 'h', 't', 'e']
				{'string': 'n/i/c/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't', 'e']
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i/ch/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't', 'e']
				version split: ['n', 'i', 'ch', 't', 'e']
				{'string': 'n/i/ch/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't', 'e']
				version split: ['n', 'i', 'c', '_', 'h', 't', 'e']
				{'string': 'n/i/c/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'c', '_', 'h', 't', 'e']
				{'string': 'n/i/c/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'ch', '_', 't', 'e']
				{'string': 'n/i/ch/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'ch', '_', 't', 'e']
				{'string': 'n/i/ch/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/s/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 's', '_', 't']
				adding dashed alternative: ['n', 'i', 's', '_', 't']
				n/i/s/t(CCCC)
n/i/s/t(CVCC)
n/i/s/_/t(CACAC)
n/i/s/_/t(CACAC)
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/s/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 's', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 's', '_', 't', 'e']
				n/i/s/t/e(CCCCV)
n/i/s/t/e(CVCCV)
n/i/s/_/t/e(CACACV)
n/i/s/_/t/e(CACACV)
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't', 'e']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't', 'e']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/t(CAAACC)
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/_/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					> version: n/i/_/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't', 'e']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't', 'e']
				n/i/_/þ/t/e(CAACCV)
n/i/_/þ/t/e(CAACCV)
n/i/_/_/þ/t/e(CAAACCV)
n/i/_/_/þ/t/e(CAAACCV)
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niȝhte
					resolving (2)
					> version: n/i/ȝ/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				n/i/ȝ/h/t/e(CCCCCV)
n/i/ȝ/h/t/e(CVCCCV)
n/i/ȝ/_/h/t/e(CACACCV)
n/i/ȝ/_/h/t/e(CACACCV)
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i/ȝ/h', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't', 'e']
				version split: ['n', 'i', 'ȝ', 'h', 't', 'e']
				{'string': 'n/i/ȝ/h', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't']
				n/i/ȝ/t(CCCC)
n/i/ȝ/t(CVCC)
n/i/ȝ/_/t(CACAC)
n/i/ȝ/_/t(CACAC)
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 'e']
				n/i/ȝ/t/e(CCCCV)
n/i/ȝ/t/e(CVCCV)
n/i/ȝ/_/t/e(CACACV)
n/i/ȝ/_/t/e(CACACV)
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 'e']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝtte
					resolving (4)
					> version: n/i/ȝ/t/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/tt/e
					TRYING: tt
					adding blocked set: C = C >> h, tt, _, t
					> version: n/i/ȝ/tt/e
					TRYING: tt
					adding blocked set: C = C >> h, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				n/i/ȝ/t/t/e(CCCCCV)
n/i/ȝ/t/t/e(CVCCCV)
n/i/ȝ/tt/e(CCCCV)
n/i/ȝ/tt/e(CVCCV)
n/i/ȝ/_/t/t/e(CACACCV)
n/i/ȝ/_/t/t/e(CACACCV)
n/i/ȝ/_/tt/e(CACACV)
n/i/ȝ/_/tt/e(CACACV)
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't', 'e']
				version split: ['n', 'i', 'ȝ', 't', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't', 'e']
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i/ȝ/tt', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt', 'e']
				version split: ['n', 'i', 'ȝ', 'tt', 'e']
				{'string': 'n/i/ȝ/tt', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt', 'e']
				version split: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't']
				adding dashed alternative: ['n', 'y', 'h', '_', 't']
				n/y/h/t(CCCC)
n/y/h/t(CVCC)
n/y/h/_/t(CACAC)
n/y/h/_/t(CACAC)
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', 'e']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', 'e']
				n/y/h/t/e(CCCCV)
n/y/h/t/e(CVCCV)
n/y/h/_/t/e(CACACV)
n/y/h/_/t/e(CACACV)
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't', 'e']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't', 'e']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', '_', 't']
				adding dashed alternative: ['n', 'y', '_', '_', 't']
				n/y/_/t(CAAC)
n/y/_/t(CAAC)
n/y/_/_/t(CAAAC)
n/y/_/_/t(CAAAC)
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/th
					> version: n/y/th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'th', '_']
				adding dashed alternative: ['n', 'y', 'th', '_']
				n/y/th(CCC)
n/y/th(CVC)
n/y/th/_(CACA)
n/y/th/_(CACA)
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))$'}
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))$'}
			___CVCCC : 4___
				ANALYSING: nahht
				adding littera based on matching pattern
				ANALYSING: night
				adding littera based on matching pattern
				ANALYSING: nihht
				adding littera based on matching pattern
				ANALYSING: nicht
				adding littera based on matching pattern
				ANALYSING: niȝht
				adding littera based on matching pattern
				ANALYSING: niȝtt
				adding littera based on matching pattern
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/_/t
					TRYING: t
					> version: n/i/g/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))$'}
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/_/t
					TRYING: t
					> version: n/i/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/_/t/e
					TRYING: t
					> version: n/i/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t/e', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'h', '_', 't', 'e']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t/e', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'h', '_', 't', 'e']
				ANALYSING: nichte
					resolving (4)
					> version: n/i/c/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/c/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/ch/_/t/e
					TRYING: t
					> version: n/i/ch/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'c', '_', 'h', 't', 'e']
				{'string': 'n/i/c/_/h/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'c', '_', 'h', 't', 'e']
				version split: ['n', 'i', 'c', '_', 'h', 't', 'e']
				{'string': 'n/i/c/_/h/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'c', '_', 'h', 't', 'e']
				version split: ['n', 'i', 'ch', '_', 't', 'e']
				{'string': 'n/i/ch/_/t/e', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ch', '_', 't', 'e']
				version split: ['n', 'i', 'ch', '_', 't', 'e']
				{'string': 'n/i/ch/_/t/e', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ch', '_', 't', 'e']
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/_/t
					TRYING: t
					> version: n/i/s/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/_/t/e
					TRYING: t
					> version: n/i/s/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t/e', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 's', '_', 't', 'e']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t/e', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 's', '_', 't', 'e']
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/_/þ/t
					TRYING: þ
					> version: n/i/_/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				ANALYSING: niþte
					resolving (2)
					> version: n/i/_/_/þ/t/e
					TRYING: þ
					> version: n/i/_/_/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't', 'e']
				ANALYSING: niȝhte
					resolving (2)
					> version: n/i/ȝ/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> þ, h, t
					> version: n/i/ȝ/_/h/t/e
					TRYING: h
					adding blocked set: C = C >> þ, h, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				n/i/ȝ/_/h/t/e(CACACCV)
n/i/ȝ/_/h/t/e(CACACCV)
n/i/ȝ/_/_/h/t/e(CACAACCV)
n/i/ȝ/_/_/h/t/e(CACAACCV)
				version split: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_/h/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_/h/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'h', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				{'string': 'n/i/ȝ/_/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', 'h', 't', 'e']
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/_/t
					TRYING: t
					> version: n/i/ȝ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/_/t/e
					TRYING: t
					> version: n/i/ȝ/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 'e']
				ANALYSING: niȝtte
					resolving (4)
					> version: n/i/ȝ/_/t/t/e
					TRYING: t
					> version: n/i/ȝ/_/t/t/e
					TRYING: t
					> version: n/i/ȝ/_/tt/e
					TRYING: tt
					adding blocked set: C = C >> þ, tt, _, t
					> version: n/i/ȝ/_/tt/e
					TRYING: tt
					adding blocked set: C = C >> þ, tt, _, t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				{'string': 'n/i/ȝ/_/t/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 't', 't', 'e']
				{'string': 'n/i/ȝ/_/t/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				{'string': 'n/i/ȝ/_/tt/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'tt', 'e']
				version split: ['n', 'i', 'ȝ', '_', 'tt', 'e']
				{'string': 'n/i/ȝ/_/tt/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'tt', 'e']
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/_/t
					TRYING: t
					> version: n/y/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/_/t/e
					TRYING: t
					> version: n/y/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t/e', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				_____REMOVING________['n', 'y', 'h', '_', 't', 'e']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t/e', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				_____REMOVING________['n', 'y', 'h', '_', 't', 'e']
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/_/t
					TRYING: t
					> version: n/y/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))$'}
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/th/_
					> version: n/y/th/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_']
				n/y/th/_(CACA)
n/y/th/_(CACA)
n/y/th/_/_(CACAA)
n/y/th/_/_(CACAA)
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_']
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_']
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', 'h', '_', 't']
		only one version left: ['n', 'i', 'g', '_', 't']
		only one version left: ['n', 'i', 'h', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'i', 's', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'i', 'ȝ', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'y', 'h', '_', 't']
		FAIL: 
		only one version left: ['n', 'y', '_', '_', 't']
		only one version left: ['n', 'y', 'th', '_', '_']
		SPLIT: ['n', 'a', 'h', 'h', 't']
		SPLIT: ['n', 'i', 'g', 'h', 't']
		SPLIT: ['n', 'i', 'h', 'h', 't']
		SPLIT: ['n', 'i', 'c', 'h', 't']
		SPLIT: ['n', 'i', 'ȝ', 'h', 't']
		SPLIT: ['n', 'i', 'ȝ', 't', 't']
		SPLIT: ['n', 'a', 'h', '_', 't']
		['n', 'a', 'h', '_', 't']
		SPLIT: ['n', 'i', 'g', '_', 't']
		['n', 'i', 'g', '_', 't']
		['n', 'i', 'g', '_', 't']
		SPLIT: ['n', 'i', 'h', '_', 't']
		['n', 'i', 'h', '_', 't']
		['n', 'i', 'h', '_', 't']
		SPLIT: ["['n']", "['i']", "['h']", "['_']", "['t']"]
		SPLIT: ["['n']", "['i']", "['c', 'ch']", "['_']", "['t']"]
		SPLIT: ['n', 'i', 's', '_', 't']
		['n', 'i', 's', '_', 't']
		['n', 'i', 's', '_', 't']
		SPLIT: ["['n']", "['i']", "['s']", "['_']", "['t']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['þ']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['þ']"]
		SPLIT: ["['n']", "['i']", "['ȝ']", "['_']", "['_']"]
		SPLIT: ['n', 'i', 'ȝ', '_', 't']
		['n', 'i', 'ȝ', '_', 't']
		['n', 'i', 'ȝ', '_', 't']
		SPLIT: ["['n']", "['i']", "['ȝ']", "['_']", "['t']"]
		SPLIT: ["['n']", "['i']", "['ȝ']", "['_']", "['t']"]
		SPLIT: ['n', 'y', 'h', '_', 't']
		['n', 'y', 'h', '_', 't']
		['n', 'y', 'h', '_', 't']
		SPLIT: ["['n']", "['y']", "['h']", "['_']", "['t']"]
		SPLIT: ['n', 'y', '_', '_', 't']
		['n', 'y', '_', '_', 't']
		['n', 'y', '_', '_', 't']
		SPLIT: ['n', 'y', 'th', '_', '_']
		['n', 'y', 'th', '_', '_']
		['n', 'y', 'th', '_', '_']
		version for pattern CVCCC is INVALID
		[{'h', '_', 't'}]
		9
		OVERVIEW: version for pattern CVCCC
{'h', '_', 't'}
faulty splits: 9
['n']['i']['h']['']['t'] <-! nihte
['n']['i']['c', 'ch']['']['t'] <-! nichte
['n']['i']['s']['']['t'] <-! niste
['n']['i']['']['']['þ'] <-! niþt
['n']['i']['']['']['þ'] <-! niþte
['n']['i']['ȝ'][''][''] <-! niȝhte
['n']['i']['ȝ']['']['t'] <-! niȝte
['n']['i']['ȝ']['']['t'] <-! niȝtte
['n']['y']['h']['']['t'] <-! nyhte
n | a | h | h | t
n | i | g | h | t
n | i | h | h | t
n | i | c | h | t
n | i | ȝ | h | t
n | i | ȝ | t | t
n | a | h | _ | t
n | i | g | _ | t
n | i | h | _ | t
['n'] | ['i'] | ['h'] | ['_'] | ['t']
['n'] | ['i'] | ['c', 'ch'] | ['_'] | ['t']
n | i | s | _ | t
['n'] | ['i'] | ['s'] | ['_'] | ['t']
['n'] | ['i'] | ['_'] | ['_'] | ['þ']
['n'] | ['i'] | ['_'] | ['_'] | ['þ']
['n'] | ['i'] | ['ȝ'] | ['_'] | ['_']
n | i | ȝ | _ | t
['n'] | ['i'] | ['ȝ'] | ['_'] | ['t']
['n'] | ['i'] | ['ȝ'] | ['_'] | ['t']
n | y | h | _ | t
['n'] | ['y'] | ['h'] | ['_'] | ['t']
n | y | _ | _ | t
n | y | th | _ | _
2 : {'g', 'ȝ', 'c', '_', 's', 'ch', 'þ', 'h'},{'g', 'ȝ', 'c', 's', 'ch', 'þ', 'h'},{'g', 'ȝ', 'c', '_', 't', 's', 'ch', 'h'}
3 : {'h', 't'},{'h', 'tt', '_', 't'},{'h', '_', 't'},{'þ', 'h', '_', 't'}
4 : {'þ', 'h', 't'}
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'tt', 'ln': 2, 'index': 3}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'yh', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 2}]]
	MIN pattern length=5
	Pattern CCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CCC is invalid
	Pattern CVC is invalid
	Pattern CVCCCV is valid
	Pattern CCCC is invalid
	Pattern CCCV is invalid
	Pattern CCCCC is invalid
	Pattern CVCC is invalid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: n
					> version: n/a/hh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: n
					> version: n/i/g/h/t
					TRYING: n
					> version: n/i/gh/t
					TRYING: n
					> version: n/i/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: n
					> version: n/i/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: n
					> version: n/i/h/h/t
					TRYING: n
					> version: n/i/hh/t
					TRYING: n
					> version: n/i/hh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: n
					> version: n/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: n
					> version: n/i/h/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: n
					> version: n/i/c/h/t
					TRYING: n
					> version: n/i/ch/t
					TRYING: n
					> version: n/i/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: n
					> version: n/i/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: n
					> version: n/i/s/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: n
					> version: n/i/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: n
					> version: n/i/þ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: n
					> version: n/i/ȝ/h/t
					TRYING: n
					> version: n/i/ȝh/t
					TRYING: n
					> version: n/i/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: n
					> version: n/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: n
					> version: n/i/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: n
					> version: n/i/ȝ/t/t
					TRYING: n
					> version: n/i/ȝ/tt
					TRYING: n
					> version: n/i/ȝ/tt
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: n
					> version: n/y/h/t
					TRYING: n
					> version: n/yh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyhte
					resolving (3)
					> version: n/y/h/t/e
					TRYING: n
					> version: n/y/h/t/e
					TRYING: n
					> version: n/yh/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'yh', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: n
					> version: n/y/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: n
					> version: n/y/t/h
					TRYING: n
					> version: n/y/th
					TRYING: n
					> version: n/y/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCCV : 1___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: a
					> version: n/a/hh/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: i
					> version: n/i/g/h/t
					TRYING: i
					> version: n/i/gh/t
					TRYING: i
					> version: n/i/gh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: i
					> version: n/i/g/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: i
					> version: n/i/h/h/t
					TRYING: i
					> version: n/i/hh/t
					TRYING: i
					> version: n/i/hh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: i
					> version: n/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: i
					> version: n/i/h/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: i
					> version: n/i/c/h/t
					TRYING: i
					> version: n/i/ch/t
					TRYING: i
					> version: n/i/ch/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: i
					> version: n/i/s/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: i
					> version: n/i/s/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: i
					> version: n/i/þ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: i
					> version: n/i/þ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: i
					> version: n/i/ȝ/h/t
					TRYING: i
					> version: n/i/ȝh/t
					TRYING: i
					> version: n/i/ȝh/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: i
					> version: n/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: i
					> version: n/i/ȝ/t/e
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: i
					> version: n/i/ȝ/t/t
					TRYING: i
					> version: n/i/ȝ/tt
					TRYING: i
					> version: n/i/ȝ/tt
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i', 'rgx': '((n))/((i))$'}
				ANALYSING: nyht
					resolving (3)
					> version: n/y/h/t
					TRYING: y
					> version: n/y/h/t
					TRYING: y
					> version: n/yh/t
					TRYING: yh
					RESULT:  ['y']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'yh', 't']
				{'string': 'n/yh', 'rgx': '((n))/((y))$'}
				_____REMOVING________['n', 'yh', 't']
				ANALYSING: nyhte
					resolving (3)
					> version: n/y/h/t/e
					TRYING: y
					> version: n/y/h/t/e
					TRYING: y
					> version: n/yh/t/e
					TRYING: yh
					RESULT:  ['y']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'yh', 't', 'e']
				{'string': 'n/yh', 'rgx': '((n))/((y))$'}
				_____REMOVING________['n', 'yh', 't', 'e']
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: y
					> version: n/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: y
					> version: n/y/t/h
					TRYING: y
					> version: n/y/th
					TRYING: y
					> version: n/y/th
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y', 'rgx': '((n))/((y))$'}
			___CVCCCV : 2___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: h
					> version: n/a/hh/t
					TRYING: hh
					>>> MULTIPLE RESOLVE OPTIONS: {'hh', 'h'}
					RESULT:  ['hh', 'h']
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((hh)|(h))$'}
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n/a/hh', 'rgx': '((n))/((a))/((hh)|(h))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: g
					> version: n/i/g/h/t
					TRYING: g
					> version: n/i/gh/t
					TRYING: gh
					>>> MULTIPLE RESOLVE OPTIONS: {'g', 'gh'}
					> version: n/i/gh/t
					TRYING: gh
					>>> MULTIPLE RESOLVE OPTIONS: {'g', 'gh'}
					RESULT:  ['g', 'gh']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g)|(gh))$'}
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g)|(gh))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh', 'rgx': '((n))/((i))/((g)|(gh))$'}
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh', 'rgx': '((n))/((i))/((g)|(gh))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: g
					> version: n/i/g/t
					TRYING: g
					RESULT:  ['g']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g))$'}
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g', 'rgx': '((n))/((i))/((g))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: h
					> version: n/i/h/h/t
					TRYING: h
					> version: n/i/hh/t
					TRYING: hh
					>>> MULTIPLE RESOLVE OPTIONS: {'hh', 'h'}
					> version: n/i/hh/t
					TRYING: hh
					>>> MULTIPLE RESOLVE OPTIONS: {'hh', 'h'}
					RESULT:  ['hh', 'h']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((hh)|(h))$'}
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((hh)|(h))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh', 'rgx': '((n))/((i))/((hh)|(h))$'}
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh', 'rgx': '((n))/((i))/((hh)|(h))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: h
					> version: n/i/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: h
					> version: n/i/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h', 'rgx': '((n))/((i))/((h))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: c
					> version: n/i/c/h/t
					TRYING: c
					> version: n/i/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: n/i/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((c)|(ch))$'}
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch', 'rgx': '((n))/((i))/((c)|(ch))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: s
					> version: n/i/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: s
					> version: n/i/s/t/e
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s', 'rgx': '((n))/((i))/((s))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> hh, g, ȝ, c, gh, s, ch, þ, h
					> version: n/i/þ/t
					TRYING: þ
					adding blocked set: C = C >> hh, g, ȝ, c, gh, s, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't']
				n/i/þ/t(CCCC)
n/i/þ/t(CVCC)
n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', 'þ', 't']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> hh, g, ȝ, c, _, gh, s, ch, þ, h
					> version: n/i/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> hh, g, ȝ, c, _, gh, s, ch, þ, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't', 'e']
				adding dashed alternative: ['n', 'i', '_', 'þ', 't', 'e']
				n/i/þ/t/e(CCCCV)
n/i/þ/t/e(CVCCV)
n/i/_/þ/t/e(CAACCV)
n/i/_/þ/t/e(CAACCV)
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't', 'e']
				version split: ['n', 'i', 'þ', 't', 'e']
				{'string': 'n/i/þ', 'rgx': '((n))/((i))/((_))$'}
				_____REMOVING________['n', 'i', 'þ', 't', 'e']
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_', 'rgx': '((n))/((i))/((_))$'}
				ANALYSING: niȝht
					resolving (4)
					> version: n/i/ȝ/h/t
					TRYING: ȝ
					> version: n/i/ȝ/h/t
					TRYING: ȝ
					> version: n/i/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> hh, g, ȝ, c, _, gh, s, ȝh, ch, h
					> version: n/i/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> hh, g, ȝ, c, _, gh, s, ȝh, ch, h
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((ȝ))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't']
				version split: ['n', 'i', 'ȝh', 't']
				{'string': 'n/i/ȝh', 'rgx': '((n))/((i))/((ȝ))$'}
				_____REMOVING________['n', 'i', 'ȝh', 't']
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: ȝ
					> version: n/i/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: ȝ
					> version: n/i/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: ȝ
					> version: n/i/ȝ/t/t
					TRYING: ȝ
					> version: n/i/ȝ/tt
					TRYING: ȝ
					> version: n/i/ȝ/tt
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ', 'rgx': '((n))/((i))/((ȝ))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/t
					TRYING: h
					> version: n/y/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/t/e
					TRYING: h
					> version: n/y/h/t/e
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h', 'rgx': '((n))/((y))/((h))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> hh, g, ȝ, c, _, t, gh, s, ch, h
					> version: n/y/t
					TRYING: t
					adding blocked set: C = C >> hh, g, ȝ, c, _, t, gh, s, ch, h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', 't']
				adding dashed alternative: ['n', 'y', '_', 't']
				n/y/t(CCC)
n/y/t(CVC)
n/y/_/t(CAAC)
n/y/_/t(CAAC)
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', 't']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((_))$'}
				_____REMOVING________['n', 'y', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_', 'rgx': '((n))/((y))/((_))$'}
				ANALYSING: nyth
					resolving (4)
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> hh, g, ȝ, c, _, t, gh, s, ch, h
					> version: n/y/t/h
					TRYING: t
					adding blocked set: C = C >> hh, g, ȝ, c, _, t, gh, s, ch, h
					> version: n/y/th
					TRYING: th
					> version: n/y/th
					TRYING: th
					RESULT:  ['th']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((th))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 't', 'h']
				{'string': 'n/y/t', 'rgx': '((n))/((y))/((th))$'}
				_____REMOVING________['n', 'y', 't', 'h']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))$'}
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))$'}
			___CVCCCV : 3___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/a/hh/t
					TRYING: t
					adding blocked set: C = C >> h, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'hh', '_', 't']
				n/a/h/h/t(CVCCC)
n/a/hh/t(CVCC)
n/a/h/_/h/t(CVCACC)
n/a/hh/_/t(CVCAC)
				version split: ['n', 'a', 'h', 'h', 't']
				{'string': 'n/a/h/h', 'rgx': '((n))/((a))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 'h', 't']
				version split: ['n', 'a', 'hh', 't']
				{'string': 'n/a/hh/t', 'rgx': '((n))/((a))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'a', 'hh', 't']
				version split: ['n', 'a', 'h', '_', 'h', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((hh)|(h))/((_))$'}
				version split: ['n', 'a', 'hh', '_', 't']
				{'string': 'n/a/hh/_', 'rgx': '((n))/((a))/((hh)|(h))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/g/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/gh/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/gh/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'g', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'g', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'gh', '_', 't']
				adding dashed alternative: ['n', 'i', 'gh', '_', 't']
				n/i/g/h/t(CCCCC)
n/i/g/h/t(CVCCC)
n/i/gh/t(CCCC)
n/i/gh/t(CVCC)
n/i/g/_/h/t(CACACC)
n/i/g/_/h/t(CACACC)
n/i/gh/_/t(CACAC)
n/i/gh/_/t(CACAC)
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g/h', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 'h', 't']
				version split: ['n', 'i', 'g', 'h', 't']
				{'string': 'n/i/g/h', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 'h', 't']
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', 't']
				version split: ['n', 'i', 'gh', 't']
				{'string': 'n/i/gh/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', 't']
				version split: ['n', 'i', 'g', '_', 'h', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				version split: ['n', 'i', 'g', '_', 'h', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/g/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'g', '_', 't']
				adding dashed alternative: ['n', 'i', 'g', '_', 't']
				n/i/g/t(CCCC)
n/i/g/t(CVCC)
n/i/g/_/t(CACAC)
n/i/g/_/t(CACAC)
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g/t', 'rgx': '((n))/((i))/((g))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', 'g', 't']
				{'string': 'n/i/g/t', 'rgx': '((n))/((i))/((g))/((_))$'}
				_____REMOVING________['n', 'i', 'g', 't']
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g))/((_))$'}
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_', 'rgx': '((n))/((i))/((g))/((_))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/hh/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/hh/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'h', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'hh', '_', 't']
				adding dashed alternative: ['n', 'i', 'hh', '_', 't']
				n/i/h/h/t(CCCCC)
n/i/h/h/t(CVCCC)
n/i/hh/t(CCCC)
n/i/hh/t(CVCC)
n/i/h/_/h/t(CACACC)
n/i/h/_/h/t(CACACC)
n/i/hh/_/t(CACAC)
n/i/hh/_/t(CACAC)
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h/h', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 'h', 't']
				version split: ['n', 'i', 'h', 'h', 't']
				{'string': 'n/i/h/h', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 'h', 't']
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', 't']
				version split: ['n', 'i', 'hh', 't']
				{'string': 'n/i/hh/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', 't']
				version split: ['n', 'i', 'h', '_', 'h', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				version split: ['n', 'i', 'h', '_', 'h', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't']
				adding dashed alternative: ['n', 'i', 'h', '_', 't']
				n/i/h/t(CCCC)
n/i/h/t(CVCC)
n/i/h/_/t(CACAC)
n/i/h/_/t(CACAC)
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', 'h', 't']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't']
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', 'e']
				n/i/h/t/e(CCCCV)
n/i/h/t/e(CVCCV)
n/i/h/_/t/e(CACACV)
n/i/h/_/t/e(CACACV)
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't', 'e']
				version split: ['n', 'i', 'h', 't', 'e']
				{'string': 'n/i/h/t', 'rgx': '((n))/((i))/((h))/((_))$'}
				_____REMOVING________['n', 'i', 'h', 't', 'e']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_', 'rgx': '((n))/((i))/((h))/((_))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/c/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/ch/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ch/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'c', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'c', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't']
				n/i/c/h/t(CCCCC)
n/i/c/h/t(CVCCC)
n/i/ch/t(CCCC)
n/i/ch/t(CVCC)
n/i/c/_/h/t(CACACC)
n/i/c/_/h/t(CACACC)
n/i/ch/_/t(CACAC)
n/i/ch/_/t(CACAC)
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't']
				version split: ['n', 'i', 'c', 'h', 't']
				{'string': 'n/i/c/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'c', 'h', 't']
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't']
				version split: ['n', 'i', 'ch', 't']
				{'string': 'n/i/ch/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', 't']
				version split: ['n', 'i', 'c', '_', 'h', 't']
				{'string': 'n/i/c/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'c', '_', 'h', 't']
				{'string': 'n/i/c/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/s/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 's', '_', 't']
				adding dashed alternative: ['n', 'i', 's', '_', 't']
				n/i/s/t(CCCC)
n/i/s/t(CVCC)
n/i/s/_/t(CACAC)
n/i/s/_/t(CACAC)
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', 's', 't']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't']
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/s/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 's', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 's', '_', 't', 'e']
				n/i/s/t/e(CCCCV)
n/i/s/t/e(CVCCV)
n/i/s/_/t/e(CACACV)
n/i/s/_/t/e(CACACV)
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't', 'e']
				version split: ['n', 'i', 's', 't', 'e']
				{'string': 'n/i/s/t', 'rgx': '((n))/((i))/((s))/((_))$'}
				_____REMOVING________['n', 'i', 's', 't', 'e']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_', 'rgx': '((n))/((i))/((s))/((_))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					> version: n/i/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't']
				n/i/_/þ/t(CAACC)
n/i/_/þ/t(CAACC)
n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/t(CAAACC)
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', 'þ', 't']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/_/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					> version: n/i/_/þ/t/e
					TRYING: þ
					adding blocked set: C = C >> þ, h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't', 'e']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', 't', 'e']
				n/i/_/þ/t/e(CAACCV)
n/i/_/þ/t/e(CAACCV)
n/i/_/_/þ/t/e(CAAACCV)
n/i/_/_/þ/t/e(CAAACCV)
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/þ', 'rgx': '((n))/((i))/((_))/((_))$'}
				_____REMOVING________['n', 'i', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_', 'rgx': '((n))/((i))/((_))/((_))$'}
				ANALYSING: niȝht
					resolving (2)
					> version: n/i/ȝ/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'h', 't']
				n/i/ȝ/h/t(CCCCC)
n/i/ȝ/h/t(CVCCC)
n/i/ȝ/_/h/t(CACACC)
n/i/ȝ/_/h/t(CACACC)
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ/h', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't']
				version split: ['n', 'i', 'ȝ', 'h', 't']
				{'string': 'n/i/ȝ/h', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', 'h', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'h', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't']
				n/i/ȝ/t(CCCC)
n/i/ȝ/t(CVCC)
n/i/ȝ/_/t(CACAC)
n/i/ȝ/_/t(CACAC)
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', 'ȝ', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't']
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 'e']
				n/i/ȝ/t/e(CCCCV)
n/i/ȝ/t/e(CVCCV)
n/i/ȝ/_/t/e(CACACV)
n/i/ȝ/_/t/e(CACACV)
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 'e']
				version split: ['n', 'i', 'ȝ', 't', 'e']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 'e']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/t/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/t/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/i/ȝ/tt
					TRYING: tt
					adding blocked set: C = C >> h, tt, _, t
					> version: n/i/ȝ/tt
					TRYING: tt
					adding blocked set: C = C >> h, tt, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'tt']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 'tt']
				n/i/ȝ/t/t(CCCCC)
n/i/ȝ/t/t(CVCCC)
n/i/ȝ/tt(CCCC)
n/i/ȝ/tt(CVCC)
n/i/ȝ/_/t/t(CACACC)
n/i/ȝ/_/t/t(CACACC)
n/i/ȝ/_/tt(CACAC)
n/i/ȝ/_/tt(CACAC)
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't']
				version split: ['n', 'i', 'ȝ', 't', 't']
				{'string': 'n/i/ȝ/t', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 't', 't']
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ/tt', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt']
				version split: ['n', 'i', 'ȝ', 'tt']
				{'string': 'n/i/ȝ/tt', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', 'tt']
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'tt']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 'tt']
				{'string': 'n/i/ȝ/_', 'rgx': '((n))/((i))/((ȝ))/((_))$'}
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/h/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't']
				adding dashed alternative: ['n', 'y', 'h', '_', 't']
				n/y/h/t(CCCC)
n/y/h/t(CVCC)
n/y/h/_/t(CACAC)
n/y/h/_/t(CACAC)
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', 'h', 't']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't']
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/h/t/e
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', 'e']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', 'e']
				n/y/h/t/e(CCCCV)
n/y/h/t/e(CVCCV)
n/y/h/_/t/e(CACACV)
n/y/h/_/t/e(CACACV)
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't', 'e']
				version split: ['n', 'y', 'h', 't', 'e']
				{'string': 'n/y/h/t', 'rgx': '((n))/((y))/((h))/((_))$'}
				_____REMOVING________['n', 'y', 'h', 't', 'e']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_', 'rgx': '((n))/((y))/((h))/((_))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					> version: n/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', '_', 't']
				adding dashed alternative: ['n', 'y', '_', '_', 't']
				n/y/_/t(CAAC)
n/y/_/t(CAAC)
n/y/_/_/t(CAAAC)
n/y/_/_/t(CAAAC)
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', 't']
				{'string': 'n/y/_/t', 'rgx': '((n))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'y', '_', 't']
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_', 'rgx': '((n))/((y))/((_))/((_))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/th
					> version: n/y/th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'th', '_']
				adding dashed alternative: ['n', 'y', 'th', '_']
				n/y/th(CCC)
n/y/th(CVC)
n/y/th/_(CACA)
n/y/th/_(CACA)
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', 'th']
				{'string': 'n/y/th', 'rgx': '((n))/((y))/((th))/((_))$'}
				_____REMOVING________['n', 'y', 'th']
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))$'}
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))$'}
			___CVCCCV : 4___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (2)
					> version: n/a/h/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/a/hh/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', 'h', 't']
				{'string': 'n/a/h/_/h', 'rgx': '((n))/((a))/((hh)|(h))/((_))/((t))$'}
				_____REMOVING________['n', 'a', 'h', '_', 'h', 't']
				version split: ['n', 'a', 'hh', '_', 't']
				{'string': 'n/a/hh/_/t', 'rgx': '((n))/((a))/((hh)|(h))/((_))/((t))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))$'}
				ANALYSING: night
					resolving (4)
					> version: n/i/g/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/g/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/gh/_/t
					TRYING: t
					> version: n/i/gh/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'g', '_', 'h', 't']
				{'string': 'n/i/g/_/h', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'g', '_', 'h', 't']
				version split: ['n', 'i', 'g', '_', 'h', 't']
				{'string': 'n/i/g/_/h', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'g', '_', 'h', 't']
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))$'}
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/_/t
					TRYING: t
					> version: n/i/g/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))$'}
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))$'}
				ANALYSING: nihht
					resolving (4)
					> version: n/i/h/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/h/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/hh/_/t
					TRYING: t
					> version: n/i/hh/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'h', '_', 'h', 't']
				{'string': 'n/i/h/_/h', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'h', '_', 'h', 't']
				version split: ['n', 'i', 'h', '_', 'h', 't']
				{'string': 'n/i/h/_/h', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'h', '_', 'h', 't']
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))$'}
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/_/t
					TRYING: t
					> version: n/i/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/_/t/e
					TRYING: t
					> version: n/i/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))$'}
				ANALYSING: nicht
					resolving (4)
					> version: n/i/c/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/c/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t
					> version: n/i/ch/_/t
					TRYING: t
					> version: n/i/ch/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'c', '_', 'h', 't']
				{'string': 'n/i/c/_/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'c', '_', 'h', 't']
				version split: ['n', 'i', 'c', '_', 'h', 't']
				{'string': 'n/i/c/_/h', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'c', '_', 'h', 't']
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/_/t
					TRYING: t
					> version: n/i/s/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/_/t/e
					TRYING: t
					> version: n/i/s/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/_/þ/t
					TRYING: þ
					> version: n/i/_/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				ANALYSING: niþte
					resolving (2)
					> version: n/i/_/_/þ/t/e
					TRYING: þ
					> version: n/i/_/_/þ/t/e
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ', 'rgx': '((n))/((i))/((_))/((_))/((þ))$'}
				ANALYSING: niȝht
					resolving (2)
					> version: n/i/ȝ/_/h/t
					TRYING: h
					adding blocked set: C = C >> þ, h, t
					> version: n/i/ȝ/_/h/t
					TRYING: h
					adding blocked set: C = C >> þ, h, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				n/i/ȝ/_/h/t(CACACC)
n/i/ȝ/_/h/t(CACACC)
n/i/ȝ/_/_/h/t(CACAACC)
n/i/ȝ/_/_/h/t(CACAACC)
				version split: ['n', 'i', 'ȝ', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))$'}
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/_/t
					TRYING: t
					> version: n/i/ȝ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/_/t/e
					TRYING: t
					> version: n/i/ȝ/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				ANALYSING: niȝtt
					resolving (4)
					> version: n/i/ȝ/_/t/t
					TRYING: t
					> version: n/i/ȝ/_/t/t
					TRYING: t
					> version: n/i/ȝ/_/tt
					TRYING: tt
					adding blocked set: C = C >> þ, tt, _, t
					> version: n/i/ȝ/_/tt
					TRYING: tt
					adding blocked set: C = C >> þ, tt, _, t
					RESULT:  ['t']
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				version split: ['n', 'i', 'ȝ', '_', 'tt']
				{'string': 'n/i/ȝ/_/tt', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'tt']
				version split: ['n', 'i', 'ȝ', '_', 'tt']
				{'string': 'n/i/ȝ/_/tt', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 'tt']
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/_/t
					TRYING: t
					> version: n/y/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/_/t/e
					TRYING: t
					> version: n/y/h/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/_/t
					TRYING: t
					> version: n/y/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))$'}
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/th/_
					> version: n/y/th/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_']
				n/y/th/_(CACA)
n/y/th/_(CACA)
n/y/th/_/_(CACAA)
n/y/th/_/_(CACAA)
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_']
				version split: ['n', 'y', 'th', '_']
				{'string': 'n/y/th/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_']
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))$'}
			___CVCCCV : 5___
				ANALYSING: nichte
				adding littera based on matching pattern
				ANALYSING: niȝhte
				adding littera based on matching pattern
				ANALYSING: niȝtte
				adding littera based on matching pattern
				ANALYSING: nahht
					resolving (1)
					> version: n/a/hh/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'hh', '_', 't', '_']
				n/a/hh/_/t(CVCAC)
n/a/hh/_/t/_(CVCACA)
				version split: ['n', 'a', 'hh', '_', 't']
				{'string': 'n/a/hh/_/t', 'rgx': '((n))/((a))/((hh)|(h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'hh', '_', 't']
				version split: ['n', 'a', 'hh', '_', 't', '_']
				{'string': 'n/a/hh/_/t/_', 'rgx': '((n))/((a))/((hh)|(h))/((_))/((t))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't', '_']
				n/a/h/_/t(CVCAC)
n/a/h/_/t/_(CVCACA)
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'h', '_', 't']
				version split: ['n', 'a', 'h', '_', 't', '_']
				{'string': 'n/a/h/_/t/_', 'rgx': '((n))/((a))/((h))/((_))/((t))/((_))$'}
				ANALYSING: night
					resolving (2)
					> version: n/i/gh/_/t
					> version: n/i/gh/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'gh', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'gh', '_', 't', '_']
				n/i/gh/_/t(CACAC)
n/i/gh/_/t(CACAC)
n/i/gh/_/t/_(CACACA)
n/i/gh/_/t/_(CACACA)
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', '_', 't']
				version split: ['n', 'i', 'gh', '_', 't']
				{'string': 'n/i/gh/_/t', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'gh', '_', 't']
				version split: ['n', 'i', 'gh', '_', 't', '_']
				{'string': 'n/i/gh/_/t/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'gh', '_', 't', '_']
				{'string': 'n/i/gh/_/t/_', 'rgx': '((n))/((i))/((g)|(gh))/((_))/((t))/((_))$'}
				ANALYSING: nigt
					resolving (2)
					> version: n/i/g/_/t
					> version: n/i/g/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'g', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'g', '_', 't', '_']
				n/i/g/_/t(CACAC)
n/i/g/_/t(CACAC)
n/i/g/_/t/_(CACACA)
n/i/g/_/t/_(CACACA)
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'g', '_', 't']
				version split: ['n', 'i', 'g', '_', 't']
				{'string': 'n/i/g/_/t', 'rgx': '((n))/((i))/((g))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'g', '_', 't']
				version split: ['n', 'i', 'g', '_', 't', '_']
				{'string': 'n/i/g/_/t/_', 'rgx': '((n))/((i))/((g))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'g', '_', 't', '_']
				{'string': 'n/i/g/_/t/_', 'rgx': '((n))/((i))/((g))/((_))/((t))/((_))$'}
				ANALYSING: nihht
					resolving (2)
					> version: n/i/hh/_/t
					> version: n/i/hh/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'hh', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'hh', '_', 't', '_']
				n/i/hh/_/t(CACAC)
n/i/hh/_/t(CACAC)
n/i/hh/_/t/_(CACACA)
n/i/hh/_/t/_(CACACA)
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', '_', 't']
				version split: ['n', 'i', 'hh', '_', 't']
				{'string': 'n/i/hh/_/t', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'hh', '_', 't']
				version split: ['n', 'i', 'hh', '_', 't', '_']
				{'string': 'n/i/hh/_/t/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'hh', '_', 't', '_']
				{'string': 'n/i/hh/_/t/_', 'rgx': '((n))/((i))/((hh)|(h))/((_))/((t))/((_))$'}
				ANALYSING: niht
					resolving (2)
					> version: n/i/h/_/t
					> version: n/i/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'h', '_', 't', '_']
				n/i/h/_/t(CACAC)
n/i/h/_/t(CACAC)
n/i/h/_/t/_(CACACA)
n/i/h/_/t/_(CACACA)
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'h', '_', 't']
				version split: ['n', 'i', 'h', '_', 't']
				{'string': 'n/i/h/_/t', 'rgx': '((n))/((i))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'h', '_', 't']
				version split: ['n', 'i', 'h', '_', 't', '_']
				{'string': 'n/i/h/_/t/_', 'rgx': '((n))/((i))/((h))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'h', '_', 't', '_']
				{'string': 'n/i/h/_/t/_', 'rgx': '((n))/((i))/((h))/((_))/((t))/((_))$'}
				ANALYSING: nihte
					resolving (2)
					> version: n/i/h/_/t/e
					TRYING: e
					> version: n/i/h/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t/e', 'rgx': '((n))/((i))/((h))/((_))/((t))/((e))$'}
				version split: ['n', 'i', 'h', '_', 't', 'e']
				{'string': 'n/i/h/_/t/e', 'rgx': '((n))/((i))/((h))/((_))/((t))/((e))$'}
				ANALYSING: nicht
					resolving (2)
					> version: n/i/ch/_/t
					> version: n/i/ch/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'ch', '_', 't', '_']
				n/i/ch/_/t(CACAC)
n/i/ch/_/t(CACAC)
n/i/ch/_/t/_(CACACA)
n/i/ch/_/t/_(CACACA)
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', '_', 't']
				version split: ['n', 'i', 'ch', '_', 't']
				{'string': 'n/i/ch/_/t', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ch', '_', 't']
				version split: ['n', 'i', 'ch', '_', 't', '_']
				{'string': 'n/i/ch/_/t/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'ch', '_', 't', '_']
				{'string': 'n/i/ch/_/t/_', 'rgx': '((n))/((i))/((c)|(ch))/((_))/((t))/((_))$'}
				ANALYSING: nist
					resolving (2)
					> version: n/i/s/_/t
					> version: n/i/s/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 's', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 's', '_', 't', '_']
				n/i/s/_/t(CACAC)
n/i/s/_/t(CACAC)
n/i/s/_/t/_(CACACA)
n/i/s/_/t/_(CACACA)
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 's', '_', 't']
				version split: ['n', 'i', 's', '_', 't']
				{'string': 'n/i/s/_/t', 'rgx': '((n))/((i))/((s))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 's', '_', 't']
				version split: ['n', 'i', 's', '_', 't', '_']
				{'string': 'n/i/s/_/t/_', 'rgx': '((n))/((i))/((s))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 's', '_', 't', '_']
				{'string': 'n/i/s/_/t/_', 'rgx': '((n))/((i))/((s))/((_))/((t))/((_))$'}
				ANALYSING: niste
					resolving (2)
					> version: n/i/s/_/t/e
					TRYING: e
					> version: n/i/s/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t/e', 'rgx': '((n))/((i))/((s))/((_))/((t))/((e))$'}
				version split: ['n', 'i', 's', '_', 't', 'e']
				{'string': 'n/i/s/_/t/e', 'rgx': '((n))/((i))/((s))/((_))/((t))/((e))$'}
				ANALYSING: niþt
					resolving (2)
					> version: n/i/_/_/þ/t
					TRYING: t
					> version: n/i/_/_/þ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', '_', 't']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', '_', 't']
				n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/t(CAAACC)
n/i/_/_/þ/_/t(CAAACAC)
n/i/_/_/þ/_/t(CAAACAC)
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', 't']
				{'string': 'n/i/_/_/þ/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't']
				version split: ['n', 'i', '_', '_', 'þ', '_', 't']
				{'string': 'n/i/_/_/þ/_/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', '_', 't']
				version split: ['n', 'i', '_', '_', 'þ', '_', 't']
				{'string': 'n/i/_/_/þ/_/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', '_', 't']
				ANALYSING: niþte
					resolving (2)
					> version: n/i/_/_/þ/t/e
					TRYING: t
					> version: n/i/_/_/þ/t/e
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				adding dashed alternative: ['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				n/i/_/_/þ/t/e(CAAACCV)
n/i/_/_/þ/t/e(CAAACCV)
n/i/_/_/þ/_/t/e(CAAACACV)
n/i/_/_/þ/_/t/e(CAAACACV)
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ/t/e', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', 't', 'e']
				{'string': 'n/i/_/_/þ/t/e', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				{'string': 'n/i/_/_/þ/_/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				version split: ['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				{'string': 'n/i/_/_/þ/_/t', 'rgx': '((n))/((i))/((_))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'i', '_', '_', 'þ', '_', 't', 'e']
				ANALYSING: niȝht
					resolving (2)
					> version: n/i/ȝ/_/_/h/t
					TRYING: h
					> version: n/i/ȝ/_/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				n/i/ȝ/_/_/h/t(CACAACC)
n/i/ȝ/_/_/h/t(CACAACC)
n/i/ȝ/_/_/_/h/t(CACAAACC)
n/i/ȝ/_/_/_/h/t(CACAAACC)
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_/h/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_/h/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				version split: ['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				{'string': 'n/i/ȝ/_/_/_/h', 'rgx': '((n))/((i))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', '_', '_', 'h', 't']
				ANALYSING: niȝt
					resolving (2)
					> version: n/i/ȝ/_/t
					> version: n/i/ȝ/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', '_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', '_']
				n/i/ȝ/_/t(CACAC)
n/i/ȝ/_/t(CACAC)
n/i/ȝ/_/t/_(CACACA)
n/i/ȝ/_/t/_(CACACA)
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't']
				version split: ['n', 'i', 'ȝ', '_', 't']
				{'string': 'n/i/ȝ/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't']
				version split: ['n', 'i', 'ȝ', '_', 't', '_']
				{'string': 'n/i/ȝ/_/t/_', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', '_']
				{'string': 'n/i/ȝ/_/t/_', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				ANALYSING: niȝte
					resolving (2)
					> version: n/i/ȝ/_/t/e
					TRYING: e
					> version: n/i/ȝ/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((e))$'}
				version split: ['n', 'i', 'ȝ', '_', 't', 'e']
				{'string': 'n/i/ȝ/_/t/e', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((e))$'}
				ANALYSING: niȝtt
					resolving (2)
					> version: n/i/ȝ/_/t/t
					TRYING: t
					> version: n/i/ȝ/_/t/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', '_', 't']
				adding dashed alternative: ['n', 'i', 'ȝ', '_', 't', '_', 't']
				n/i/ȝ/_/t/t(CACACC)
n/i/ȝ/_/t/t(CACACC)
n/i/ȝ/_/t/_/t(CACACAC)
n/i/ȝ/_/t/_/t(CACACAC)
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_/t/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 't']
				version split: ['n', 'i', 'ȝ', '_', 't', 't']
				{'string': 'n/i/ȝ/_/t/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', 't']
				version split: ['n', 'i', 'ȝ', '_', 't', '_', 't']
				{'string': 'n/i/ȝ/_/t/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', '_', 't']
				version split: ['n', 'i', 'ȝ', '_', 't', '_', 't']
				{'string': 'n/i/ȝ/_/t/_/t', 'rgx': '((n))/((i))/((ȝ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'i', 'ȝ', '_', 't', '_', 't']
				ANALYSING: nyht
					resolving (2)
					> version: n/y/h/_/t
					> version: n/y/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', '_']
				adding dashed alternative: ['n', 'y', 'h', '_', 't', '_']
				n/y/h/_/t(CACAC)
n/y/h/_/t(CACAC)
n/y/h/_/t/_(CACACA)
n/y/h/_/t/_(CACACA)
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', 'h', '_', 't']
				version split: ['n', 'y', 'h', '_', 't']
				{'string': 'n/y/h/_/t', 'rgx': '((n))/((y))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', 'h', '_', 't']
				version split: ['n', 'y', 'h', '_', 't', '_']
				{'string': 'n/y/h/_/t/_', 'rgx': '((n))/((y))/((h))/((_))/((t))/((_))$'}
				version split: ['n', 'y', 'h', '_', 't', '_']
				{'string': 'n/y/h/_/t/_', 'rgx': '((n))/((y))/((h))/((_))/((t))/((_))$'}
				ANALYSING: nyhte
					resolving (2)
					> version: n/y/h/_/t/e
					TRYING: e
					> version: n/y/h/_/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t/e', 'rgx': '((n))/((y))/((h))/((_))/((t))/((e))$'}
				version split: ['n', 'y', 'h', '_', 't', 'e']
				{'string': 'n/y/h/_/t/e', 'rgx': '((n))/((y))/((h))/((_))/((t))/((e))$'}
				ANALYSING: nyt
					resolving (2)
					> version: n/y/_/_/t
					> version: n/y/_/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', '_', '_', 't', '_']
				adding dashed alternative: ['n', 'y', '_', '_', 't', '_']
				n/y/_/_/t(CAAAC)
n/y/_/_/t(CAAAC)
n/y/_/_/t/_(CAAACA)
n/y/_/_/t/_(CAAACA)
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', 't']
				version split: ['n', 'y', '_', '_', 't']
				{'string': 'n/y/_/_/t', 'rgx': '((n))/((y))/((_))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'y', '_', '_', 't']
				version split: ['n', 'y', '_', '_', 't', '_']
				{'string': 'n/y/_/_/t/_', 'rgx': '((n))/((y))/((_))/((_))/((t))/((_))$'}
				version split: ['n', 'y', '_', '_', 't', '_']
				{'string': 'n/y/_/_/t/_', 'rgx': '((n))/((y))/((_))/((_))/((t))/((_))$'}
				ANALYSING: nyth
					resolving (2)
					> version: n/y/th/_/_
					> version: n/y/th/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_', '_']
				adding dashed alternative: ['n', 'y', 'th', '_', '_', '_']
				n/y/th/_/_(CACAA)
n/y/th/_/_(CACAA)
n/y/th/_/_/_(CACAAA)
n/y/th/_/_/_(CACAAA)
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_', '_']
				version split: ['n', 'y', 'th', '_', '_']
				{'string': 'n/y/th/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'y', 'th', '_', '_']
				version split: ['n', 'y', 'th', '_', '_', '_']
				{'string': 'n/y/th/_/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))/((_))$'}
				version split: ['n', 'y', 'th', '_', '_', '_']
				{'string': 'n/y/th/_/_/_', 'rgx': '((n))/((y))/((th))/((_))/((_))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', 'hh', '_', 't', '_']
		only one version left: ['n', 'a', 'h', '_', 't', '_']
		only one version left: ['n', 'i', 'gh', '_', 't', '_']
		only one version left: ['n', 'i', 'g', '_', 't', '_']
		only one version left: ['n', 'i', 'hh', '_', 't', '_']
		only one version left: ['n', 'i', 'h', '_', 't', '_']
		only one version left: ['n', 'i', 'h', '_', 't', 'e']
		only one version left: ['n', 'i', 'ch', '_', 't', '_']
		only one version left: ['n', 'i', 's', '_', 't', '_']
		only one version left: ['n', 'i', 's', '_', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'i', 'ȝ', '_', 't', '_']
		only one version left: ['n', 'i', 'ȝ', '_', 't', 'e']
		FAIL: 
		only one version left: ['n', 'y', 'h', '_', 't', '_']
		only one version left: ['n', 'y', 'h', '_', 't', 'e']
		only one version left: ['n', 'y', '_', '_', 't', '_']
		only one version left: ['n', 'y', 'th', '_', '_', '_']
		SPLIT: ['n', 'i', 'c', 'h', 't', 'e']
		SPLIT: ['n', 'i', 'ȝ', 'h', 't', 'e']
		SPLIT: ['n', 'i', 'ȝ', 't', 't', 'e']
		SPLIT: ['n', 'a', 'hh', '_', 't', '_']
		['n', 'a', 'hh', '_', 't', '_']
		SPLIT: ['n', 'a', 'h', '_', 't', '_']
		['n', 'a', 'h', '_', 't', '_']
		SPLIT: ['n', 'i', 'gh', '_', 't', '_']
		['n', 'i', 'gh', '_', 't', '_']
		['n', 'i', 'gh', '_', 't', '_']
		SPLIT: ['n', 'i', 'g', '_', 't', '_']
		['n', 'i', 'g', '_', 't', '_']
		['n', 'i', 'g', '_', 't', '_']
		SPLIT: ['n', 'i', 'hh', '_', 't', '_']
		['n', 'i', 'hh', '_', 't', '_']
		['n', 'i', 'hh', '_', 't', '_']
		SPLIT: ['n', 'i', 'h', '_', 't', '_']
		['n', 'i', 'h', '_', 't', '_']
		['n', 'i', 'h', '_', 't', '_']
		SPLIT: ['n', 'i', 'h', '_', 't', 'e']
		['n', 'i', 'h', '_', 't', 'e']
		['n', 'i', 'h', '_', 't', 'e']
		SPLIT: ['n', 'i', 'ch', '_', 't', '_']
		['n', 'i', 'ch', '_', 't', '_']
		['n', 'i', 'ch', '_', 't', '_']
		SPLIT: ['n', 'i', 's', '_', 't', '_']
		['n', 'i', 's', '_', 't', '_']
		['n', 'i', 's', '_', 't', '_']
		SPLIT: ['n', 'i', 's', '_', 't', 'e']
		['n', 'i', 's', '_', 't', 'e']
		['n', 'i', 's', '_', 't', 'e']
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['þ']", "['_']"]
		SPLIT: ["['n']", "['i']", "['_']", "['_']", "['þ']", "['_']"]
		SPLIT: ["['n']", "['i']", "['ȝ']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'i', 'ȝ', '_', 't', '_']
		['n', 'i', 'ȝ', '_', 't', '_']
		['n', 'i', 'ȝ', '_', 't', '_']
		SPLIT: ['n', 'i', 'ȝ', '_', 't', 'e']
		['n', 'i', 'ȝ', '_', 't', 'e']
		['n', 'i', 'ȝ', '_', 't', 'e']
		SPLIT: ["['n']", "['i']", "['ȝ']", "['_']", "['t']", "['_']"]
		SPLIT: ['n', 'y', 'h', '_', 't', '_']
		['n', 'y', 'h', '_', 't', '_']
		['n', 'y', 'h', '_', 't', '_']
		SPLIT: ['n', 'y', 'h', '_', 't', 'e']
		['n', 'y', 'h', '_', 't', 'e']
		['n', 'y', 'h', '_', 't', 'e']
		SPLIT: ['n', 'y', '_', '_', 't', '_']
		['n', 'y', '_', '_', 't', '_']
		['n', 'y', '_', '_', 't', '_']
		SPLIT: ['n', 'y', 'th', '_', '_', '_']
		['n', 'y', 'th', '_', '_', '_']
		['n', 'y', 'th', '_', '_', '_']
		version for pattern CVCCCV is INVALID
		[{'h', '_', 't'}]
		4
		OVERVIEW: version for pattern CVCCCV
{'h', '_', 't'}
faulty splits: 4
['n']['i']['']['']['þ'][''] <-! niþt
['n']['i']['']['']['þ'][''] <-! niþte
['n']['i']['ȝ'][''][''][''] <-! niȝht
['n']['i']['ȝ']['']['t'][''] <-! niȝtt
n | i | c | h | t | e
n | i | ȝ | h | t | e
n | i | ȝ | t | t | e
n | a | hh | _ | t | _
n | a | h | _ | t | _
n | i | gh | _ | t | _
n | i | g | _ | t | _
n | i | hh | _ | t | _
n | i | h | _ | t | _
n | i | h | _ | t | e
n | i | ch | _ | t | _
n | i | s | _ | t | _
n | i | s | _ | t | e
['n'] | ['i'] | ['_'] | ['_'] | ['þ'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['þ'] | ['_']
['n'] | ['i'] | ['ȝ'] | ['_'] | ['_'] | ['_']
n | i | ȝ | _ | t | _
n | i | ȝ | _ | t | e
['n'] | ['i'] | ['ȝ'] | ['_'] | ['t'] | ['_']
n | y | h | _ | t | _
n | y | h | _ | t | e
n | y | _ | _ | t | _
n | y | th | _ | _ | _
2 : {'hh', 'g', 'ȝ', 'c', '_', 'gh', 's', 'ch', 'þ', 'h'},{'hh', 'g', 'ȝ', 'c', '_', 't', 'gh', 's', 'ch', 'h'},{'hh', 'g', 'ȝ', 'c', 'gh', 's', 'ch', 'þ', 'h'}
3 : {'h', 't'},{'h', 'tt', '_', 't'},{'h', '_', 't'},{'þ', 'h', '_', 't'}
4 : {'þ', 'h', 't'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCCCV
{'h', '_', 't'}
faulty splits: 4
['n']['i']['']['']['þ'][''] <-! niþt
['n']['i']['']['']['þ'][''] <-! niþte
['n']['i']['ȝ'][''][''][''] <-! niȝht
['n']['i']['ȝ']['']['t'][''] <-! niȝtt
n | i | c | h | t | e
n | i | ȝ | h | t | e
n | i | ȝ | t | t | e
n | a | hh | _ | t | _
n | a | h | _ | t | _
n | i | gh | _ | t | _
n | i | g | _ | t | _
n | i | hh | _ | t | _
n | i | h | _ | t | _
n | i | h | _ | t | e
n | i | ch | _ | t | _
n | i | s | _ | t | _
n | i | s | _ | t | e
['n'] | ['i'] | ['_'] | ['_'] | ['þ'] | ['_']
['n'] | ['i'] | ['_'] | ['_'] | ['þ'] | ['_']
['n'] | ['i'] | ['ȝ'] | ['_'] | ['_'] | ['_']
n | i | ȝ | _ | t | _
n | i | ȝ | _ | t | e
['n'] | ['i'] | ['ȝ'] | ['_'] | ['t'] | ['_']
n | y | h | _ | t | _
n | y | h | _ | t | e
n | y | _ | _ | t | _
n | y | th | _ | _ | _
2 : {'hh', 'g', 'ȝ', 'c', '_', 'gh', 's', 'ch', 'þ', 'h'},{'hh', 'g', 'ȝ', 'c', '_', 't', 'gh', 's', 'ch', 'h'},{'hh', 'g', 'ȝ', 'c', 'gh', 's', 'ch', 'þ', 'h'}
3 : {'h', 't'},{'h', 'tt', '_', 't'},{'h', '_', 't'},{'þ', 'h', '_', 't'}
4 : {'þ', 'h', 't'}
	{'CVCCCV', 'CVCCCVC', 'CVCCCC', 'CVCCCCV'}
