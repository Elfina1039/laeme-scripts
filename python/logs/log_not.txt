Analysis object initialized
{'moht': 1, 'n': 1, 'na': 29, 'naht': 101, 'nacht': 3, 'nast': 2, 'nastd': 1, 'nauht': 9, 'naut': 97, 'nauth': 1, 'navich': 1, 'navith': 1, 'naƿ': 1, 'naƿhiht': 1, 'naƿhit': 1, 'naƿht': 1, 'nawight': 1, 'naƿih': 1, 'naƿiht': 55, 'nawiht': 5, 'naƿicht': 2, 'nawicht': 1, 'nawit': 1, 'nawiþ': 3, 'naƿt': 316, 'nayt': 2, 'naȝ': 1, 'naȝht': 1, 'naȝt': 158, 'ne': 4, 'nea': 1, 'no': 14, 'noct': 2, 'nog': 1, 'nogh': 1, 'noght': 41, 'noghtht': 1, 'nogt': 28, 'noh': 3, 'nohht': 13, 'noht': 318, 'nohut': 7, 'noch': 1, 'nocht': 13, 'nochte': 3, 'nost': 3, 'not': 13, 'noth': 1, 'nouct': 1, 'nouht': 46, 'nouiȝt': 1, 'noust': 1, 'nout': 215, 'nouth': 57, 'nouȝ': 1, 'nouȝht': 2, 'nouȝt': 165, 'nouȝte': 1, 'novt': 1, 'novth': 1, 'now': 1, 'nowhit': 1, 'nowid': 1, 'noƿiht': 7, 'nowiht': 5, 'nowiit': 1, 'noƿit': 2, 'nowit': 3, 'nowith': 1, 'nowiȝht': 1, 'nowiȝt': 3, 'noƿt': 6, 'nowt': 2, 'nowth': 23, 'nowtt': 1, 'noþt': 9, 'noyt': 1, 'noȝh': 1, 'noȝt': 158, 'noȝte': 44}
Lexel initialized
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}]]
[[{'lit': 'au', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
MIN pattern length=5
Pattern CV is invalid
Pattern CVCVCCC is valid
Pattern CVCCCCC is invalid
Pattern CVVC is invalid
Pattern CVCCC is valid
Pattern CVVCCC is valid
Pattern CVCCV is valid
Pattern CVCVCC is valid
Pattern CVVCC is valid
Pattern CVCCCC is invalid
Pattern CVCVC is valid
Pattern CVCCCV is valid
Pattern CVCC is invalid
Pattern CVC is invalid
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCVCCC
	Selection for pattern: CVCVCCC completed
	Making a version for pattern: CVCVCCC
			___CVCVCCC : 0___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/ou/ȝ/h/t
					TRYING: n
					> version: n/ou/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCVCCC : 1___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					> version: n/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					> version: n/a/u/h/t
					TRYING: a
					> version: n/au/h/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					> version: n/a/u/t
					TRYING: a
					> version: n/au/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, au, aƿ
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, au, aƿ
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, au, aw
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, au, aw
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, au, aw
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, au, aw
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> a, au, aƿ
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					> version: n/a/y/t
					TRYING: a
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> a, au, ay
					RESULT:  ['a']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					adding blocked set: V = V >> a, au, o, e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/o(CV)
n/_/o(CAV)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', '_', 'o']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 't']
				n/o/c/t(CVCC)
n/_/o/c/t(CAVCC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/gh/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 't']
				n/o/g/t(CVCC)
n/_/o/g/t(CAVCC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h']
				n/o/h(CVC)
n/_/o/h(CAVC)
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'h', 't']
				n/o/h/h/t(CVCCC)
n/_/o/h/h/t(CAVCCC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 't']
				n/o/h/t(CVCC)
n/_/o/h/t(CAVCC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/hu/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'hu', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/hu/t(CVCC)
n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/ch/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't']
				n/o/c/h/t(CVCCC)
n/o/ch/t(CVCC)
n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/ch/t/e
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 's', 't']
				n/o/s/t(CVCC)
n/_/o/s/t(CAVCC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 't']
				n/o/t(CVC)
n/_/o/t(CAVC)
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'ou', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/ou/h/t(CVCC)
n/_/o/u/h/t(CAVACC)
n/_/o/u/h/t(CAVACC)
n/_/ou/h/t(CAVCC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'ou', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/ou/t(CVC)
n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/th
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/th
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', 'ou', 't', 'h']
				adding dashed alternative: ['n', '_', 'ou', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/ou/t/h(CVCC)
n/ou/th(CVC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/th(CAVAC)
n/_/o/u/th(CAVAC)
n/_/ou/t/h(CAVCC)
n/_/ou/th(CAVC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'th']
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/ȝ/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/ȝh/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/ȝh/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					> version: n/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', 'ou', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', 'ou', 'ȝh', 't']
				n/o/u/ȝ/h/t(CVCCCC)
n/o/u/ȝ/h/t(CVVCCC)
n/o/u/ȝh/t(CVCCC)
n/o/u/ȝh/t(CVVCC)
n/ou/ȝ/h/t(CVCCC)
n/ou/ȝh/t(CVCC)
n/_/o/u/ȝ/h/t(CAVACCC)
n/_/o/u/ȝ/h/t(CAVACCC)
n/_/o/u/ȝh/t(CAVACC)
n/_/o/u/ȝh/t(CAVACC)
n/_/ou/ȝ/h/t(CAVCCC)
n/_/ou/ȝh/t(CAVCC)
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 'h', 't']
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'ȝh', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'ȝh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/u/ȝ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ou', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/ou/ȝ/t(CVCC)
n/_/o/u/ȝ/t(CAVACC)
n/_/o/u/ȝ/t(CAVACC)
n/_/ou/ȝ/t(CAVCC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/ƿ/i/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, au, _, oƿ
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, au, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 'h', 't']
				n/o/ƿ/i/h/t(CVCCCC)
n/o/ƿ/i/h/t(CVCVCC)
n/oƿ/i/h/t(CVCCC)
n/oƿ/i/h/t(CVVCC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/oƿ/i/h/t(CAVACC)
n/_/oƿ/i/h/t(CAVACC)
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/w/i/h/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'h', 't']
				n/o/w/i/h/t(CVCCCC)
n/o/w/i/h/t(CVCVCC)
n/ow/i/h/t(CVCCC)
n/ow/i/h/t(CVVCC)
n/_/o/w/i/h/t(CAVCACC)
n/_/o/w/i/h/t(CAVCACC)
n/_/ow/i/h/t(CAVACC)
n/_/ow/i/h/t(CAVACC)
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, au, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, au, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/oƿ/i/t(CVCC)
n/oƿ/i/t(CVVC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/oƿ/i/t(CAVAC)
n/_/oƿ/i/t(CAVAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/ow/i/t(CVCC)
n/ow/i/t(CVVC)
n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/ow/i/t(CAVAC)
n/_/ow/i/t(CAVAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/w/i/ȝ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'ȝ', 't']
				n/o/w/i/ȝ/t(CVCCCC)
n/o/w/i/ȝ/t(CVCVCC)
n/ow/i/ȝ/t(CVCCC)
n/ow/i/ȝ/t(CVVCC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/ow/i/ȝ/t(CAVACC)
n/_/ow/i/ȝ/t(CAVACC)
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, au, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 't']
				n/o/ƿ/t(CVCC)
n/oƿ/t(CVC)
n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 't']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', 'ow', 't']
				n/o/w/t(CVCC)
n/ow/t(CVC)
n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/o/w/th
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, au, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'w', 'th']
				adding dashed alternative: ['n', '_', 'ow', 't', 'h']
				adding dashed alternative: ['n', '_', 'ow', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/ow/t/h(CVCC)
n/ow/th(CVC)
n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/ow/t/h(CAVCC)
n/_/ow/th(CAVC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'th']
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'þ', 't']
				n/o/þ/t(CVCC)
n/_/o/þ/t(CAVCC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't']
				n/o/ȝ/t(CVCC)
n/_/o/ȝ/t(CAVCC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					adding blocked set: V = V >> e, a, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/_/o/ȝ/t/e(CAVCCV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
			___CVCVCCC : 2___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_']
				n/a(CV)
n/a/_(CVA)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> h, c, ƿ, _
					> version: n/a/ch/t
					TRYING: ch
					adding blocked set: C = C >> h, ƿ, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ch', 't']
				n/a/c/h/t(CVCCC)
n/a/ch/t(CVCC)
n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: s
					adding blocked set: C = C >> h, s, ƿ, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 's', 't']
				n/a/s/t(CVCC)
n/a/_/s/t(CVACC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: u
					> version: n/a/u/h/t
					TRYING: u
					> version: n/au/h/t
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					RESULT:  ['h', 'u']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: u
					> version: n/a/u/t
					TRYING: u
					> version: n/au/t
					TRYING: t
					adding blocked set: C = C >> ƿ, t, h, _, u
					RESULT:  ['u']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au/t', 'rgx': '((n))/((a)|(au))/((u))$'}
				_____REMOVING________['n', 'au', 't']
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: w
					> version: n/a/w/i/h/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: w
					> version: n/a/w/i/þ
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ', 'rgx': '((n))/((a))/((ȝ))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					RESULT:  ['_']
				adding dashed alternative: ['n', 'e', '_']
				n/e(CV)
n/e/_(CVA)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((e))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', 'e', '_']
				{'string': 'n/e/_', 'rgx': '((n))/((e))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o']
				n/_/o(CAV)
n/_/_/o(CAAV)
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o']
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', 't']
				n/_/o/c/t(CAVCC)
n/_/_/o/c/t(CAAVCC)
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 't']
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/g/h/t
					TRYING: o
					> version: n/_/o/gh/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'gh', 't']
				n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
n/_/_/o/g/h/t(CAAVCCC)
n/_/_/o/gh/t(CAAVCC)
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 'h', 't']
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'gh', 't']
				version split: ['n', '_', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'gh', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'g', 't']
				n/_/o/g/t(CAVCC)
n/_/_/o/g/t(CAAVCC)
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 't']
				version split: ['n', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h']
				n/_/o/h(CAVC)
n/_/_/o/h(CAAVC)
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h']
				version split: ['n', '_', '_', 'o', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/h/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h', 'h', 't']
				n/_/o/h/h/t(CAVCCC)
n/_/_/o/h/h/t(CAAVCCC)
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'h', 't']
				version split: ['n', '_', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h', 't']
				n/_/o/h/t(CAVCC)
n/_/_/o/h/t(CAAVCC)
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 't']
				version split: ['n', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/hu/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'hu', 't']
				n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
n/_/_/o/h/u/t(CAAVCAC)
n/_/_/o/h/u/t(CAAVCAC)
n/_/_/o/hu/t(CAAVCC)
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'hu', 't']
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'hu', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/c/h/t
					TRYING: o
					> version: n/_/o/ch/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'ch', 't']
				n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
n/_/_/o/c/h/t(CAAVCCC)
n/_/_/o/ch/t(CAAVCC)
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't']
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: o
					> version: n/_/o/ch/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'ch', 't', 'e']
				n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
n/_/_/o/c/h/t/e(CAAVCCCV)
n/_/_/o/ch/t/e(CAAVCCV)
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 's', 't']
				n/_/o/s/t(CAVCC)
n/_/_/o/s/t(CAAVCC)
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 's', 't']
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 't']
				n/_/o/t(CAVC)
n/_/_/o/t(CAAVC)
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 't']
				version split: ['n', '_', '_', 'o', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/_/o/u/h/t
					TRYING: o
					> version: n/_/o/u/h/t
					TRYING: o
					> version: n/_/ou/h/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 'h', 't']
				n/_/o/u/h/t(CAVACC)
n/_/o/u/h/t(CAVACC)
n/_/ou/h/t(CAVCC)
n/_/_/o/u/h/t(CAAVACC)
n/_/_/o/u/h/t(CAAVACC)
n/_/_/ou/h/t(CAAVCC)
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', 'ou', 'h', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 'h', 't']
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/ou/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 't']
				n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
n/_/_/o/u/t(CAAVAC)
n/_/_/o/u/t(CAAVAC)
n/_/_/ou/t(CAAVC)
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 't']
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/_/o/u/t/h
					TRYING: o
					> version: n/_/o/u/t/h
					TRYING: o
					> version: n/_/o/u/th
					TRYING: o
					> version: n/_/o/u/th
					TRYING: o
					> version: n/_/ou/t/h
					TRYING: ou
					> version: n/_/ou/th
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', '_', 'ou', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'ou', 'th']
				n/_/o/u/t/h(CAVACC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/th(CAVAC)
n/_/o/u/th(CAVAC)
n/_/ou/t/h(CAVCC)
n/_/ou/th(CAVC)
n/_/_/o/u/t/h(CAAVACC)
n/_/_/o/u/t/h(CAAVACC)
n/_/_/o/u/th(CAAVAC)
n/_/_/o/u/th(CAAVAC)
n/_/_/ou/t/h(CAAVCC)
n/_/_/ou/th(CAAVC)
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'th']
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'th']
				version split: ['n', '_', 'ou', 't', 'h']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 't', 'h']
				version split: ['n', '_', 'ou', 'th']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 'th']
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 't', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 'th']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/_/o/u/ȝ/h/t
					TRYING: o
					> version: n/_/o/u/ȝ/h/t
					TRYING: o
					> version: n/_/o/u/ȝh/t
					TRYING: o
					> version: n/_/o/u/ȝh/t
					TRYING: o
					> version: n/_/ou/ȝ/h/t
					TRYING: ou
					> version: n/_/ou/ȝh/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 'ȝh', 't']
				n/_/o/u/ȝ/h/t(CAVACCC)
n/_/o/u/ȝ/h/t(CAVACCC)
n/_/o/u/ȝh/t(CAVACC)
n/_/o/u/ȝh/t(CAVACC)
n/_/ou/ȝ/h/t(CAVCCC)
n/_/ou/ȝh/t(CAVCC)
n/_/_/o/u/ȝ/h/t(CAAVACCC)
n/_/_/o/u/ȝ/h/t(CAAVACCC)
n/_/_/o/u/ȝh/t(CAAVACC)
n/_/_/o/u/ȝh/t(CAAVACC)
n/_/_/ou/ȝ/h/t(CAAVCCC)
n/_/_/ou/ȝh/t(CAAVCC)
				version split: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝh', 't']
				version split: ['n', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝh', 't']
				version split: ['n', '_', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 'ȝ', 'h', 't']
				version split: ['n', '_', 'ou', 'ȝh', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 'ȝh', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/ou/ȝ/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 'ȝ', 't']
				n/_/o/u/ȝ/t(CAVACC)
n/_/o/u/ȝ/t(CAVACC)
n/_/ou/ȝ/t(CAVCC)
n/_/_/o/u/ȝ/t(CAAVACC)
n/_/_/o/u/ȝ/t(CAAVACC)
n/_/_/ou/ȝ/t(CAAVCC)
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/oƿ/i/h/t
					TRYING: oƿ
					> version: n/_/oƿ/i/h/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				n/_/o/ƿ/i/h/t(CAVCACC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/oƿ/i/h/t(CAVACC)
n/_/oƿ/i/h/t(CAVACC)
n/_/_/o/ƿ/i/h/t(CAAVCACC)
n/_/_/o/ƿ/i/h/t(CAAVCACC)
n/_/_/oƿ/i/h/t(CAAVACC)
n/_/_/oƿ/i/h/t(CAAVACC)
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/_/o/w/i/h/t
					TRYING: o
					> version: n/_/o/w/i/h/t
					TRYING: o
					> version: n/_/ow/i/h/t
					TRYING: ow
					> version: n/_/ow/i/h/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 'h', 't']
				n/_/o/w/i/h/t(CAVCACC)
n/_/o/w/i/h/t(CAVCACC)
n/_/ow/i/h/t(CAVACC)
n/_/ow/i/h/t(CAVACC)
n/_/_/o/w/i/h/t(CAAVCACC)
n/_/_/o/w/i/h/t(CAAVCACC)
n/_/_/ow/i/h/t(CAAVACC)
n/_/_/ow/i/h/t(CAAVACC)
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'h', 't']
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 'i', 't']
				n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/oƿ/i/t(CAVAC)
n/_/oƿ/i/t(CAVAC)
n/_/_/o/ƿ/i/t(CAAVCAC)
n/_/_/o/ƿ/i/t(CAAVCAC)
n/_/_/oƿ/i/t(CAAVAC)
n/_/_/oƿ/i/t(CAAVAC)
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/ow/i/t
					TRYING: ow
					> version: n/_/ow/i/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 't']
				n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/ow/i/t(CAVAC)
n/_/ow/i/t(CAVAC)
n/_/_/o/w/i/t(CAAVCAC)
n/_/_/o/w/i/t(CAAVCAC)
n/_/_/ow/i/t(CAAVAC)
n/_/_/ow/i/t(CAAVAC)
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/ow/i/ȝ/t
					TRYING: ow
					> version: n/_/ow/i/ȝ/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				n/_/o/w/i/ȝ/t(CAVCACC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/ow/i/ȝ/t(CAVACC)
n/_/ow/i/ȝ/t(CAVACC)
n/_/_/o/w/i/ȝ/t(CAAVCACC)
n/_/_/o/w/i/ȝ/t(CAAVCACC)
n/_/_/ow/i/ȝ/t(CAAVACC)
n/_/_/ow/i/ȝ/t(CAAVACC)
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/o/ƿ/t
					TRYING: o
					> version: n/_/oƿ/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 't']
				n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
n/_/_/o/ƿ/t(CAAVCC)
n/_/_/oƿ/t(CAAVC)
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/_/o/w/t
					TRYING: o
					> version: n/_/ow/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 't']
				n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
n/_/_/o/w/t(CAAVCC)
n/_/_/ow/t(CAAVC)
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't']
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 't']
				version split: ['n', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/_/o/w/t/h
					TRYING: o
					> version: n/_/o/w/th
					TRYING: o
					> version: n/_/ow/t/h
					TRYING: ow
					> version: n/_/ow/th
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 'th']
				adding dashed alternative: ['n', '_', '_', 'ow', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'ow', 'th']
				n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/ow/t/h(CAVCC)
n/_/ow/th(CAVC)
n/_/_/o/w/t/h(CAAVCCC)
n/_/_/o/w/th(CAAVCC)
n/_/_/ow/t/h(CAAVCC)
n/_/_/ow/th(CAAVC)
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't', 'h']
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'th']
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 't', 'h']
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 'th']
				version split: ['n', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'w', 'th']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 't', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 'th']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'þ', 't']
				n/_/o/þ/t(CAVCC)
n/_/_/o/þ/t(CAAVCC)
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'þ', 't']
				version split: ['n', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ȝ', 't']
				n/_/o/ȝ/t(CAVCC)
n/_/_/o/ȝ/t(CAAVCC)
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				n/_/o/ȝ/t/e(CAVCCV)
n/_/_/o/ȝ/t/e(CAAVCCV)
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
			___CVCVCCC : 3___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_']
				n/a/_(CVA)
n/a/_/_(CVAA)
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_']
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/c/h/t
					TRYING: c
					> version: n/a/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ch', 't']
				n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
n/a/_/_/c/h/t(CVAACCC)
n/a/_/_/ch/t(CVAACC)
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_/c', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_/ch', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 's', 't']
				n/a/_/s/t(CVACC)
n/a/_/_/s/t(CVAACC)
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 's', 't']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: h
					> version: n/a/u/h/t
					TRYING: h
					> version: n/au/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'au', 'h', '_', 't']
				n/a/u/h/t(CVCCC)
n/a/u/h/t(CVVCC)
n/au/h/t(CVCC)
n/a/u/_/h/t(CVAACC)
n/a/u/_/h/t(CVAACC)
n/au/h/_/t(CVCAC)
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/t
					TRYING: t
					> version: n/a/u/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/a/u/_/t(CVAAC)
n/a/u/_/t(CVAAC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: i
					> version: n/a/ƿ/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: i
					> version: n/a/w/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: i
					> version: n/a/w/i/þ
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', 't']
				n/a/ƿ/t(CVCC)
n/a/ƿ/_/t(CVCAC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ/t', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: y
					> version: n/a/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', 't']
				n/a/ȝ/t(CVCC)
n/a/ȝ/_/t(CVCAC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ/t', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'e', '_', '_']
				n/e/_(CVA)
n/e/_/_(CVAA)
				version split: ['n', 'e', '_']
				{'string': 'n/e/_', 'rgx': '((n))/((e))/((_))/((_))$'}
				_____REMOVING________['n', 'e', '_']
				version split: ['n', 'e', '_', '_']
				{'string': 'n/e/_/_', 'rgx': '((n))/((e))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/_/o/g/h/t
					TRYING: o
					> version: n/_/_/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'gh', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'h']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/_/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/_/o/h/u/t
					TRYING: o
					> version: n/_/_/o/h/u/t
					TRYING: o
					> version: n/_/_/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'hu', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/_/o/c/h/t
					TRYING: o
					> version: n/_/_/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/_/o/c/h/t/e
					TRYING: o
					> version: n/_/_/o/ch/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/_/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/_/_/o/u/h/t
					TRYING: o
					> version: n/_/_/o/u/h/t
					TRYING: o
					> version: n/_/_/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ou', 'h', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/_/_/o/u/t
					TRYING: o
					> version: n/_/_/o/u/t
					TRYING: o
					> version: n/_/_/ou/t
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ou', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/_/_/o/u/t/h
					TRYING: o
					> version: n/_/_/o/u/t/h
					TRYING: o
					> version: n/_/_/o/u/th
					TRYING: o
					> version: n/_/_/o/u/th
					TRYING: o
					> version: n/_/_/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					> version: n/_/_/ou/th
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ou', 't', 'h']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 't', 'h']
				version split: ['n', '_', '_', 'ou', 'th']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'th']
				ANALYSING: nouȝht
					resolving (6)
					> version: n/_/_/o/u/ȝ/h/t
					TRYING: o
					> version: n/_/_/o/u/ȝ/h/t
					TRYING: o
					> version: n/_/_/o/u/ȝh/t
					TRYING: o
					> version: n/_/_/o/u/ȝh/t
					TRYING: o
					> version: n/_/_/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					> version: n/_/_/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'ou', 'ȝh', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/_/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/_/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> o, ou, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ou', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (4)
					> version: n/_/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/_/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> y, o, i, _, oƿ
					> version: n/_/_/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> y, o, i, _, oƿ
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (4)
					> version: n/_/_/o/w/i/h/t
					TRYING: o
					> version: n/_/_/o/w/i/h/t
					TRYING: o
					> version: n/_/_/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					> version: n/_/_/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 'h', 't']
				version split: ['n', '_', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/_/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> y, o, i, _, oƿ
					> version: n/_/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> y, o, i, _, oƿ
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 'i', 't']
				version split: ['n', '_', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/_/_/o/w/i/t
					TRYING: o
					> version: n/_/_/o/w/i/t
					TRYING: o
					> version: n/_/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					> version: n/_/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ow', 'i', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 't']
				version split: ['n', '_', '_', 'ow', 'i', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 't']
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/_/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/_/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					> version: n/_/_/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/_/o/ƿ/t
					TRYING: o
					> version: n/_/_/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> y, o, i, _, oƿ
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/_/_/o/w/t
					TRYING: o
					> version: n/_/_/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ow', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/_/_/o/w/t/h
					TRYING: o
					> version: n/_/_/o/w/th
					TRYING: o
					> version: n/_/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					> version: n/_/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, o, i, _, y
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'o', 'w', 'th']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				version split: ['n', '_', '_', 'ow', 't', 'h']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 't', 'h']
				version split: ['n', '_', '_', 'ow', 'th']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((o))$'}
				_____REMOVING________['n', '_', '_', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))$'}
			___CVCVCCC : 4___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_']
				n/a/_/_(CVAA)
n/a/_/_/_(CVAAA)
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_']
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					adding blocked set: C = C >> _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', '_', 't']
				n/a/h/_/t(CVCAC)
n/a/h/_/_/t(CVCAAC)
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'h', '_', 't']
				version split: ['n', 'a', 'h', '_', '_', 't']
				{'string': 'n/a/h/_/_', 'rgx': '((n))/((a))/((h))/((_))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/_/c/h/t
					TRYING: c
					> version: n/a/_/_/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/c', 'rgx': '((n))/((a))/((_))/((_))/((c)|(ch))$'}
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/ch', 'rgx': '((n))/((a))/((_))/((_))/((c)|(ch))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_/s', 'rgx': '((n))/((a))/((_))/((_))/((s))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/a/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/au/h/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'au', 'h', '_', '_', 't']
				n/a/u/_/h/t(CVAACC)
n/a/u/_/h/t(CVAACC)
n/au/h/_/t(CVCAC)
n/a/u/_/_/h/t(CVAAACC)
n/a/u/_/_/h/t(CVAAACC)
n/au/h/_/_/t(CVCAAC)
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 'h', 't']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 'h', 't']
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				_____REMOVING________['n', 'au', 'h', '_', 't']
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				version split: ['n', 'au', 'h', '_', '_', 't']
				{'string': 'n/au/h/_/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					> version: n/a/u/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 't']
				n/a/u/_/t(CVAAC)
n/a/u/_/t(CVAAC)
n/a/u/_/_/t(CVAAAC)
n/a/u/_/_/t(CVAAAC)
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 't']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 't']
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/a/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				n/a/ƿ/i/h/t(CVCCCC)
n/a/ƿ/i/h/t(CVCVCC)
n/a/ƿ/i/_/h/t(CVCAACC)
n/a/ƿ/i/_/h/t(CVCAACC)
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/a/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'h', 't']
				n/a/w/i/h/t(CVCCCC)
n/a/w/i/h/t(CVCVCC)
n/a/w/i/_/h/t(CVCAACC)
n/a/w/i/_/h/t(CVCAACC)
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i/h', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i/h', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: þ
					adding blocked set: C = C >> c, s, ch, _, þ
					> version: n/a/w/i/þ
					TRYING: þ
					adding blocked set: C = C >> c, s, ch, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/a/w/i/_/þ(CVCAAC)
n/a/w/i/_/þ(CVCAAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', '_', 't']
				n/a/ƿ/_/t(CVCAC)
n/a/ƿ/_/_/t(CVCAAC)
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', '_', 't']
				version split: ['n', 'a', 'ƿ', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					> version: n/a/_/y/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', 't']
				n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
n/a/_/y/_/t(CVAAAC)
n/a/_/y/_/t(CVAAAC)
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', '_', 't']
				n/a/ȝ/_/t(CVCAC)
n/a/ȝ/_/_/t(CVCAAC)
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', '_', 't']
				version split: ['n', 'a', 'ȝ', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'e', '_', '_', '_']
				n/e/_/_(CVAA)
n/e/_/_/_(CVAAA)
				version split: ['n', 'e', '_', '_']
				{'string': 'n/e/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'e', '_', '_']
				version split: ['n', 'e', '_', '_', '_']
				{'string': 'n/e/_/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_']
				n/_/_/o(CAAV)
n/_/_/o/_(CAAVA)
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o']
				version split: ['n', '_', '_', 'o', '_']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/o/c/t
					TRYING: c
					RESULT:  ['c']
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/o/c', 'rgx': '((n))/((_))/((_))/((o))/((c))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/_/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> c, s, ch, g, _
					> version: n/_/_/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> c, s, ch, gh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'gh', 't']
				n/_/_/o/g/h/t(CAAVCCC)
n/_/_/o/gh/t(CAAVCC)
n/_/_/o/_/g/h/t(CAAVACCC)
n/_/_/o/_/gh/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/_/o/g', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'g', 'h', 't']
				version split: ['n', '_', '_', 'o', 'gh', 't']
				{'string': 'n/_/_/o/gh', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'gh', 't']
				version split: ['n', '_', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/o/g/t
					TRYING: g
					adding blocked set: C = C >> c, s, ch, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'g', 't']
				n/_/_/o/g/t(CAAVCC)
n/_/_/o/_/g/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/o/g', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'g', 't']
				version split: ['n', '_', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/o/h
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h']
				n/_/_/o/h(CAAVC)
n/_/_/o/_/h(CAAVAC)
				version split: ['n', '_', '_', 'o', 'h']
				{'string': 'n/_/_/o/h', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h']
				version split: ['n', '_', '_', 'o', '_', 'h']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/_/o/h/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', 'h', 't']
				n/_/_/o/h/h/t(CAAVCCC)
n/_/_/o/_/h/h/t(CAAVACCC)
				version split: ['n', '_', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/_/o/h', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/o/h/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', 't']
				n/_/_/o/h/t(CAAVCC)
n/_/_/o/_/h/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/o/h', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/_/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> c, s, ch, h, _
					> version: n/_/_/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> c, hu, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'hu', 't']
				n/_/_/o/h/u/t(CAAVCAC)
n/_/_/o/h/u/t(CAAVCAC)
n/_/_/o/hu/t(CAAVCC)
n/_/_/o/_/h/u/t(CAAVACAC)
n/_/_/o/_/h/u/t(CAAVACAC)
n/_/_/o/_/hu/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_/o/h', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/_/o/h', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', '_', 'o', 'hu', 't']
				{'string': 'n/_/_/o/hu', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'hu', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/_/o/c/h/t
					TRYING: c
					> version: n/_/_/o/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/_/o/c', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't']
				{'string': 'n/_/_/o/ch', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/_/o/c/h/t/e
					TRYING: c
					> version: n/_/_/o/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/o/c', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/o/ch', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/o/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/o/s', 'rgx': '((n))/((_))/((_))/((o))/((s))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/_/o/t
					TRYING: t
					adding blocked set: C = C >> c, t, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 't']
				n/_/_/o/t(CAAVC)
n/_/_/o/_/t(CAAVAC)
				version split: ['n', '_', '_', 'o', 't']
				{'string': 'n/_/_/o/t', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 't']
				version split: ['n', '_', '_', 'o', '_', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				n/_/_/o/u/h/t(CAAVACC)
n/_/_/o/u/h/t(CAAVACC)
n/_/_/o/_/u/h/t(CAAVAACC)
n/_/_/o/_/u/h/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/_/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 't']
				n/_/_/o/u/t(CAAVAC)
n/_/_/o/u/t(CAAVAC)
n/_/_/o/_/u/t(CAAVAAC)
n/_/_/o/_/u/t(CAAVAAC)
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/_/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'th']
				n/_/_/o/u/t/h(CAAVACC)
n/_/_/o/u/t/h(CAAVACC)
n/_/_/o/u/th(CAAVAC)
n/_/_/o/u/th(CAAVAC)
n/_/_/o/_/u/t/h(CAAVAACC)
n/_/_/o/_/u/t/h(CAAVAACC)
n/_/_/o/_/u/th(CAAVAAC)
n/_/_/o/_/u/th(CAAVAAC)
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'th']
				version split: ['n', '_', '_', 'o', 'u', 'th']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/_/_/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				n/_/_/o/u/ȝ/h/t(CAAVACCC)
n/_/_/o/u/ȝ/h/t(CAAVACCC)
n/_/_/o/u/ȝh/t(CAAVACC)
n/_/_/o/u/ȝh/t(CAAVACC)
n/_/_/o/_/u/ȝ/h/t(CAAVAACCC)
n/_/_/o/_/u/ȝ/h/t(CAAVAACCC)
n/_/_/o/_/u/ȝh/t(CAAVAACC)
n/_/_/o/_/u/ȝh/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/_/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					> version: n/_/_/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, s, ch, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				n/_/_/o/u/ȝ/t(CAAVACC)
n/_/_/o/u/ȝ/t(CAAVACC)
n/_/_/o/_/u/ȝ/t(CAAVAACC)
n/_/_/o/_/u/ȝ/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/u', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/_/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, s, ch, _
					> version: n/_/_/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				n/_/_/o/ƿ/i/h/t(CAAVCACC)
n/_/_/o/ƿ/i/h/t(CAAVCACC)
n/_/_/o/_/ƿ/i/h/t(CAAVACACC)
n/_/_/o/_/ƿ/i/h/t(CAAVACACC)
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/_/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					> version: n/_/_/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				n/_/_/o/w/i/h/t(CAAVCACC)
n/_/_/o/w/i/h/t(CAAVCACC)
n/_/_/o/_/w/i/h/t(CAAVACACC)
n/_/_/o/_/w/i/h/t(CAAVACACC)
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, s, ch, _
					> version: n/_/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				n/_/_/o/ƿ/i/t(CAAVCAC)
n/_/_/o/ƿ/i/t(CAAVCAC)
n/_/_/o/_/ƿ/i/t(CAAVACAC)
n/_/_/o/_/ƿ/i/t(CAAVACAC)
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/_/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					> version: n/_/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				n/_/_/o/w/i/t(CAAVCAC)
n/_/_/o/w/i/t(CAAVCAC)
n/_/_/o/_/w/i/t(CAAVACAC)
n/_/_/o/_/w/i/t(CAAVACAC)
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/_/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					> version: n/_/_/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				n/_/_/o/w/i/ȝ/t(CAAVCACC)
n/_/_/o/w/i/ȝ/t(CAAVCACC)
n/_/_/o/_/w/i/ȝ/t(CAAVACACC)
n/_/_/o/_/w/i/ȝ/t(CAAVACACC)
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/_/o/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', 't']
				n/_/_/o/ƿ/t(CAAVCC)
n/_/_/o/_/ƿ/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/_/o/w/t
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 't']
				n/_/_/o/w/t(CAAVCC)
n/_/_/o/_/w/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/_/_/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					> version: n/_/_/o/w/th
					TRYING: w
					adding blocked set: C = C >> c, s, ch, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'w', 'th']
				n/_/_/o/w/t/h(CAAVCCC)
n/_/_/o/w/th(CAAVCC)
n/_/_/o/_/w/t/h(CAAVACCC)
n/_/_/o/_/w/th(CAAVACC)
				version split: ['n', '_', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 't', 'h']
				version split: ['n', '_', '_', 'o', 'w', 'th']
				{'string': 'n/_/_/o/w', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 'th']
				version split: ['n', '_', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> c, s, ch, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'þ', 't']
				n/_/_/o/þ/t(CAAVCC)
n/_/_/o/_/þ/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/o/þ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'þ', 't']
				version split: ['n', '_', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/o/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ȝ', 't']
				n/_/_/o/ȝ/t(CAAVCC)
n/_/_/o/_/ȝ/t(CAAVACC)
				version split: ['n', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/o/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/o/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, s, ch, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ȝ', 't', 'e']
				n/_/_/o/ȝ/t/e(CAAVCCV)
n/_/_/o/_/ȝ/t/e(CAAVACCV)
				version split: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))$'}
			___CVCVCCC : 5___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_']
				n/a/_/_/_(CVAAA)
n/a/_/_/_/_(CVAAAA)
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_']
				version split: ['n', 'a', '_', '_', '_', '_']
				{'string': 'n/a/_/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', '_', '_', 't']
				n/a/h/_/_/t(CVCAAC)
n/a/h/_/_/_/t(CVCAAAC)
				version split: ['n', 'a', 'h', '_', '_', 't']
				{'string': 'n/a/h/_/_/t', 'rgx': '((n))/((a))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'h', '_', '_', 't']
				version split: ['n', 'a', 'h', '_', '_', '_', 't']
				{'string': 'n/a/h/_/_/_', 'rgx': '((n))/((a))/((h))/((_))/((_))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/_/c/h/t
					TRYING: h
					> version: n/a/_/_/ch/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['h']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/c/h', 'rgx': '((n))/((a))/((_))/((_))/((c)|(ch))/((h))$'}
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/ch/t', 'rgx': '((n))/((a))/((_))/((_))/((c)|(ch))/((h))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ch', 't']
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 's', '_', 't']
				n/a/_/_/s/t(CVAACC)
n/a/_/_/s/_/t(CVAACAC)
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_/s/t', 'rgx': '((n))/((a))/((_))/((_))/((s))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 's', 't']
				version split: ['n', 'a', '_', '_', 's', '_', 't']
				{'string': 'n/a/_/_/s/_', 'rgx': '((n))/((a))/((_))/((_))/((s))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/_/_/h/t
					TRYING: h
					> version: n/a/u/_/_/h/t
					TRYING: h
					> version: n/au/h/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['h']
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))/((h))$'}
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))/((h))$'}
				version split: ['n', 'au', 'h', '_', '_', 't']
				{'string': 'n/au/h/_/_/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))/((h))$'}
				_____REMOVING________['n', 'au', 'h', '_', '_', 't']
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					> version: n/a/u/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', '_', 't']
				n/a/u/_/_/t(CVAAAC)
n/a/u/_/_/t(CVAAAC)
n/a/u/_/_/_/t(CVAAAAC)
n/a/u/_/_/_/t(CVAAAAC)
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', '_', 't']
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', '_', 't']
				version split: ['n', 'a', 'u', '_', '_', '_', 't']
				{'string': 'n/a/u/_/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))$'}
				version split: ['n', 'a', 'u', '_', '_', '_', 't']
				{'string': 'n/a/u/_/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/_/h/t
					TRYING: h
					> version: n/a/ƿ/i/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))/((h))$'}
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))/((h))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/_/h/t
					TRYING: h
					> version: n/a/w/i/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h', 'rgx': '((n))/((a))/((w))/((i))/((_))/((h))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h', 'rgx': '((n))/((a))/((w))/((i))/((_))/((h))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/_/þ
					TRYING: þ
					> version: n/a/w/i/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', '_', '_', 't']
				n/a/ƿ/_/_/t(CVCAAC)
n/a/ƿ/_/_/_/t(CVCAAAC)
				version split: ['n', 'a', 'ƿ', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', '_', '_', 't']
				version split: ['n', 'a', 'ƿ', '_', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_/_', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					> version: n/a/_/y/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', '_', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', '_', 't']
				n/a/_/y/_/t(CVAAAC)
n/a/_/y/_/t(CVAAAC)
n/a/_/y/_/_/t(CVAAAAC)
n/a/_/y/_/_/t(CVAAAAC)
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', '_', 't']
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', '_', 't']
				version split: ['n', 'a', '_', 'y', '_', '_', 't']
				{'string': 'n/a/_/y/_/_', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))$'}
				version split: ['n', 'a', '_', 'y', '_', '_', 't']
				{'string': 'n/a/_/y/_/_', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', '_', '_', 't']
				n/a/ȝ/_/_/t(CVCAAC)
n/a/ȝ/_/_/_/t(CVCAAAC)
				version split: ['n', 'a', 'ȝ', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', '_', '_', 't']
				version split: ['n', 'a', 'ȝ', '_', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_/_', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'e', '_', '_', '_', '_']
				n/e/_/_/_(CVAAA)
n/e/_/_/_/_(CVAAAA)
				version split: ['n', 'e', '_', '_', '_']
				{'string': 'n/e/_/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'e', '_', '_', '_']
				version split: ['n', 'e', '_', '_', '_', '_']
				{'string': 'n/e/_/_/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_']
				n/_/_/o/_(CAAVA)
n/_/_/o/_/_(CAAVAA)
				version split: ['n', '_', '_', 'o', '_']
				{'string': 'n/_/_/o/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_']
				version split: ['n', '_', '_', 'o', '_', '_']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/o/c/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', '_', 't']
				n/_/_/o/c/t(CAAVCC)
n/_/_/o/c/_/t(CAAVCAC)
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/o/c/t', 'rgx': '((n))/((_))/((_))/((o))/((c))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'c', 't']
				version split: ['n', '_', '_', 'o', 'c', '_', 't']
				{'string': 'n/_/_/o/c/_', 'rgx': '((n))/((_))/((_))/((o))/((c))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/_/o/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, h, _, þ
					> version: n/_/_/o/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'gh', 't']
				n/_/_/o/_/g/h/t(CAAVACCC)
n/_/_/o/_/gh/t(CAAVACC)
n/_/_/o/_/_/g/h/t(CAAVAACCC)
n/_/_/o/_/_/gh/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/_/o/_/g', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'g', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/_/o/_/gh', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'gh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'gh', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/o/_/g/t
					TRYING: g
					adding blocked set: C = C >> g, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'g', 't']
				n/_/_/o/_/g/t(CAAVACC)
n/_/_/o/_/_/g/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/_/o/_/g', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'g', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'g', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', '_', 'h']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/_/o/_/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/o/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/_/o/_/h/u/t
					TRYING: h
					> version: n/_/_/o/_/h/u/t
					TRYING: h
					> version: n/_/_/o/_/hu/t
					TRYING: hu
					adding blocked set: C = C >> h, hu, _, þ
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				version split: ['n', '_', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/_/o/_/hu', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/_/_/o/c/h/t
					TRYING: h
					> version: n/_/_/o/ch/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/_/o/c/h', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't']
				{'string': 'n/_/_/o/ch/t', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ch', 't']
				ANALYSING: nochte
					resolving (2)
					> version: n/_/_/o/c/h/t/e
					TRYING: h
					> version: n/_/_/o/ch/t/e
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['h']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/o/c/h', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/o/ch/t', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/o/s/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 's', '_', 't']
				n/_/_/o/s/t(CAAVCC)
n/_/_/o/s/_/t(CAAVCAC)
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/o/s/t', 'rgx': '((n))/((_))/((_))/((o))/((s))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 's', 't']
				version split: ['n', '_', '_', 'o', 's', '_', 't']
				{'string': 'n/_/_/o/s/_', 'rgx': '((n))/((_))/((_))/((o))/((s))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/_/o/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 't']
				n/_/_/o/_/t(CAAVAC)
n/_/_/o/_/_/t(CAAVAAC)
				version split: ['n', '_', '_', 'o', '_', 't']
				{'string': 'n/_/_/o/_/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				n/_/_/o/_/u/h/t(CAAVAACC)
n/_/_/o/_/u/h/t(CAAVAACC)
n/_/_/o/_/_/u/h/t(CAAVAAACC)
n/_/_/o/_/_/u/h/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/_/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				n/_/_/o/_/u/t(CAAVAAC)
n/_/_/o/_/u/t(CAAVAAC)
n/_/_/o/_/_/u/t(CAAVAAAC)
n/_/_/o/_/_/u/t(CAAVAAAC)
				version split: ['n', '_', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/_/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				n/_/_/o/_/u/t/h(CAAVAACC)
n/_/_/o/_/u/t/h(CAAVAACC)
n/_/_/o/_/u/th(CAAVAAC)
n/_/_/o/_/u/th(CAAVAAC)
n/_/_/o/_/_/u/t/h(CAAVAAACC)
n/_/_/o/_/_/u/t/h(CAAVAAACC)
n/_/_/o/_/_/u/th(CAAVAAAC)
n/_/_/o/_/_/u/th(CAAVAAAC)
				version split: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/_/_/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				n/_/_/o/_/u/ȝ/h/t(CAAVAACCC)
n/_/_/o/_/u/ȝ/h/t(CAAVAACCC)
n/_/_/o/_/u/ȝh/t(CAAVAACC)
n/_/_/o/_/u/ȝh/t(CAAVAACC)
n/_/_/o/_/_/u/ȝ/h/t(CAAVAAACCC)
n/_/_/o/_/_/u/ȝ/h/t(CAAVAAACCC)
n/_/_/o/_/_/u/ȝh/t(CAAVAAACC)
n/_/_/o/_/_/u/ȝh/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/_/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					> version: n/_/_/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> h, u, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				n/_/_/o/_/u/ȝ/t(CAAVAACC)
n/_/_/o/_/u/ȝ/t(CAAVAACC)
n/_/_/o/_/_/u/ȝ/t(CAAVAAACC)
n/_/_/o/_/_/u/ȝ/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/_/o/_/ƿ/i/h/t
					TRYING: ƿ
					> version: n/_/_/o/_/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))$'}
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/_/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					> version: n/_/_/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				n/_/_/o/_/w/i/h/t(CAAVACACC)
n/_/_/o/_/w/i/h/t(CAAVACACC)
n/_/_/o/_/_/w/i/h/t(CAAVAACACC)
n/_/_/o/_/_/w/i/h/t(CAAVAACACC)
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/_/o/_/ƿ/i/t
					TRYING: ƿ
					> version: n/_/_/o/_/ƿ/i/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))$'}
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/_/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					> version: n/_/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				n/_/_/o/_/w/i/t(CAAVACAC)
n/_/_/o/_/w/i/t(CAAVACAC)
n/_/_/o/_/_/w/i/t(CAAVAACAC)
n/_/_/o/_/_/w/i/t(CAAVAACAC)
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/_/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					> version: n/_/_/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				n/_/_/o/_/w/i/ȝ/t(CAAVACACC)
n/_/_/o/_/w/i/ȝ/t(CAAVACACC)
n/_/_/o/_/_/w/i/ȝ/t(CAAVAACACC)
n/_/_/o/_/_/w/i/ȝ/t(CAAVAACACC)
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/_/o/_/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/_/o/_/ƿ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/_/o/_/w/t
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 't']
				n/_/_/o/_/w/t(CAAVACC)
n/_/_/o/_/_/w/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/_/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					> version: n/_/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> ƿ, h, w, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'w', 'th']
				n/_/_/o/_/w/t/h(CAAVACCC)
n/_/_/o/_/w/th(CAAVACC)
n/_/_/o/_/_/w/t/h(CAAVAACCC)
n/_/_/o/_/_/w/th(CAAVAACC)
				version split: ['n', '_', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/_/o/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'w', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/o/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', '_', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/_/o/_/þ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((þ))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/o/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ƿ, ȝ, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't']
				n/_/_/o/_/ȝ/t(CAAVACC)
n/_/_/o/_/_/ȝ/t(CAAVAACC)
				version split: ['n', '_', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/_/o/_/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/o/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ƿ, ȝ, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				n/_/_/o/_/ȝ/t/e(CAAVACCV)
n/_/_/o/_/_/ȝ/t/e(CAAVAACCV)
				version split: ['n', '_', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/_/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))$'}
			___CVCVCCC : 6___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', '_']
				n/a/_/_/_/_(CVAAAA)
n/a/_/_/_/_/_(CVAAAAA)
				version split: ['n', 'a', '_', '_', '_', '_']
				{'string': 'n/a/_/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_']
				version split: ['n', 'a', '_', '_', '_', '_', '_']
				{'string': 'n/a/_/_/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', '_', '_', 't']
				{'string': 'n/a/h/_/_/_/t', 'rgx': '((n))/((a))/((h))/((_))/((_))/((_))/((t))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/_/_/c/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/c/h/t', 'rgx': '((n))/((a))/((_))/((_))/((c)|(ch))/((h))/((t))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', '_', 's', '_', 't']
				{'string': 'n/a/_/_/s/_/t', 'rgx': '((n))/((a))/((_))/((_))/((s))/((_))/((t))$'}
				ANALYSING: nauht
					resolving (2)
					> version: n/a/u/_/_/h/t
					TRYING: t
					> version: n/a/u/_/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))/((h))/((t))$'}
				version split: ['n', 'a', 'u', '_', '_', 'h', 't']
				{'string': 'n/a/u/_/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((_))/((h))/((t))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/_/_/t
					TRYING: t
					> version: n/a/u/_/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', '_', '_', 't']
				{'string': 'n/a/u/_/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))/((t))$'}
				version split: ['n', 'a', 'u', '_', '_', '_', 't']
				{'string': 'n/a/u/_/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((_))/((t))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/_/h/t
					TRYING: t
					> version: n/a/ƿ/i/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))/((h))/((t))$'}
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))/((h))/((t))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/_/h/t
					TRYING: t
					> version: n/a/w/i/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h/t', 'rgx': '((n))/((a))/((w))/((i))/((_))/((h))/((t))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h/t', 'rgx': '((n))/((a))/((w))/((i))/((_))/((h))/((t))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/_/þ
					> version: n/a/w/i/_/þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ', '_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ', '_']
				n/a/w/i/_/þ(CVCAAC)
n/a/w/i/_/þ(CVCAAC)
n/a/w/i/_/þ/_(CVCAACA)
n/a/w/i/_/þ/_(CVCAACA)
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', '_', 'þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', '_', 'þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ', '_']
				{'string': 'n/a/w/i/_/þ/_', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))/((_))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'þ', '_']
				{'string': 'n/a/w/i/_/þ/_', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ƿ', '_', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))/((_))/((t))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/_/_/t
					TRYING: t
					> version: n/a/_/y/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 'y', '_', '_', 't']
				{'string': 'n/a/_/y/_/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))/((t))$'}
				version split: ['n', 'a', '_', 'y', '_', '_', 't']
				{'string': 'n/a/_/y/_/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((_))/((t))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ȝ', '_', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))/((_))/((t))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e/_/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'e', '_', '_', '_', '_', '_']
				n/e/_/_/_/_(CVAAAA)
n/e/_/_/_/_/_(CVAAAAA)
				version split: ['n', 'e', '_', '_', '_', '_']
				{'string': 'n/e/_/_/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'e', '_', '_', '_', '_']
				version split: ['n', 'e', '_', '_', '_', '_', '_']
				{'string': 'n/e/_/_/_/_/_', 'rgx': '((n))/((e))/((_))/((_))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_']
				n/_/_/o/_/_(CAAVAA)
n/_/_/o/_/_/_(CAAVAAA)
				version split: ['n', '_', '_', 'o', '_', '_']
				{'string': 'n/_/_/o/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_']
				version split: ['n', '_', '_', 'o', '_', '_', '_']
				{'string': 'n/_/_/o/_/_/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/o/c/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', 'c', '_', 't']
				{'string': 'n/_/_/o/c/_/t', 'rgx': '((n))/((_))/((_))/((o))/((c))/((_))/((t))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/_/o/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					> version: n/_/_/o/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'gh', 't']
				n/_/_/o/_/_/g/h/t(CAAVAACCC)
n/_/_/o/_/_/gh/t(CAAVAACC)
n/_/_/o/_/_/_/g/h/t(CAAVAAACCC)
n/_/_/o/_/_/_/gh/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/_/o/_/_/g/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'gh', 't']
				{'string': 'n/_/_/o/_/_/gh/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'gh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/g', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/_/_/o/_/_/_/gh', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/o/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'g', 't']
				n/_/_/o/_/_/g/t(CAAVAACC)
n/_/_/o/_/_/_/g/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'g', 't']
				{'string': 'n/_/_/o/_/_/g/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'g', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/_/_/o/_/_/_/g', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', '_']
				n/_/_/o/_/h(CAAVAC)
n/_/_/o/_/h/_(CAAVACA)
				version split: ['n', '_', '_', 'o', '_', 'h']
				{'string': 'n/_/_/o/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h']
				version split: ['n', '_', '_', 'o', '_', 'h', '_']
				{'string': 'n/_/_/o/_/h/_', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/_/o/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', '_', 'h', 't']
				n/_/_/o/_/h/h/t(CAAVACCC)
n/_/_/o/_/h/_/h/t(CAAVACACC)
				version split: ['n', '_', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/_/o/_/h/h/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', '_', 'h', 't']
				{'string': 'n/_/_/o/_/h/_/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', '_', 'h', 't']
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/o/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/_/o/_/h/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((t))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/_/_/o/_/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				n/_/_/o/_/h/u/t(CAAVACAC)
n/_/_/o/_/h/u/t(CAAVACAC)
n/_/_/o/_/h/_/u/t(CAAVACAAC)
n/_/_/o/_/h/_/u/t(CAAVACAAC)
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_/h/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/_/o/_/h/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				{'string': 'n/_/_/o/_/h/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				{'string': 'n/_/_/o/_/h/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'h', '_', 'u', 't']
				ANALYSING: nocht
					resolving (1)
					> version: n/_/_/o/c/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/_/o/c/h/t', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))/((t))$'}
				ANALYSING: nochte
					resolving (1)
					> version: n/_/_/o/c/h/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/o/c/h/t/e', 'rgx': '((n))/((_))/((_))/((o))/((c)|(ch))/((h))/((t))$'}
				_____REMOVING________['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/o/s/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', 's', '_', 't']
				{'string': 'n/_/_/o/s/_/t', 'rgx': '((n))/((_))/((_))/((o))/((s))/((_))/((t))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/_/o/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', '_', '_', 't']
				{'string': 'n/_/_/o/_/_/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/_/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				n/_/_/o/_/_/u/h/t(CAAVAAACC)
n/_/_/o/_/_/u/h/t(CAAVAAACC)
n/_/_/o/_/_/_/u/h/t(CAAVAAAACC)
n/_/_/o/_/_/_/u/h/t(CAAVAAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_/u/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_/u/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/_/_/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				n/_/_/o/_/_/u/t(CAAVAAAC)
n/_/_/o/_/_/u/t(CAAVAAAC)
n/_/_/o/_/_/_/u/t(CAAVAAAAC)
n/_/_/o/_/_/_/u/t(CAAVAAAAC)
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 't']
				ANALYSING: nouth
					resolving (4)
					> version: n/_/_/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				n/_/_/o/_/_/u/t/h(CAAVAAACC)
n/_/_/o/_/_/u/t/h(CAAVAAACC)
n/_/_/o/_/_/u/th(CAAVAAAC)
n/_/_/o/_/_/u/th(CAAVAAAC)
n/_/_/o/_/_/_/u/t/h(CAAVAAAACC)
n/_/_/o/_/_/_/u/t/h(CAAVAAAACC)
n/_/_/o/_/_/_/u/th(CAAVAAAAC)
n/_/_/o/_/_/_/u/th(CAAVAAAAC)
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_/u/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_/u/th', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_/u/th', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'th']
				ANALYSING: nouȝht
					resolving (4)
					> version: n/_/_/o/_/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				n/_/_/o/_/_/u/ȝ/h/t(CAAVAAACCC)
n/_/_/o/_/_/u/ȝ/h/t(CAAVAAACCC)
n/_/_/o/_/_/u/ȝh/t(CAAVAAACC)
n/_/_/o/_/_/u/ȝh/t(CAAVAAACC)
n/_/_/o/_/_/_/u/ȝ/h/t(CAAVAAAACCC)
n/_/_/o/_/_/_/u/ȝ/h/t(CAAVAAAACCC)
n/_/_/o/_/_/_/u/ȝh/t(CAAVAAAACC)
n/_/_/o/_/_/_/u/ȝh/t(CAAVAAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_/u/ȝh', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_/u/ȝh', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/_/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/_/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				n/_/_/o/_/_/u/ȝ/t(CAAVAAACC)
n/_/_/o/_/_/u/ȝ/t(CAAVAAACC)
n/_/_/o/_/_/_/u/ȝ/t(CAAVAAAACC)
n/_/_/o/_/_/_/u/ȝ/t(CAAVAAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/_/u', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/_/o/_/ƿ/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, _, t
					> version: n/_/_/o/_/ƿ/i/h/t
					TRYING: i
					adding blocked set: C = C >> i, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				n/_/_/o/_/ƿ/i/h/t(CAAVACACC)
n/_/_/o/_/ƿ/i/h/t(CAAVACACC)
n/_/_/o/_/ƿ/_/i/h/t(CAAVACAACC)
n/_/_/o/_/ƿ/_/i/h/t(CAAVACAACC)
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ/i/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ/i/h', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ/_/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/ƿ/_/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/_/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/_/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				n/_/_/o/_/_/w/i/h/t(CAAVAACACC)
n/_/_/o/_/_/w/i/h/t(CAAVAACACC)
n/_/_/o/_/_/_/w/i/h/t(CAAVAAACACC)
n/_/_/o/_/_/_/w/i/h/t(CAAVAAACACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/_/o/_/ƿ/i/t
					TRYING: i
					adding blocked set: C = C >> i, _, t
					> version: n/_/_/o/_/ƿ/i/t
					TRYING: i
					adding blocked set: C = C >> i, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				n/_/_/o/_/ƿ/i/t(CAAVACAC)
n/_/_/o/_/ƿ/i/t(CAAVACAC)
n/_/_/o/_/ƿ/_/i/t(CAAVACAAC)
n/_/_/o/_/ƿ/_/i/t(CAAVACAAC)
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ/i/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ/i/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ/_/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				{'string': 'n/_/_/o/_/ƿ/_/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', 'ƿ', '_', 'i', 't']
				ANALYSING: nowit
					resolving (2)
					> version: n/_/_/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/_/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				n/_/_/o/_/_/w/i/t(CAAVAACAC)
n/_/_/o/_/_/w/i/t(CAAVAACAC)
n/_/_/o/_/_/_/w/i/t(CAAVAAACAC)
n/_/_/o/_/_/_/w/i/t(CAAVAAACAC)
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/_/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/_/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				n/_/_/o/_/_/w/i/ȝ/t(CAAVAACACC)
n/_/_/o/_/_/w/i/ȝ/t(CAAVAACACC)
n/_/_/o/_/_/_/w/i/ȝ/t(CAAVAAACACC)
n/_/_/o/_/_/_/w/i/ȝ/t(CAAVAAACACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/w/i', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/_/o/_/ƿ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/_/o/_/ƿ/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((ƿ))/((t))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/_/o/_/_/w/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 't']
				n/_/_/o/_/_/w/t(CAAVAACC)
n/_/_/o/_/_/_/w/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 't']
				{'string': 'n/_/_/o/_/_/w/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 't']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 't']
				ANALYSING: nowth
					resolving (2)
					> version: n/_/_/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/_/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'th']
				n/_/_/o/_/_/w/t/h(CAAVAACCC)
n/_/_/o/_/_/w/th(CAAVAACC)
n/_/_/o/_/_/_/w/t/h(CAAVAAACCC)
n/_/_/o/_/_/_/w/th(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/_/o/_/_/w/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'n/_/_/o/_/_/w/th', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'w', 'th']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'n/_/_/o/_/_/_/w', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/o/_/þ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/_/o/_/þ/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((þ))/((t))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/o/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't']
				n/_/_/o/_/_/ȝ/t(CAAVAACC)
n/_/_/o/_/_/_/ȝ/t(CAAVAAACC)
				version split: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/ȝ/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't']
				{'string': 'n/_/_/o/_/_/_/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't']
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/o/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
				n/_/_/o/_/_/ȝ/t/e(CAAVAACCV)
n/_/_/o/_/_/_/ȝ/t/e(CAAVAAACCV)
				version split: ['n', '_', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/_/_/ȝ/t', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o/_/_/_/ȝ', 'rgx': '((n))/((_))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
		FAIL: 
		only one version left: ['n', 'a', '_', '_', '_', '_', '_']
		only one version left: ['n', 'a', 'h', '_', '_', '_', 't']
		only one version left: ['n', 'a', '_', '_', 'c', 'h', 't']
		only one version left: ['n', 'a', '_', '_', 's', '_', 't']
		only one version left: ['n', 'a', 'u', '_', '_', 'h', 't']
		only one version left: ['n', 'a', 'u', '_', '_', '_', 't']
		only one version left: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
		only one version left: ['n', 'a', 'w', 'i', '_', 'h', 't']
		only one version left: ['n', 'a', 'w', 'i', '_', 'þ', '_']
		only one version left: ['n', 'a', 'ƿ', '_', '_', '_', 't']
		only one version left: ['n', 'a', '_', 'y', '_', '_', 't']
		only one version left: ['n', 'a', 'ȝ', '_', '_', '_', 't']
		only one version left: ['n', 'e', '_', '_', '_', '_', '_']
		only one version left: ['n', '_', '_', 'o', '_', '_', '_']
		only one version left: ['n', '_', '_', 'o', 'c', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'o', '_', 'h', '_']
		FAIL: 
		only one version left: ['n', '_', '_', 'o', '_', 'h', 't']
		FAIL: 
		only one version left: ['n', '_', '_', 'o', 'c', 'h', 't']
		FAIL: 
		only one version left: ['n', '_', '_', 'o', 's', '_', 't']
		only one version left: ['n', '_', '_', 'o', '_', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'o', '_', 'ƿ', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', '_', 'o', '_', 'þ', 't']
		FAIL: 
		FAIL: 
		SPLIT: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
		SPLIT: ['n', 'a', '_', '_', '_', '_', '_']
		['n', 'a', '_', '_', '_', '_', '_']
		SPLIT: ['n', 'a', 'h', '_', '_', '_', 't']
		['n', 'a', 'h', '_', '_', '_', 't']
		SPLIT: ['n', 'a', '_', '_', 'c', 'h', 't']
		['n', 'a', '_', '_', 'c', 'h', 't']
		SPLIT: ['n', 'a', '_', '_', 's', '_', 't']
		['n', 'a', '_', '_', 's', '_', 't']
		SPLIT: ['n', 'a', 'u', '_', '_', 'h', 't']
		['n', 'a', 'u', '_', '_', 'h', 't']
		['n', 'a', 'u', '_', '_', 'h', 't']
		SPLIT: ['n', 'a', 'u', '_', '_', '_', 't']
		['n', 'a', 'u', '_', '_', '_', 't']
		['n', 'a', 'u', '_', '_', '_', 't']
		SPLIT: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
		['n', 'a', 'ƿ', 'i', '_', 'h', 't']
		['n', 'a', 'ƿ', 'i', '_', 'h', 't']
		SPLIT: ['n', 'a', 'w', 'i', '_', 'h', 't']
		['n', 'a', 'w', 'i', '_', 'h', 't']
		['n', 'a', 'w', 'i', '_', 'h', 't']
		SPLIT: ['n', 'a', 'w', 'i', '_', 'þ', '_']
		['n', 'a', 'w', 'i', '_', 'þ', '_']
		['n', 'a', 'w', 'i', '_', 'þ', '_']
		SPLIT: ['n', 'a', 'ƿ', '_', '_', '_', 't']
		['n', 'a', 'ƿ', '_', '_', '_', 't']
		SPLIT: ['n', 'a', '_', 'y', '_', '_', 't']
		['n', 'a', '_', 'y', '_', '_', 't']
		['n', 'a', '_', 'y', '_', '_', 't']
		SPLIT: ['n', 'a', 'ȝ', '_', '_', '_', 't']
		['n', 'a', 'ȝ', '_', '_', '_', 't']
		SPLIT: ['n', 'e', '_', '_', '_', '_', '_']
		['n', 'e', '_', '_', '_', '_', '_']
		SPLIT: ['n', '_', '_', 'o', '_', '_', '_']
		['n', '_', '_', 'o', '_', '_', '_']
		SPLIT: ['n', '_', '_', 'o', 'c', '_', 't']
		['n', '_', '_', 'o', 'c', '_', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', '_', 'o', '_', 'h', '_']
		['n', '_', '_', 'o', '_', 'h', '_']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['h']", "['_']"]
		SPLIT: ['n', '_', '_', 'o', '_', 'h', 't']
		['n', '_', '_', 'o', '_', 'h', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['h']", "['_']"]
		SPLIT: ['n', '_', '_', 'o', 'c', 'h', 't']
		['n', '_', '_', 'o', 'c', 'h', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['c', 'ch']", "['h']", "['t']"]
		SPLIT: ['n', '_', '_', 'o', 's', '_', 't']
		['n', '_', '_', 'o', 's', '_', 't']
		SPLIT: ['n', '_', '_', 'o', '_', '_', 't']
		['n', '_', '_', 'o', '_', '_', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['ƿ']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['ƿ']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', '_', 'o', '_', 'ƿ', 't']
		['n', '_', '_', 'o', '_', 'ƿ', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', '_', 'o', '_', 'þ', 't']
		['n', '_', '_', 'o', '_', 'þ', 't']
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		version for pattern CVCVCCC is INVALID
		[]
		19
		OVERVIEW: version for pattern CVCVCCC

faulty splits: 19
['n']['']['']['o'][''][''][''] <-! noght
['n']['']['']['o'][''][''][''] <-! nogt
['n']['']['']['o']['']['h'][''] <-! nohht
['n']['']['']['o']['']['h'][''] <-! nohut
['n']['']['']['o']['c', 'ch']['h']['t'] <-! nochte
['n']['']['']['o'][''][''][''] <-! nouht
['n']['']['']['o'][''][''][''] <-! nout
['n']['']['']['o'][''][''][''] <-! nouth
['n']['']['']['o'][''][''][''] <-! nouȝht
['n']['']['']['o'][''][''][''] <-! nouȝt
['n']['']['']['o']['']['ƿ'][''] <-! noƿiht
['n']['']['']['o'][''][''][''] <-! nowiht
['n']['']['']['o']['']['ƿ'][''] <-! noƿit
['n']['']['']['o'][''][''][''] <-! nowit
['n']['']['']['o'][''][''][''] <-! nowiȝt
['n']['']['']['o'][''][''][''] <-! nowt
['n']['']['']['o'][''][''][''] <-! nowth
['n']['']['']['o'][''][''][''] <-! noȝt
['n']['']['']['o'][''][''][''] <-! noȝte
n | a | ƿ | i | c | h | t
n | a | _ | _ | _ | _ | _
n | a | h | _ | _ | _ | t
n | a | _ | _ | c | h | t
n | a | _ | _ | s | _ | t
n | a | u | _ | _ | h | t
n | a | u | _ | _ | _ | t
n | a | ƿ | i | _ | h | t
n | a | w | i | _ | h | t
n | a | w | i | _ | þ | _
n | a | ƿ | _ | _ | _ | t
n | a | _ | y | _ | _ | t
n | a | ȝ | _ | _ | _ | t
n | e | _ | _ | _ | _ | _
n | _ | _ | o | _ | _ | _
n | _ | _ | o | c | _ | t
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | _ | o | _ | h | _
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
n | _ | _ | o | _ | h | t
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
n | _ | _ | o | c | h | t
['n'] | ['_'] | ['_'] | ['o'] | ['c', 'ch'] | ['h'] | ['t']
n | _ | _ | o | s | _ | t
n | _ | _ | o | _ | _ | t
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['ƿ'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['ƿ'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | _ | o | _ | ƿ | t
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | _ | o | _ | þ | t
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
1 : {'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'oƿ'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'oƿ'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'oƿ'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'oƿ'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'oƿ'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'ow', 'e', 'a', 'au', '_'},{'ow', 'e', 'a', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'a', 'au', 'o', 'e'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'ou', 'au', '_'},{'e', 'a', 'au', '_', 'o'},{'e', 'a', 'au', '_', 'o'}
2 : {'h', 's', 'ƿ', '_'},{'h', 'c', 'ƿ', '_'},{'h', 'ƿ', 'ch', '_'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'h', 'w', '_', 'u', 'y'}
4 : {'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', 'w', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', '_', 'u'},{'c', 'ȝ', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', 'w', '_'},{'ƿ', 'c', 's', 'ch', '_'},{'c', 'hu', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'þ'},{'c', 's', 'ch', 'g', '_'},{'c', 'ȝ', 's', 'ch', '_'},{'c', 's', 'ch', 'w', '_'},{'ƿ', 'c', 's', 'ch', '_'},{'c', 's', 'ch', 'gh', '_'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', '_', 'þ'},{'c', 's', 'ch', '_', 'þ'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', 'w', '_'},{'c', 't', 's', 'ch', '_'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', 'w', '_'},{'c', 's', 'ch', 'w', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', 'h', '_'},{'ƿ', 'c', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', '_', 'u'},{'_', 'c', 't'},{'c', 's', 'ch', 'g', '_'},{'ƿ', 'c', 's', 'ch', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', 'w', '_'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', '_', 'u'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 't', 's', 'ch', '_'},{'c', 's', 'ch', '_', 'u'},{'ƿ', 'c', 's', 'ch', '_'},{'c', 's', 'ch', 'w', '_'},{'c', 's', 'ch', '_', 'u'},{'c', 's', 'ch', 'w', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 's', 'ch', 'h', '_'}
5 : {'h', 'u', '_', 'þ'},{'g', 'h', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'h', 't', '_'},{'ƿ', 'h', 'w', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'h', 't', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 't', '_', 'þ'},{'ƿ', 'ȝ', 'h', '_', 'þ'},{'h', 't', '_'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 't', '_'},{'h', 'u', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'h', 't', '_', 'þ'},{'h', 'u', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'h', 't', '_', 'þ'},{'h', 't', '_'},{'gh', 'h', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 't', '_', 'þ'},{'h', 'u', '_', 'þ'},{'h', 't', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'g', 'h', '_', 'þ'},{'ƿ', 'h', 'w', '_', 'þ'},{'h', 'u', '_', 'þ'},{'ƿ', 'ȝ', 'h', '_', 'þ'},{'h', 't', '_', 'þ'}
6 : {'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'gh', '_', 't'},{'i', '_', 't'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'w'},{'i', '_', 't'},{'_', 't', 'g'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'h', '_', 't'},{'_', 't', 'w'},{'i', '_', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'i', '_', 't'},{'_', 't', 'u'},{'_', 'ȝ', 't'},{'_', 'ȝ', 't'},{'_', 't', 'g'},{'_', 't', 'u'},{'_', 't', 'w'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCCC
	Selection for pattern: CVCCC completed
	Making a version for pattern: CVCCC
			___CVCCC : 0___
				ANALYSING: nacht
				adding littera based on matching pattern
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: noght
				adding littera based on matching pattern
				ANALYSING: nohht
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: nocht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: nowth
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCC : 1___
				ANALYSING: nacht
				adding littera based on matching pattern
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: noght
				adding littera based on matching pattern
				ANALYSING: nohht
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: nocht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: nowth
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a']
				n/a(CV)
n/_/a(CAV)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', '_', 'a']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'h', 't']
				n/a/h/t(CVCC)
n/_/a/h/t(CAVCC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 's', 't']
				n/a/s/t(CVCC)
n/_/a/s/t(CAVCC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/au/t
					TRYING: au
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, au, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'au', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/au/t(CVC)
n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/au/t(CAVC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'au', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'aƿ', 't']
				n/a/ƿ/t(CVCC)
n/aƿ/t(CVC)
n/_/a/ƿ/t(CAVCC)
n/_/aƿ/t(CAVC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aƿ', 't']
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, ay, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'ay', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/ay/t(CVC)
n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/ay/t(CAVC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ay', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ȝ', 't']
				n/a/ȝ/t(CVCC)
n/_/a/ȝ/t(CAVCC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> ow, aƿ, e, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/o(CV)
n/_/o(CAV)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', '_', 'o']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 't']
				n/o/c/t(CVCC)
n/_/o/c/t(CAVCC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 't']
				n/o/g/t(CVCC)
n/_/o/g/t(CAVCC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h']
				n/o/h(CVC)
n/_/o/h(CAVC)
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 't']
				n/o/h/t(CVCC)
n/_/o/h/t(CAVCC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/o/ch/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 's', 't']
				n/o/s/t(CVCC)
n/_/o/s/t(CAVCC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 't']
				n/o/t(CVC)
n/_/o/t(CAVC)
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'ou', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/ou/t(CVC)
n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 't']
				n/o/ƿ/t(CVCC)
n/oƿ/t(CVC)
n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 't']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', 'ow', 't']
				n/o/w/t(CVCC)
n/ow/t(CVC)
n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'þ', 't']
				n/o/þ/t(CVCC)
n/_/o/þ/t(CAVCC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't']
				n/o/ȝ/t(CVCC)
n/_/o/ȝ/t(CAVCC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, ou, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/_/o/ȝ/t/e(CAVCCV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
			___CVCCC : 2___
				ANALYSING: nacht
				adding littera based on matching pattern
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: noght
				adding littera based on matching pattern
				ANALYSING: nohht
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: nocht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: nowth
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a']
				n/_/a(CAV)
n/_/_/a(CAAV)
				version split: ['n', '_', 'a']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a']
				version split: ['n', '_', '_', 'a']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/h/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 'h', 't']
				n/_/a/h/t(CAVCC)
n/_/_/a/h/t(CAAVCC)
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'h', 't']
				version split: ['n', '_', '_', 'a', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/s/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 's', 't']
				n/_/a/s/t(CAVCC)
n/_/_/a/s/t(CAAVCC)
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 's', 't']
				version split: ['n', '_', '_', 'a', 's', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/au/t
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'au', 't']
				n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/au/t(CAVC)
n/_/_/a/u/t(CAAVAC)
n/_/_/a/u/t(CAAVAC)
n/_/_/au/t(CAAVC)
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_/au', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'au', 't']
				version split: ['n', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'au', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/_/a/ƿ/t
					TRYING: a
					> version: n/_/aƿ/t
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', 'aƿ', 't']
				n/_/a/ƿ/t(CAVCC)
n/_/aƿ/t(CAVC)
n/_/_/a/ƿ/t(CAAVCC)
n/_/_/aƿ/t(CAAVC)
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_/aƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'aƿ', 't']
				version split: ['n', '_', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'aƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/ay/t
					TRYING: ay
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', 'ay', 't']
				n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/ay/t(CAVC)
n/_/_/a/y/t(CAAVAC)
n/_/_/a/y/t(CAAVAC)
n/_/_/ay/t(CAAVC)
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_/ay', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ay', 't']
				version split: ['n', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ay', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/ȝ/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'a', 'ȝ', 't']
				n/_/a/ȝ/t(CAVCC)
n/_/_/a/ȝ/t(CAAVCC)
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ȝ', 't']
				version split: ['n', '_', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e']
				n/_/e(CAV)
n/_/_/e(CAAV)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o']
				n/_/o(CAV)
n/_/_/o(CAAV)
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o']
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', 't']
				n/_/o/c/t(CAVCC)
n/_/_/o/c/t(CAAVCC)
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 't']
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'g', 't']
				n/_/o/g/t(CAVCC)
n/_/_/o/g/t(CAAVCC)
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 't']
				version split: ['n', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h']
				n/_/o/h(CAVC)
n/_/_/o/h(CAAVC)
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h']
				version split: ['n', '_', '_', 'o', 'h']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'h', 't']
				n/_/o/h/t(CAVCC)
n/_/_/o/h/t(CAAVCC)
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 't']
				version split: ['n', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: o
					> version: n/_/o/ch/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', '_', 'o', 'ch', 't', 'e']
				n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
n/_/_/o/c/h/t/e(CAAVCCCV)
n/_/_/o/ch/t/e(CAAVCCV)
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 's', 't']
				n/_/o/s/t(CAVCC)
n/_/_/o/s/t(CAAVCC)
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 's', 't']
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 't']
				n/_/o/t(CAVC)
n/_/_/o/t(CAAVC)
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 't']
				version split: ['n', '_', '_', 'o', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/ou/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', 'ou', 't']
				n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
n/_/_/o/u/t(CAAVAC)
n/_/_/o/u/t(CAAVAC)
n/_/_/ou/t(CAAVC)
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ou', 't']
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ou', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/o/ƿ/t
					TRYING: o
					> version: n/_/oƿ/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', 'oƿ', 't']
				n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
n/_/_/o/ƿ/t(CAAVCC)
n/_/_/oƿ/t(CAAVC)
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'oƿ', 't']
				version split: ['n', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/_/o/w/t
					TRYING: o
					> version: n/_/ow/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', '_', 'ow', 't']
				n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
n/_/_/o/w/t(CAAVCC)
n/_/_/ow/t(CAAVC)
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't']
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'ow', 't']
				version split: ['n', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				version split: ['n', '_', '_', 'ow', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'þ', 't']
				n/_/o/þ/t(CAVCC)
n/_/_/o/þ/t(CAAVCC)
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'þ', 't']
				version split: ['n', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ȝ', 't']
				n/_/o/ȝ/t(CAVCC)
n/_/_/o/ȝ/t(CAAVCC)
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				n/_/o/ȝ/t/e(CAVCCV)
n/_/_/o/ȝ/t/e(CAAVCCV)
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
			___CVCCC : 3___
				ANALYSING: nacht
				adding littera based on matching pattern
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: noght
				adding littera based on matching pattern
				ANALYSING: nohht
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: nocht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: nowth
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a']
				n/_/_/a(CAAV)
n/_/_/_/a(CAAAV)
				version split: ['n', '_', '_', 'a']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a']
				version split: ['n', '_', '_', '_', 'a']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/_/a/h/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'h', 't']
				n/_/_/a/h/t(CAAVCC)
n/_/_/_/a/h/t(CAAAVCC)
				version split: ['n', '_', '_', 'a', 'h', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'h', 't']
				version split: ['n', '_', '_', '_', 'a', 'h', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/_/a/s/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 's', 't']
				n/_/_/a/s/t(CAAVCC)
n/_/_/_/a/s/t(CAAAVCC)
				version split: ['n', '_', '_', 'a', 's', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 's', 't']
				version split: ['n', '_', '_', '_', 'a', 's', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/_/_/a/u/t
					TRYING: a
					> version: n/_/_/a/u/t
					TRYING: a
					> version: n/_/_/au/t
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'au', 't']
				n/_/_/a/u/t(CAAVAC)
n/_/_/a/u/t(CAAVAC)
n/_/_/au/t(CAAVC)
n/_/_/_/a/u/t(CAAAVAC)
n/_/_/_/a/u/t(CAAAVAC)
n/_/_/_/au/t(CAAAVC)
				version split: ['n', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', 'au', 't']
				{'string': 'n/_/_/au', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'au', 't']
				version split: ['n', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'au', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/_/_/a/ƿ/t
					TRYING: a
					> version: n/_/_/aƿ/t
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'aƿ', 't']
				n/_/_/a/ƿ/t(CAAVCC)
n/_/_/aƿ/t(CAAVC)
n/_/_/_/a/ƿ/t(CAAAVCC)
n/_/_/_/aƿ/t(CAAAVC)
				version split: ['n', '_', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', '_', 'aƿ', 't']
				{'string': 'n/_/_/aƿ', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'aƿ', 't']
				version split: ['n', '_', '_', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'aƿ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/_/_/a/y/t
					TRYING: a
					> version: n/_/_/a/y/t
					TRYING: a
					> version: n/_/_/ay/t
					TRYING: ay
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'ay', 't']
				n/_/_/a/y/t(CAAVAC)
n/_/_/a/y/t(CAAVAC)
n/_/_/ay/t(CAAVC)
n/_/_/_/a/y/t(CAAAVAC)
n/_/_/_/a/y/t(CAAAVAC)
n/_/_/_/ay/t(CAAAVC)
				version split: ['n', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', 'ay', 't']
				{'string': 'n/_/_/ay', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'ay', 't']
				version split: ['n', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'ay', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/_/a/ȝ/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'a', 'ȝ', 't']
				n/_/_/a/ȝ/t(CAAVCC)
n/_/_/_/a/ȝ/t(CAAAVCC)
				version split: ['n', '_', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/_/a', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'a', 'ȝ', 't']
				version split: ['n', '_', '_', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'e']
				n/_/_/e(CAAV)
n/_/_/_/e(CAAAV)
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e']
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o']
				n/_/_/o(CAAV)
n/_/_/_/o(CAAAV)
				version split: ['n', '_', '_', 'o']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o']
				version split: ['n', '_', '_', '_', 'o']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/o/c/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'c', 't']
				n/_/_/o/c/t(CAAVCC)
n/_/_/_/o/c/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'c', 't']
				version split: ['n', '_', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/o/g/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'g', 't']
				n/_/_/o/g/t(CAAVCC)
n/_/_/_/o/g/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'g', 't']
				version split: ['n', '_', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'h']
				n/_/_/o/h(CAAVC)
n/_/_/_/o/h(CAAAVC)
				version split: ['n', '_', '_', 'o', 'h']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h']
				version split: ['n', '_', '_', '_', 'o', 'h']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'h', 't']
				n/_/_/o/h/t(CAAVCC)
n/_/_/_/o/h/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'h', 't']
				version split: ['n', '_', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/_/o/c/h/t/e
					TRYING: o
					> version: n/_/_/o/ch/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'ch', 't', 'e']
				n/_/_/o/c/h/t/e(CAAVCCCV)
n/_/_/o/ch/t/e(CAAVCCV)
n/_/_/_/o/c/h/t/e(CAAAVCCCV)
n/_/_/_/o/ch/t/e(CAAAVCCV)
				version split: ['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/o/s/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 's', 't']
				n/_/_/o/s/t(CAAVCC)
n/_/_/_/o/s/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 's', 't']
				version split: ['n', '_', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 't']
				n/_/_/o/t(CAAVC)
n/_/_/_/o/t(CAAAVC)
				version split: ['n', '_', '_', 'o', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 't']
				version split: ['n', '_', '_', '_', 'o', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/_/_/o/u/t
					TRYING: o
					> version: n/_/_/o/u/t
					TRYING: o
					> version: n/_/_/ou/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'ou', 't']
				n/_/_/o/u/t(CAAVAC)
n/_/_/o/u/t(CAAVAC)
n/_/_/ou/t(CAAVC)
n/_/_/_/o/u/t(CAAAVAC)
n/_/_/_/o/u/t(CAAAVAC)
n/_/_/_/ou/t(CAAAVC)
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', 'ou', 't']
				{'string': 'n/_/_/ou', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'ou', 't']
				version split: ['n', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'ou', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/_/o/ƿ/t
					TRYING: o
					> version: n/_/_/oƿ/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'oƿ', 't']
				n/_/_/o/ƿ/t(CAAVCC)
n/_/_/oƿ/t(CAAVC)
n/_/_/_/o/ƿ/t(CAAAVCC)
n/_/_/_/oƿ/t(CAAAVC)
				version split: ['n', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'oƿ', 't']
				version split: ['n', '_', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/_/_/o/w/t
					TRYING: o
					> version: n/_/_/ow/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', '_', '_', 'ow', 't']
				n/_/_/o/w/t(CAAVCC)
n/_/_/ow/t(CAAVC)
n/_/_/_/o/w/t(CAAAVCC)
n/_/_/_/ow/t(CAAAVC)
				version split: ['n', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'w', 't']
				version split: ['n', '_', '_', 'ow', 't']
				{'string': 'n/_/_/ow', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'ow', 't']
				version split: ['n', '_', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				version split: ['n', '_', '_', '_', 'ow', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/o/þ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'þ', 't']
				n/_/_/o/þ/t(CAAVCC)
n/_/_/_/o/þ/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'þ', 't']
				version split: ['n', '_', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/o/ȝ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'ȝ', 't']
				n/_/_/o/ȝ/t(CAAVCC)
n/_/_/_/o/ȝ/t(CAAAVCC)
				version split: ['n', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				n/_/_/o/ȝ/t/e(CAAVCCV)
n/_/_/_/o/ȝ/t/e(CAAAVCCV)
				version split: ['n', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/o', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
			___CVCCC : 4___
				ANALYSING: nacht
				adding littera based on matching pattern
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: noght
				adding littera based on matching pattern
				ANALYSING: nohht
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: nocht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: nowth
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/_/_/a
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a']
				n/_/_/_/a(CAAAV)
n/_/_/_/_/a(CAAAAV)
				version split: ['n', '_', '_', '_', 'a']
				{'string': 'n/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a']
				version split: ['n', '_', '_', '_', '_', 'a']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a']
				ANALYSING: naht
					resolving (1)
					> version: n/_/_/_/a/h/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'h', 't']
				n/_/_/_/a/h/t(CAAAVCC)
n/_/_/_/_/a/h/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'a', 'h', 't']
				{'string': 'n/_/_/_/a/h', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'h', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'h', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'h', 't']
				ANALYSING: nast
					resolving (1)
					> version: n/_/_/_/a/s/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 's', 't']
				n/_/_/_/a/s/t(CAAAVCC)
n/_/_/_/_/a/s/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'a', 's', 't']
				{'string': 'n/_/_/_/a/s', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 's', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 's', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 's', 't']
				ANALYSING: naut
					resolving (3)
					> version: n/_/_/_/a/u/t
					TRYING: a
					> version: n/_/_/_/a/u/t
					TRYING: a
					> version: n/_/_/_/au/t
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'au', 't']
				n/_/_/_/a/u/t(CAAAVAC)
n/_/_/_/a/u/t(CAAAVAC)
n/_/_/_/au/t(CAAAVC)
n/_/_/_/_/a/u/t(CAAAAVAC)
n/_/_/_/_/a/u/t(CAAAAVAC)
n/_/_/_/_/au/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_/a/u', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_/a/u', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', '_', 'au', 't']
				{'string': 'n/_/_/_/au/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'au', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'u', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'u', 't']
				version split: ['n', '_', '_', '_', '_', 'au', 't']
				{'string': 'n/_/_/_/_/au', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'au', 't']
				ANALYSING: naƿt
					resolving (2)
					> version: n/_/_/_/a/ƿ/t
					TRYING: a
					> version: n/_/_/_/aƿ/t
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'aƿ', 't']
				n/_/_/_/a/ƿ/t(CAAAVCC)
n/_/_/_/aƿ/t(CAAAVC)
n/_/_/_/_/a/ƿ/t(CAAAAVCC)
n/_/_/_/_/aƿ/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/_/_/a/ƿ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', '_', '_', 'aƿ', 't']
				{'string': 'n/_/_/_/aƿ/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'aƿ', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', '_', '_', '_', 'aƿ', 't']
				{'string': 'n/_/_/_/_/aƿ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/_/_/_/a/y/t
					TRYING: a
					> version: n/_/_/_/a/y/t
					TRYING: a
					> version: n/_/_/_/ay/t
					TRYING: ay
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'ay', 't']
				n/_/_/_/a/y/t(CAAAVAC)
n/_/_/_/a/y/t(CAAAVAC)
n/_/_/_/ay/t(CAAAVC)
n/_/_/_/_/a/y/t(CAAAAVAC)
n/_/_/_/_/a/y/t(CAAAAVAC)
n/_/_/_/_/ay/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_/a/y', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_/a/y', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', '_', 'ay', 't']
				{'string': 'n/_/_/_/ay/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'ay', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'y', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'y', 't']
				version split: ['n', '_', '_', '_', '_', 'ay', 't']
				{'string': 'n/_/_/_/_/ay', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/_/_/a/ȝ/t
					TRYING: a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'a', 'ȝ', 't']
				n/_/_/_/a/ȝ/t(CAAAVCC)
n/_/_/_/_/a/ȝ/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/_/_/a/ȝ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'a', 'ȝ', 't']
				version split: ['n', '_', '_', '_', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/_/_/_/a', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'a', 'ȝ', 't']
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'e']
				n/_/_/_/e(CAAAV)
n/_/_/_/_/e(CAAAAV)
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/e', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'e']
				version split: ['n', '_', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/_/e', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'e']
				ANALYSING: no
					resolving (1)
					> version: n/_/_/_/o
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o']
				n/_/_/_/o(CAAAV)
n/_/_/_/_/o(CAAAAV)
				version split: ['n', '_', '_', '_', 'o']
				{'string': 'n/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o']
				version split: ['n', '_', '_', '_', '_', 'o']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o']
				ANALYSING: noct
					resolving (1)
					> version: n/_/_/_/o/c/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'c', 't']
				n/_/_/_/o/c/t(CAAAVCC)
n/_/_/_/_/o/c/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/_/o/c', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'c', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'c', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'c', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/_/_/_/o/g/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'g', 't']
				n/_/_/_/o/g/t(CAAAVCC)
n/_/_/_/_/o/g/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/_/o/g', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'g', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'g', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/_/_/_/o/h
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'h']
				n/_/_/_/o/h(CAAAVC)
n/_/_/_/_/o/h(CAAAAVC)
				version split: ['n', '_', '_', '_', 'o', 'h']
				{'string': 'n/_/_/_/o/h', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'h']
				version split: ['n', '_', '_', '_', '_', 'o', 'h']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'h']
				ANALYSING: noht
					resolving (1)
					> version: n/_/_/_/o/h/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'h', 't']
				n/_/_/_/o/h/t(CAAAVCC)
n/_/_/_/_/o/h/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/_/o/h', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'h', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'h', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'h', 't']
				ANALYSING: nochte
					resolving (2)
					> version: n/_/_/_/o/c/h/t/e
					TRYING: o
					> version: n/_/_/_/o/ch/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'ch', 't', 'e']
				n/_/_/_/o/c/h/t/e(CAAAVCCCV)
n/_/_/_/o/ch/t/e(CAAAVCCV)
n/_/_/_/_/o/c/h/t/e(CAAAAVCCCV)
n/_/_/_/_/o/ch/t/e(CAAAAVCCV)
				version split: ['n', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/_/o/c', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/_/o/ch', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', '_', '_', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/_/_/_/o/s/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 's', 't']
				n/_/_/_/o/s/t(CAAAVCC)
n/_/_/_/_/o/s/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/_/o/s', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 's', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 's', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 's', 't']
				ANALYSING: not
					resolving (1)
					> version: n/_/_/_/o/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 't']
				n/_/_/_/o/t(CAAAVC)
n/_/_/_/_/o/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'o', 't']
				{'string': 'n/_/_/_/o/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/_/_/_/o/u/t
					TRYING: o
					> version: n/_/_/_/o/u/t
					TRYING: o
					> version: n/_/_/_/ou/t
					TRYING: ou
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'ou', 't']
				n/_/_/_/o/u/t(CAAAVAC)
n/_/_/_/o/u/t(CAAAVAC)
n/_/_/_/ou/t(CAAAVC)
n/_/_/_/_/o/u/t(CAAAAVAC)
n/_/_/_/_/o/u/t(CAAAAVAC)
n/_/_/_/_/ou/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_/o/u', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_/o/u', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', '_', 'ou', 't']
				{'string': 'n/_/_/_/ou/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'ou', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'u', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'u', 't']
				version split: ['n', '_', '_', '_', '_', 'ou', 't']
				{'string': 'n/_/_/_/_/ou', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'ou', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/_/_/o/ƿ/t
					TRYING: o
					> version: n/_/_/_/oƿ/t
					TRYING: oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'oƿ', 't']
				n/_/_/_/o/ƿ/t(CAAAVCC)
n/_/_/_/oƿ/t(CAAAVC)
n/_/_/_/_/o/ƿ/t(CAAAAVCC)
n/_/_/_/_/oƿ/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/_/o/ƿ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_/_/oƿ/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'oƿ', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', '_', '_', '_', 'oƿ', 't']
				{'string': 'n/_/_/_/_/oƿ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/_/_/_/o/w/t
					TRYING: o
					> version: n/_/_/_/ow/t
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'ow', 't']
				n/_/_/_/o/w/t(CAAAVCC)
n/_/_/_/ow/t(CAAAVC)
n/_/_/_/_/o/w/t(CAAAAVCC)
n/_/_/_/_/ow/t(CAAAAVC)
				version split: ['n', '_', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/_/o/w', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'w', 't']
				version split: ['n', '_', '_', '_', 'ow', 't']
				{'string': 'n/_/_/_/ow/t', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'ow', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'w', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'w', 't']
				version split: ['n', '_', '_', '_', '_', 'ow', 't']
				{'string': 'n/_/_/_/_/ow', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'ow', 't']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/_/_/o/þ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'þ', 't']
				n/_/_/_/o/þ/t(CAAAVCC)
n/_/_/_/_/o/þ/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/_/o/þ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'þ', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'þ', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'þ', 't']
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/_/_/o/ȝ/t
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'ȝ', 't']
				n/_/_/_/o/ȝ/t(CAAAVCC)
n/_/_/_/_/o/ȝ/t(CAAAAVCC)
				version split: ['n', '_', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/_/o/ȝ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', '_', '_', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'ȝ', 't']
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/_/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				n/_/_/_/o/ȝ/t/e(CAAAVCCV)
n/_/_/_/_/o/ȝ/t/e(CAAAAVCCV)
				version split: ['n', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/_/o/ȝ', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', '_', '_', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/_/_/_/o', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', '_', 'o', 'ȝ', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['n', 'a', 'c', 'h', 't']
		SPLIT: ['n', 'a', 'u', 'h', 't']
		SPLIT: ['n', 'aƿ', 'i', 'h', 't']
		SPLIT: ['n', 'aw', 'i', 'h', 't']
		SPLIT: ['n', 'aƿ', 'i', 'ch', 't']
		SPLIT: ['n', 'a', 'w', 'i', 'þ']
		SPLIT: ['n', 'o', 'g', 'h', 't']
		SPLIT: ['n', 'o', 'h', 'h', 't']
		SPLIT: ['n', 'o', 'h', 'u', 't']
		SPLIT: ['n', 'o', 'c', 'h', 't']
		SPLIT: ['n', 'o', 'u', 'h', 't']
		SPLIT: ['n', 'o', 'u', 't', 'h']
		SPLIT: ['n', 'ou', 'ȝ', 'h', 't']
		SPLIT: ['n', 'o', 'u', 'ȝ', 't']
		SPLIT: ['n', 'oƿ', 'i', 'h', 't']
		SPLIT: ['n', 'ow', 'i', 'h', 't']
		SPLIT: ['n', 'o', 'ƿ', 'i', 't']
		SPLIT: ['n', 'o', 'w', 'i', 't']
		SPLIT: ['n', 'ow', 'i', 'ȝ', 't']
		SPLIT: ['n', 'o', 'w', 't', 'h']
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['_']", "['_']", "['_']"]
		version for pattern CVCCC is INVALID
		[{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'}, {'ƿ', 'c', 'ȝ', 'i', 'w', 'h', 'g', '_', 'u'}, {'ȝ', 't', 'ch', 'i', 'h', '_', 'u'}, {'h', 't', '_', 'þ'}]
		22
		OVERVIEW: version for pattern CVCCC
{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'}, {'ƿ', 'c', 'ȝ', 'i', 'w', 'h', 'g', '_', 'u'}, {'ȝ', 't', 'ch', 'i', 'h', '_', 'u'}, {'h', 't', '_', 'þ'}
faulty splits: 22
['n'][''][''][''][''] <-! na
['n'][''][''][''][''] <-! naht
['n'][''][''][''][''] <-! nast
['n'][''][''][''][''] <-! naut
['n'][''][''][''][''] <-! naƿt
['n'][''][''][''][''] <-! nayt
['n'][''][''][''][''] <-! naȝt
['n'][''][''][''][''] <-! ne
['n'][''][''][''][''] <-! no
['n'][''][''][''][''] <-! noct
['n'][''][''][''][''] <-! nogt
['n'][''][''][''][''] <-! noh
['n'][''][''][''][''] <-! noht
['n'][''][''][''][''] <-! nochte
['n'][''][''][''][''] <-! nost
['n'][''][''][''][''] <-! not
['n'][''][''][''][''] <-! nout
['n'][''][''][''][''] <-! noƿt
['n'][''][''][''][''] <-! nowt
['n'][''][''][''][''] <-! noþt
['n'][''][''][''][''] <-! noȝt
['n'][''][''][''][''] <-! noȝte
n | a | c | h | t
n | a | u | h | t
n | aƿ | i | h | t
n | aw | i | h | t
n | aƿ | i | ch | t
n | a | w | i | þ
n | o | g | h | t
n | o | h | h | t
n | o | h | u | t
n | o | c | h | t
n | o | u | h | t
n | o | u | t | h
n | ou | ȝ | h | t
n | o | u | ȝ | t
n | oƿ | i | h | t
n | ow | i | h | t
n | o | ƿ | i | t
n | o | w | i | t
n | ow | i | ȝ | t
n | o | w | t | h
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['_'] | ['_'] | ['_']
1 : {'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'e', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'ay', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', 'au', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'ou', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVVCCC
	Selection for pattern: CVVCCC completed
	Making a version for pattern: CVVCCC
			___CVVCCC : 0___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVVCCC : 1___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					adding blocked set: V = V >> a, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a']
				n/a(CV)
n/_/a(CAV)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', '_', 'a']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'h', 't']
				n/a/h/t(CVCC)
n/_/a/h/t(CAVCC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/ch/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', 'ch', 't']
				n/a/c/h/t(CVCCC)
n/a/ch/t(CVCC)
n/_/a/c/h/t(CAVCCC)
n/_/a/ch/t(CAVCC)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 's', 't']
				n/a/s/t(CVCC)
n/_/a/s/t(CAVCC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/u/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/au/h/t
					TRYING: au
					adding blocked set: V = V >> _, au, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'au', 'h', 't']
				n/a/u/h/t(CVCCC)
n/a/u/h/t(CVVCC)
n/au/h/t(CVCC)
n/_/a/u/h/t(CAVACC)
n/_/a/u/h/t(CAVACC)
n/_/au/h/t(CAVCC)
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'au', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/au/t
					TRYING: au
					adding blocked set: V = V >> _, au, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'au', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/au/t(CVC)
n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/au/t(CAVC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'au', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/ƿ/i/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> _, aƿ, o
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'aƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'aƿ', 'i', 'h', 't']
				n/a/ƿ/i/h/t(CVCCCC)
n/a/ƿ/i/h/t(CVCVCC)
n/aƿ/i/h/t(CVCCC)
n/aƿ/i/h/t(CVVCC)
n/_/a/ƿ/i/h/t(CAVCACC)
n/_/a/ƿ/i/h/t(CAVCACC)
n/_/aƿ/i/h/t(CAVACC)
n/_/aƿ/i/h/t(CAVACC)
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/w/i/h/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> _, aw, aƿ, o
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> _, aw, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'h', 't']
				n/a/w/i/h/t(CVCCCC)
n/a/w/i/h/t(CVCVCC)
n/aw/i/h/t(CVCCC)
n/aw/i/h/t(CVVCC)
n/_/a/w/i/h/t(CAVCACC)
n/_/a/w/i/h/t(CAVCACC)
n/_/aw/i/h/t(CAVACC)
n/_/aw/i/h/t(CAVACC)
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/w/i/þ
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> _, aw, aƿ, o
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> _, aw, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/aw/i/þ(CVCC)
n/aw/i/þ(CVVC)
n/_/a/w/i/þ(CAVCAC)
n/_/a/w/i/þ(CAVCAC)
n/_/aw/i/þ(CAVAC)
n/_/aw/i/þ(CAVAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'aƿ', 't']
				n/a/ƿ/t(CVCC)
n/aƿ/t(CVC)
n/_/a/ƿ/t(CAVCC)
n/_/aƿ/t(CAVC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aƿ', 't']
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> _, ay, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'ay', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/ay/t(CVC)
n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/ay/t(CAVC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ay', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					adding blocked set: V = V >> a, _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ȝ', 't']
				n/a/ȝ/t(CVCC)
n/_/a/ȝ/t(CAVCC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> _, e, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/o(CV)
n/_/o(CAV)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', '_', 'o']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 't']
				n/o/c/t(CVCC)
n/_/o/c/t(CAVCC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/gh/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 't']
				n/o/g/t(CVCC)
n/_/o/g/t(CAVCC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h']
				n/o/h(CVC)
n/_/o/h(CAVC)
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'h', 't']
				n/o/h/h/t(CVCCC)
n/_/o/h/h/t(CAVCCC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 't']
				n/o/h/t(CVCC)
n/_/o/h/t(CAVCC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/hu/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'hu', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/hu/t(CVCC)
n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/ch/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't']
				n/o/c/h/t(CVCCC)
n/o/ch/t(CVCC)
n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/ch/t/e
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 's', 't']
				n/o/s/t(CVCC)
n/_/o/s/t(CAVCC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 't']
				n/o/t(CVC)
n/_/o/t(CAVC)
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> _, ou, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'ou', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/ou/h/t(CVCC)
n/_/o/u/h/t(CAVACC)
n/_/o/u/h/t(CAVACC)
n/_/ou/h/t(CAVCC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> _, ou, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'ou', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/ou/t(CVC)
n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/t/h
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/th
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/th
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> _, ou, aƿ, o
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> _, ou, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', 'o', 'u', 'th']
				adding dashed alternative: ['n', '_', 'ou', 't', 'h']
				adding dashed alternative: ['n', '_', 'ou', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/ou/t/h(CVCC)
n/ou/th(CVC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/th(CAVAC)
n/_/o/u/th(CAVAC)
n/_/ou/t/h(CAVCC)
n/_/ou/th(CAVC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'th']
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/u/ȝ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> _, ou, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ou', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/ou/ȝ/t(CVCC)
n/_/o/u/ȝ/t(CAVACC)
n/_/o/u/ȝ/t(CAVACC)
n/_/ou/ȝ/t(CAVCC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/ƿ/i/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> _, oƿ, aƿ, o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> _, oƿ, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 'h', 't']
				n/o/ƿ/i/h/t(CVCCCC)
n/o/ƿ/i/h/t(CVCVCC)
n/oƿ/i/h/t(CVCCC)
n/oƿ/i/h/t(CVVCC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/oƿ/i/h/t(CAVACC)
n/_/oƿ/i/h/t(CAVACC)
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/w/i/h/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'h', 't']
				n/o/w/i/h/t(CVCCCC)
n/o/w/i/h/t(CVCVCC)
n/ow/i/h/t(CVCCC)
n/ow/i/h/t(CVVCC)
n/_/o/w/i/h/t(CAVCACC)
n/_/o/w/i/h/t(CAVCACC)
n/_/ow/i/h/t(CAVACC)
n/_/ow/i/h/t(CAVACC)
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> _, oƿ, aƿ, o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> _, oƿ, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/oƿ/i/t(CVCC)
n/oƿ/i/t(CVVC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/oƿ/i/t(CAVAC)
n/_/oƿ/i/t(CAVAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/ow/i/t(CVCC)
n/ow/i/t(CVVC)
n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/ow/i/t(CAVAC)
n/_/ow/i/t(CAVAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/w/i/ȝ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 'ȝ', 't']
				n/o/w/i/ȝ/t(CVCCCC)
n/o/w/i/ȝ/t(CVCVCC)
n/ow/i/ȝ/t(CVCCC)
n/ow/i/ȝ/t(CVVCC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/ow/i/ȝ/t(CAVACC)
n/_/ow/i/ȝ/t(CAVACC)
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> _, oƿ, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 't']
				n/o/ƿ/t(CVCC)
n/oƿ/t(CVC)
n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 't']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', 'ow', 't']
				n/o/w/t(CVCC)
n/ow/t(CVC)
n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/o/w/th
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> _, ow, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'w', 'th']
				adding dashed alternative: ['n', '_', 'ow', 't', 'h']
				adding dashed alternative: ['n', '_', 'ow', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/ow/t/h(CVCC)
n/ow/th(CVC)
n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/ow/t/h(CAVCC)
n/_/ow/th(CAVC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'th']
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'þ', 't']
				n/o/þ/t(CVCC)
n/_/o/þ/t(CAVCC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't']
				n/o/ȝ/t(CVCC)
n/_/o/ȝ/t(CAVCC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					adding blocked set: V = V >> _, aƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/_/o/ȝ/t/e(CAVCCV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
			___CVVCCC : 2___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/c/h/t
					TRYING: a
					> version: n/_/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/_/a/u/h/t
					TRYING: a
					> version: n/_/a/u/h/t
					TRYING: a
					> version: n/_/au/h/t
					TRYING: au
					adding blocked set: V = V >> i, a, u, au
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'au', 'h', 't']
				{'string': 'n/_/au', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'au', 'h', 't']
				ANALYSING: naut
					resolving (3)
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/au/t
					TRYING: au
					adding blocked set: V = V >> i, a, u, au
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_/au', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'au', 't']
				ANALYSING: naƿiht
					resolving (4)
					> version: n/_/a/ƿ/i/h/t
					TRYING: a
					> version: n/_/a/ƿ/i/h/t
					TRYING: a
					> version: n/_/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> i, a, u, aƿ
					> version: n/_/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> i, a, u, aƿ
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aƿ', 'i', 'h', 't']
				{'string': 'n/_/aƿ', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aƿ', 'i', 'h', 't']
				version split: ['n', '_', 'aƿ', 'i', 'h', 't']
				{'string': 'n/_/aƿ', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (4)
					> version: n/_/a/w/i/h/t
					TRYING: a
					> version: n/_/a/w/i/h/t
					TRYING: a
					> version: n/_/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					> version: n/_/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aw', 'i', 'h', 't']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'h', 't']
				version split: ['n', '_', 'aw', 'i', 'h', 't']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'h', 't']
				ANALYSING: nawiþ
					resolving (4)
					> version: n/_/a/w/i/þ
					TRYING: a
					> version: n/_/a/w/i/þ
					TRYING: a
					> version: n/_/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					> version: n/_/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'þ']
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/_/a/ƿ/t
					TRYING: a
					> version: n/_/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> i, a, u, aƿ
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_/aƿ', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/ay/t
					TRYING: ay
					adding blocked set: V = V >> i, a, u, ay
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_/ay', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/g/h/t
					TRYING: o
					> version: n/_/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/c/h/t
					TRYING: o
					> version: n/_/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: o
					> version: n/_/o/ch/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/_/o/u/h/t
					TRYING: o
					> version: n/_/o/u/h/t
					TRYING: o
					> version: n/_/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ou', 'h', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/ou/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/_/o/u/t/h
					TRYING: o
					> version: n/_/o/u/t/h
					TRYING: o
					> version: n/_/o/u/th
					TRYING: o
					> version: n/_/o/u/th
					TRYING: o
					> version: n/_/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					> version: n/_/ou/th
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ou', 't', 'h']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 't', 'h']
				version split: ['n', '_', 'ou', 'th']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 'th']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/o/u/ȝ/t
					TRYING: o
					> version: n/_/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ou', 'ȝ', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (4)
					> version: n/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/o/ƿ/i/h/t
					TRYING: o
					> version: n/_/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					> version: n/_/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 'h', 't']
				version split: ['n', '_', 'oƿ', 'i', 'h', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (4)
					> version: n/_/o/w/i/h/t
					TRYING: o
					> version: n/_/o/w/i/h/t
					TRYING: o
					> version: n/_/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'h', 't']
				version split: ['n', '_', 'ow', 'i', 'h', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/o/w/i/ȝ/t
					TRYING: o
					> version: n/_/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'ȝ', 't']
				version split: ['n', '_', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/o/ƿ/t
					TRYING: o
					> version: n/_/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/_/o/w/t
					TRYING: o
					> version: n/_/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/_/o/w/t/h
					TRYING: o
					> version: n/_/o/w/th
					TRYING: o
					> version: n/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 't', 'h']
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
			___CVVCCC : 3___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_']
				n/_/a(CAV)
n/_/a/_(CAVA)
				version split: ['n', '_', 'a']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a']
				version split: ['n', '_', 'a', '_']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'h', 't']
				n/_/a/h/t(CAVCC)
n/_/a/_/h/t(CAVACC)
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_/a/h', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'h', 't']
				version split: ['n', '_', 'a', '_', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> _, c, ȝ
					> version: n/_/a/ch/t
					TRYING: ch
					adding blocked set: C = C >> _, c, ch, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'ch', 't']
				n/_/a/c/h/t(CAVCCC)
n/_/a/ch/t(CAVCC)
n/_/a/_/c/h/t(CAVACCC)
n/_/a/_/ch/t(CAVACC)
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_/a/c', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'c', 'h', 't']
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_/a/ch', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ch', 't']
				version split: ['n', '_', 'a', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'ch', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/s/t
					TRYING: s
					adding blocked set: C = C >> _, c, s, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 's', 't']
				n/_/a/s/t(CAVCC)
n/_/a/_/s/t(CAVACC)
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_/a/s', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 's', 't']
				version split: ['n', '_', 'a', '_', 's', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nauht
					resolving (2)
					> version: n/_/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 'h', 't']
				n/_/a/u/h/t(CAVACC)
n/_/a/u/h/t(CAVACC)
n/_/a/_/u/h/t(CAVAACC)
n/_/a/_/u/h/t(CAVAACC)
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 'h', 't']
				version split: ['n', '_', 'a', 'u', 'h', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/_/a/u/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/a/u/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 't']
				n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/a/_/u/t(CAVAAC)
n/_/a/_/u/t(CAVAAC)
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/_/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					> version: n/_/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				n/_/a/ƿ/i/h/t(CAVCACC)
n/_/a/ƿ/i/h/t(CAVCACC)
n/_/a/_/ƿ/i/h/t(CAVACACC)
n/_/a/_/ƿ/i/h/t(CAVACACC)
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/ƿ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/ƿ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/_/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				n/_/a/w/i/h/t(CAVCACC)
n/_/a/w/i/h/t(CAVCACC)
n/_/a/_/w/i/h/t(CAVACACC)
n/_/a/_/w/i/h/t(CAVACACC)
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/_/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				n/_/a/w/i/þ(CAVCAC)
n/_/a/w/i/þ(CAVCAC)
n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/w/i/þ(CAVACAC)
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/_/a/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'ƿ', 't']
				n/_/a/ƿ/t(CAVCC)
n/_/a/_/ƿ/t(CAVACC)
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/a/ƿ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', 'a', '_', 'ƿ', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/_/a/y/t
					TRYING: y
					adding blocked set: C = C >> _, c, y, ȝ
					> version: n/_/a/y/t
					TRYING: y
					adding blocked set: C = C >> _, c, y, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'y', 't']
				n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/a/_/y/t(CAVAAC)
n/_/a/_/y/t(CAVAAC)
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a/y', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a/y', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'ȝ', 't']
				n/_/a/ȝ/t(CAVCC)
n/_/a/_/ȝ/t(CAVACC)
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/a/ȝ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ȝ', 't']
				version split: ['n', '_', 'a', '_', 'ȝ', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e', '_']
				n/_/e(CAV)
n/_/e/_(CAVA)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((e))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', 'e', '_']
				{'string': 'n/_/e/_', 'rgx': '((n))/((_))/((e))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_']
				n/_/o(CAV)
n/_/o/_(CAVA)
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o']
				version split: ['n', '_', 'o', '_']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: c
					adding blocked set: C = C >> _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 't']
				n/_/o/c/t(CAVCC)
n/_/o/_/c/t(CAVACC)
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 't']
				version split: ['n', '_', 'o', '_', 'c', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, c, g, ȝ
					> version: n/_/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'gh', 't']
				n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
n/_/o/_/g/h/t(CAVACCC)
n/_/o/_/gh/t(CAVACC)
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/o/g', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 'h', 't']
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_/o/gh', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'gh', 't']
				version split: ['n', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: g
					adding blocked set: C = C >> _, c, g, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'g', 't']
				n/_/o/g/t(CAVCC)
n/_/o/_/g/t(CAVACC)
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o/g', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 't']
				version split: ['n', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h']
				n/_/o/h(CAVC)
n/_/o/_/h(CAVAC)
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h']
				version split: ['n', '_', 'o', '_', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'h', 't']
				n/_/o/h/h/t(CAVCCC)
n/_/o/_/h/h/t(CAVACCC)
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'h', 't']
				version split: ['n', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 't']
				n/_/o/h/t(CAVCC)
n/_/o/_/h/t(CAVACC)
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 't']
				version split: ['n', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					> version: n/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> h, _, c, ȝ
					> version: n/_/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> _, c, hu, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'hu', 't']
				n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/hu/t(CAVACC)
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_/o/hu', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'hu', 't']
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/c/h/t
					TRYING: c
					adding blocked set: C = C >> _, c, ȝ
					> version: n/_/o/ch/t
					TRYING: ch
					adding blocked set: C = C >> _, c, ch, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'ch', 't']
				n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
n/_/o/_/c/h/t(CAVACCC)
n/_/o/_/ch/t(CAVACC)
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't']
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_/o/ch', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> _, c, ȝ
					> version: n/_/o/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> _, c, ch, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', '_', 'ch', 't', 'e']
				n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
n/_/o/_/c/h/t/e(CAVACCCV)
n/_/o/_/ch/t/e(CAVACCV)
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o/ch', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: s
					adding blocked set: C = C >> _, c, s, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 's', 't']
				n/_/o/s/t(CAVCC)
n/_/o/_/s/t(CAVACC)
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o/s', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 's', 't']
				version split: ['n', '_', 'o', '_', 's', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: t
					adding blocked set: C = C >> _, c, t, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 't']
				n/_/o/t(CAVC)
n/_/o/_/t(CAVAC)
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o/t', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 't']
				version split: ['n', '_', 'o', '_', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'h', 't']
				n/_/o/u/h/t(CAVACC)
n/_/o/u/h/t(CAVACC)
n/_/o/_/u/h/t(CAVAACC)
n/_/o/_/u/h/t(CAVAACC)
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', 'o', 'u', 'h', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't']
				n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/o/_/u/t(CAVAAC)
n/_/o/_/u/t(CAVAAC)
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/th
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'th']
				n/_/o/u/t/h(CAVACC)
n/_/o/u/t/h(CAVACC)
n/_/o/u/th(CAVAC)
n/_/o/u/th(CAVAC)
n/_/o/_/u/t/h(CAVAACC)
n/_/o/_/u/t/h(CAVAACC)
n/_/o/_/u/th(CAVAAC)
n/_/o/_/u/th(CAVAAC)
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', 'o', 'u', 't', 'h']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't', 'h']
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'th']
				version split: ['n', '_', 'o', 'u', 'th']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'th']
				version split: ['n', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					> version: n/_/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, c, u, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				n/_/o/u/ȝ/t(CAVACC)
n/_/o/u/ȝ/t(CAVACC)
n/_/o/_/u/ȝ/t(CAVAACC)
n/_/o/_/u/ȝ/t(CAVAACC)
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', 'u', 'ȝ', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					> version: n/_/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				n/_/o/ƿ/i/h/t(CAVCACC)
n/_/o/ƿ/i/h/t(CAVCACC)
n/_/o/_/ƿ/i/h/t(CAVACACC)
n/_/o/_/ƿ/i/h/t(CAVACACC)
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				n/_/o/w/i/h/t(CAVCACC)
n/_/o/w/i/h/t(CAVCACC)
n/_/o/_/w/i/h/t(CAVACACC)
n/_/o/_/w/i/h/t(CAVACACC)
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					> version: n/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/ƿ/i/t(CAVACAC)
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 't']
				n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/w/i/t(CAVACAC)
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				n/_/o/w/i/ȝ/t(CAVCACC)
n/_/o/w/i/ȝ/t(CAVCACC)
n/_/o/_/w/i/ȝ/t(CAVACACC)
n/_/o/_/w/i/ȝ/t(CAVACACC)
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/o/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, c, ƿ, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 't']
				n/_/o/ƿ/t(CAVCC)
n/_/o/_/ƿ/t(CAVACC)
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/o/w/t
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 't']
				n/_/o/w/t(CAVCC)
n/_/o/_/w/t(CAVACC)
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't']
				version split: ['n', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/_/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					> version: n/_/o/w/th
					TRYING: w
					adding blocked set: C = C >> _, c, ȝ, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'th']
				n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/o/_/w/t/h(CAVACCC)
n/_/o/_/w/th(CAVACC)
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't', 'h']
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'th']
				version split: ['n', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> _, c, ȝ, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'þ', 't']
				n/_/o/þ/t(CAVCC)
n/_/o/_/þ/t(CAVACC)
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o/þ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'þ', 't']
				version split: ['n', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ȝ', 't']
				n/_/o/ȝ/t(CAVCC)
n/_/o/_/ȝ/t(CAVACC)
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o/ȝ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> _, c, ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				n/_/o/ȝ/t/e(CAVCCV)
n/_/o/_/ȝ/t/e(CAVACCV)
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o/ȝ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
			___CVVCCC : 4___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_']
				n/_/a/_(CAVA)
n/_/a/_/_(CAVAA)
				version split: ['n', '_', 'a', '_']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_']
				version split: ['n', '_', 'a', '_', '_']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', 'a', '_', 'h', 't']
				{'string': 'n/_/a/_/h', 'rgx': '((n))/((_))/((a))/((_))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/_/c/h/t
					TRYING: c
					> version: n/_/a/_/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', '_', 'a', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_/c', 'rgx': '((n))/((_))/((a))/((_))/((c)|(ch))$'}
				version split: ['n', '_', 'a', '_', 'ch', 't']
				{'string': 'n/_/a/_/ch', 'rgx': '((n))/((_))/((a))/((_))/((c)|(ch))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/_/s/t
					TRYING: s
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 's', 't']
				n/_/a/_/s/t(CAVACC)
n/_/a/_/_/s/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 's', 't']
				{'string': 'n/_/a/_/s', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 's', 't']
				version split: ['n', '_', 'a', '_', '_', 's', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: nauht
					resolving (2)
					> version: n/_/a/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/a/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				n/_/a/_/u/h/t(CAVAACC)
n/_/a/_/u/h/t(CAVAACC)
n/_/a/_/_/u/h/t(CAVAAACC)
n/_/a/_/_/u/h/t(CAVAAACC)
				version split: ['n', '_', 'a', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/_/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 't']
				n/_/a/_/u/t(CAVAAC)
n/_/a/_/u/t(CAVAAC)
n/_/a/_/_/u/t(CAVAAAC)
n/_/a/_/_/u/t(CAVAAAC)
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/_/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/_/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				n/_/a/_/ƿ/i/h/t(CAVACACC)
n/_/a/_/ƿ/i/h/t(CAVACACC)
n/_/a/_/_/ƿ/i/h/t(CAVAACACC)
n/_/a/_/_/ƿ/i/h/t(CAVAACACC)
				version split: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/_/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				n/_/a/_/w/i/h/t(CAVACACC)
n/_/a/_/w/i/h/t(CAVACACC)
n/_/a/_/_/w/i/h/t(CAVAACACC)
n/_/a/_/_/w/i/h/t(CAVAACACC)
				version split: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/_/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/_/w/i/þ(CAVAACAC)
n/_/a/_/_/w/i/þ(CAVAACAC)
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/_/a/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ƿ', 't']
				n/_/a/_/ƿ/t(CAVACC)
n/_/a/_/_/ƿ/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ƿ', 't']
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/_/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> c, ch, h, _, y
					> version: n/_/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> c, ch, h, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'y', 't']
				n/_/a/_/y/t(CAVAAC)
n/_/a/_/y/t(CAVAAC)
n/_/a/_/_/y/t(CAVAAAC)
n/_/a/_/_/y/t(CAVAAAC)
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ȝ', 't']
				n/_/a/_/ȝ/t(CAVACC)
n/_/a/_/_/ȝ/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/ȝ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ȝ', 't']
				version split: ['n', '_', 'a', '_', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e', '_', '_']
				n/_/e/_(CAVA)
n/_/e/_/_(CAVAA)
				version split: ['n', '_', 'e', '_']
				{'string': 'n/_/e/_', 'rgx': '((n))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e', '_']
				version split: ['n', '_', 'e', '_', '_']
				{'string': 'n/_/e/_/_', 'rgx': '((n))/((_))/((e))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_']
				n/_/o/_(CAVA)
n/_/o/_/_(CAVAA)
				version split: ['n', '_', 'o', '_']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_']
				version split: ['n', '_', 'o', '_', '_']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/_/c/t
					TRYING: c
					RESULT:  ['c']
				version split: ['n', '_', 'o', '_', 'c', 't']
				{'string': 'n/_/o/_/c', 'rgx': '((n))/((_))/((o))/((_))/((c))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> c, ch, h, g, _
					> version: n/_/o/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> c, ch, gh, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'gh', 't']
				n/_/o/_/g/h/t(CAVACCC)
n/_/o/_/gh/t(CAVACC)
n/_/o/_/_/g/h/t(CAVAACCC)
n/_/o/_/_/gh/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'g', 'h', 't']
				version split: ['n', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/o/_/gh', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'gh', 't']
				version split: ['n', '_', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'gh', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/_/g/t
					TRYING: g
					adding blocked set: C = C >> c, ch, h, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'g', 't']
				n/_/o/_/g/t(CAVACC)
n/_/o/_/_/g/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/o/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'g', 't']
				version split: ['n', '_', 'o', '_', '_', 'g', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/_/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', 'o', '_', 'h']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/_/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/_/h/u/t
					TRYING: h
					> version: n/_/o/_/h/u/t
					TRYING: h
					> version: n/_/o/_/hu/t
					TRYING: hu
					adding blocked set: C = C >> c, hu, ch, h, _
					RESULT:  ['h']
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				version split: ['n', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/o/_/hu', 'rgx': '((n))/((_))/((o))/((_))/((h))$'}
				_____REMOVING________['n', '_', 'o', '_', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/_/c/h/t
					TRYING: c
					> version: n/_/o/_/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_/c', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't']
				{'string': 'n/_/o/_/ch', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/_/c/h/t/e
					TRYING: c
					> version: n/_/o/_/ch/t/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_/c', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_/ch', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/_/s/t
					TRYING: s
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 's', 't']
				n/_/o/_/s/t(CAVACC)
n/_/o/_/_/s/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 's', 't']
				{'string': 'n/_/o/_/s', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 's', 't']
				version split: ['n', '_', 'o', '_', '_', 's', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/_/t
					TRYING: t
					adding blocked set: C = C >> c, t, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 't']
				n/_/o/_/t(CAVAC)
n/_/o/_/_/t(CAVAAC)
				version split: ['n', '_', 'o', '_', 't']
				{'string': 'n/_/o/_/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 't']
				version split: ['n', '_', 'o', '_', '_', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				n/_/o/_/u/h/t(CAVAACC)
n/_/o/_/u/h/t(CAVAACC)
n/_/o/_/_/u/h/t(CAVAAACC)
n/_/o/_/_/u/h/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't']
				n/_/o/_/u/t(CAVAAC)
n/_/o/_/u/t(CAVAAC)
n/_/o/_/_/u/t(CAVAAAC)
n/_/o/_/_/u/t(CAVAAAC)
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'th']
				n/_/o/_/u/t/h(CAVAACC)
n/_/o/_/u/t/h(CAVAACC)
n/_/o/_/u/th(CAVAAC)
n/_/o/_/u/th(CAVAAC)
n/_/o/_/_/u/t/h(CAVAAACC)
n/_/o/_/_/u/t/h(CAVAAACC)
n/_/o/_/_/u/th(CAVAAAC)
n/_/o/_/_/u/th(CAVAAAC)
				version split: ['n', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'th']
				version split: ['n', '_', 'o', '_', 'u', 'th']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'th']
				version split: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/_/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				n/_/o/_/u/ȝ/t(CAVAACC)
n/_/o/_/u/ȝ/t(CAVAACC)
n/_/o/_/_/u/ȝ/t(CAVAAACC)
n/_/o/_/_/u/ȝ/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/_/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				n/_/o/_/ƿ/i/h/t(CAVACACC)
n/_/o/_/ƿ/i/h/t(CAVACACC)
n/_/o/_/_/ƿ/i/h/t(CAVAACACC)
n/_/o/_/_/ƿ/i/h/t(CAVAACACC)
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				n/_/o/_/w/i/h/t(CAVACACC)
n/_/o/_/w/i/h/t(CAVACACC)
n/_/o/_/_/w/i/h/t(CAVAACACC)
n/_/o/_/_/w/i/h/t(CAVAACACC)
				version split: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/_/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/_/ƿ/i/t(CAVAACAC)
n/_/o/_/_/ƿ/i/t(CAVAACAC)
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/_/w/i/t(CAVAACAC)
n/_/o/_/_/w/i/t(CAVAACAC)
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				n/_/o/_/w/i/ȝ/t(CAVACACC)
n/_/o/_/w/i/ȝ/t(CAVACACC)
n/_/o/_/_/w/i/ȝ/t(CAVAACACC)
n/_/o/_/_/w/i/ȝ/t(CAVAACACC)
				version split: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/o/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 't']
				n/_/o/_/ƿ/t(CAVACC)
n/_/o/_/_/ƿ/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/o/_/w/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 't']
				n/_/o/_/w/t(CAVACC)
n/_/o/_/_/w/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'th']
				n/_/o/_/w/t/h(CAVACCC)
n/_/o/_/w/th(CAVACC)
n/_/o/_/_/w/t/h(CAVAACCC)
n/_/o/_/_/w/th(CAVAACC)
				version split: ['n', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 't', 'h']
				version split: ['n', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/o/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'th']
				version split: ['n', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				version split: ['n', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/o/_/þ', 'rgx': '((n))/((_))/((o))/((_))/((þ))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ȝ', 't']
				n/_/o/_/ȝ/t(CAVACC)
n/_/o/_/_/ȝ/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				n/_/o/_/ȝ/t/e(CAVACCV)
n/_/o/_/_/ȝ/t/e(CAVAACCV)
				version split: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
			___CVVCCC : 5___
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_']
				n/_/a/_/_(CAVAA)
n/_/a/_/_/_(CAVAAA)
				version split: ['n', '_', 'a', '_', '_']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_']
				version split: ['n', '_', 'a', '_', '_', '_']
				{'string': 'n/_/a/_/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'a', '_', 'h', 't']
				{'string': 'n/_/a/_/h/t', 'rgx': '((n))/((_))/((a))/((_))/((h))/((t))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/_/c/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/_/a/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'a', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_/c/h/t', 'rgx': '((n))/((_))/((a))/((_))/((c)|(ch))/((t))$'}
				_____REMOVING________['n', '_', 'a', '_', 'c', 'h', 't']
				version split: ['n', '_', 'a', '_', 'ch', 't']
				{'string': 'n/_/a/_/ch/t', 'rgx': '((n))/((_))/((a))/((_))/((c)|(ch))/((t))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/_/_/s/t
					TRYING: s
					adding blocked set: C = C >> _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 's', 't']
				n/_/a/_/_/s/t(CAVAACC)
n/_/a/_/_/_/s/t(CAVAAACC)
				version split: ['n', '_', 'a', '_', '_', 's', 't']
				{'string': 'n/_/a/_/_/s/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 's', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 's', 't']
				{'string': 'n/_/a/_/_/_/s', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 's', 't']
				ANALYSING: nauht
					resolving (2)
					> version: n/_/a/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/a/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				n/_/a/_/_/u/h/t(CAVAAACC)
n/_/a/_/_/u/h/t(CAVAAACC)
n/_/a/_/_/_/u/h/t(CAVAAAACC)
n/_/a/_/_/_/u/h/t(CAVAAAACC)
				version split: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_/u/h', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_/u/h', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/a/_/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: naut
					resolving (2)
					> version: n/_/a/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/a/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'u', 't']
				n/_/a/_/_/u/t(CAVAAAC)
n/_/a/_/_/u/t(CAVAAAC)
n/_/a/_/_/_/u/t(CAVAAAAC)
n/_/a/_/_/_/u/t(CAVAAAAC)
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/u/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/u/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'u', 't']
				ANALYSING: naƿiht
					resolving (2)
					> version: n/_/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/_/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/_/a/_/_/ƿ/i/h/t(CAVAACACC)
n/_/a/_/_/ƿ/i/h/t(CAVAACACC)
n/_/a/_/_/_/ƿ/i/h/t(CAVAAACACC)
n/_/a/_/_/_/ƿ/i/h/t(CAVAAACACC)
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/ƿ/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/ƿ/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (2)
					> version: n/_/a/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/a/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				n/_/a/_/_/w/i/h/t(CAVAACACC)
n/_/a/_/_/w/i/h/t(CAVAACACC)
n/_/a/_/_/_/w/i/h/t(CAVAAACACC)
n/_/a/_/_/_/w/i/h/t(CAVAAACACC)
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/a/_/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: nawiþ
					resolving (2)
					> version: n/_/a/_/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/a/_/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				n/_/a/_/_/w/i/þ(CAVAACAC)
n/_/a/_/_/w/i/þ(CAVAACAC)
n/_/a/_/_/_/w/i/þ(CAVAAACAC)
n/_/a/_/_/_/w/i/þ(CAVAAACAC)
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'w', 'i', 'þ']
				ANALYSING: naƿt
					resolving (1)
					> version: n/_/a/_/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'ƿ', 't']
				n/_/a/_/_/ƿ/t(CAVAACC)
n/_/a/_/_/_/ƿ/t(CAVAAACC)
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/_/ƿ/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ƿ', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/_/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nayt
					resolving (2)
					> version: n/_/a/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					> version: n/_/a/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'y', 't']
				n/_/a/_/_/y/t(CAVAAAC)
n/_/a/_/_/y/t(CAVAAAC)
n/_/a/_/_/_/y/t(CAVAAAAC)
n/_/a/_/_/_/y/t(CAVAAAAC)
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/y/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/y/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'y', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', '_', 'ȝ', 't']
				n/_/a/_/_/ȝ/t(CAVAACC)
n/_/a/_/_/_/ȝ/t(CAVAAACC)
				version split: ['n', '_', 'a', '_', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/_/ȝ/t', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ȝ', 't']
				version split: ['n', '_', 'a', '_', '_', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/_/_/ȝ', 'rgx': '((n))/((_))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', '_', 'ȝ', 't']
				ANALYSING: ne
					resolving (1)
					> version: n/_/e/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e', '_', '_', '_']
				n/_/e/_/_(CAVAA)
n/_/e/_/_/_(CAVAAA)
				version split: ['n', '_', 'e', '_', '_']
				{'string': 'n/_/e/_/_', 'rgx': '((n))/((_))/((e))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e', '_', '_']
				version split: ['n', '_', 'e', '_', '_', '_']
				{'string': 'n/_/e/_/_/_', 'rgx': '((n))/((_))/((e))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_']
				n/_/o/_/_(CAVAA)
n/_/o/_/_/_(CAVAAA)
				version split: ['n', '_', 'o', '_', '_']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_']
				version split: ['n', '_', 'o', '_', '_', '_']
				{'string': 'n/_/o/_/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/_/c/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', 'c', 't']
				{'string': 'n/_/o/_/c/t', 'rgx': '((n))/((_))/((o))/((_))/((c))/((t))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					> version: n/_/o/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'gh', 't']
				n/_/o/_/_/g/h/t(CAVAACCC)
n/_/o/_/_/gh/t(CAVAACC)
n/_/o/_/_/_/g/h/t(CAVAAACCC)
n/_/o/_/_/_/gh/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/_/g/h', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'gh', 't']
				{'string': 'n/_/o/_/_/gh/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'gh', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/_/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/_/o/_/_/_/gh', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'g', 't']
				n/_/o/_/_/g/t(CAVAACC)
n/_/o/_/_/_/g/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'g', 't']
				{'string': 'n/_/o/_/_/g/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'g', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/_/o/_/_/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/_/h
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', '_']
				n/_/o/_/h(CAVAC)
n/_/o/_/h/_(CAVACA)
				version split: ['n', '_', 'o', '_', 'h']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h']
				version split: ['n', '_', 'o', '_', 'h', '_']
				{'string': 'n/_/o/_/h/_', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', '_', 'h', 't']
				n/_/o/_/h/h/t(CAVACCC)
n/_/o/_/h/_/h/t(CAVACACC)
				version split: ['n', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_/h/h/t', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'h', 't']
				version split: ['n', '_', 'o', '_', 'h', '_', 'h', 't']
				{'string': 'n/_/o/_/h/_/h', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', '_', 'h', 't']
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/o/_/h/t', 'rgx': '((n))/((_))/((o))/((_))/((h))/((t))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/_/o/_/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', '_', 'u', 't']
				n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/h/_/u/t(CAVACAAC)
n/_/o/_/h/_/u/t(CAVACAAC)
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h/u/t', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h/u/t', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', 'h', '_', 'u', 't']
				{'string': 'n/_/o/_/h/_/u', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', 'h', '_', 'u', 't']
				{'string': 'n/_/o/_/h/_/u', 'rgx': '((n))/((_))/((o))/((_))/((h))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', '_', 'u', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/_/c/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/_/o/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_/c/h/t', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))/((t))$'}
				_____REMOVING________['n', '_', 'o', '_', 'c', 'h', 't']
				version split: ['n', '_', 'o', '_', 'ch', 't']
				{'string': 'n/_/o/_/ch/t', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))/((t))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/_/c/h/t/e
					TRYING: h
					adding blocked set: C = C >> h, _, t
					> version: n/_/o/_/ch/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_/c/h/t', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))/((t))$'}
				_____REMOVING________['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_/ch/t/e', 'rgx': '((n))/((_))/((o))/((_))/((c)|(ch))/((t))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/_/_/s/t
					TRYING: s
					adding blocked set: C = C >> _, s, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 's', 't']
				n/_/o/_/_/s/t(CAVAACC)
n/_/o/_/_/_/s/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 's', 't']
				{'string': 'n/_/o/_/_/s/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 's', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 's', 't']
				{'string': 'n/_/o/_/_/_/s', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 's', 't']
				ANALYSING: not
					resolving (1)
					> version: n/_/o/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', '_', 't']
				{'string': 'n/_/o/_/_/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/_/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				n/_/o/_/_/u/h/t(CAVAAACC)
n/_/o/_/_/u/h/t(CAVAAACC)
n/_/o/_/_/_/u/h/t(CAVAAAACC)
n/_/o/_/_/_/u/h/t(CAVAAAACC)
				version split: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_/u/h', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_/u/h', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/_/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 't']
				n/_/o/_/_/u/t(CAVAAAC)
n/_/o/_/_/u/t(CAVAAAC)
n/_/o/_/_/_/u/t(CAVAAAAC)
n/_/o/_/_/_/u/t(CAVAAAAC)
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 't']
				ANALYSING: nouth
					resolving (4)
					> version: n/_/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'th']
				n/_/o/_/_/u/t/h(CAVAAACC)
n/_/o/_/_/u/t/h(CAVAAACC)
n/_/o/_/_/u/th(CAVAAAC)
n/_/o/_/_/u/th(CAVAAAC)
n/_/o/_/_/_/u/t/h(CAVAAAACC)
n/_/o/_/_/_/u/t/h(CAVAAAACC)
n/_/o/_/_/_/u/th(CAVAAAAC)
n/_/o/_/_/_/u/th(CAVAAAAC)
				version split: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_/u/th', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'th']
				version split: ['n', '_', 'o', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_/u/th', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'th']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'th']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'th']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/_/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/_/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				n/_/o/_/_/u/ȝ/t(CAVAAACC)
n/_/o/_/_/u/ȝ/t(CAVAAACC)
n/_/o/_/_/_/u/ȝ/t(CAVAAAACC)
n/_/o/_/_/_/u/ȝ/t(CAVAAAACC)
				version split: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_/u/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/_/o/_/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (2)
					> version: n/_/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/_/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/_/o/_/_/ƿ/i/h/t(CAVAACACC)
n/_/o/_/_/ƿ/i/h/t(CAVAACACC)
n/_/o/_/_/_/ƿ/i/h/t(CAVAAACACC)
n/_/o/_/_/_/ƿ/i/h/t(CAVAAACACC)
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (2)
					> version: n/_/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				n/_/o/_/_/w/i/h/t(CAVAACACC)
n/_/o/_/_/w/i/h/t(CAVAACACC)
n/_/o/_/_/_/w/i/h/t(CAVAAACACC)
n/_/o/_/_/_/w/i/h/t(CAVAAACACC)
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/o/_/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/_/o/_/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				n/_/o/_/_/ƿ/i/t(CAVAACAC)
n/_/o/_/_/ƿ/i/t(CAVAACAC)
n/_/o/_/_/_/ƿ/i/t(CAVAAACAC)
n/_/o/_/_/_/ƿ/i/t(CAVAAACAC)
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				ANALYSING: nowit
					resolving (2)
					> version: n/_/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				n/_/o/_/_/w/i/t(CAVAACAC)
n/_/o/_/_/w/i/t(CAVAACAC)
n/_/o/_/_/_/w/i/t(CAVAAACAC)
n/_/o/_/_/_/w/i/t(CAVAAACAC)
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 't']
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/_/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				n/_/o/_/_/w/i/ȝ/t(CAVAACACC)
n/_/o/_/_/w/i/ȝ/t(CAVAACACC)
n/_/o/_/_/_/w/i/ȝ/t(CAVAAACACC)
n/_/o/_/_/_/w/i/ȝ/t(CAVAAACACC)
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/o/_/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ƿ', 't']
				n/_/o/_/_/ƿ/t(CAVAACC)
n/_/o/_/_/_/ƿ/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/_/ƿ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nowt
					resolving (1)
					> version: n/_/o/_/_/w/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 't']
				n/_/o/_/_/w/t(CAVAACC)
n/_/o/_/_/_/w/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'w', 't']
				{'string': 'n/_/o/_/_/w/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 't']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 't']
				ANALYSING: nowth
					resolving (2)
					> version: n/_/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/_/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'w', 'th']
				n/_/o/_/_/w/t/h(CAVAACCC)
n/_/o/_/_/w/th(CAVAACC)
n/_/o/_/_/_/w/t/h(CAVAAACCC)
n/_/o/_/_/_/w/th(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/_/w/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'n/_/o/_/_/w/th', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'th']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'n/_/o/_/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/_/þ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/o/_/þ/t', 'rgx': '((n))/((_))/((o))/((_))/((þ))/((t))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/_/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ȝ', 't']
				n/_/o/_/_/ȝ/t(CAVAACC)
n/_/o/_/_/_/ȝ/t(CAVAAACC)
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/_/ȝ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/_/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ȝ', 't']
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/_/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> _, ȝ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
				n/_/o/_/_/ȝ/t/e(CAVAACCV)
n/_/o/_/_/_/ȝ/t/e(CAVAAACCV)
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/_/ȝ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/_/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', '_', 'ȝ', 't', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'a', '_', '_', '_']
		only one version left: ['n', '_', 'a', '_', 'h', 't']
		only one version left: ['n', '_', 'a', '_', 'ch', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'e', '_', '_', '_']
		only one version left: ['n', '_', 'o', '_', '_', '_']
		only one version left: ['n', '_', 'o', '_', 'c', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'o', '_', 'h', '_']
		FAIL: 
		only one version left: ['n', '_', 'o', '_', 'h', 't']
		FAIL: 
		only one version left: ['n', '_', 'o', '_', 'ch', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'o', '_', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'o', '_', 'þ', 't']
		FAIL: 
		FAIL: 
		SPLIT: ['n', 'aƿ', 'i', 'c', 'h', 't']
		SPLIT: ['n', 'o', 'u', 'ȝ', 'h', 't']
		SPLIT: ['n', '_', 'a', '_', '_', '_']
		['n', '_', 'a', '_', '_', '_']
		SPLIT: ['n', '_', 'a', '_', 'h', 't']
		['n', '_', 'a', '_', 'h', 't']
		SPLIT: ['n', '_', 'a', '_', 'ch', 't']
		['n', '_', 'a', '_', 'ch', 't']
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', 'e', '_', '_', '_']
		['n', '_', 'e', '_', '_', '_']
		SPLIT: ['n', '_', 'o', '_', '_', '_']
		['n', '_', 'o', '_', '_', '_']
		SPLIT: ['n', '_', 'o', '_', 'c', 't']
		['n', '_', 'o', '_', 'c', 't']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', 'o', '_', 'h', '_']
		['n', '_', 'o', '_', 'h', '_']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['h']", "['_']"]
		SPLIT: ['n', '_', 'o', '_', 'h', 't']
		['n', '_', 'o', '_', 'h', 't']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['h']", "['_']"]
		SPLIT: ['n', '_', 'o', '_', 'ch', 't']
		['n', '_', 'o', '_', 'ch', 't']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['c', 'ch']", "['t']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', 'o', '_', '_', 't']
		['n', '_', 'o', '_', '_', 't']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', '_', 'o', '_', 'þ', 't']
		['n', '_', 'o', '_', 'þ', 't']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']", "['_']"]
		version for pattern CVVCCC is INVALID
		[{'_', 'aƿ', 'o'}, {'_', 'c', 'ȝ'}]
		29
		OVERVIEW: version for pattern CVVCCC
{'_', 'aƿ', 'o'}, {'_', 'c', 'ȝ'}
faulty splits: 29
['n']['']['a'][''][''][''] <-! nast
['n']['']['a'][''][''][''] <-! nauht
['n']['']['a'][''][''][''] <-! naut
['n']['']['a'][''][''][''] <-! naƿiht
['n']['']['a'][''][''][''] <-! nawiht
['n']['']['a'][''][''][''] <-! nawiþ
['n']['']['a'][''][''][''] <-! naƿt
['n']['']['a'][''][''][''] <-! nayt
['n']['']['a'][''][''][''] <-! naȝt
['n']['']['o'][''][''][''] <-! noght
['n']['']['o'][''][''][''] <-! nogt
['n']['']['o']['']['h'][''] <-! nohht
['n']['']['o']['']['h'][''] <-! nohut
['n']['']['o']['']['c', 'ch']['t'] <-! nochte
['n']['']['o'][''][''][''] <-! nost
['n']['']['o'][''][''][''] <-! nouht
['n']['']['o'][''][''][''] <-! nout
['n']['']['o'][''][''][''] <-! nouth
['n']['']['o'][''][''][''] <-! nouȝt
['n']['']['o'][''][''][''] <-! noƿiht
['n']['']['o'][''][''][''] <-! nowiht
['n']['']['o'][''][''][''] <-! noƿit
['n']['']['o'][''][''][''] <-! nowit
['n']['']['o'][''][''][''] <-! nowiȝt
['n']['']['o'][''][''][''] <-! noƿt
['n']['']['o'][''][''][''] <-! nowt
['n']['']['o'][''][''][''] <-! nowth
['n']['']['o'][''][''][''] <-! noȝt
['n']['']['o'][''][''][''] <-! noȝte
n | aƿ | i | c | h | t
n | o | u | ȝ | h | t
n | _ | a | _ | _ | _
n | _ | a | _ | h | t
n | _ | a | _ | ch | t
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_'] | ['_']
n | _ | e | _ | _ | _
n | _ | o | _ | _ | _
n | _ | o | _ | c | t
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | o | _ | h | _
['n'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
n | _ | o | _ | h | t
['n'] | ['_'] | ['o'] | ['_'] | ['h'] | ['_']
n | _ | o | _ | ch | t
['n'] | ['_'] | ['o'] | ['_'] | ['c', 'ch'] | ['t']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | o | _ | _ | t
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
n | _ | o | _ | þ | t
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_'] | ['_']
1 : {'a', '_', 'aƿ', 'o'},{'a', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ou', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ou', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'oƿ', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'au', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'au', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ou', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'oƿ', 'aƿ', 'o'},{'_', 'aw', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'ou', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aw', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ay', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ou', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'oƿ', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'e', 'aƿ', 'o'},{'_', 'oƿ', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'aw', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'a', '_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aw', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'ow', 'aƿ', 'o'},{'_', 'aƿ', 'o'},{'_', 'oƿ', 'aƿ', 'o'},{'_', 'aƿ', 'o'}
3 : {'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ȝ'},{'_', 'c', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'_', 'c', 'y', 'ȝ'},{'_', 'c', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ch', 'ȝ'},{'_', 'c', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 's', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 'ȝ', 'w'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'ch', 'ȝ'},{'_', 'c', 'ȝ', 'þ'},{'_', 'c', 'ȝ', 'w'},{'gh', '_', 'c', 'ȝ'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 't', 'ȝ'},{'_', 'c', 'g', 'ȝ'},{'_', 'c', 'ch', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'ȝ', 'w'},{'_', 'c', 's', 'ȝ'},{'h', '_', 'c', 'ȝ'},{'_', 'c', 'y', 'ȝ'},{'_', 'c', 'u', 'ȝ'},{'_', 'c', 'hu', 'ȝ'},{'_', 'c', 'g', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'},{'_', 'c', 'ƿ', 'ȝ'}
4 : {'ƿ', 'c', 'ch', 'h', '_'},{'c', 's', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ȝ', 'ch', 'h', '_', 'þ'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'y'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'c', 't', 'ch', 'h', '_'},{'c', 'ch', 'h', 'g', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'y'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 's', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ȝ', 'ch', 'h', '_', 'þ'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'gh', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'g', '_'},{'c', 'ȝ', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'}
5 : {'_', 't', 'w'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'g'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 't', 'g'},{'_', 't', 'u'},{'_', 't', 'w'},{'h', '_', 't'},{'_', 't', 'w'},{'_', 'ȝ', 't'},{'_', 'ȝ', 't'},{'_', 's', 't'},{'_', 't', 'w'},{'_', 'ȝ', 't'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'y'},{'_', 'ƿ', 't'},{'_', 't', 'y'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 's', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'gh', '_', 't'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: noȝte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/ou/ȝ/h/t
					TRYING: n
					> version: n/ou/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCV : 1___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: noȝte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					> version: n/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					> version: n/a/u/h/t
					TRYING: a
					> version: n/au/h/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					> version: n/a/u/t
					TRYING: a
					> version: n/au/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					> version: n/a/y/t
					TRYING: a
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> a, ay, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> a, au, o, e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					> version: n/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					> version: n/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					> version: n/o/u/h/t
					TRYING: o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					> version: n/o/u/t
					TRYING: o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'th']
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 'h', 't']
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					> version: n/o/w/i/t
					TRYING: o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					> version: n/o/w/th
					TRYING: o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
			___CVCCV : 2___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: noȝte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_']
				n/a(CV)
n/a/_(CVA)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, ch, h, _
					> version: n/a/ch/t
					TRYING: ch
					RESULT:  ['ch']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c', 'rgx': '((n))/((a))/((ch))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch', 'rgx': '((n))/((a))/((ch))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s', 'rgx': '((n))/((a))/((s))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/au/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h', 'rgx': '((n))/((a)|(au))/((h))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/a/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/au/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', 'au', '_', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/au/t(CVC)
n/a/_/u/t(CVAAC)
n/a/_/u/t(CVAAC)
n/au/_/t(CVAC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'au', 't']
				{'string': 'n/au/t', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'au', 't']
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				version split: ['n', 'au', '_', 't']
				{'string': 'n/au/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				n/a/ƿ/i/h/t(CVCCCC)
n/a/ƿ/i/h/t(CVCVCC)
n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/ƿ/i/h/t(CVACACC)
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'h', 't']
				n/a/w/i/h/t(CVCCCC)
n/a/w/i/h/t(CVCVCC)
n/a/_/w/i/h/t(CVACACC)
n/a/_/w/i/h/t(CVACACC)
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				n/a/ƿ/i/c/h/t(CVCCCCC)
n/a/ƿ/i/c/h/t(CVCVCCC)
n/a/ƿ/i/ch/t(CVCCCC)
n/a/ƿ/i/ch/t(CVCVCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/ƿ/i/ch/t(CVACACC)
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/a/_/w/i/þ(CVACAC)
n/a/_/w/i/þ(CVACAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 't']
				n/a/ƿ/t(CVCC)
n/a/_/ƿ/t(CVACC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'a', '_', 'ƿ', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ȝ, s, ch, h, _, y
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ȝ, s, ch, h, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ', 'rgx': '((n))/((a))/((ȝ))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e']
				n/_/e(CAV)
n/_/_/e(CAAV)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_']
				n/o(CV)
n/o/_(CVA)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 't']
				n/o/c/t(CVCC)
n/o/_/c/t(CVACC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, ch, h, g, _
					> version: n/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, s, ch, gh, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o/gh', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, ch, h, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 't']
				n/o/g/t(CVCC)
n/o/_/g/t(CVACC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> ȝ, hu, s, ch, h, _
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o/hu', 'rgx': '((n))/((o))/((h))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, s, ch, h, _
					> version: n/o/ch/t
					TRYING: ch
					RESULT:  ['ch']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((ch))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((ch))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s', 'rgx': '((n))/((o))/((s))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 't']
				n/o/t(CVC)
n/o/_/t(CVAC)
				version split: ['n', 'o', 't']
				{'string': 'n/o/t', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/o/_/u/h/t(CVAACC)
n/o/_/u/h/t(CVAACC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/o/_/u/t(CVAAC)
n/o/_/u/t(CVAAC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/th
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/th
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'u', 'th']
				adding dashed alternative: ['n', 'o', '_', 'u', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/th(CVAAC)
n/o/_/u/th(CVAAC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝh', 't']
				n/o/u/ȝ/h/t(CVCCCC)
n/o/u/ȝ/h/t(CVVCCC)
n/o/u/ȝh/t(CVCCC)
n/o/u/ȝh/t(CVVCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/u/ȝh/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					> version: n/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/o/_/u/ȝ/t(CVAACC)
n/o/_/u/ȝ/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				n/o/ƿ/i/h/t(CVCCCC)
n/o/ƿ/i/h/t(CVCVCC)
n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/ƿ/i/h/t(CVACACC)
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'h', 't']
				n/o/w/i/h/t(CVCCCC)
n/o/w/i/h/t(CVCVCC)
n/o/_/w/i/h/t(CVACACC)
n/o/_/w/i/h/t(CVACACC)
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/o/_/ƿ/i/t(CVACAC)
n/o/_/ƿ/i/t(CVACAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/o/_/w/i/t(CVACAC)
n/o/_/w/i/t(CVACAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				n/o/w/i/ȝ/t(CVCCCC)
n/o/w/i/ȝ/t(CVCVCC)
n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/w/i/ȝ/t(CVACACC)
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 't']
				n/o/ƿ/t(CVCC)
n/o/_/ƿ/t(CVACC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'o', '_', 'ƿ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 't']
				n/o/w/t(CVCC)
n/o/_/w/t(CVACC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'o', '_', 'w', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					> version: n/o/w/th
					TRYING: w
					adding blocked set: C = C >> ȝ, s, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'w', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/o/_/w/t/h(CVACCC)
n/o/_/w/th(CVACC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'o', '_', 'w', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> ȝ, s, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'þ', 't']
				n/o/þ/t(CVCC)
n/o/_/þ/t(CVACC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o/þ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((ȝ))$'}
			___CVCCV : 3___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: noȝte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_']
				n/a/_(CVA)
n/a/_/_(CVAA)
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_']
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((t))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch/t', 'rgx': '((n))/((a))/((ch))/((t))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s/t', 'rgx': '((n))/((a))/((s))/((t))$'}
				ANALYSING: nauht
					resolving (1)
					> version: n/au/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h))/((t))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/au/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_/u', 'rgx': '((n))/((a)|(au))/((_))/((t))$'}
				_____REMOVING________['n', 'a', '_', 'u', 't']
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_/u', 'rgx': '((n))/((a)|(au))/((_))/((t))$'}
				_____REMOVING________['n', 'a', '_', 'u', 't']
				version split: ['n', 'au', '_', 't']
				{'string': 'n/au/_/t', 'rgx': '((n))/((a)|(au))/((_))/((t))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				n/a/_/w/i/h/t(CVACACC)
n/a/_/w/i/h/t(CVACACC)
n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/w/i/h/t(CVAACACC)
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				n/a/_/w/i/þ(CVACAC)
n/a/_/w/i/þ(CVACAC)
n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/w/i/þ(CVAACAC)
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 't']
				n/a/_/ƿ/t(CVACC)
n/a/_/_/ƿ/t(CVAACC)
				version split: ['n', 'a', '_', 'ƿ', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					> version: n/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'y', 't']
				n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
n/a/_/_/y/t(CVAAAC)
n/a/_/_/y/t(CVAAAC)
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ/t', 'rgx': '((n))/((a))/((ȝ))/((t))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'e']
				n/_/_/e(CAAV)
n/_/_/_/e(CAAAV)
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e']
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_']
				n/o/_(CVA)
n/o/_/_(CVAA)
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_']
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/c/t
					TRYING: c
					adding blocked set: C = C >> _, c, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 't']
				n/o/_/c/t(CVACC)
n/o/_/_/c/t(CVAACC)
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					> version: n/o/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'gh', 't']
				n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_/gh', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/g/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 't']
				n/o/_/g/t(CVACC)
n/o/_/_/g/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_']
				n/o/h(CVC)
n/o/h/_(CVCA)
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 'h', 't']
				n/o/h/h/t(CVCCC)
n/o/h/_/h/t(CVCACC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h/t', 'rgx': '((n))/((o))/((h))/((t))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/h/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', 'h', '_', 'u', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/h/_/u/t(CVCAAC)
n/o/h/_/u/t(CVCAAC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nocht
					resolving (1)
					> version: n/o/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch/t', 'rgx': '((n))/((o))/((ch))/((t))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s/t', 'rgx': '((n))/((o))/((s))/((t))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_/t', 'rgx': '((n))/((o))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'h', 't']
				n/o/_/u/h/t(CVAACC)
n/o/_/u/h/t(CVAACC)
n/o/_/_/u/h/t(CVAAACC)
n/o/_/_/u/h/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't']
				n/o/_/u/t(CVAAC)
n/o/_/u/t(CVAAC)
n/o/_/_/u/t(CVAAAC)
n/o/_/_/u/t(CVAAAC)
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't']
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'th']
				n/o/_/u/t/h(CVAACC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/th(CVAAC)
n/o/_/u/th(CVAAC)
n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/th(CVAAAC)
n/o/_/_/u/th(CVAAAC)
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'th']
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝh/t(CVAAACC)
n/o/_/_/u/ȝh/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				n/o/_/u/ȝ/t(CVAACC)
n/o/_/u/ȝ/t(CVAACC)
n/o/_/_/u/ȝ/t(CVAAACC)
n/o/_/_/u/ȝ/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				n/o/_/w/i/h/t(CVACACC)
n/o/_/w/i/h/t(CVACACC)
n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/w/i/h/t(CVAACACC)
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				n/o/_/ƿ/i/t(CVACAC)
n/o/_/ƿ/i/t(CVACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 't']
				n/o/_/w/i/t(CVACAC)
n/o/_/w/i/t(CVACAC)
n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/w/i/t(CVAACAC)
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 't']
				n/o/_/ƿ/t(CVACC)
n/o/_/_/ƿ/t(CVAACC)
				version split: ['n', 'o', '_', 'ƿ', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/_/w/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 't']
				n/o/_/w/t(CVACC)
n/o/_/_/w/t(CVAACC)
				version split: ['n', 'o', '_', 'w', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 't']
				version split: ['n', 'o', '_', '_', 'w', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'th']
				n/o/_/w/t/h(CVACCC)
n/o/_/w/th(CVACC)
n/o/_/_/w/t/h(CVAACCC)
n/o/_/_/w/th(CVAACC)
				version split: ['n', 'o', '_', 'w', 't', 'h']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', 'w', 'th']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'th']
				version split: ['n', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_/þ', 'rgx': '((n))/((o))/((_))/((þ))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((t))$'}
			___CVCCV : 4___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: noȝte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_']
				n/a/_/_(CVAA)
n/a/_/_/_(CVAAA)
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_']
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', 't', '_']
				n/a/h/t(CVCC)
n/a/h/t/_(CVCCA)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', 't', '_']
				{'string': 'n/a/h/t/_', 'rgx': '((n))/((a))/((h))/((t))/((_))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/ch/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ch', 't', '_']
				n/a/ch/t(CVCC)
n/a/ch/t/_(CVCCA)
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch/t', 'rgx': '((n))/((a))/((ch))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', 'a', 'ch', 't', '_']
				{'string': 'n/a/ch/t/_', 'rgx': '((n))/((a))/((ch))/((t))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 's', 't', '_']
				n/a/s/t(CVCC)
n/a/s/t/_(CVCCA)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s/t', 'rgx': '((n))/((a))/((s))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', 'a', 's', 't', '_']
				{'string': 'n/a/s/t/_', 'rgx': '((n))/((a))/((s))/((t))/((_))$'}
				ANALYSING: nauht
					resolving (1)
					> version: n/au/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'au', 'h', 't', '_']
				n/au/h/t(CVCC)
n/au/h/t/_(CVCCA)
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', 'au', 'h', 't', '_']
				{'string': 'n/au/h/t/_', 'rgx': '((n))/((a)|(au))/((h))/((t))/((_))$'}
				ANALYSING: naut
					resolving (1)
					> version: n/au/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'au', '_', 't', '_']
				n/au/_/t(CVAC)
n/au/_/t/_(CVACA)
				version split: ['n', 'au', '_', 't']
				{'string': 'n/au/_/t', 'rgx': '((n))/((a)|(au))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'au', '_', 't']
				version split: ['n', 'au', '_', 't', '_']
				{'string': 'n/au/_/t/_', 'rgx': '((n))/((a)|(au))/((_))/((t))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					> version: n/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/_/_/w/i/h/t
					TRYING: w
					> version: n/a/_/_/w/i/h/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/_/w/i/h/t(CVAAACACC)
n/a/_/_/_/w/i/h/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/_/_/ƿ/i/ch/t
					TRYING: ƿ
					> version: n/a/_/_/ƿ/i/ch/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/_/_/w/i/þ
					TRYING: w
					> version: n/a/_/_/w/i/þ
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/_/w/i/þ(CVAAACAC)
n/a/_/_/_/w/i/þ(CVAAACAC)
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/_/_/ƿ/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 't']
				n/a/_/_/ƿ/t(CVAACC)
n/a/_/_/_/ƿ/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/ƿ/t', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/_/y/t
					TRYING: y
					> version: n/a/_/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/y/t', 'rgx': '((n))/((a))/((_))/((_))/((y))$'}
				_____REMOVING________['n', 'a', '_', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/y/t', 'rgx': '((n))/((a))/((_))/((_))/((y))$'}
				_____REMOVING________['n', 'a', '_', '_', 'y', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', 't', '_']
				n/a/ȝ/t(CVCC)
n/a/ȝ/t/_(CVCCA)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ/t', 'rgx': '((n))/((a))/((ȝ))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', 'a', 'ȝ', 't', '_']
				{'string': 'n/a/ȝ/t/_', 'rgx': '((n))/((a))/((ȝ))/((t))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/e', 'rgx': '((n))/((_))/((_))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_']
				n/o/_/_(CVAA)
n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_']
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/_/c/t
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'c', 't']
				n/o/_/_/c/t(CVAACC)
n/o/_/_/_/c/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/c/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'c', 't']
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/g/h/t
					TRYING: g
					> version: n/o/_/_/gh/t
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'gh', 't']
				n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/g/h', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/gh/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 't']
				n/o/_/_/g/t(CVAACC)
n/o/_/_/_/g/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/g/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_']
				n/o/h/_(CVCA)
n/o/h/_/_(CVCAA)
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_']
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/_/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', 'h', 't']
				n/o/h/_/h/t(CVCACC)
n/o/h/_/_/h/t(CVCAACC)
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_/h/t', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'h', 't']
				version split: ['n', 'o', 'h', '_', '_', 'h', 't']
				{'string': 'n/o/h/_/_/h', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_', 'h', 't']
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', 't', '_']
				n/o/h/t(CVCC)
n/o/h/t/_(CVCCA)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h/t', 'rgx': '((n))/((o))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', 'o', 'h', 't', '_']
				{'string': 'n/o/h/t/_', 'rgx': '((n))/((o))/((h))/((t))/((_))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/_/u/t
					TRYING: u
					> version: n/o/h/_/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_/u/t', 'rgx': '((n))/((o))/((h))/((_))/((u))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'u', 't']
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_/u/t', 'rgx': '((n))/((o))/((h))/((_))/((u))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'u', 't']
				ANALYSING: nocht
					resolving (1)
					> version: n/o/ch/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ch', 't', '_']
				n/o/ch/t(CVCC)
n/o/ch/t/_(CVCCA)
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch/t', 'rgx': '((n))/((o))/((ch))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', 'o', 'ch', 't', '_']
				{'string': 'n/o/ch/t/_', 'rgx': '((n))/((o))/((ch))/((t))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 's', 't', '_']
				n/o/s/t(CVCC)
n/o/s/t/_(CVCCA)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s/t', 'rgx': '((n))/((o))/((s))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', 'o', 's', 't', '_']
				{'string': 'n/o/s/t/_', 'rgx': '((n))/((o))/((s))/((t))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 't', '_']
				n/o/_/t(CVAC)
n/o/_/t/_(CVACA)
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_/t', 'rgx': '((n))/((o))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'o', '_', 't']
				version split: ['n', 'o', '_', 't', '_']
				{'string': 'n/o/_/t/_', 'rgx': '((n))/((o))/((_))/((t))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/_/_/u/h/t
					TRYING: u
					> version: n/o/_/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/u/h', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/u/h', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'h', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/o/_/_/u/t
					TRYING: u
					> version: n/o/_/_/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't']
				ANALYSING: nouth
					resolving (4)
					> version: n/o/_/_/u/t/h
					TRYING: u
					> version: n/o/_/_/u/t/h
					TRYING: u
					> version: n/o/_/_/u/th
					TRYING: u
					> version: n/o/_/_/u/th
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/u/th', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/u/th', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'th']
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/_/_/u/ȝ/h/t
					TRYING: u
					> version: n/o/_/_/u/ȝ/h/t
					TRYING: u
					> version: n/o/_/_/u/ȝh/t
					TRYING: u
					> version: n/o/_/_/u/ȝh/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/u/ȝh', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/u/ȝh', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/_/_/u/ȝ/t
					TRYING: u
					> version: n/o/_/_/u/ȝ/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					> version: n/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/_/_/w/i/h/t
					TRYING: w
					> version: n/o/_/_/w/i/h/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/_/w/i/h/t(CVAAACACC)
n/o/_/_/_/w/i/h/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/_/_/ƿ/i/t
					TRYING: ƿ
					> version: n/o/_/_/ƿ/i/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/_/ƿ/i/t(CVAAACAC)
n/o/_/_/_/ƿ/i/t(CVAAACAC)
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				ANALYSING: nowit
					resolving (2)
					> version: n/o/_/_/w/i/t
					TRYING: w
					> version: n/o/_/_/w/i/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/_/w/i/t(CVAAACAC)
n/o/_/_/_/w/i/t(CVAAACAC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 't']
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/_/_/w/i/ȝ/t
					TRYING: w
					> version: n/o/_/_/w/i/ȝ/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/_/_/ƿ/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 't']
				n/o/_/_/ƿ/t(CVAACC)
n/o/_/_/_/ƿ/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/ƿ/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nowt
					resolving (1)
					> version: n/o/_/_/w/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 't']
				n/o/_/_/w/t(CVAACC)
n/o/_/_/_/w/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/w/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 't']
				ANALYSING: nowth
					resolving (2)
					> version: n/o/_/_/w/t/h
					TRYING: w
					> version: n/o/_/_/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'th']
				n/o/_/_/w/t/h(CVAACCC)
n/o/_/_/w/th(CVAACC)
n/o/_/_/_/w/t/h(CVAAACCC)
n/o/_/_/_/w/th(CVAAACC)
				version split: ['n', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/w/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/w/th', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'th']
				version split: ['n', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/þ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'þ', '_', 't']
				n/o/_/þ/t(CVACC)
n/o/_/þ/_/t(CVACAC)
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_/þ/t', 'rgx': '((n))/((o))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'þ', 't']
				version split: ['n', 'o', '_', 'þ', '_', 't']
				{'string': 'n/o/_/þ/_/t', 'rgx': '((n))/((o))/((_))/((þ))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'þ', '_', 't']
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', 't', '_']
				n/o/ȝ/t(CVCC)
n/o/ȝ/t/_(CVCCA)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', 'o', 'ȝ', 't', '_']
				{'string': 'n/o/ȝ/t/_', 'rgx': '((n))/((o))/((ȝ))/((t))/((_))$'}
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', '_', '_', '_']
		only one version left: ['n', 'a', 'h', 't', '_']
		only one version left: ['n', 'a', 'ch', 't', '_']
		only one version left: ['n', 'a', 's', 't', '_']
		only one version left: ['n', 'au', 'h', 't', '_']
		only one version left: ['n', 'au', '_', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', 'ȝ', 't', '_']
		only one version left: ['n', '_', '_', '_', 'e']
		only one version left: ['n', 'o', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'h', '_', '_']
		FAIL: 
		only one version left: ['n', 'o', 'h', 't', '_']
		FAIL: 
		only one version left: ['n', 'o', 'ch', 't', '_']
		only one version left: ['n', 'o', 's', 't', '_']
		only one version left: ['n', 'o', '_', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'ȝ', 't', '_']
		SPLIT: ['n', 'o', 'ch', 't', 'e']
		SPLIT: ['n', 'o', 'ȝ', 't', 'e']
		SPLIT: ['n', 'a', '_', '_', '_']
		['n', 'a', '_', '_', '_']
		SPLIT: ['n', 'a', 'h', 't', '_']
		['n', 'a', 'h', 't', '_']
		SPLIT: ['n', 'a', 'ch', 't', '_']
		['n', 'a', 'ch', 't', '_']
		SPLIT: ['n', 'a', 's', 't', '_']
		['n', 'a', 's', 't', '_']
		SPLIT: ['n', 'au', 'h', 't', '_']
		['n', 'au', 'h', 't', '_']
		SPLIT: ['n', 'au', '_', 't', '_']
		['n', 'au', '_', 't', '_']
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['y']"]
		SPLIT: ['n', 'a', 'ȝ', 't', '_']
		['n', 'a', 'ȝ', 't', '_']
		SPLIT: ['n', '_', '_', '_', 'e']
		['n', '_', '_', '_', 'e']
		SPLIT: ['n', 'o', '_', '_', '_']
		['n', 'o', '_', '_', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', '_', '_']
		['n', 'o', 'h', '_', '_']
		SPLIT: ["['n']", "['o']", "['h']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', 't', '_']
		['n', 'o', 'h', 't', '_']
		SPLIT: ["['n']", "['o']", "['h']", "['_']", "['u']"]
		SPLIT: ['n', 'o', 'ch', 't', '_']
		['n', 'o', 'ch', 't', '_']
		SPLIT: ['n', 'o', 's', 't', '_']
		['n', 'o', 's', 't', '_']
		SPLIT: ['n', 'o', '_', 't', '_']
		['n', 'o', '_', 't', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['þ']", "['_']"]
		SPLIT: ['n', 'o', 'ȝ', 't', '_']
		['n', 'o', 'ȝ', 't', '_']
		version for pattern CVCCV is INVALID
		[]
		25
		OVERVIEW: version for pattern CVCCV

faulty splits: 25
['n']['a'][''][''][''] <-! naƿiht
['n']['a'][''][''][''] <-! nawiht
['n']['a'][''][''][''] <-! naƿicht
['n']['a'][''][''][''] <-! nawiþ
['n']['a'][''][''][''] <-! naƿt
['n']['a']['']['']['y'] <-! nayt
['n']['o'][''][''][''] <-! noct
['n']['o'][''][''][''] <-! noght
['n']['o'][''][''][''] <-! nogt
['n']['o']['h'][''][''] <-! nohht
['n']['o']['h']['']['u'] <-! nohut
['n']['o']['']['']['u'] <-! nouht
['n']['o']['']['']['u'] <-! nout
['n']['o']['']['']['u'] <-! nouth
['n']['o']['']['']['u'] <-! nouȝht
['n']['o']['']['']['u'] <-! nouȝt
['n']['o'][''][''][''] <-! noƿiht
['n']['o'][''][''][''] <-! nowiht
['n']['o'][''][''][''] <-! noƿit
['n']['o'][''][''][''] <-! nowit
['n']['o'][''][''][''] <-! nowiȝt
['n']['o'][''][''][''] <-! noƿt
['n']['o'][''][''][''] <-! nowt
['n']['o'][''][''][''] <-! nowth
['n']['o']['']['þ'][''] <-! noþt
n | o | ch | t | e
n | o | ȝ | t | e
n | a | _ | _ | _
n | a | h | t | _
n | a | ch | t | _
n | a | s | t | _
n | au | h | t | _
n | au | _ | t | _
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['y']
n | a | ȝ | t | _
n | _ | _ | _ | e
n | o | _ | _ | _
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
n | o | h | _ | _
['n'] | ['o'] | ['h'] | ['_'] | ['_']
n | o | h | t | _
['n'] | ['o'] | ['h'] | ['_'] | ['u']
n | o | ch | t | _
n | o | s | t | _
n | o | _ | t | _
['n'] | ['o'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['þ'] | ['_']
n | o | ȝ | t | _
1 : {'a', 'au', 'o', 'e'}
2 : {'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'y'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'y'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'gh', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 'c', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ƿ', 'ȝ', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'u'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 's', 'ch', 'h', 'w', '_'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 's', 'ch', 'h', 'w', '_'}
3 : {'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 'c', 't'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'h', '_', 't'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'gh', '_', 't'},{'_', 't', 'g'},{'_', 't', 'g'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'y'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'y'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCVCC
	Selection for pattern: CVCVCC completed
	Making a version for pattern: CVCVCC
			___CVCVCC : 0___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/ou/ȝ/h/t
					TRYING: n
					> version: n/ou/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCVCC : 1___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					> version: n/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					> version: n/a/u/h/t
					TRYING: a
					> version: n/au/h/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					> version: n/a/u/t
					TRYING: a
					> version: n/au/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					> version: n/a/y/t
					TRYING: a
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> a, ay, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> a, au, o, e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					> version: n/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					> version: n/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					> version: n/o/ch/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					> version: n/o/u/h/t
					TRYING: o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					> version: n/o/u/t
					TRYING: o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'th']
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 'h', 't']
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					> version: n/o/w/i/t
					TRYING: o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					> version: n/o/w/th
					TRYING: o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
			___CVCVCC : 2___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_']
				n/a(CV)
n/a/_(CVA)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> ƿ, c, h, w, _
					> version: n/a/ch/t
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ch', 't']
				n/a/c/h/t(CVCCC)
n/a/ch/t(CVCC)
n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: s
					adding blocked set: C = C >> ƿ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 's', 't']
				n/a/s/t(CVCC)
n/a/_/s/t(CVACC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: u
					> version: n/a/u/h/t
					TRYING: u
					> version: n/au/h/t
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					RESULT:  ['h', 'u']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: u
					> version: n/a/u/t
					TRYING: u
					> version: n/au/t
					TRYING: t
					adding blocked set: C = C >> ƿ, t, h, w, _, u
					RESULT:  ['u']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au/t', 'rgx': '((n))/((a)|(au))/((u))$'}
				_____REMOVING________['n', 'au', 't']
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: w
					> version: n/a/w/i/þ
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ', 'rgx': '((n))/((a))/((ȝ))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e']
				n/_/e(CAV)
n/_/_/e(CAAV)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_']
				n/o(CV)
n/o/_(CVA)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 't']
				n/o/c/t(CVCC)
n/o/_/c/t(CVACC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> ƿ, ȝ, h, w, g, _, u
					> version: n/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> ƿ, ȝ, gh, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o/gh', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: g
					adding blocked set: C = C >> ƿ, ȝ, h, w, g, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 't']
				n/o/g/t(CVCC)
n/o/_/g/t(CVACC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> ƿ, ȝ, hu, h, w, _, u
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o/hu', 'rgx': '((n))/((o))/((h))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					> version: n/o/ch/t
					TRYING: ch
					adding blocked set: C = C >> ƿ, ȝ, ch, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'ch', 't']
				n/o/c/h/t(CVCCC)
n/o/ch/t(CVCC)
n/o/_/c/h/t(CVACCC)
n/o/_/ch/t(CVACC)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', 'o', '_', 'c', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ch', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					> version: n/o/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ƿ, ȝ, ch, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', 'o', '_', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/o/_/c/h/t/e(CVACCCV)
n/o/_/ch/t/e(CVACCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: s
					adding blocked set: C = C >> ƿ, ȝ, s, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 's', 't']
				n/o/s/t(CVCC)
n/o/_/s/t(CVACC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: t
					adding blocked set: C = C >> ƿ, ȝ, t, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 't']
				n/o/t(CVC)
n/o/_/t(CVAC)
				version split: ['n', 'o', 't']
				{'string': 'n/o/t', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: u
					> version: n/o/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: u
					> version: n/o/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: u
					> version: n/o/u/t/h
					TRYING: u
					> version: n/o/u/th
					TRYING: u
					> version: n/o/u/th
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: u
					> version: n/o/u/ȝ/h/t
					TRYING: u
					> version: n/o/u/ȝh/t
					TRYING: u
					> version: n/o/u/ȝh/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: u
					> version: n/o/u/ȝ/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/t
					TRYING: w
					> version: n/o/w/i/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: w
					> version: n/o/w/th
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> ƿ, ȝ, h, w, _, u, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'þ', 't']
				n/o/þ/t(CVCC)
n/o/_/þ/t(CVACC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o/þ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((ȝ))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((ȝ))$'}
			___CVCVCC : 3___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_']
				n/a/_(CVA)
n/a/_/_(CVAA)
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_']
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/c/h/t
					TRYING: c
					> version: n/a/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ch', 't']
				n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
n/a/_/_/c/h/t(CVAACCC)
n/a/_/_/ch/t(CVAACC)
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_/c', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_/ch', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 's', 't']
				n/a/_/s/t(CVACC)
n/a/_/_/s/t(CVAACC)
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 's', 't']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: h
					> version: n/a/u/h/t
					TRYING: h
					> version: n/au/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'au', 'h', '_', 't']
				n/a/u/h/t(CVCCC)
n/a/u/h/t(CVVCC)
n/au/h/t(CVCC)
n/a/u/_/h/t(CVAACC)
n/a/u/_/h/t(CVAACC)
n/au/h/_/t(CVCAC)
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/t
					TRYING: t
					> version: n/a/u/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/a/u/_/t(CVAAC)
n/a/u/_/t(CVAAC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: i
					> version: n/a/w/i/þ
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', 't']
				n/a/ƿ/t(CVCC)
n/a/ƿ/_/t(CVCAC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ/t', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: y
					> version: n/a/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', 't']
				n/a/ȝ/t(CVCC)
n/a/ȝ/_/t(CVCAC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ/t', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_']
				n/o/_(CVA)
n/o/_/_(CVAA)
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_']
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/c/t
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 't']
				n/o/_/c/t(CVACC)
n/o/_/_/c/t(CVAACC)
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/g/h/t
					TRYING: g
					> version: n/o/_/gh/t
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'gh', 't']
				n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_/gh', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 't']
				n/o/_/g/t(CVACC)
n/o/_/_/g/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_']
				n/o/h(CVC)
n/o/h/_(CVCA)
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 'h', 't']
				n/o/h/h/t(CVCCC)
n/o/h/_/h/t(CVCACC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 't']
				n/o/h/t(CVCC)
n/o/h/_/t(CVCAC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h/t', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/u/t
					TRYING: u
					> version: n/o/h/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((u))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((u))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/_/c/h/t
					TRYING: c
					> version: n/o/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ch', 't']
				n/o/_/c/h/t(CVACCC)
n/o/_/ch/t(CVACC)
n/o/_/_/c/h/t(CVAACCC)
n/o/_/_/ch/t(CVAACC)
				version split: ['n', 'o', '_', 'c', 'h', 't']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 'h', 't']
				version split: ['n', 'o', '_', 'ch', 't']
				{'string': 'n/o/_/ch', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ch', 't']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/_/c/h/t/e
					TRYING: c
					> version: n/o/_/ch/t/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'ch', 't', 'e']
				n/o/_/c/h/t/e(CVACCCV)
n/o/_/ch/t/e(CVACCV)
n/o/_/_/c/h/t/e(CVAACCCV)
n/o/_/_/ch/t/e(CVAACCV)
				version split: ['n', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 'h', 't', 'e']
				version split: ['n', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/ch', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ch', 't', 'e']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 's', 't']
				n/o/_/s/t(CVACC)
n/o/_/_/s/t(CVAACC)
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_/s', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 's', 't']
				version split: ['n', 'o', '_', '_', 's', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 't']
				n/o/_/t(CVAC)
n/o/_/_/t(CVAAC)
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_/t', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 't']
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: h
					> version: n/o/u/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/o/u/_/h/t(CVAACC)
n/o/u/_/h/t(CVAACC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u/h', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u/h', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: t
					> version: n/o/u/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/o/u/_/t(CVAAC)
n/o/u/_/t(CVAAC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: t
					> version: n/o/u/t/h
					TRYING: t
					> version: n/o/u/th
					TRYING: th
					> version: n/o/u/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', 'th']
				adding dashed alternative: ['n', 'o', 'u', '_', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/o/u/_/t/h(CVAACC)
n/o/u/_/t/h(CVAACC)
n/o/u/_/th(CVAAC)
n/o/u/_/th(CVAAC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u/th', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u/th', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/ȝh/t
					TRYING: ȝh
					> version: n/o/u/ȝh/t
					TRYING: ȝh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝh', 't']
				n/o/u/ȝ/h/t(CVCCCC)
n/o/u/ȝ/h/t(CVVCCC)
n/o/u/ȝh/t(CVCCC)
n/o/u/ȝh/t(CVVCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝh/t(CVAACC)
n/o/u/_/ȝh/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u/ȝh', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u/ȝh', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: ȝ
					> version: n/o/u/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/o/u/_/ȝ/t(CVAACC)
n/o/u/_/ȝ/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/t
					TRYING: i
					> version: n/o/ƿ/i/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ/i', 'rgx': '((n))/((o))/((ƿ))/((i))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ/i', 'rgx': '((n))/((o))/((ƿ))/((i))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/t
					TRYING: i
					> version: n/o/w/i/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ƿ', '_', 't']
				n/o/ƿ/t(CVCC)
n/o/ƿ/_/t(CVCAC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ/t', 'rgx': '((n))/((o))/((ƿ))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'o', 'ƿ', '_', 't']
				{'string': 'n/o/ƿ/_', 'rgx': '((n))/((o))/((ƿ))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', 't']
				n/o/w/t(CVCC)
n/o/w/_/t(CVCAC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w/t', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'o', 'w', '_', 't']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: t
					> version: n/o/w/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'w', '_', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/o/w/_/t/h(CVCACC)
n/o/w/_/th(CVCAC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w/t', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w/th', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'o', 'w', '_', 't', 'h']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				version split: ['n', 'o', 'w', '_', 'th']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/þ/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'þ', 't']
				n/o/_/þ/t(CVACC)
n/o/_/_/þ/t(CVAACC)
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_/þ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'þ', 't']
				version split: ['n', 'o', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', 't']
				n/o/ȝ/t(CVCC)
n/o/ȝ/_/t(CVCAC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', 'o', 'ȝ', '_', 't']
				{'string': 'n/o/ȝ/_', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/o/ȝ/_/t/e(CVCACV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', 'o', 'ȝ', '_', 't', 'e']
				{'string': 'n/o/ȝ/_', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
			___CVCVCC : 4___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_']
				n/a/_/_(CVAA)
n/a/_/_/_(CVAAA)
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_']
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', '_', 't']
				n/a/h/_/t(CVCAC)
n/a/h/_/_/t(CVCAAC)
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'h', '_', 't']
				version split: ['n', 'a', 'h', '_', '_', 't']
				{'string': 'n/a/h/_/_', 'rgx': '((n))/((a))/((h))/((_))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, ch, h, _
					> version: n/a/_/_/ch/t
					TRYING: ch
					RESULT:  ['ch']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/c', 'rgx': '((n))/((a))/((_))/((_))/((ch))$'}
				_____REMOVING________['n', 'a', '_', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/ch', 'rgx': '((n))/((a))/((_))/((_))/((ch))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_/s', 'rgx': '((n))/((a))/((_))/((_))/((s))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/_/h/t
					TRYING: h
					> version: n/a/u/_/h/t
					TRYING: h
					> version: n/au/h/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['h']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((h))$'}
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((h))$'}
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((h))$'}
				_____REMOVING________['n', 'au', 'h', '_', 't']
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/a/u/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', '_', 't']
				n/a/u/_/t(CVAAC)
n/a/u/_/t(CVAAC)
n/a/u/_/_/t(CVAAAC)
n/a/u/_/_/t(CVAAAC)
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 't']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'u', '_', 't']
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: þ
					adding blocked set: C = C >> ȝ, s, ch, h, _, þ
					> version: n/a/w/i/þ
					TRYING: þ
					adding blocked set: C = C >> ȝ, s, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/a/w/i/_/þ(CVCAAC)
n/a/w/i/_/þ(CVCAAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w/i/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', '_', 't']
				n/a/ƿ/_/t(CVCAC)
n/a/ƿ/_/_/t(CVCAAC)
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', '_', 't']
				version split: ['n', 'a', 'ƿ', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/a/_/y/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', '_', 't']
				n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
n/a/_/y/_/t(CVAAAC)
n/a/_/y/_/t(CVAAAC)
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_', 'rgx': '((n))/((a))/((_))/((y))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', '_', 't']
				n/a/ȝ/_/t(CVCAC)
n/a/ȝ/_/_/t(CVCAAC)
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', '_', 't']
				version split: ['n', 'a', 'ȝ', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e', '_']
				n/_/_/e(CAAV)
n/_/_/e/_(CAAVA)
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e']
				version split: ['n', '_', '_', 'e', '_']
				{'string': 'n/_/_/e/_', 'rgx': '((n))/((_))/((_))/((e))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_']
				n/o/_/_(CVAA)
n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_']
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/_/c/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'c', 't']
				n/o/_/_/c/t(CVAACC)
n/o/_/_/_/c/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, ch, h, g, _
					> version: n/o/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, s, ch, gh, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'gh', 't']
				n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, ch, h, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 't']
				n/o/_/_/g/t(CVAACC)
n/o/_/_/_/g/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_']
				n/o/h/_(CVCA)
n/o/h/_/_(CVCAA)
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_']
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_/h', 'rgx': '((n))/((o))/((h))/((_))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', 't']
				n/o/h/_/t(CVCAC)
n/o/h/_/_/t(CVCAAC)
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_/t', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 't']
				version split: ['n', 'o', 'h', '_', '_', 't']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/u/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/h/u/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', 'u', '_', 't']
				adding dashed alternative: ['n', 'o', 'h', 'u', '_', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/h/u/_/t(CVCAAC)
n/o/h/u/_/t(CVCAAC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u/t', 'rgx': '((n))/((o))/((h))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u/t', 'rgx': '((n))/((o))/((h))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', '_', 't']
				{'string': 'n/o/h/u/_', 'rgx': '((n))/((o))/((h))/((u))/((_))$'}
				version split: ['n', 'o', 'h', 'u', '_', 't']
				{'string': 'n/o/h/u/_', 'rgx': '((n))/((o))/((h))/((u))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/_/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, s, ch, h, _
					> version: n/o/_/_/ch/t
					TRYING: ch
					RESULT:  ['ch']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't']
				{'string': 'n/o/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((ch))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_/ch', 'rgx': '((n))/((o))/((_))/((_))/((ch))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/_/_/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> ȝ, c, s, ch, h, _
					> version: n/o/_/_/ch/t/e
					TRYING: ch
					RESULT:  ['ch']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((ch))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				version split: ['n', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_/ch', 'rgx': '((n))/((o))/((_))/((_))/((ch))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/_/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'o', '_', '_', 's', 't']
				{'string': 'n/o/_/_/s', 'rgx': '((n))/((o))/((_))/((_))/((s))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 't']
				n/o/_/_/t(CVAAC)
n/o/_/_/_/t(CVAAAC)
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 't']
				version split: ['n', 'o', '_', '_', '_', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/_/h/t
					TRYING: h
					> version: n/o/u/_/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h', 'rgx': '((n))/((o))/((u))/((_))/((h))$'}
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h', 'rgx': '((n))/((o))/((u))/((_))/((h))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/u/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 't']
				n/o/u/_/t(CVAAC)
n/o/u/_/t(CVAAC)
n/o/u/_/_/t(CVAAAC)
n/o/u/_/_/t(CVAAAC)
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't']
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't']
				version split: ['n', 'o', 'u', '_', '_', 't']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				version split: ['n', 'o', 'u', '_', '_', 't']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/u/_/t/h
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> ȝ, s, ch, th, h, _
					> version: n/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> ȝ, s, ch, th, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'th']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'th']
				n/o/u/_/t/h(CVAACC)
n/o/u/_/t/h(CVAACC)
n/o/u/_/th(CVAAC)
n/o/u/_/th(CVAAC)
n/o/u/_/_/t/h(CVAAACC)
n/o/u/_/_/t/h(CVAAACC)
n/o/u/_/_/th(CVAAAC)
n/o/u/_/_/th(CVAAAC)
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_/th', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'th']
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_/th', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'th']
				version split: ['n', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				version split: ['n', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				version split: ['n', 'o', 'u', '_', '_', 'th']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				version split: ['n', 'o', 'u', '_', '_', 'th']
				{'string': 'n/o/u/_/_', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/_/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/_/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝ, s, ch, h, ȝh, _
					> version: n/o/u/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> ȝ, s, ch, h, ȝh, _
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/ȝh', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/ȝh', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/_/ȝ/t
					TRYING: ȝ
					> version: n/o/u/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/ƿ/i/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ƿ', 'i', '_', 't']
				adding dashed alternative: ['n', 'o', 'ƿ', 'i', '_', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/o/ƿ/i/_/t(CVCAAC)
n/o/ƿ/i/_/t(CVCAAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ/i/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ/i/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', '_', 't']
				{'string': 'n/o/ƿ/i/_', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				version split: ['n', 'o', 'ƿ', 'i', '_', 't']
				{'string': 'n/o/ƿ/i/_', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/w/i/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 't']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/o/w/i/_/t(CVCAAC)
n/o/w/i/_/t(CVCAAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w/i/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w/i/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', '_', 't']
				{'string': 'n/o/w/i/_', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				version split: ['n', 'o', 'w', 'i', '_', 't']
				{'string': 'n/o/w/i/_', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ƿ', '_', '_', 't']
				n/o/ƿ/_/t(CVCAC)
n/o/ƿ/_/_/t(CVCAAC)
				version split: ['n', 'o', 'ƿ', '_', 't']
				{'string': 'n/o/ƿ/_/t', 'rgx': '((n))/((o))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', '_', 't']
				version split: ['n', 'o', 'ƿ', '_', '_', 't']
				{'string': 'n/o/ƿ/_/_', 'rgx': '((n))/((o))/((ƿ))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', '_', 't']
				n/o/w/_/t(CVCAC)
n/o/w/_/_/t(CVCAAC)
				version split: ['n', 'o', 'w', '_', 't']
				{'string': 'n/o/w/_/t', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'w', '_', 't']
				version split: ['n', 'o', 'w', '_', '_', 't']
				{'string': 'n/o/w/_/_', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/_/t/h
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					> version: n/o/w/_/th
					TRYING: th
					adding blocked set: C = C >> ȝ, s, ch, th, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'w', '_', '_', 'th']
				n/o/w/_/t/h(CVCACC)
n/o/w/_/th(CVCAC)
n/o/w/_/_/t/h(CVCAACC)
n/o/w/_/_/th(CVCAAC)
				version split: ['n', 'o', 'w', '_', 't', 'h']
				{'string': 'n/o/w/_/t', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'w', '_', 't', 'h']
				version split: ['n', 'o', 'w', '_', 'th']
				{'string': 'n/o/w/_/th', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'w', '_', 'th']
				version split: ['n', 'o', 'w', '_', '_', 't', 'h']
				{'string': 'n/o/w/_/_', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				version split: ['n', 'o', 'w', '_', '_', 'th']
				{'string': 'n/o/w/_/_', 'rgx': '((n))/((o))/((w))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> ȝ, s, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'þ', 't']
				n/o/_/_/þ/t(CVAACC)
n/o/_/_/_/þ/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_/þ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'þ', 't']
				version split: ['n', 'o', '_', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', '_', 't']
				n/o/ȝ/_/t(CVCAC)
n/o/ȝ/_/_/t(CVCAAC)
				version split: ['n', 'o', 'ȝ', '_', 't']
				{'string': 'n/o/ȝ/_/t', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', '_', 't']
				version split: ['n', 'o', 'ȝ', '_', '_', 't']
				{'string': 'n/o/ȝ/_/_', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/_/t/e
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', '_', 't', 'e']
				n/o/ȝ/_/t/e(CVCACV)
n/o/ȝ/_/_/t/e(CVCAACV)
				version split: ['n', 'o', 'ȝ', '_', 't', 'e']
				{'string': 'n/o/ȝ/_/t', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', '_', 't', 'e']
				version split: ['n', 'o', 'ȝ', '_', '_', 't', 'e']
				{'string': 'n/o/ȝ/_/_', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))$'}
			___CVCVCC : 5___
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_']
				n/a/_/_/_(CVAAA)
n/a/_/_/_/_(CVAAAA)
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_']
				version split: ['n', 'a', '_', '_', '_', '_']
				{'string': 'n/a/_/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', '_', 't']
				{'string': 'n/a/h/_/_/t', 'rgx': '((n))/((a))/((h))/((_))/((_))/((t))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/_/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/ch/t', 'rgx': '((n))/((a))/((_))/((_))/((ch))/((t))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_/s/t', 'rgx': '((n))/((a))/((_))/((_))/((s))/((t))$'}
				ANALYSING: nauht
					resolving (2)
					> version: n/a/u/_/h/t
					TRYING: t
					> version: n/a/u/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((h))/((t))$'}
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((h))/((t))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/_/t
					TRYING: t
					> version: n/a/u/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((t))$'}
				version split: ['n', 'a', 'u', '_', '_', 't']
				{'string': 'n/a/u/_/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((_))/((t))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/_/þ
					TRYING: þ
					> version: n/a/w/i/_/þ
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))$'}
				version split: ['n', 'a', 'w', 'i', '_', 'þ']
				{'string': 'n/a/w/i/_/þ', 'rgx': '((n))/((a))/((w))/((i))/((_))/((þ))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ƿ', '_', '_', 't']
				{'string': 'n/a/ƿ/_/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((_))/((t))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/_/t
					TRYING: t
					> version: n/a/_/y/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((t))$'}
				version split: ['n', 'a', '_', 'y', '_', 't']
				{'string': 'n/a/_/y/_/t', 'rgx': '((n))/((a))/((_))/((y))/((_))/((t))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ȝ', '_', '_', 't']
				{'string': 'n/a/ȝ/_/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((_))/((t))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e', '_', '_']
				n/_/_/e/_(CAAVA)
n/_/_/e/_/_(CAAVAA)
				version split: ['n', '_', '_', 'e', '_']
				{'string': 'n/_/_/e/_', 'rgx': '((n))/((_))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e', '_']
				version split: ['n', '_', '_', 'e', '_', '_']
				{'string': 'n/_/_/e/_/_', 'rgx': '((n))/((_))/((_))/((e))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_']
				n/o/_/_/_(CVAAA)
n/o/_/_/_/_(CVAAAA)
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_']
				version split: ['n', 'o', '_', '_', '_', '_']
				{'string': 'n/o/_/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/_/_/c/t
					TRYING: c
					adding blocked set: C = C >> _, c, t, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'c', 't']
				n/o/_/_/_/c/t(CVAAACC)
n/o/_/_/_/_/c/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/_/c/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'c', 't']
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, t, g, þ
					> version: n/o/_/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, t, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'gh', 't']
				n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
n/o/_/_/_/_/g/h/t(CVAAAACCC)
n/o/_/_/_/_/gh/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/g/h', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/gh/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> _, t, g, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'g', 't']
				n/o/_/_/_/g/t(CVAAACC)
n/o/_/_/_/_/g/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/g/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', '_']
				n/o/h/_/_(CVCAA)
n/o/h/_/_/_(CVCAAA)
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_']
				version split: ['n', 'o', 'h', '_', '_', '_']
				{'string': 'n/o/h/_/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_/h/t', 'rgx': '((n))/((o))/((h))/((_))/((h))/((t))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', '_', '_', 't']
				{'string': 'n/o/h/_/_/t', 'rgx': '((n))/((o))/((h))/((_))/((_))/((t))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/u/_/t
					TRYING: t
					> version: n/o/h/u/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', 'u', '_', 't']
				{'string': 'n/o/h/u/_/t', 'rgx': '((n))/((o))/((h))/((u))/((_))/((t))$'}
				version split: ['n', 'o', 'h', 'u', '_', 't']
				{'string': 'n/o/h/u/_/t', 'rgx': '((n))/((o))/((h))/((u))/((_))/((t))$'}
				ANALYSING: nocht
					resolving (1)
					> version: n/o/_/_/ch/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_/ch/t', 'rgx': '((n))/((o))/((_))/((_))/((ch))/((t))$'}
				ANALYSING: nochte
					resolving (1)
					> version: n/o/_/_/ch/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_/ch/t/e', 'rgx': '((n))/((o))/((_))/((_))/((ch))/((t))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/_/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', 's', 't']
				{'string': 'n/o/_/_/s/t', 'rgx': '((n))/((o))/((_))/((_))/((s))/((t))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', '_', 't']
				{'string': 'n/o/_/_/_/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/_/h/t
					TRYING: t
					> version: n/o/u/_/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h/t', 'rgx': '((n))/((o))/((u))/((_))/((h))/((t))$'}
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h/t', 'rgx': '((n))/((o))/((u))/((_))/((h))/((t))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/_/_/t
					TRYING: t
					> version: n/o/u/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', '_', 't']
				{'string': 'n/o/u/_/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				version split: ['n', 'o', 'u', '_', '_', 't']
				{'string': 'n/o/u/_/_/t', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/_/_/t/h
					TRYING: t
					> version: n/o/u/_/_/t/h
					TRYING: t
					> version: n/o/u/_/_/th
					TRYING: th
					adding blocked set: C = C >> _, t, th, þ
					> version: n/o/u/_/_/th
					TRYING: th
					adding blocked set: C = C >> _, t, th, þ
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'n/o/u/_/_/t/h', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', '_', 't', 'h']
				{'string': 'n/o/u/_/_/t/h', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', '_', 'th']
				{'string': 'n/o/u/_/_/th', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'th']
				version split: ['n', 'o', 'u', '_', '_', 'th']
				{'string': 'n/o/u/_/_/th', 'rgx': '((n))/((o))/((u))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'th']
				ANALYSING: nouȝht
					resolving (2)
					> version: n/o/u/_/ȝ/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t, þ
					> version: n/o/u/_/ȝ/h/t
					TRYING: h
					adding blocked set: C = C >> h, _, t, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝ/_/h/t(CVAACACC)
n/o/u/_/ȝ/_/h/t(CVAACACC)
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ/h/t', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ/h/t', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				{'string': 'n/o/u/_/ȝ/_/h', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				{'string': 'n/o/u/_/ȝ/_/h', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', '_', 'h', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/_/ȝ/t
					TRYING: t
					> version: n/o/u/_/ȝ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ/t', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((t))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ/t', 'rgx': '((n))/((o))/((u))/((_))/((ȝ))/((t))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/_/t
					TRYING: t
					> version: n/o/ƿ/i/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ƿ', 'i', '_', 't']
				{'string': 'n/o/ƿ/i/_/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))/((t))$'}
				version split: ['n', 'o', 'ƿ', 'i', '_', 't']
				{'string': 'n/o/ƿ/i/_/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))/((t))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/_/t
					TRYING: t
					> version: n/o/w/i/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'w', 'i', '_', 't']
				{'string': 'n/o/w/i/_/t', 'rgx': '((n))/((o))/((w))/((i))/((_))/((t))$'}
				version split: ['n', 'o', 'w', 'i', '_', 't']
				{'string': 'n/o/w/i/_/t', 'rgx': '((n))/((o))/((w))/((i))/((_))/((t))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ƿ', '_', '_', 't']
				{'string': 'n/o/ƿ/_/_/t', 'rgx': '((n))/((o))/((ƿ))/((_))/((_))/((t))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'w', '_', '_', 't']
				{'string': 'n/o/w/_/_/t', 'rgx': '((n))/((o))/((w))/((_))/((_))/((t))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/_/_/t/h
					TRYING: t
					> version: n/o/w/_/_/th
					TRYING: th
					adding blocked set: C = C >> _, t, th, þ
					RESULT:  ['t']
				version split: ['n', 'o', 'w', '_', '_', 't', 'h']
				{'string': 'n/o/w/_/_/t/h', 'rgx': '((n))/((o))/((w))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'w', '_', '_', 't', 'h']
				version split: ['n', 'o', 'w', '_', '_', 'th']
				{'string': 'n/o/w/_/_/th', 'rgx': '((n))/((o))/((w))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'w', '_', '_', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/_/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'o', '_', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_/_/þ/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'þ', 't']
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ȝ', '_', '_', 't']
				{'string': 'n/o/ȝ/_/_/t', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))/((t))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/_/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ȝ', '_', '_', 't', 'e']
				{'string': 'n/o/ȝ/_/_/t/e', 'rgx': '((n))/((o))/((ȝ))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'ȝ', '_', '_', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', '_', '_', '_', '_']
		only one version left: ['n', 'a', 'h', '_', '_', 't']
		only one version left: ['n', 'a', '_', '_', 'ch', 't']
		only one version left: ['n', 'a', '_', '_', 's', 't']
		only one version left: ['n', 'a', 'u', '_', 'h', 't']
		only one version left: ['n', 'a', 'u', '_', '_', 't']
		only one version left: ['n', 'a', 'w', 'i', '_', 'þ']
		only one version left: ['n', 'a', 'ƿ', '_', '_', 't']
		only one version left: ['n', 'a', '_', 'y', '_', 't']
		only one version left: ['n', 'a', 'ȝ', '_', '_', 't']
		only one version left: ['n', '_', '_', 'e', '_', '_']
		only one version left: ['n', 'o', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'h', '_', '_', '_']
		only one version left: ['n', 'o', 'h', '_', 'h', 't']
		only one version left: ['n', 'o', 'h', '_', '_', 't']
		only one version left: ['n', 'o', 'h', 'u', '_', 't']
		only one version left: ['n', 'o', '_', '_', 'ch', 't']
		FAIL: 
		only one version left: ['n', 'o', '_', '_', 's', 't']
		only one version left: ['n', 'o', '_', '_', '_', 't']
		only one version left: ['n', 'o', 'u', '_', 'h', 't']
		only one version left: ['n', 'o', 'u', '_', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'u', '_', 'ȝ', 't']
		only one version left: ['n', 'o', 'ƿ', 'i', '_', 't']
		only one version left: ['n', 'o', 'w', 'i', '_', 't']
		only one version left: ['n', 'o', 'ƿ', '_', '_', 't']
		only one version left: ['n', 'o', 'w', '_', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'ȝ', '_', '_', 't']
		FAIL: 
		SPLIT: ['n', 'a', 'ƿ', 'i', 'h', 't']
		SPLIT: ['n', 'a', 'w', 'i', 'h', 't']
		SPLIT: ['n', 'a', 'ƿ', 'i', 'ch', 't']
		SPLIT: ['n', 'o', 'ƿ', 'i', 'h', 't']
		SPLIT: ['n', 'o', 'w', 'i', 'h', 't']
		SPLIT: ['n', 'o', 'w', 'i', 'ȝ', 't']
		SPLIT: ['n', 'a', '_', '_', '_', '_']
		['n', 'a', '_', '_', '_', '_']
		SPLIT: ['n', 'a', 'h', '_', '_', 't']
		['n', 'a', 'h', '_', '_', 't']
		SPLIT: ['n', 'a', '_', '_', 'ch', 't']
		['n', 'a', '_', '_', 'ch', 't']
		SPLIT: ['n', 'a', '_', '_', 's', 't']
		['n', 'a', '_', '_', 's', 't']
		SPLIT: ['n', 'a', 'u', '_', 'h', 't']
		['n', 'a', 'u', '_', 'h', 't']
		['n', 'a', 'u', '_', 'h', 't']
		SPLIT: ['n', 'a', 'u', '_', '_', 't']
		['n', 'a', 'u', '_', '_', 't']
		['n', 'a', 'u', '_', '_', 't']
		SPLIT: ['n', 'a', 'w', 'i', '_', 'þ']
		['n', 'a', 'w', 'i', '_', 'þ']
		['n', 'a', 'w', 'i', '_', 'þ']
		SPLIT: ['n', 'a', 'ƿ', '_', '_', 't']
		['n', 'a', 'ƿ', '_', '_', 't']
		SPLIT: ['n', 'a', '_', 'y', '_', 't']
		['n', 'a', '_', 'y', '_', 't']
		['n', 'a', '_', 'y', '_', 't']
		SPLIT: ['n', 'a', 'ȝ', '_', '_', 't']
		['n', 'a', 'ȝ', '_', '_', 't']
		SPLIT: ['n', '_', '_', 'e', '_', '_']
		['n', '_', '_', 'e', '_', '_']
		SPLIT: ['n', 'o', '_', '_', '_', '_']
		['n', 'o', '_', '_', '_', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', '_', '_', '_']
		['n', 'o', 'h', '_', '_', '_']
		SPLIT: ['n', 'o', 'h', '_', 'h', 't']
		['n', 'o', 'h', '_', 'h', 't']
		SPLIT: ['n', 'o', 'h', '_', '_', 't']
		['n', 'o', 'h', '_', '_', 't']
		SPLIT: ['n', 'o', 'h', 'u', '_', 't']
		['n', 'o', 'h', 'u', '_', 't']
		['n', 'o', 'h', 'u', '_', 't']
		SPLIT: ['n', 'o', '_', '_', 'ch', 't']
		['n', 'o', '_', '_', 'ch', 't']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['ch']", "['t']"]
		SPLIT: ['n', 'o', '_', '_', 's', 't']
		['n', 'o', '_', '_', 's', 't']
		SPLIT: ['n', 'o', '_', '_', '_', 't']
		['n', 'o', '_', '_', '_', 't']
		SPLIT: ['n', 'o', 'u', '_', 'h', 't']
		['n', 'o', 'u', '_', 'h', 't']
		['n', 'o', 'u', '_', 'h', 't']
		SPLIT: ['n', 'o', 'u', '_', '_', 't']
		['n', 'o', 'u', '_', '_', 't']
		['n', 'o', 'u', '_', '_', 't']
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['_']", "['t']"]
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['ȝ']", "['_']"]
		SPLIT: ['n', 'o', 'u', '_', 'ȝ', 't']
		['n', 'o', 'u', '_', 'ȝ', 't']
		['n', 'o', 'u', '_', 'ȝ', 't']
		SPLIT: ['n', 'o', 'ƿ', 'i', '_', 't']
		['n', 'o', 'ƿ', 'i', '_', 't']
		['n', 'o', 'ƿ', 'i', '_', 't']
		SPLIT: ['n', 'o', 'w', 'i', '_', 't']
		['n', 'o', 'w', 'i', '_', 't']
		['n', 'o', 'w', 'i', '_', 't']
		SPLIT: ['n', 'o', 'ƿ', '_', '_', 't']
		['n', 'o', 'ƿ', '_', '_', 't']
		SPLIT: ['n', 'o', 'w', '_', '_', 't']
		['n', 'o', 'w', '_', '_', 't']
		SPLIT: ["['n']", "['o']", "['w']", "['_']", "['_']", "['t']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['þ']"]
		SPLIT: ['n', 'o', 'ȝ', '_', '_', 't']
		['n', 'o', 'ȝ', '_', '_', 't']
		SPLIT: ["['n']", "['o']", "['ȝ']", "['_']", "['_']", "['t']"]
		version for pattern CVCVCC is INVALID
		[]
		9
		OVERVIEW: version for pattern CVCVCC

faulty splits: 9
['n']['o'][''][''][''][''] <-! noct
['n']['o'][''][''][''][''] <-! noght
['n']['o'][''][''][''][''] <-! nogt
['n']['o']['']['']['ch']['t'] <-! nochte
['n']['o']['u']['']['']['t'] <-! nouth
['n']['o']['u']['']['ȝ'][''] <-! nouȝht
['n']['o']['w']['']['']['t'] <-! nowth
['n']['o']['']['']['']['þ'] <-! noþt
['n']['o']['ȝ']['']['']['t'] <-! noȝte
n | a | ƿ | i | h | t
n | a | w | i | h | t
n | a | ƿ | i | ch | t
n | o | ƿ | i | h | t
n | o | w | i | h | t
n | o | w | i | ȝ | t
n | a | _ | _ | _ | _
n | a | h | _ | _ | t
n | a | _ | _ | ch | t
n | a | _ | _ | s | t
n | a | u | _ | h | t
n | a | u | _ | _ | t
n | a | w | i | _ | þ
n | a | ƿ | _ | _ | t
n | a | _ | y | _ | t
n | a | ȝ | _ | _ | t
n | _ | _ | e | _ | _
n | o | _ | _ | _ | _
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
n | o | h | _ | _ | _
n | o | h | _ | h | t
n | o | h | _ | _ | t
n | o | h | u | _ | t
n | o | _ | _ | ch | t
['n'] | ['o'] | ['_'] | ['_'] | ['ch'] | ['t']
n | o | _ | _ | s | t
n | o | _ | _ | _ | t
n | o | u | _ | h | t
n | o | u | _ | _ | t
['n'] | ['o'] | ['u'] | ['_'] | ['_'] | ['t']
['n'] | ['o'] | ['u'] | ['_'] | ['ȝ'] | ['_']
n | o | u | _ | ȝ | t
n | o | ƿ | i | _ | t
n | o | w | i | _ | t
n | o | ƿ | _ | _ | t
n | o | w | _ | _ | t
['n'] | ['o'] | ['w'] | ['_'] | ['_'] | ['t']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['þ']
n | o | ȝ | _ | _ | t
['n'] | ['o'] | ['ȝ'] | ['_'] | ['_'] | ['t']
1 : {'a', 'au', 'o', 'e'}
2 : {'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'ȝ', 'gh', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'},{'ƿ', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 't', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 's', 'h', 'w', '_', 'u'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'c', 'h', 'w', '_'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', '_', 'u', 'þ'},{'ƿ', 's', 'h', 'w', '_'}
4 : {'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 'c', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'gh', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'}
5 : {'_', 't', 'g', 'þ'},{'_', 't', 'g', 'þ'},{'gh', '_', 't', 'þ'},{'_', 'c', 't', 'þ'},{'h', '_', 't', 'þ'},{'h', '_', 't', 'þ'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVVCC
	Selection for pattern: CVVCC completed
	Making a version for pattern: CVVCC
			___CVVCC : 0___
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVVCC : 1___
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a']
				n/a(CV)
n/_/a(CAV)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', '_', 'a']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'h', 't']
				n/a/h/t(CVCC)
n/_/a/h/t(CAVCC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/a/ch/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', 'ch', 't']
				n/a/c/h/t(CVCCC)
n/a/ch/t(CVCC)
n/_/a/c/h/t(CAVCCC)
n/_/a/ch/t(CAVCC)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 's', 't']
				n/a/s/t(CVCC)
n/_/a/s/t(CAVCC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/a/u/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/au/t
					TRYING: au
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, au, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', 'u', 't']
				adding dashed alternative: ['n', '_', 'au', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/au/t(CVC)
n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/au/t(CAVC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'au', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/a/w/i/þ
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'aw', 'i', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/aw/i/þ(CVCC)
n/aw/i/þ(CVVC)
n/_/a/w/i/þ(CAVCAC)
n/_/a/w/i/þ(CAVCAC)
n/_/aw/i/þ(CAVAC)
n/_/aw/i/þ(CAVAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'aƿ', 't']
				n/a/ƿ/t(CVCC)
n/aƿ/t(CVC)
n/_/a/ƿ/t(CAVCC)
n/_/aƿ/t(CAVC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'aƿ', 't']
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/a/y/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, ay, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', 'y', 't']
				adding dashed alternative: ['n', '_', 'ay', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/ay/t(CVC)
n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/ay/t(CAVC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ay', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', 'ȝ', 't']
				n/a/ȝ/t(CVCC)
n/_/a/ȝ/t(CAVCC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> ow, aƿ, e, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o']
				n/o(CV)
n/_/o(CAV)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', '_', 'o']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 't']
				n/o/c/t(CVCC)
n/_/o/c/t(CAVCC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/o/gh/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'g', 't']
				n/o/g/t(CVCC)
n/_/o/g/t(CAVCC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h']
				n/o/h(CVC)
n/_/o/h(CAVC)
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'h', 't']
				n/o/h/h/t(CVCCC)
n/_/o/h/h/t(CAVCCC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 't']
				n/o/h/t(CVCC)
n/_/o/h/t(CAVCC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/o/h/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/o/hu/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'hu', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/hu/t(CVCC)
n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/o/ch/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't']
				n/o/c/h/t(CVCCC)
n/o/ch/t(CVCC)
n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/o/ch/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 's', 't']
				n/o/s/t(CVCC)
n/_/o/s/t(CAVCC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 't']
				n/o/t(CVC)
n/_/o/t(CAVC)
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/o/u/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> ow, aƿ, a, ou, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', 'u', 't']
				adding dashed alternative: ['n', '_', 'ou', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/ou/t(CVC)
n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/ou/t(CAVC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ou', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/o/ƿ/i/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 'i', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/oƿ/i/t(CVCC)
n/oƿ/i/t(CVVC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/oƿ/i/t(CAVAC)
n/_/oƿ/i/t(CAVAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/o/w/i/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				adding dashed alternative: ['n', '_', 'ow', 'i', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/ow/i/t(CVCC)
n/ow/i/t(CVVC)
n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/ow/i/t(CAVAC)
n/_/ow/i/t(CAVAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ƿ', 't']
				adding dashed alternative: ['n', '_', 'oƿ', 't']
				n/o/ƿ/t(CVCC)
n/oƿ/t(CVC)
n/_/o/ƿ/t(CAVCC)
n/_/oƿ/t(CAVC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'oƿ', 't']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't']
				adding dashed alternative: ['n', '_', 'ow', 't']
				n/o/w/t(CVCC)
n/ow/t(CVC)
n/_/o/w/t(CAVCC)
n/_/ow/t(CAVC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/o/w/th
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', 'w', 'th']
				adding dashed alternative: ['n', '_', 'ow', 't', 'h']
				adding dashed alternative: ['n', '_', 'ow', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/ow/t/h(CVCC)
n/ow/th(CVC)
n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/ow/t/h(CAVCC)
n/_/ow/th(CAVC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'ow', 'th']
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'þ', 't']
				n/o/þ/t(CVCC)
n/_/o/þ/t(CAVCC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, o, aw, _, oƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't']
				n/o/ȝ/t(CVCC)
n/_/o/ȝ/t(CAVCC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					adding blocked set: V = V >> ow, aƿ, a, aw, oƿ, _, o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', 'ȝ', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/_/o/ȝ/t/e(CAVCCV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
			___CVVCC : 2___
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/c/h/t
					TRYING: a
					> version: n/_/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/a/u/t
					TRYING: a
					> version: n/_/au/t
					TRYING: au
					adding blocked set: V = V >> i, a, u, au
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'au', 't']
				{'string': 'n/_/au', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'au', 't']
				ANALYSING: nawiþ
					resolving (4)
					> version: n/_/a/w/i/þ
					TRYING: a
					> version: n/_/a/w/i/þ
					TRYING: a
					> version: n/_/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					> version: n/_/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> i, a, u, aw
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'þ']
				version split: ['n', '_', 'aw', 'i', 'þ']
				{'string': 'n/_/aw', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/_/a/ƿ/t
					TRYING: a
					> version: n/_/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> i, a, u, aƿ
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'aƿ', 't']
				{'string': 'n/_/aƿ', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/a/y/t
					TRYING: a
					> version: n/_/ay/t
					TRYING: ay
					adding blocked set: V = V >> i, a, u, ay
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				version split: ['n', '_', 'ay', 't']
				{'string': 'n/_/ay', 'rgx': '((n))/((_))/((a))$'}
				_____REMOVING________['n', '_', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/g/h/t
					TRYING: o
					> version: n/_/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/h/u/t
					TRYING: o
					> version: n/_/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/c/h/t
					TRYING: o
					> version: n/_/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: o
					> version: n/_/o/ch/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/o/u/t
					TRYING: o
					> version: n/_/ou/t
					TRYING: ou
					adding blocked set: V = V >> e, a, ou, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ou', 't']
				{'string': 'n/_/ou', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ou', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/o/ƿ/i/t
					TRYING: o
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					> version: n/_/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				version split: ['n', '_', 'oƿ', 'i', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/o/w/i/t
					TRYING: o
					> version: n/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				version split: ['n', '_', 'ow', 'i', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'i', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/_/o/ƿ/t
					TRYING: o
					> version: n/_/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> e, a, i, oƿ, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'oƿ', 't']
				{'string': 'n/_/oƿ', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/_/o/w/t
					TRYING: o
					> version: n/_/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 't']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/_/o/w/t/h
					TRYING: o
					> version: n/_/o/w/th
					TRYING: o
					> version: n/_/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					> version: n/_/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, e, a, i, u, o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				version split: ['n', '_', 'ow', 't', 'h']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 't', 'h']
				version split: ['n', '_', 'ow', 'th']
				{'string': 'n/_/ow', 'rgx': '((n))/((_))/((o))$'}
				_____REMOVING________['n', '_', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))$'}
			___CVVCC : 3___
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_']
				n/_/a(CAV)
n/_/a/_(CAVA)
				version split: ['n', '_', 'a']
				{'string': 'n/_/a', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a']
				version split: ['n', '_', 'a', '_']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'h', 't']
				n/_/a/h/t(CAVCC)
n/_/a/_/h/t(CAVACC)
				version split: ['n', '_', 'a', 'h', 't']
				{'string': 'n/_/a/h', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'h', 't']
				version split: ['n', '_', 'a', '_', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, t, ch, h, ȝh, _
					> version: n/_/a/ch/t
					TRYING: ch
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'ch', 't']
				n/_/a/c/h/t(CAVCCC)
n/_/a/ch/t(CAVCC)
n/_/a/_/c/h/t(CAVACCC)
n/_/a/_/ch/t(CAVACC)
				version split: ['n', '_', 'a', 'c', 'h', 't']
				{'string': 'n/_/a/c', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'c', 'h', 't']
				version split: ['n', '_', 'a', 'ch', 't']
				{'string': 'n/_/a/ch', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ch', 't']
				version split: ['n', '_', 'a', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'ch', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/s/t
					TRYING: s
					adding blocked set: C = C >> ȝ, t, s, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 's', 't']
				n/_/a/s/t(CAVCC)
n/_/a/_/s/t(CAVACC)
				version split: ['n', '_', 'a', 's', 't']
				{'string': 'n/_/a/s', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 's', 't']
				version split: ['n', '_', 'a', '_', 's', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/_/a/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, u
					> version: n/_/a/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'u', 't']
				n/_/a/u/t(CAVAC)
n/_/a/u/t(CAVAC)
n/_/a/_/u/t(CAVAAC)
n/_/a/_/u/t(CAVAAC)
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'a', 'u', 't']
				{'string': 'n/_/a/u', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'u', 't']
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/_/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					> version: n/_/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				n/_/a/w/i/þ(CAVCAC)
n/_/a/w/i/þ(CAVCAC)
n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/w/i/þ(CAVACAC)
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', 'w', 'i', 'þ']
				{'string': 'n/_/a/w', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/_/a/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'ƿ', 't']
				n/_/a/ƿ/t(CAVCC)
n/_/a/_/ƿ/t(CAVACC)
				version split: ['n', '_', 'a', 'ƿ', 't']
				{'string': 'n/_/a/ƿ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ƿ', 't']
				version split: ['n', '_', 'a', '_', 'ƿ', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/_/a/y/t
					TRYING: y
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, y
					> version: n/_/a/y/t
					TRYING: y
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', '_', 'y', 't']
				n/_/a/y/t(CAVAC)
n/_/a/y/t(CAVAC)
n/_/a/_/y/t(CAVAAC)
n/_/a/_/y/t(CAVAAC)
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a/y', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'a', 'y', 't']
				{'string': 'n/_/a/y', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'y', 't']
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', 'ȝ', 't']
				n/_/a/ȝ/t(CAVCC)
n/_/a/_/ȝ/t(CAVACC)
				version split: ['n', '_', 'a', 'ȝ', 't']
				{'string': 'n/_/a/ȝ', 'rgx': '((n))/((_))/((a))/((_))$'}
				_____REMOVING________['n', '_', 'a', 'ȝ', 't']
				version split: ['n', '_', 'a', '_', 'ȝ', 't']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e', '_']
				n/_/e(CAV)
n/_/e/_(CAVA)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((e))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', 'e', '_']
				{'string': 'n/_/e/_', 'rgx': '((n))/((_))/((e))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_']
				n/_/o(CAV)
n/_/o/_(CAVA)
				version split: ['n', '_', 'o']
				{'string': 'n/_/o', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o']
				version split: ['n', '_', 'o', '_']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/c/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 't']
				n/_/o/c/t(CAVCC)
n/_/o/_/c/t(CAVACC)
				version split: ['n', '_', 'o', 'c', 't']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 't']
				version split: ['n', '_', 'o', '_', 'c', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> ȝ, t, ch, h, g, ȝh, _
					> version: n/_/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, t, ch, gh, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'gh', 't']
				n/_/o/g/h/t(CAVCCC)
n/_/o/gh/t(CAVCC)
n/_/o/_/g/h/t(CAVACCC)
n/_/o/_/gh/t(CAVACC)
				version split: ['n', '_', 'o', 'g', 'h', 't']
				{'string': 'n/_/o/g', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 'h', 't']
				version split: ['n', '_', 'o', 'gh', 't']
				{'string': 'n/_/o/gh', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'gh', 't']
				version split: ['n', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/g/t
					TRYING: g
					adding blocked set: C = C >> ȝ, t, ch, h, g, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'g', 't']
				n/_/o/g/t(CAVCC)
n/_/o/_/g/t(CAVACC)
				version split: ['n', '_', 'o', 'g', 't']
				{'string': 'n/_/o/g', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'g', 't']
				version split: ['n', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/h
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h']
				n/_/o/h(CAVC)
n/_/o/_/h(CAVAC)
				version split: ['n', '_', 'o', 'h']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h']
				version split: ['n', '_', 'o', '_', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/h/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'h', 't']
				n/_/o/h/h/t(CAVCCC)
n/_/o/_/h/h/t(CAVACCC)
				version split: ['n', '_', 'o', 'h', 'h', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'h', 't']
				version split: ['n', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/h/t
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 't']
				n/_/o/h/t(CAVCC)
n/_/o/_/h/t(CAVACC)
				version split: ['n', '_', 'o', 'h', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 't']
				version split: ['n', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					> version: n/_/o/h/u/t
					TRYING: h
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					> version: n/_/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> ȝ, t, hu, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'hu', 't']
				n/_/o/h/u/t(CAVCAC)
n/_/o/h/u/t(CAVCAC)
n/_/o/hu/t(CAVCC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/hu/t(CAVACC)
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'h', 'u', 't']
				{'string': 'n/_/o/h', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'h', 'u', 't']
				version split: ['n', '_', 'o', 'hu', 't']
				{'string': 'n/_/o/hu', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'hu', 't']
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/c/h/t
					TRYING: c
					adding blocked set: C = C >> ȝ, c, t, ch, h, ȝh, _
					> version: n/_/o/ch/t
					TRYING: ch
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'ch', 't']
				n/_/o/c/h/t(CAVCCC)
n/_/o/ch/t(CAVCC)
n/_/o/_/c/h/t(CAVACCC)
n/_/o/_/ch/t(CAVACC)
				version split: ['n', '_', 'o', 'c', 'h', 't']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't']
				version split: ['n', '_', 'o', 'ch', 't']
				{'string': 'n/_/o/ch', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> ȝ, c, t, ch, h, ȝh, _
					> version: n/_/o/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', '_', 'ch', 't', 'e']
				n/_/o/c/h/t/e(CAVCCCV)
n/_/o/ch/t/e(CAVCCV)
n/_/o/_/c/h/t/e(CAVACCCV)
n/_/o/_/ch/t/e(CAVACCV)
				version split: ['n', '_', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/c', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', 'ch', 't', 'e']
				{'string': 'n/_/o/ch', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ch', 't', 'e']
				version split: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/s/t
					TRYING: s
					adding blocked set: C = C >> ȝ, t, s, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 's', 't']
				n/_/o/s/t(CAVCC)
n/_/o/_/s/t(CAVACC)
				version split: ['n', '_', 'o', 's', 't']
				{'string': 'n/_/o/s', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 's', 't']
				version split: ['n', '_', 'o', '_', 's', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/_/o/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 't']
				n/_/o/t(CAVC)
n/_/o/_/t(CAVAC)
				version split: ['n', '_', 'o', 't']
				{'string': 'n/_/o/t', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 't']
				version split: ['n', '_', 'o', '_', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, u
					> version: n/_/o/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'u', 't']
				n/_/o/u/t(CAVAC)
n/_/o/u/t(CAVAC)
n/_/o/_/u/t(CAVAAC)
n/_/o/_/u/t(CAVAAC)
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', 'u', 't']
				{'string': 'n/_/o/u', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'u', 't']
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, t, ch, h, ȝh, _
					> version: n/_/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				n/_/o/ƿ/i/t(CAVCAC)
n/_/o/ƿ/i/t(CAVCAC)
n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/ƿ/i/t(CAVACAC)
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', 'ƿ', 'i', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					> version: n/_/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'i', 't']
				n/_/o/w/i/t(CAVCAC)
n/_/o/w/i/t(CAVCAC)
n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/w/i/t(CAVACAC)
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'o', 'w', 'i', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/o/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ƿ', 't']
				n/_/o/ƿ/t(CAVCC)
n/_/o/_/ƿ/t(CAVACC)
				version split: ['n', '_', 'o', 'ƿ', 't']
				{'string': 'n/_/o/ƿ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ƿ', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/_/o/w/t
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 't']
				n/_/o/w/t(CAVCC)
n/_/o/_/w/t(CAVACC)
				version split: ['n', '_', 'o', 'w', 't']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't']
				version split: ['n', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/_/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					> version: n/_/o/w/th
					TRYING: w
					adding blocked set: C = C >> ȝ, t, ch, h, w, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', 'w', 'th']
				n/_/o/w/t/h(CAVCCC)
n/_/o/w/th(CAVCC)
n/_/o/_/w/t/h(CAVACCC)
n/_/o/_/w/th(CAVACC)
				version split: ['n', '_', 'o', 'w', 't', 'h']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 't', 'h']
				version split: ['n', '_', 'o', 'w', 'th']
				{'string': 'n/_/o/w', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'w', 'th']
				version split: ['n', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				version split: ['n', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'þ', 't']
				n/_/o/þ/t(CAVCC)
n/_/o/_/þ/t(CAVACC)
				version split: ['n', '_', 'o', 'þ', 't']
				{'string': 'n/_/o/þ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'þ', 't']
				version split: ['n', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ȝ', 't']
				n/_/o/ȝ/t(CAVCC)
n/_/o/_/ȝ/t(CAVACC)
				version split: ['n', '_', 'o', 'ȝ', 't']
				{'string': 'n/_/o/ȝ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> ȝ, t, ch, h, ȝh, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				n/_/o/ȝ/t/e(CAVCCV)
n/_/o/_/ȝ/t/e(CAVACCV)
				version split: ['n', '_', 'o', 'ȝ', 't', 'e']
				{'string': 'n/_/o/ȝ', 'rgx': '((n))/((_))/((o))/((_))$'}
				_____REMOVING________['n', '_', 'o', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))$'}
			___CVVCC : 4___
				ANALYSING: nauht
				adding littera based on matching pattern
				ANALYSING: naƿiht
				adding littera based on matching pattern
				ANALYSING: nawiht
				adding littera based on matching pattern
				ANALYSING: naƿicht
				adding littera based on matching pattern
				ANALYSING: nouht
				adding littera based on matching pattern
				ANALYSING: nouth
				adding littera based on matching pattern
				ANALYSING: nouȝht
				adding littera based on matching pattern
				ANALYSING: nouȝt
				adding littera based on matching pattern
				ANALYSING: noƿiht
				adding littera based on matching pattern
				ANALYSING: nowiht
				adding littera based on matching pattern
				ANALYSING: nowiȝt
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/_/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_']
				n/_/a/_(CAVA)
n/_/a/_/_(CAVAA)
				version split: ['n', '_', 'a', '_']
				{'string': 'n/_/a/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_']
				version split: ['n', '_', 'a', '_', '_']
				{'string': 'n/_/a/_/_', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/_/a/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'h', 't']
				n/_/a/_/h/t(CAVACC)
n/_/a/_/_/h/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'h', 't']
				{'string': 'n/_/a/_/h/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'h', 't']
				{'string': 'n/_/a/_/_/h', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'h', 't']
				ANALYSING: nacht
					resolving (2)
					> version: n/_/a/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> h, c, t, _
					> version: n/_/a/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ch', 't']
				n/_/a/_/c/h/t(CAVACCC)
n/_/a/_/ch/t(CAVACC)
n/_/a/_/_/c/h/t(CAVAACCC)
n/_/a/_/_/ch/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_/c/h', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'c', 'h', 't']
				version split: ['n', '_', 'a', '_', 'ch', 't']
				{'string': 'n/_/a/_/ch/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ch', 't']
				version split: ['n', '_', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/_/a/_/_/c', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'c', 'h', 't']
				version split: ['n', '_', 'a', '_', '_', 'ch', 't']
				{'string': 'n/_/a/_/_/ch', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ch', 't']
				ANALYSING: nast
					resolving (1)
					> version: n/_/a/_/s/t
					TRYING: s
					adding blocked set: C = C >> h, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 's', 't']
				n/_/a/_/s/t(CAVACC)
n/_/a/_/_/s/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 's', 't']
				{'string': 'n/_/a/_/s/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 's', 't']
				version split: ['n', '_', 'a', '_', '_', 's', 't']
				{'string': 'n/_/a/_/_/s', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 's', 't']
				ANALYSING: naut
					resolving (2)
					> version: n/_/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, t, _, u
					> version: n/_/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, t, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'u', 't']
				n/_/a/_/u/t(CAVAAC)
n/_/a/_/u/t(CAVAAC)
n/_/a/_/_/u/t(CAVAAAC)
n/_/a/_/_/u/t(CAVAAAC)
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_/u/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', 'u', 't']
				{'string': 'n/_/a/_/u/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 't']
				version split: ['n', '_', 'a', '_', '_', 'u', 't']
				{'string': 'n/_/a/_/_/u', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'u', 't']
				ANALYSING: nawiþ
					resolving (2)
					> version: n/_/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					> version: n/_/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/w/i/þ(CAVACAC)
n/_/a/_/_/w/i/þ(CAVAACAC)
n/_/a/_/_/w/i/þ(CAVAACAC)
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/w/i', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/_/a/_/_/w', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'w', 'i', 'þ']
				ANALYSING: naƿt
					resolving (1)
					> version: n/_/a/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ƿ', 't']
				n/_/a/_/ƿ/t(CAVACC)
n/_/a/_/_/ƿ/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/ƿ/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ƿ', 't']
				version split: ['n', '_', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/_/a/_/_/ƿ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ƿ', 't']
				ANALYSING: nayt
					resolving (2)
					> version: n/_/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> h, t, _, y
					> version: n/_/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> h, t, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'y', 't']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'y', 't']
				n/_/a/_/y/t(CAVAAC)
n/_/a/_/y/t(CAVAAC)
n/_/a/_/_/y/t(CAVAAAC)
n/_/a/_/_/y/t(CAVAAAC)
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_/y/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', 'y', 't']
				{'string': 'n/_/a/_/y/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'y', 't']
				version split: ['n', '_', 'a', '_', '_', 'y', 't']
				{'string': 'n/_/a/_/_/y', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'y', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/_/a/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> h, ȝ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'a', '_', '_', 'ȝ', 't']
				n/_/a/_/ȝ/t(CAVACC)
n/_/a/_/_/ȝ/t(CAVAACC)
				version split: ['n', '_', 'a', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/ȝ/t', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', 'ȝ', 't']
				version split: ['n', '_', 'a', '_', '_', 'ȝ', 't']
				{'string': 'n/_/a/_/_/ȝ', 'rgx': '((n))/((_))/((a))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'a', '_', '_', 'ȝ', 't']
				ANALYSING: ne
					resolving (1)
					> version: n/_/e/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e', '_', '_']
				n/_/e/_(CAVA)
n/_/e/_/_(CAVAA)
				version split: ['n', '_', 'e', '_']
				{'string': 'n/_/e/_', 'rgx': '((n))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e', '_']
				version split: ['n', '_', 'e', '_', '_']
				{'string': 'n/_/e/_/_', 'rgx': '((n))/((_))/((e))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/_/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_']
				n/_/o/_(CAVA)
n/_/o/_/_(CAVAA)
				version split: ['n', '_', 'o', '_']
				{'string': 'n/_/o/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_']
				version split: ['n', '_', 'o', '_', '_']
				{'string': 'n/_/o/_/_', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/_/o/_/c/t
					TRYING: c
					adding blocked set: C = C >> h, c, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'c', 't']
				n/_/o/_/c/t(CAVACC)
n/_/o/_/_/c/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'c', 't']
				{'string': 'n/_/o/_/c/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'c', 't']
				version split: ['n', '_', 'o', '_', '_', 'c', 't']
				{'string': 'n/_/o/_/_/c', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'c', 't']
				ANALYSING: noght
					resolving (2)
					> version: n/_/o/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, h, t, _
					> version: n/_/o/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'gh', 't']
				n/_/o/_/g/h/t(CAVACCC)
n/_/o/_/gh/t(CAVACC)
n/_/o/_/_/g/h/t(CAVAACCC)
n/_/o/_/_/gh/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/g/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'g', 'h', 't']
				version split: ['n', '_', 'o', '_', 'gh', 't']
				{'string': 'n/_/o/_/gh/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'gh', 't']
				version split: ['n', '_', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/_/o/_/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'gh', 't']
				{'string': 'n/_/o/_/_/gh', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/_/o/_/g/t
					TRYING: g
					adding blocked set: C = C >> g, h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'g', 't']
				n/_/o/_/g/t(CAVACC)
n/_/o/_/_/g/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'g', 't']
				{'string': 'n/_/o/_/g/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'g', 't']
				version split: ['n', '_', 'o', '_', '_', 'g', 't']
				{'string': 'n/_/o/_/_/g', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/_/o/_/h
					TRYING: h
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'h']
				n/_/o/_/h(CAVAC)
n/_/o/_/_/h(CAVAAC)
				version split: ['n', '_', 'o', '_', 'h']
				{'string': 'n/_/o/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h']
				version split: ['n', '_', 'o', '_', '_', 'h']
				{'string': 'n/_/o/_/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'h']
				ANALYSING: nohht
					resolving (1)
					> version: n/_/o/_/h/h/t
					TRYING: h
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'h', 'h', 't']
				n/_/o/_/h/h/t(CAVACCC)
n/_/o/_/_/h/h/t(CAVAACCC)
				version split: ['n', '_', 'o', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_/h/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'h', 'h', 't']
				{'string': 'n/_/o/_/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'h', 'h', 't']
				ANALYSING: noht
					resolving (1)
					> version: n/_/o/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'h', 't']
				n/_/o/_/h/t(CAVACC)
n/_/o/_/_/h/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'h', 't']
				{'string': 'n/_/o/_/h/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'h', 't']
				{'string': 'n/_/o/_/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'h', 't']
				ANALYSING: nohut
					resolving (3)
					> version: n/_/o/_/h/u/t
					TRYING: h
					adding blocked set: C = C >> h, t, _
					> version: n/_/o/_/h/u/t
					TRYING: h
					adding blocked set: C = C >> h, t, _
					> version: n/_/o/_/hu/t
					TRYING: hu
					adding blocked set: C = C >> h, hu, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'h', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'hu', 't']
				n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/h/u/t(CAVACAC)
n/_/o/_/hu/t(CAVACC)
n/_/o/_/_/h/u/t(CAVAACAC)
n/_/o/_/_/h/u/t(CAVAACAC)
n/_/o/_/_/hu/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/h/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', 'hu', 't']
				{'string': 'n/_/o/_/hu/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'hu', 't']
				version split: ['n', '_', 'o', '_', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'h', 'u', 't']
				{'string': 'n/_/o/_/_/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'h', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'hu', 't']
				{'string': 'n/_/o/_/_/hu', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/_/o/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> h, c, t, _
					> version: n/_/o/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ch', 't']
				n/_/o/_/c/h/t(CAVACCC)
n/_/o/_/ch/t(CAVACC)
n/_/o/_/_/c/h/t(CAVAACCC)
n/_/o/_/_/ch/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_/c/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'c', 'h', 't']
				version split: ['n', '_', 'o', '_', 'ch', 't']
				{'string': 'n/_/o/_/ch/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ch', 't']
				version split: ['n', '_', 'o', '_', '_', 'c', 'h', 't']
				{'string': 'n/_/o/_/_/c', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'c', 'h', 't']
				version split: ['n', '_', 'o', '_', '_', 'ch', 't']
				{'string': 'n/_/o/_/_/ch', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ch', 't']
				ANALYSING: nochte
					resolving (2)
					> version: n/_/o/_/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> h, c, t, _
					> version: n/_/o/_/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ch, h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ch', 't', 'e']
				n/_/o/_/c/h/t/e(CAVACCCV)
n/_/o/_/ch/t/e(CAVACCV)
n/_/o/_/_/c/h/t/e(CAVAACCCV)
n/_/o/_/_/ch/t/e(CAVAACCV)
				version split: ['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_/c/h', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_/ch/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ch', 't', 'e']
				version split: ['n', '_', 'o', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/_/o/_/_/c', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'c', 'h', 't', 'e']
				version split: ['n', '_', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/_/o/_/_/ch', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/_/o/_/s/t
					TRYING: s
					adding blocked set: C = C >> h, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 's', 't']
				n/_/o/_/s/t(CAVACC)
n/_/o/_/_/s/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 's', 't']
				{'string': 'n/_/o/_/s/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 's', 't']
				version split: ['n', '_', 'o', '_', '_', 's', 't']
				{'string': 'n/_/o/_/_/s', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 's', 't']
				ANALYSING: not
					resolving (1)
					> version: n/_/o/_/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 't']
				n/_/o/_/t(CAVAC)
n/_/o/_/_/t(CAVAAC)
				version split: ['n', '_', 'o', '_', 't']
				{'string': 'n/_/o/_/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 't']
				version split: ['n', '_', 'o', '_', '_', 't']
				{'string': 'n/_/o/_/_/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, t, _, u
					> version: n/_/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, t, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'u', 't']
				n/_/o/_/u/t(CAVAAC)
n/_/o/_/u/t(CAVAAC)
n/_/o/_/_/u/t(CAVAAAC)
n/_/o/_/_/u/t(CAVAAAC)
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', 'u', 't']
				{'string': 'n/_/o/_/u/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't']
				version split: ['n', '_', 'o', '_', '_', 'u', 't']
				{'string': 'n/_/o/_/_/u', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'u', 't']
				ANALYSING: noƿit
					resolving (2)
					> version: n/_/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, t, _
					> version: n/_/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/ƿ/i/t(CAVACAC)
n/_/o/_/_/ƿ/i/t(CAVAACAC)
n/_/o/_/_/ƿ/i/t(CAVAACAC)
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/ƿ/i', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/_/o/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 'i', 't']
				ANALYSING: nowit
					resolving (2)
					> version: n/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					> version: n/_/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/w/i/t(CAVACAC)
n/_/o/_/_/w/i/t(CAVAACAC)
n/_/o/_/_/w/i/t(CAVAACAC)
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/w/i', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/_/o/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'i', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/_/o/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ƿ', 't']
				n/_/o/_/ƿ/t(CAVACC)
n/_/o/_/_/ƿ/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/ƿ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ƿ', 't']
				version split: ['n', '_', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/_/o/_/_/ƿ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ƿ', 't']
				ANALYSING: nowt
					resolving (1)
					> version: n/_/o/_/w/t
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 't']
				n/_/o/_/w/t(CAVACC)
n/_/o/_/_/w/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'w', 't']
				{'string': 'n/_/o/_/w/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 't']
				version split: ['n', '_', 'o', '_', '_', 'w', 't']
				{'string': 'n/_/o/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 't']
				ANALYSING: nowth
					resolving (2)
					> version: n/_/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					> version: n/_/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> h, t, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'w', 'th']
				n/_/o/_/w/t/h(CAVACCC)
n/_/o/_/w/th(CAVACC)
n/_/o/_/_/w/t/h(CAVAACCC)
n/_/o/_/_/w/th(CAVAACC)
				version split: ['n', '_', 'o', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/w/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 't', 'h']
				version split: ['n', '_', 'o', '_', 'w', 'th']
				{'string': 'n/_/o/_/w/th', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'w', 'th']
				version split: ['n', '_', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/_/o/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 't', 'h']
				version split: ['n', '_', 'o', '_', '_', 'w', 'th']
				{'string': 'n/_/o/_/_/w', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'w', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/_/o/_/þ/t
					TRYING: þ
					adding blocked set: C = C >> h, t, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'þ', 't']
				n/_/o/_/þ/t(CAVACC)
n/_/o/_/_/þ/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'þ', 't']
				{'string': 'n/_/o/_/þ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'þ', 't']
				version split: ['n', '_', 'o', '_', '_', 'þ', 't']
				{'string': 'n/_/o/_/_/þ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'þ', 't']
				ANALYSING: noȝt
					resolving (1)
					> version: n/_/o/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> h, ȝ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ȝ', 't']
				n/_/o/_/ȝ/t(CAVACC)
n/_/o/_/_/ȝ/t(CAVAACC)
				version split: ['n', '_', 'o', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/ȝ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ȝ', 't']
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't']
				{'string': 'n/_/o/_/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ȝ', 't']
				ANALYSING: noȝte
					resolving (1)
					> version: n/_/o/_/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> h, ȝ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				n/_/o/_/ȝ/t/e(CAVACCV)
n/_/o/_/_/ȝ/t/e(CAVAACCV)
				version split: ['n', '_', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/ȝ/t', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', 'ȝ', 't', 'e']
				version split: ['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
				{'string': 'n/_/o/_/_/ȝ', 'rgx': '((n))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'o', '_', '_', 'ȝ', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'a', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', '_', 'e', '_', '_']
		only one version left: ['n', '_', 'o', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['n', 'a', 'u', 'h', 't']
		SPLIT: ['n', 'aƿ', 'i', 'h', 't']
		SPLIT: ['n', 'aw', 'i', 'h', 't']
		SPLIT: ['n', 'aƿ', 'i', 'ch', 't']
		SPLIT: ['n', 'o', 'u', 'h', 't']
		SPLIT: ['n', 'o', 'u', 't', 'h']
		SPLIT: ['n', 'o', 'u', 'ȝh', 't']
		SPLIT: ['n', 'o', 'u', 'ȝ', 't']
		SPLIT: ['n', 'oƿ', 'i', 'h', 't']
		SPLIT: ['n', 'ow', 'i', 'h', 't']
		SPLIT: ['n', 'ow', 'i', 'ȝ', 't']
		SPLIT: ['n', '_', 'a', '_', '_']
		['n', '_', 'a', '_', '_']
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['a']", "['_']", "['_']"]
		SPLIT: ['n', '_', 'e', '_', '_']
		['n', '_', 'e', '_', '_']
		SPLIT: ['n', '_', 'o', '_', '_']
		['n', '_', 'o', '_', '_']
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		SPLIT: ["['n']", "['_']", "['o']", "['_']", "['_']"]
		version for pattern CVVCC is INVALID
		[{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'}, {'ȝ', 't', 'ch', 'h', 'ȝh', '_'}, {'h', 't', '_'}]
		28
		OVERVIEW: version for pattern CVVCC
{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'}, {'ȝ', 't', 'ch', 'h', 'ȝh', '_'}, {'h', 't', '_'}
faulty splits: 28
['n']['']['a'][''][''] <-! naht
['n']['']['a'][''][''] <-! nacht
['n']['']['a'][''][''] <-! nast
['n']['']['a'][''][''] <-! naut
['n']['']['a'][''][''] <-! nawiþ
['n']['']['a'][''][''] <-! naƿt
['n']['']['a'][''][''] <-! nayt
['n']['']['a'][''][''] <-! naȝt
['n']['']['o'][''][''] <-! noct
['n']['']['o'][''][''] <-! noght
['n']['']['o'][''][''] <-! nogt
['n']['']['o'][''][''] <-! noh
['n']['']['o'][''][''] <-! nohht
['n']['']['o'][''][''] <-! noht
['n']['']['o'][''][''] <-! nohut
['n']['']['o'][''][''] <-! nocht
['n']['']['o'][''][''] <-! nochte
['n']['']['o'][''][''] <-! nost
['n']['']['o'][''][''] <-! not
['n']['']['o'][''][''] <-! nout
['n']['']['o'][''][''] <-! noƿit
['n']['']['o'][''][''] <-! nowit
['n']['']['o'][''][''] <-! noƿt
['n']['']['o'][''][''] <-! nowt
['n']['']['o'][''][''] <-! nowth
['n']['']['o'][''][''] <-! noþt
['n']['']['o'][''][''] <-! noȝt
['n']['']['o'][''][''] <-! noȝte
n | a | u | h | t
n | aƿ | i | h | t
n | aw | i | h | t
n | aƿ | i | ch | t
n | o | u | h | t
n | o | u | t | h
n | o | u | ȝh | t
n | o | u | ȝ | t
n | oƿ | i | h | t
n | ow | i | h | t
n | ow | i | ȝ | t
n | _ | a | _ | _
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
['n'] | ['_'] | ['a'] | ['_'] | ['_']
n | _ | e | _ | _
n | _ | o | _ | _
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
['n'] | ['_'] | ['o'] | ['_'] | ['_']
1 : {'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'ay', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'ou', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'e', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'aw', 'oƿ', 'au', '_', 'o'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'},{'ow', 'aƿ', 'a', 'o', 'aw', '_', 'oƿ'}
3 : {'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'g', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'u'},{'ȝ', 't', 'hu', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'þ'},{'ȝ', 't', 's', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'u'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 'c', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 'c', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'y'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 'c', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 's', 'ch', 'h', 'ȝh', '_'},{'ȝ', 'c', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'u'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'gh', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'g', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'w', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ƿ', 'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ƿ', 'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ƿ', 'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'u'},{'ȝ', 't', 'ch', 'h', 'ȝh', '_', 'y'},{'ƿ', 'ȝ', 't', 'ch', 'h', 'ȝh', '_'}
4 : {'h', 't', '_'},{'h', 't', '_', 'u'},{'h', 'ȝ', 't', '_'},{'h', 'ƿ', 't', '_'},{'h', 't', '_', 'w'},{'h', 't', '_', 'w'},{'h', 'c', 't', '_'},{'h', 'c', 't', '_'},{'gh', 'h', 't', '_'},{'h', 't', '_', 'y'},{'h', 't', '_', 'u'},{'h', 'ƿ', 't', '_'},{'h', 's', 't', '_'},{'h', 't', '_', 'w'},{'h', 's', 't', '_'},{'h', 't', '_', 'u'},{'h', 'ȝ', 't', '_'},{'ch', 'h', 't', '_'},{'h', 't', '_'},{'h', 'ƿ', 't', '_'},{'h', 't', '_', 'w'},{'h', 't', '_', 'y'},{'h', 't', '_', 'w'},{'h', 't', '_'},{'h', 't', '_'},{'h', 'ȝ', 't', '_'},{'h', 't', '_', 'w'},{'h', 't', '_', 'u'},{'g', 'h', 't', '_'},{'h', 't', '_'},{'ch', 'h', 't', '_'},{'h', 't', '_'},{'h', 'ƿ', 't', '_'},{'h', 't', '_'},{'h', 't', '_', 'þ'},{'h', 't', '_', 'w'},{'h', 'c', 't', '_'},{'h', 'hu', 't', '_'},{'g', 'h', 't', '_'},{'h', 'c', 't', '_'},{'ch', 'h', 't', '_'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: n
					> version: n/o/ch/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/ou/ȝ/h/t
					TRYING: n
					> version: n/ou/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCVC : 1___
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					> version: n/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					> version: n/a/u/h/t
					TRYING: a
					> version: n/au/h/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					> version: n/a/u/t
					TRYING: a
					> version: n/au/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					> version: n/a/y/t
					TRYING: a
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> a, ay, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> a, au, o, e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					> version: n/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					> version: n/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: o
					> version: n/o/ch/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					> version: n/o/u/h/t
					TRYING: o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					> version: n/o/u/t
					TRYING: o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'th']
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 'h', 't']
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					> version: n/o/w/th
					TRYING: o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
			___CVCVC : 2___
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_']
				n/a(CV)
n/a/_(CVA)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: c
					adding blocked set: C = C >> ƿ, c, h, w, _
					> version: n/a/ch/t
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ch', 't']
				n/a/c/h/t(CVCCC)
n/a/ch/t(CVCC)
n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: s
					adding blocked set: C = C >> ƿ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 's', 't']
				n/a/s/t(CVCC)
n/a/_/s/t(CVACC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: u
					> version: n/a/u/h/t
					TRYING: u
					> version: n/au/h/t
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					RESULT:  ['h', 'u']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h', 'rgx': '((n))/((a)|(au))/((h)|(u))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: u
					> version: n/a/u/t
					TRYING: u
					> version: n/au/t
					TRYING: t
					adding blocked set: C = C >> ƿ, t, h, w, _, u
					RESULT:  ['u']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((u))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au/t', 'rgx': '((n))/((a)|(au))/((u))$'}
				_____REMOVING________['n', 'au', 't']
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: w
					> version: n/a/w/i/h/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((w))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((ƿ))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> ƿ, h, w, _, u, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ', 'rgx': '((n))/((a))/((ȝ))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e']
				n/_/e(CAV)
n/_/_/e(CAAV)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_']
				n/o(CV)
n/o/_(CVA)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 't']
				n/o/c/t(CVCC)
n/o/_/c/t(CVACC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> ƿ, ȝ, h, w, g, _, u
					> version: n/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> ƿ, ȝ, gh, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o/gh', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: g
					adding blocked set: C = C >> ƿ, ȝ, h, w, g, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 't']
				n/o/g/t(CVCC)
n/o/_/g/t(CVACC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					> version: n/o/ch/t
					TRYING: ch
					adding blocked set: C = C >> ƿ, ȝ, ch, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'ch', 't']
				n/o/c/h/t(CVCCC)
n/o/ch/t(CVCC)
n/o/_/c/h/t(CVACCC)
n/o/_/ch/t(CVACC)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				version split: ['n', 'o', '_', 'c', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ch', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> ƿ, ȝ, c, h, w, _, u
					> version: n/o/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ƿ, ȝ, ch, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', 'o', '_', 'ch', 't', 'e']
				n/o/c/h/t/e(CVCCCV)
n/o/ch/t/e(CVCCV)
n/o/_/c/h/t/e(CVACCCV)
n/o/_/ch/t/e(CVACCV)
				version split: ['n', 'o', 'c', 'h', 't', 'e']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't', 'e']
				version split: ['n', 'o', 'ch', 't', 'e']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ch', 't', 'e']
				version split: ['n', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: s
					adding blocked set: C = C >> ƿ, ȝ, s, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 's', 't']
				n/o/s/t(CVCC)
n/o/_/s/t(CVACC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: t
					adding blocked set: C = C >> ƿ, ȝ, t, h, w, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 't']
				n/o/t(CVC)
n/o/_/t(CVAC)
				version split: ['n', 'o', 't']
				{'string': 'n/o/t', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: u
					> version: n/o/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: u
					> version: n/o/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: u
					> version: n/o/u/t/h
					TRYING: u
					> version: n/o/u/th
					TRYING: u
					> version: n/o/u/th
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: u
					> version: n/o/u/ȝ/h/t
					TRYING: u
					> version: n/o/u/ȝh/t
					TRYING: u
					> version: n/o/u/ȝh/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: u
					> version: n/o/u/ȝ/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((u))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/w/i/h/t
					TRYING: w
					> version: n/o/w/i/h/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/w/i/ȝ/t
					TRYING: w
					> version: n/o/w/i/ȝ/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((ƿ))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: w
					> version: n/o/w/th
					TRYING: w
					RESULT:  ['w']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((w))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: þ
					adding blocked set: C = C >> ƿ, ȝ, h, w, _, u, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'þ', 't']
				n/o/þ/t(CVCC)
n/o/_/þ/t(CVACC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o/þ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((ȝ))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((ȝ))$'}
			___CVCVC : 3___
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_']
				n/a/_(CVA)
n/a/_/_(CVAA)
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_']
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/c/h/t
					TRYING: c
					> version: n/a/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ch', 't']
				n/a/_/c/h/t(CVACCC)
n/a/_/ch/t(CVACC)
n/a/_/_/c/h/t(CVAACCC)
n/a/_/_/ch/t(CVAACC)
				version split: ['n', 'a', '_', 'c', 'h', 't']
				{'string': 'n/a/_/c', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ch', 't']
				{'string': 'n/a/_/ch', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 's', 't']
				n/a/_/s/t(CVACC)
n/a/_/_/s/t(CVAACC)
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 's', 't']
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: h
					> version: n/a/u/h/t
					TRYING: h
					> version: n/au/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'au', 'h', '_', 't']
				n/a/u/h/t(CVCCC)
n/a/u/h/t(CVVCC)
n/au/h/t(CVCC)
n/a/u/_/h/t(CVAACC)
n/a/u/_/h/t(CVAACC)
n/au/h/_/t(CVCAC)
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u/h', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/t
					TRYING: t
					> version: n/a/u/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				adding dashed alternative: ['n', 'a', 'u', '_', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/a/u/_/t(CVAAC)
n/a/u/_/t(CVAAC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u/t', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_', 'rgx': '((n))/((a)|(au))/((u))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: i
					> version: n/a/ƿ/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: i
					> version: n/a/w/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i', 'rgx': '((n))/((a))/((w))/((i))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/ƿ/i/c/h/t
					TRYING: i
					> version: n/a/ƿ/i/c/h/t
					TRYING: i
					> version: n/a/ƿ/i/ch/t
					TRYING: i
					> version: n/a/ƿ/i/ch/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ/i', 'rgx': '((n))/((a))/((ƿ))/((i))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', '_', 't']
				n/a/ƿ/t(CVCC)
n/a/ƿ/_/t(CVCAC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ/t', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_', 'rgx': '((n))/((a))/((ƿ))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: y
					> version: n/a/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((y))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ȝ', '_', 't']
				n/a/ȝ/t(CVCC)
n/a/ȝ/_/t(CVCAC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ/t', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_', 'rgx': '((n))/((a))/((ȝ))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_']
				n/o/_(CVA)
n/o/_/_(CVAA)
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_']
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/c/t
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 't']
				n/o/_/c/t(CVACC)
n/o/_/_/c/t(CVAACC)
				version split: ['n', 'o', '_', 'c', 't']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/g/h/t
					TRYING: g
					> version: n/o/_/gh/t
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'gh', 't']
				n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_/gh', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 't']
				n/o/_/g/t(CVACC)
n/o/_/_/g/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_']
				n/o/h(CVC)
n/o/h/_(CVCA)
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 'h', 't']
				n/o/h/h/t(CVCCC)
n/o/h/_/h/t(CVCACC)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 't']
				n/o/h/t(CVCC)
n/o/h/_/t(CVCAC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h/t', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/_/c/h/t
					TRYING: c
					> version: n/o/_/ch/t
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ch', 't']
				n/o/_/c/h/t(CVACCC)
n/o/_/ch/t(CVACC)
n/o/_/_/c/h/t(CVAACCC)
n/o/_/_/ch/t(CVAACC)
				version split: ['n', 'o', '_', 'c', 'h', 't']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 'h', 't']
				version split: ['n', 'o', '_', 'ch', 't']
				{'string': 'n/o/_/ch', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ch', 't']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nochte
					resolving (2)
					> version: n/o/_/c/h/t/e
					TRYING: c
					> version: n/o/_/ch/t/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', 'ch', 't', 'e']
				n/o/_/c/h/t/e(CVACCCV)
n/o/_/ch/t/e(CVACCV)
n/o/_/_/c/h/t/e(CVAACCCV)
n/o/_/_/ch/t/e(CVAACCV)
				version split: ['n', 'o', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/c', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'c', 'h', 't', 'e']
				version split: ['n', 'o', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/ch', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ch', 't', 'e']
				version split: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/s/t
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 's', 't']
				n/o/_/s/t(CVACC)
n/o/_/_/s/t(CVAACC)
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_/s', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 's', 't']
				version split: ['n', 'o', '_', '_', 's', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 't']
				n/o/_/t(CVAC)
n/o/_/_/t(CVAAC)
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_/t', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 't']
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: h
					> version: n/o/u/h/t
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/o/u/_/h/t(CVAACC)
n/o/u/_/h/t(CVAACC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u/h', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u/h', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: t
					> version: n/o/u/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/o/u/_/t(CVAAC)
n/o/u/_/t(CVAAC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: t
					> version: n/o/u/t/h
					TRYING: t
					> version: n/o/u/th
					TRYING: th
					> version: n/o/u/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'u', '_', 'th']
				adding dashed alternative: ['n', 'o', 'u', '_', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/o/u/_/t/h(CVAACC)
n/o/u/_/t/h(CVAACC)
n/o/u/_/th(CVAAC)
n/o/u/_/th(CVAAC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u/t', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u/th', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u/th', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/ȝ/h/t
					TRYING: ȝ
					> version: n/o/u/ȝh/t
					TRYING: ȝh
					> version: n/o/u/ȝh/t
					TRYING: ȝh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝh', 't']
				n/o/u/ȝ/h/t(CVCCCC)
n/o/u/ȝ/h/t(CVVCCC)
n/o/u/ȝh/t(CVCCC)
n/o/u/ȝh/t(CVVCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝh/t(CVAACC)
n/o/u/_/ȝh/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u/ȝh', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u/ȝh', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: ȝ
					> version: n/o/u/ȝ/t
					TRYING: ȝ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/o/u/_/ȝ/t(CVAACC)
n/o/u/_/ȝ/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u/ȝ', 'rgx': '((n))/((o))/((u))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_', 'rgx': '((n))/((o))/((u))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/ƿ/i/h/t
					TRYING: i
					> version: n/o/ƿ/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ/i', 'rgx': '((n))/((o))/((ƿ))/((i))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ/i', 'rgx': '((n))/((o))/((ƿ))/((i))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/w/i/h/t
					TRYING: i
					> version: n/o/w/i/h/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/w/i/ȝ/t
					TRYING: i
					> version: n/o/w/i/ȝ/t
					TRYING: i
					RESULT:  ['i']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w/i', 'rgx': '((n))/((o))/((w))/((i))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ƿ', '_', 't']
				n/o/ƿ/t(CVCC)
n/o/ƿ/_/t(CVCAC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ/t', 'rgx': '((n))/((o))/((ƿ))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'o', 'ƿ', '_', 't']
				{'string': 'n/o/ƿ/_', 'rgx': '((n))/((o))/((ƿ))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', 't']
				n/o/w/t(CVCC)
n/o/w/_/t(CVCAC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w/t', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'o', 'w', '_', 't']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: t
					> version: n/o/w/th
					TRYING: th
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', '_', 't', 'h']
				adding dashed alternative: ['n', 'o', 'w', '_', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/o/w/_/t/h(CVCACC)
n/o/w/_/th(CVCAC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w/t', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w/th', 'rgx': '((n))/((o))/((w))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'o', 'w', '_', 't', 'h']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				version split: ['n', 'o', 'w', '_', 'th']
				{'string': 'n/o/w/_', 'rgx': '((n))/((o))/((w))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/þ/t
					TRYING: þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'þ', 't']
				n/o/_/þ/t(CVACC)
n/o/_/_/þ/t(CVAACC)
				version split: ['n', 'o', '_', 'þ', 't']
				{'string': 'n/o/_/þ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'þ', 't']
				version split: ['n', 'o', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', 't']
				n/o/ȝ/t(CVCC)
n/o/ȝ/_/t(CVCAC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', 'o', 'ȝ', '_', 't']
				{'string': 'n/o/ȝ/_', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ȝ', '_', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/o/ȝ/_/t/e(CVCACV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o/ȝ/t', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', 'o', 'ȝ', '_', 't', 'e']
				{'string': 'n/o/ȝ/_', 'rgx': '((n))/((o))/((ȝ))/((_))$'}
			___CVCVC : 4___
				ANALYSING: nawiþ
				adding littera based on matching pattern
				ANALYSING: nohut
				adding littera based on matching pattern
				ANALYSING: noƿit
				adding littera based on matching pattern
				ANALYSING: nowit
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_']
				n/a/_/_(CVAA)
n/a/_/_/_(CVAAA)
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_']
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/_/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					> version: n/a/_/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ch', 't']
				n/a/_/_/c/h/t(CVAACCC)
n/a/_/_/ch/t(CVAACC)
n/a/_/_/_/c/h/t(CVAAACCC)
n/a/_/_/_/ch/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/c/h', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/ch/t', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/c', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ch', 't']
				{'string': 'n/a/_/_/_/ch', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ch', 't']
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/_/s/t
					TRYING: s
					adding blocked set: C = C >> þ, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 's', 't']
				n/a/_/_/s/t(CVAACC)
n/a/_/_/_/s/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 's', 't']
				{'string': 'n/a/_/_/s/t', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 's', 't']
				version split: ['n', 'a', '_', '_', '_', 's', 't']
				{'string': 'n/a/_/_/_/s', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 's', 't']
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/a/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/au/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((t))$'}
				_____REMOVING________['n', 'a', 'u', '_', 'h', 't']
				version split: ['n', 'a', 'u', '_', 'h', 't']
				{'string': 'n/a/u/_/h/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((t))$'}
				_____REMOVING________['n', 'a', 'u', '_', 'h', 't']
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_/t', 'rgx': '((n))/((a)|(au))/((h)|(u))/((_))/((t))$'}
				ANALYSING: naut
					resolving (2)
					> version: n/a/u/_/t
					TRYING: t
					> version: n/a/u/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((t))$'}
				version split: ['n', 'a', 'u', '_', 't']
				{'string': 'n/a/u/_/t', 'rgx': '((n))/((a)|(au))/((u))/((_))/((t))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/a/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				n/a/ƿ/i/h/t(CVCCCC)
n/a/ƿ/i/h/t(CVCVCC)
n/a/ƿ/i/_/h/t(CVCAACC)
n/a/ƿ/i/_/h/t(CVCAACC)
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i/h/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ/i/h/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/a/ƿ/i/_/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'h', 't']
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/a/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'a', 'w', 'i', '_', 'h', 't']
				n/a/w/i/h/t(CVCCCC)
n/a/w/i/h/t(CVCVCC)
n/a/w/i/_/h/t(CVCAACC)
n/a/w/i/_/h/t(CVCAACC)
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i/h/t', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w/i/h/t', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', '_', 'h', 't']
				version split: ['n', 'a', 'w', 'i', '_', 'h', 't']
				{'string': 'n/a/w/i/_/h', 'rgx': '((n))/((a))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', '_', 'h', 't']
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/ƿ/i/c/h/t
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					> version: n/a/ƿ/i/c/h/t
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, þ, t, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				adding dashed alternative: ['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				n/a/ƿ/i/c/h/t(CVCCCCC)
n/a/ƿ/i/c/h/t(CVCVCCC)
n/a/ƿ/i/ch/t(CVCCCC)
n/a/ƿ/i/ch/t(CVCVCC)
n/a/ƿ/i/_/c/h/t(CVCAACCC)
n/a/ƿ/i/_/c/h/t(CVCAACCC)
n/a/ƿ/i/_/ch/t(CVCAACC)
n/a/ƿ/i/_/ch/t(CVCAACC)
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i/c/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i/c/h', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ/i/ch/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ/i/ch/t', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i/_/c', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				{'string': 'n/a/ƿ/i/_/c', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				{'string': 'n/a/ƿ/i/_/ch', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				version split: ['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				{'string': 'n/a/ƿ/i/_/ch', 'rgx': '((n))/((a))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', '_', 'ch', 't']
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ƿ', '_', 't']
				{'string': 'n/a/ƿ/_/t', 'rgx': '((n))/((a))/((ƿ))/((_))/((t))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: t
					> version: n/a/_/y/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((t))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y/t', 'rgx': '((n))/((a))/((_))/((y))/((t))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'ȝ', '_', 't']
				{'string': 'n/a/ȝ/_/t', 'rgx': '((n))/((a))/((ȝ))/((_))/((t))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e', '_']
				n/_/_/e(CAAV)
n/_/_/e/_(CAAVA)
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e']
				version split: ['n', '_', '_', 'e', '_']
				{'string': 'n/_/_/e/_', 'rgx': '((n))/((_))/((_))/((e))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_']
				n/o/_/_(CVAA)
n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_']
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/_/_/c/t
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'c', 't']
				n/o/_/_/c/t(CVAACC)
n/o/_/_/_/c/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/c/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 't']
				version split: ['n', 'o', '_', '_', '_', 'c', 't']
				{'string': 'n/o/_/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'c', 't']
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> g, þ, t, _
					> version: n/o/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'gh', 't']
				n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/g/h', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/gh/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> g, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 't']
				n/o/_/_/g/t(CVAACC)
n/o/_/_/_/g/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/g/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_']
				n/o/h/_(CVCA)
n/o/h/_/_(CVCAA)
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_']
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', 'h', 't']
				n/o/h/_/h/t(CVCACC)
n/o/h/_/_/h/t(CVCAACC)
				version split: ['n', 'o', 'h', '_', 'h', 't']
				{'string': 'n/o/h/_/h/t', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'h', 't']
				version split: ['n', 'o', 'h', '_', '_', 'h', 't']
				{'string': 'n/o/h/_/_/h', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_', 'h', 't']
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_/t', 'rgx': '((n))/((o))/((h))/((_))/((t))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/_/_/c/h/t
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					> version: n/o/_/_/ch/t
					TRYING: ch
					adding blocked set: C = C >> ch, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'c', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ch', 't']
				n/o/_/_/c/h/t(CVAACCC)
n/o/_/_/ch/t(CVAACC)
n/o/_/_/_/c/h/t(CVAAACCC)
n/o/_/_/_/ch/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'c', 'h', 't']
				{'string': 'n/o/_/_/c/h', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_/ch/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ch', 't']
				version split: ['n', 'o', '_', '_', '_', 'c', 'h', 't']
				{'string': 'n/o/_/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'c', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'ch', 't']
				{'string': 'n/o/_/_/_/ch', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ch', 't']
				ANALYSING: nochte
					resolving (2)
					> version: n/o/_/_/c/h/t/e
					TRYING: c
					adding blocked set: C = C >> þ, c, t, _
					> version: n/o/_/_/ch/t/e
					TRYING: ch
					adding blocked set: C = C >> ch, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'c', 'h', 't', 'e']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ch', 't', 'e']
				n/o/_/_/c/h/t/e(CVAACCCV)
n/o/_/_/ch/t/e(CVAACCV)
n/o/_/_/_/c/h/t/e(CVAAACCCV)
n/o/_/_/_/ch/t/e(CVAAACCV)
				version split: ['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/_/c/h', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'c', 'h', 't', 'e']
				version split: ['n', 'o', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_/ch/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ch', 't', 'e']
				version split: ['n', 'o', '_', '_', '_', 'c', 'h', 't', 'e']
				{'string': 'n/o/_/_/_/c', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'c', 'h', 't', 'e']
				version split: ['n', 'o', '_', '_', '_', 'ch', 't', 'e']
				{'string': 'n/o/_/_/_/ch', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ch', 't', 'e']
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/_/s/t
					TRYING: s
					adding blocked set: C = C >> þ, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 's', 't']
				n/o/_/_/s/t(CVAACC)
n/o/_/_/_/s/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 's', 't']
				{'string': 'n/o/_/_/s/t', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 's', 't']
				version split: ['n', 'o', '_', '_', '_', 's', 't']
				{'string': 'n/o/_/_/_/s', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 's', 't']
				ANALYSING: not
					resolving (1)
					> version: n/o/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_/t', 'rgx': '((n))/((o))/((_))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/o/u/_/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'h', 't']
				n/o/u/_/h/t(CVAACC)
n/o/u/_/h/t(CVAACC)
n/o/u/_/_/h/t(CVAAACC)
n/o/u/_/_/h/t(CVAAACC)
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'h', 't']
				{'string': 'n/o/u/_/h/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'h', 't']
				version split: ['n', 'o', 'u', '_', '_', 'h', 't']
				{'string': 'n/o/u/_/_/h', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'h', 't']
				version split: ['n', 'o', 'u', '_', '_', 'h', 't']
				{'string': 'n/o/u/_/_/h', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'h', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/_/t
					TRYING: t
					> version: n/o/u/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				version split: ['n', 'o', 'u', '_', 't']
				{'string': 'n/o/u/_/t', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/_/t/h
					TRYING: t
					> version: n/o/u/_/t/h
					TRYING: t
					> version: n/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> þ, t, _, th
					> version: n/o/u/_/th
					TRYING: th
					adding blocked set: C = C >> þ, t, _, th
					RESULT:  ['t']
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_/t/h', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', 't', 'h']
				{'string': 'n/o/u/_/t/h', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', 't', 'h']
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_/th', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'th']
				version split: ['n', 'o', 'u', '_', 'th']
				{'string': 'n/o/u/_/th', 'rgx': '((n))/((o))/((u))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'th']
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/_/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					> version: n/o/u/_/ȝ/h/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					> version: n/o/u/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> þ, t, _, ȝh
					> version: n/o/u/_/ȝh/t
					TRYING: ȝh
					adding blocked set: C = C >> þ, t, _, ȝh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝh', 't']
				n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝ/h/t(CVAACCC)
n/o/u/_/ȝh/t(CVAACC)
n/o/u/_/ȝh/t(CVAACC)
n/o/u/_/_/ȝ/h/t(CVAAACCC)
n/o/u/_/_/ȝ/h/t(CVAAACCC)
n/o/u/_/_/ȝh/t(CVAAACC)
n/o/u/_/_/ȝh/t(CVAAACC)
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ/h', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/ȝ/h', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/ȝh/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/ȝh/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/_/ȝh', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝh', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝh', 't']
				{'string': 'n/o/u/_/_/ȝh', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					> version: n/o/u/_/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', 'u', '_', '_', 'ȝ', 't']
				n/o/u/_/ȝ/t(CVAACC)
n/o/u/_/ȝ/t(CVAACC)
n/o/u/_/_/ȝ/t(CVAAACC)
n/o/u/_/_/ȝ/t(CVAAACC)
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 't']
				version split: ['n', 'o', 'u', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/ȝ/t', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', 'ȝ', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ', 't']
				version split: ['n', 'o', 'u', '_', '_', 'ȝ', 't']
				{'string': 'n/o/u/_/_/ȝ', 'rgx': '((n))/((o))/((u))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'u', '_', '_', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/o/ƿ/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				n/o/ƿ/i/h/t(CVCCCC)
n/o/ƿ/i/h/t(CVCVCC)
n/o/ƿ/i/_/h/t(CVCAACC)
n/o/ƿ/i/_/h/t(CVCAACC)
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ/i/h/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ/i/h/t', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/o/ƿ/i/_/h', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				{'string': 'n/o/ƿ/i/_/h', 'rgx': '((n))/((o))/((ƿ))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', '_', 'h', 't']
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					> version: n/o/w/i/h/t
					TRYING: h
					adding blocked set: C = C >> h, þ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 'h', 't']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 'h', 't']
				n/o/w/i/h/t(CVCCCC)
n/o/w/i/h/t(CVCVCC)
n/o/w/i/_/h/t(CVCAACC)
n/o/w/i/_/h/t(CVCAACC)
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w/i/h/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w/i/h/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', '_', 'h', 't']
				{'string': 'n/o/w/i/_/h', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', '_', 'h', 't']
				version split: ['n', 'o', 'w', 'i', '_', 'h', 't']
				{'string': 'n/o/w/i/_/h', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', '_', 'h', 't']
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/w/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					> version: n/o/w/i/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> þ, ȝ, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				n/o/w/i/ȝ/t(CVCCCC)
n/o/w/i/ȝ/t(CVCVCC)
n/o/w/i/_/ȝ/t(CVCAACC)
n/o/w/i/_/ȝ/t(CVCAACC)
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w/i/ȝ/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w/i/ȝ/t', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				{'string': 'n/o/w/i/_/ȝ', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				{'string': 'n/o/w/i/_/ȝ', 'rgx': '((n))/((o))/((w))/((i))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', '_', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ƿ', '_', 't']
				{'string': 'n/o/ƿ/_/t', 'rgx': '((n))/((o))/((ƿ))/((_))/((t))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'w', '_', 't']
				{'string': 'n/o/w/_/t', 'rgx': '((n))/((o))/((w))/((_))/((t))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/_/t/h
					TRYING: t
					> version: n/o/w/_/th
					TRYING: th
					adding blocked set: C = C >> þ, t, _, th
					RESULT:  ['t']
				version split: ['n', 'o', 'w', '_', 't', 'h']
				{'string': 'n/o/w/_/t/h', 'rgx': '((n))/((o))/((w))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'w', '_', 't', 'h']
				version split: ['n', 'o', 'w', '_', 'th']
				{'string': 'n/o/w/_/th', 'rgx': '((n))/((o))/((w))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'w', '_', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/_/_/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'o', '_', '_', 'þ', 't']
				{'string': 'n/o/_/_/þ/t', 'rgx': '((n))/((o))/((_))/((_))/((þ))$'}
				_____REMOVING________['n', 'o', '_', '_', 'þ', 't']
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ȝ', '_', 't']
				{'string': 'n/o/ȝ/_/t', 'rgx': '((n))/((o))/((ȝ))/((_))/((t))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/_/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'ȝ', '_', 't', 'e']
				{'string': 'n/o/ȝ/_/t/e', 'rgx': '((n))/((o))/((ȝ))/((_))/((t))$'}
				_____REMOVING________['n', 'o', 'ȝ', '_', 't', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', '_', '_', '_']
		only one version left: ['n', 'a', 'h', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'au', 'h', '_', 't']
		only one version left: ['n', 'a', 'u', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', 'ƿ', '_', 't']
		only one version left: ['n', 'a', '_', 'y', 't']
		only one version left: ['n', 'a', 'ȝ', '_', 't']
		only one version left: ['n', '_', '_', 'e', '_']
		only one version left: ['n', 'o', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'h', '_', '_']
		FAIL: 
		only one version left: ['n', 'o', 'h', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', '_', '_', 't']
		FAIL: 
		only one version left: ['n', 'o', 'u', '_', 't']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'ƿ', '_', 't']
		only one version left: ['n', 'o', 'w', '_', 't']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'ȝ', '_', 't']
		FAIL: 
		SPLIT: ['n', 'a', 'w', 'i', 'þ']
		SPLIT: ['n', 'o', 'h', 'u', 't']
		SPLIT: ['n', 'o', 'ƿ', 'i', 't']
		SPLIT: ['n', 'o', 'w', 'i', 't']
		SPLIT: ['n', 'a', '_', '_', '_']
		['n', 'a', '_', '_', '_']
		SPLIT: ['n', 'a', 'h', '_', 't']
		['n', 'a', 'h', '_', 't']
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'au', 'h', '_', 't']
		['n', 'au', 'h', '_', 't']
		SPLIT: ['n', 'a', 'u', '_', 't']
		['n', 'a', 'u', '_', 't']
		['n', 'a', 'u', '_', 't']
		SPLIT: ["['n']", "['a']", "['ƿ']", "['i']", "['_']"]
		SPLIT: ["['n']", "['a']", "['w']", "['i']", "['_']"]
		SPLIT: ["['n']", "['a']", "['ƿ']", "['i']", "['_']"]
		SPLIT: ['n', 'a', 'ƿ', '_', 't']
		['n', 'a', 'ƿ', '_', 't']
		SPLIT: ['n', 'a', '_', 'y', 't']
		['n', 'a', '_', 'y', 't']
		['n', 'a', '_', 'y', 't']
		SPLIT: ['n', 'a', 'ȝ', '_', 't']
		['n', 'a', 'ȝ', '_', 't']
		SPLIT: ['n', '_', '_', 'e', '_']
		['n', '_', '_', 'e', '_']
		SPLIT: ['n', 'o', '_', '_', '_']
		['n', 'o', '_', '_', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', '_', '_']
		['n', 'o', 'h', '_', '_']
		SPLIT: ["['n']", "['o']", "['h']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', '_', 't']
		['n', 'o', 'h', '_', 't']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', '_', '_', 't']
		['n', 'o', '_', '_', 't']
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'u', '_', 't']
		['n', 'o', 'u', '_', 't']
		['n', 'o', 'u', '_', 't']
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['t']"]
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['u']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['ƿ']", "['i']", "['_']"]
		SPLIT: ["['n']", "['o']", "['w']", "['i']", "['_']"]
		SPLIT: ["['n']", "['o']", "['w']", "['i']", "['_']"]
		SPLIT: ['n', 'o', 'ƿ', '_', 't']
		['n', 'o', 'ƿ', '_', 't']
		SPLIT: ['n', 'o', 'w', '_', 't']
		['n', 'o', 'w', '_', 't']
		SPLIT: ["['n']", "['o']", "['w']", "['_']", "['t']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['þ']"]
		SPLIT: ['n', 'o', 'ȝ', '_', 't']
		['n', 'o', 'ȝ', '_', 't']
		SPLIT: ["['n']", "['o']", "['ȝ']", "['_']", "['t']"]
		version for pattern CVCVC is INVALID
		[]
		22
		OVERVIEW: version for pattern CVCVC

faulty splits: 22
['n']['a'][''][''][''] <-! nacht
['n']['a'][''][''][''] <-! nast
['n']['a']['ƿ']['i'][''] <-! naƿiht
['n']['a']['w']['i'][''] <-! nawiht
['n']['a']['ƿ']['i'][''] <-! naƿicht
['n']['o'][''][''][''] <-! noct
['n']['o'][''][''][''] <-! noght
['n']['o'][''][''][''] <-! nogt
['n']['o']['h'][''][''] <-! nohht
['n']['o'][''][''][''] <-! nocht
['n']['o'][''][''][''] <-! nochte
['n']['o'][''][''][''] <-! nost
['n']['o']['u'][''][''] <-! nouht
['n']['o']['u']['']['t'] <-! nouth
['n']['o']['u'][''][''] <-! nouȝht
['n']['o']['u'][''][''] <-! nouȝt
['n']['o']['ƿ']['i'][''] <-! noƿiht
['n']['o']['w']['i'][''] <-! nowiht
['n']['o']['w']['i'][''] <-! nowiȝt
['n']['o']['w']['']['t'] <-! nowth
['n']['o']['']['']['þ'] <-! noþt
['n']['o']['ȝ']['']['t'] <-! noȝte
n | a | w | i | þ
n | o | h | u | t
n | o | ƿ | i | t
n | o | w | i | t
n | a | _ | _ | _
n | a | h | _ | t
['n'] | ['a'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_']
n | au | h | _ | t
n | a | u | _ | t
['n'] | ['a'] | ['ƿ'] | ['i'] | ['_']
['n'] | ['a'] | ['w'] | ['i'] | ['_']
['n'] | ['a'] | ['ƿ'] | ['i'] | ['_']
n | a | ƿ | _ | t
n | a | _ | y | t
n | a | ȝ | _ | t
n | _ | _ | e | _
n | o | _ | _ | _
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
n | o | h | _ | _
['n'] | ['o'] | ['h'] | ['_'] | ['_']
n | o | h | _ | t
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_']
n | o | _ | _ | t
['n'] | ['o'] | ['u'] | ['_'] | ['_']
n | o | u | _ | t
['n'] | ['o'] | ['u'] | ['_'] | ['t']
['n'] | ['o'] | ['u'] | ['_'] | ['_']
['n'] | ['o'] | ['u'] | ['_'] | ['_']
['n'] | ['o'] | ['ƿ'] | ['i'] | ['_']
['n'] | ['o'] | ['w'] | ['i'] | ['_']
['n'] | ['o'] | ['w'] | ['i'] | ['_']
n | o | ƿ | _ | t
n | o | w | _ | t
['n'] | ['o'] | ['w'] | ['_'] | ['t']
['n'] | ['o'] | ['_'] | ['_'] | ['þ']
n | o | ȝ | _ | t
['n'] | ['o'] | ['ȝ'] | ['_'] | ['t']
1 : {'a', 'au', 'o', 'e'}
2 : {'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 's', 'h', 'w', '_'},{'ƿ', 'ȝ', 't', 'h', 'w', '_', 'u'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'c', 'h', 'w', '_'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', '_', 'u', 'þ'},{'ƿ', 'ȝ', 'gh', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 's', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'}
4 : {'þ', 's', 't', '_'},{'þ', 'c', 't', '_'},{'ch', 'þ', 't', '_'},{'g', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'þ', 'c', 't', '_'},{'þ', 't', '_', 'ȝh'},{'þ', 'ȝ', 't', '_'},{'þ', 'c', 't', '_'},{'þ', 'ȝ', 't', '_'},{'þ', 'ȝ', 't', '_'},{'h', 'þ', 't', '_'},{'þ', 'c', 't', '_'},{'ch', 'þ', 't', '_'},{'ch', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'þ', 'ȝ', 't', '_'},{'ch', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'gh', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'ch', 'þ', 't', '_'},{'þ', 'c', 't', '_'},{'þ', 'ȝ', 't', '_'},{'þ', 'ȝ', 't', '_'},{'h', 'þ', 't', '_'},{'g', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'h', 'þ', 't', '_'},{'þ', 't', '_', 'ȝh'},{'þ', 's', 't', '_'},{'þ', 'c', 't', '_'}
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'au', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'aƿ', 'ln': 2, 'index': 1}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'aw', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ay', 'ln': 2, 'index': 1}]]
	[[{'lit': 'gh', 'ln': 2, 'index': 2}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ȝh', 'ln': 2, 'index': 3}], [{'lit': 'ou', 'ln': 2, 'index': 1}], [{'lit': 'ȝh', 'ln': 2, 'index': 3}, {'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ou', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'oƿ', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}]]
	[[{'lit': 'th', 'ln': 2, 'index': 3}], [{'lit': 'ow', 'ln': 2, 'index': 1}], [{'lit': 'th', 'ln': 2, 'index': 3}, {'lit': 'ow', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CV is invalid
	Pattern CVCVCCC is valid
	Pattern CVVCCC is valid
	Pattern CVVC is invalid
	Pattern CVCCC is valid
	Pattern CVCCCCC is invalid
	Pattern CVCC is invalid
	Pattern CVCVCC is valid
	Pattern CVVCC is valid
	Pattern CVCCCV is valid
	Pattern CVCVC is valid
	Pattern CVCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Making the selection for pattern: CVCCCV
	Selection for pattern: CVCCCV completed
	Making a version for pattern: CVCCCV
			___CVCCCV : 0___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: n
					> version: n/a/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: n
					> version: n/a/u/h/t
					TRYING: n
					> version: n/au/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: n
					> version: n/a/u/t
					TRYING: n
					> version: n/au/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'au', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/a/ƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					> version: n/aƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/a/w/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					> version: n/aw/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/aƿ/i/c/h/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/a/ƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					> version: n/aƿ/i/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/a/w/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					> version: n/aw/i/þ
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: n
					> version: n/aƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: n
					> version: n/a/y/t
					TRYING: n
					> version: n/ay/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'e']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: n
					> version: n/o/gh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/h/u/t
					TRYING: n
					> version: n/o/hu/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: n
					> version: n/o/ch/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 's', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: n
					> version: n/o/u/h/t
					TRYING: n
					> version: n/ou/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: n
					> version: n/o/u/t
					TRYING: n
					> version: n/ou/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/t/h
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/o/u/th
					TRYING: n
					> version: n/ou/t/h
					TRYING: n
					> version: n/ou/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝ/h/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/o/u/ȝh/t
					TRYING: n
					> version: n/ou/ȝ/h/t
					TRYING: n
					> version: n/ou/ȝh/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/o/u/ȝ/t
					TRYING: n
					> version: n/ou/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/o/ƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					> version: n/oƿ/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/o/w/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					> version: n/ow/i/h/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/o/ƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					> version: n/oƿ/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: n
					> version: n/o/w/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					> version: n/ow/i/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/o/w/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					> version: n/ow/i/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: n
					> version: n/oƿ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: n
					> version: n/ow/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: n
					> version: n/o/w/th
					TRYING: n
					> version: n/ow/t/h
					TRYING: n
					> version: n/ow/th
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n', 'rgx': '((n))$'}
				version split: ['n', 'ow', 'th']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n', 'rgx': '((n))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: n
					RESULT:  ['n']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n', 'rgx': '((n))$'}
			___CVCCCV : 1___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: a
					> version: n/a/ch/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: a
					> version: n/a/u/h/t
					TRYING: a
					> version: n/au/h/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: a
					> version: n/a/u/t
					TRYING: a
					> version: n/au/t
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'a', 'au'}
					RESULT:  ['a', 'au']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a', 'rgx': '((n))/((a)|(au))$'}
				version split: ['n', 'au', 't']
				{'string': 'n/au', 'rgx': '((n))/((a)|(au))$'}
				ANALYSING: naƿiht
					resolving (4)
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/a/ƿ/i/h/t
					TRYING: a
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (4)
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/a/w/i/h/t
					TRYING: a
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/h/t
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				version split: ['n', 'aw', 'i', 'h', 't']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'h', 't']
				ANALYSING: naƿicht
					resolving (8)
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/a/ƿ/i/c/h/t
					TRYING: a
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/c/h/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/a/ƿ/i/ch/t
					TRYING: a
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					> version: n/aƿ/i/ch/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'aƿ', 'i', 'c', 'h', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				version split: ['n', 'aƿ', 'i', 'ch', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 'i', 'ch', 't']
				ANALYSING: nawiþ
					resolving (4)
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/a/w/i/þ
					TRYING: a
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					> version: n/aw/i/þ
					TRYING: aw
					adding blocked set: V = V >> a, aw, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				version split: ['n', 'aw', 'i', 'þ']
				{'string': 'n/aw', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aw', 'i', 'þ']
				ANALYSING: naƿt
					resolving (2)
					> version: n/a/ƿ/t
					TRYING: a
					> version: n/aƿ/t
					TRYING: aƿ
					adding blocked set: V = V >> a, aƿ, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'aƿ', 't']
				{'string': 'n/aƿ', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'aƿ', 't']
				ANALYSING: nayt
					resolving (3)
					> version: n/a/y/t
					TRYING: a
					> version: n/a/y/t
					TRYING: a
					> version: n/ay/t
					TRYING: ay
					adding blocked set: V = V >> a, ay, au, o
					RESULT:  ['a']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				version split: ['n', 'ay', 't']
				{'string': 'n/ay', 'rgx': '((n))/((a))$'}
				_____REMOVING________['n', 'ay', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: a
					RESULT:  ['a']
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a', 'rgx': '((n))/((a))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/e
					TRYING: e
					adding blocked set: V = V >> a, au, o, e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', 'e']
				n/e(CV)
n/_/e(CAV)
				version split: ['n', 'e']
				{'string': 'n/e', 'rgx': '((n))/((_))$'}
				_____REMOVING________['n', 'e']
				version split: ['n', '_', 'e']
				{'string': 'n/_', 'rgx': '((n))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: o
					> version: n/o/gh/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/h/u/t
					TRYING: o
					> version: n/o/hu/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: o
					> version: n/o/ch/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: nouht
					resolving (3)
					> version: n/o/u/h/t
					TRYING: o
					> version: n/o/u/h/t
					TRYING: o
					> version: n/ou/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'h', 't']
				ANALYSING: nout
					resolving (3)
					> version: n/o/u/t
					TRYING: o
					> version: n/o/u/t
					TRYING: o
					> version: n/ou/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't']
				ANALYSING: nouth
					resolving (6)
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/t/h
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/o/u/th
					TRYING: o
					> version: n/ou/t/h
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/th
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 't', 'h']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 't', 'h']
				version split: ['n', 'ou', 'th']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'th']
				ANALYSING: nouȝht
					resolving (6)
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝ/h/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/o/u/ȝh/t
					TRYING: o
					> version: n/ou/ȝ/h/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					> version: n/ou/ȝh/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 'h', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 'h', 't']
				version split: ['n', 'ou', 'ȝh', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (3)
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/o/u/ȝ/t
					TRYING: o
					> version: n/ou/ȝ/t
					TRYING: ou
					adding blocked set: V = V >> a, ou, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ou', 'ȝ', 't']
				{'string': 'n/ou', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ou', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (4)
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/o/ƿ/i/h/t
					TRYING: o
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/h/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				version split: ['n', 'oƿ', 'i', 'h', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (4)
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/o/w/i/h/t
					TRYING: o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/h/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				version split: ['n', 'ow', 'i', 'h', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (4)
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/o/ƿ/i/t
					TRYING: o
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					> version: n/oƿ/i/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				version split: ['n', 'oƿ', 'i', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 'i', 't']
				ANALYSING: nowit
					resolving (4)
					> version: n/o/w/i/t
					TRYING: o
					> version: n/o/w/i/t
					TRYING: o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				version split: ['n', 'ow', 'i', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 't']
				ANALYSING: nowiȝt
					resolving (4)
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/o/w/i/ȝ/t
					TRYING: o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/i/ȝ/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				version split: ['n', 'ow', 'i', 'ȝ', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (2)
					> version: n/o/ƿ/t
					TRYING: o
					> version: n/oƿ/t
					TRYING: oƿ
					adding blocked set: V = V >> a, o, au, _, oƿ
					RESULT:  ['o']
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'oƿ', 't']
				{'string': 'n/oƿ', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'oƿ', 't']
				ANALYSING: nowt
					resolving (2)
					> version: n/o/w/t
					TRYING: o
					> version: n/ow/t
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't']
				ANALYSING: nowth
					resolving (4)
					> version: n/o/w/t/h
					TRYING: o
					> version: n/o/w/th
					TRYING: o
					> version: n/ow/t/h
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					> version: n/ow/th
					TRYING: ow
					adding blocked set: V = V >> ow, a, au, _, o
					RESULT:  ['o']
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				version split: ['n', 'ow', 't', 'h']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 't', 'h']
				version split: ['n', 'ow', 'th']
				{'string': 'n/ow', 'rgx': '((n))/((o))$'}
				_____REMOVING________['n', 'ow', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: o
					RESULT:  ['o']
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o', 'rgx': '((n))/((o))$'}
			___CVCCCV : 2___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_']
				n/a(CV)
n/a/_(CVA)
				version split: ['n', 'a']
				{'string': 'n/a', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a']
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h', 'rgx': '((n))/((a))/((h))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: c
					> version: n/a/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c', 'rgx': '((n))/((a))/((c)|(ch))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch', 'rgx': '((n))/((a))/((c)|(ch))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/s/t
					TRYING: s
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 's', 't']
				n/a/s/t(CVCC)
n/a/_/s/t(CVACC)
				version split: ['n', 'a', 's', 't']
				{'string': 'n/a/s', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 's', 't']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nauht
					resolving (3)
					> version: n/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/a/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/au/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'a', 'u', 'h', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((h))$'}
				_____REMOVING________['n', 'a', 'u', 'h', 't']
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h', 'rgx': '((n))/((a)|(au))/((h))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/a/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/au/t
					TRYING: t
					adding blocked set: C = C >> c, t, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', 'a', '_', 'u', 't']
				adding dashed alternative: ['n', 'au', '_', 't']
				n/a/u/t(CVCC)
n/a/u/t(CVVC)
n/au/t(CVC)
n/a/_/u/t(CVAAC)
n/a/_/u/t(CVAAC)
n/au/_/t(CVAC)
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'a', 'u', 't']
				{'string': 'n/a/u', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'a', 'u', 't']
				version split: ['n', 'au', 't']
				{'string': 'n/au/t', 'rgx': '((n))/((a)|(au))/((_))$'}
				_____REMOVING________['n', 'au', 't']
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				version split: ['n', 'au', '_', 't']
				{'string': 'n/au/_', 'rgx': '((n))/((a)|(au))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/a/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				n/a/ƿ/i/h/t(CVCCCC)
n/a/ƿ/i/h/t(CVCVCC)
n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/ƿ/i/h/t(CVACACC)
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/a/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'h', 't']
				n/a/w/i/h/t(CVCCCC)
n/a/w/i/h/t(CVCVCC)
n/a/_/w/i/h/t(CVACACC)
n/a/_/w/i/h/t(CVACACC)
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', 'w', 'i', 'h', 't']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/a/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/a/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				n/a/ƿ/i/c/h/t(CVCCCCC)
n/a/ƿ/i/c/h/t(CVCVCCC)
n/a/ƿ/i/ch/t(CVCCCC)
n/a/ƿ/i/ch/t(CVCVCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/ƿ/i/ch/t(CVACACC)
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/a/w/i/þ
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', 'w', 'i', 'þ']
				n/a/w/i/þ(CVCCC)
n/a/w/i/þ(CVCVC)
n/a/_/w/i/þ(CVACAC)
n/a/_/w/i/þ(CVACAC)
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', 'w', 'i', 'þ']
				{'string': 'n/a/w', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ƿ', 't']
				n/a/ƿ/t(CVCC)
n/a/_/ƿ/t(CVACC)
				version split: ['n', 'a', 'ƿ', 't']
				{'string': 'n/a/ƿ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ƿ', 't']
				version split: ['n', 'a', '_', 'ƿ', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> c, ch, h, _, y
					> version: n/a/y/t
					TRYING: y
					adding blocked set: C = C >> c, ch, h, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', 'y', 't']
				n/a/y/t(CVCC)
n/a/y/t(CVVC)
n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', 'y', 't']
				{'string': 'n/a/y', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ȝ', 't']
				n/a/ȝ/t(CVCC)
n/a/_/ȝ/t(CVACC)
				version split: ['n', 'a', 'ȝ', 't']
				{'string': 'n/a/ȝ', 'rgx': '((n))/((a))/((_))$'}
				_____REMOVING________['n', 'a', 'ȝ', 't']
				version split: ['n', 'a', '_', 'ȝ', 't']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', 'e']
				n/_/e(CAV)
n/_/_/e(CAAV)
				version split: ['n', '_', 'e']
				{'string': 'n/_/e', 'rgx': '((n))/((_))/((_))$'}
				_____REMOVING________['n', '_', 'e']
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_', 'rgx': '((n))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_']
				n/o(CV)
n/o/_(CVA)
				version split: ['n', 'o']
				{'string': 'n/o', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o']
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: c
					RESULT:  ['c']
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((c))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/g/h/t
					TRYING: g
					adding blocked set: C = C >> c, ch, h, g, _
					> version: n/o/gh/t
					TRYING: gh
					adding blocked set: C = C >> c, ch, gh, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'gh', 't']
				n/o/g/h/t(CVCCC)
n/o/gh/t(CVCC)
n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
				version split: ['n', 'o', 'g', 'h', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 'h', 't']
				version split: ['n', 'o', 'gh', 't']
				{'string': 'n/o/gh', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'gh', 't']
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/g/t
					TRYING: g
					adding blocked set: C = C >> c, ch, h, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'g', 't']
				n/o/g/t(CVCC)
n/o/_/g/t(CVACC)
				version split: ['n', 'o', 'g', 't']
				{'string': 'n/o/g', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'g', 't']
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				ANALYSING: nohut
					resolving (3)
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/h/u/t
					TRYING: h
					> version: n/o/hu/t
					TRYING: hu
					adding blocked set: C = C >> c, hu, ch, h, _
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))$'}
				version split: ['n', 'o', 'hu', 't']
				{'string': 'n/o/hu', 'rgx': '((n))/((o))/((h))$'}
				_____REMOVING________['n', 'o', 'hu', 't']
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: c
					> version: n/o/ch/t
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c', 'rgx': '((n))/((o))/((c)|(ch))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch', 'rgx': '((n))/((o))/((c)|(ch))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/s/t
					TRYING: s
					adding blocked set: C = C >> c, s, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 's', 't']
				n/o/s/t(CVCC)
n/o/_/s/t(CVACC)
				version split: ['n', 'o', 's', 't']
				{'string': 'n/o/s', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 's', 't']
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/t
					TRYING: t
					adding blocked set: C = C >> c, t, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 't']
				n/o/t(CVC)
n/o/_/t(CVAC)
				version split: ['n', 'o', 't']
				{'string': 'n/o/t', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 't']
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'h', 't']
				n/o/u/h/t(CVCCC)
n/o/u/h/t(CVVCC)
n/o/_/u/h/t(CVAACC)
n/o/_/u/h/t(CVAACC)
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', 'u', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 't']
				n/o/u/t(CVCC)
n/o/u/t(CVVC)
n/o/_/u/t(CVAAC)
n/o/_/u/t(CVAAC)
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', 'u', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't']
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/t/h
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/th
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/th
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'u', 'th']
				adding dashed alternative: ['n', 'o', '_', 'u', 'th']
				n/o/u/t/h(CVCCC)
n/o/u/t/h(CVVCC)
n/o/u/th(CVCC)
n/o/u/th(CVVC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/th(CVAAC)
n/o/_/u/th(CVAAC)
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 't', 'h']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 't', 'h']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', 'u', 'th']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'th']
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝh', 't']
				n/o/u/ȝ/h/t(CVCCCC)
n/o/u/ȝ/h/t(CVVCCC)
n/o/u/ȝh/t(CVCCC)
n/o/u/ȝh/t(CVVCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/u/ȝh/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', 'u', 'ȝh', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					> version: n/o/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> c, ch, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', 'u', 'ȝ', 't']
				n/o/u/ȝ/t(CVCCC)
n/o/u/ȝ/t(CVVCC)
n/o/_/u/ȝ/t(CVAACC)
n/o/_/u/ȝ/t(CVAACC)
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', 'u', 'ȝ', 't']
				{'string': 'n/o/u', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/o/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				n/o/ƿ/i/h/t(CVCCCC)
n/o/ƿ/i/h/t(CVCVCC)
n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/ƿ/i/h/t(CVACACC)
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/o/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'h', 't']
				n/o/w/i/h/t(CVCCCC)
n/o/w/i/h/t(CVCVCC)
n/o/_/w/i/h/t(CVACACC)
n/o/_/w/i/h/t(CVACACC)
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', 'w', 'i', 'h', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					> version: n/o/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 'i', 't']
				n/o/ƿ/i/t(CVCCC)
n/o/ƿ/i/t(CVCVC)
n/o/_/ƿ/i/t(CVACAC)
n/o/_/ƿ/i/t(CVACAC)
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', 'ƿ', 'i', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/o/w/i/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 't']
				n/o/w/i/t(CVCCC)
n/o/w/i/t(CVCVC)
n/o/_/w/i/t(CVACAC)
n/o/_/w/i/t(CVACAC)
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', 'w', 'i', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 't']
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/o/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				n/o/w/i/ȝ/t(CVCCCC)
n/o/w/i/ȝ/t(CVCVCC)
n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/w/i/ȝ/t(CVACACC)
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, ch, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ƿ', 't']
				n/o/ƿ/t(CVCC)
n/o/_/ƿ/t(CVACC)
				version split: ['n', 'o', 'ƿ', 't']
				{'string': 'n/o/ƿ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ƿ', 't']
				version split: ['n', 'o', '_', 'ƿ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/w/t
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 't']
				n/o/w/t(CVCC)
n/o/_/w/t(CVACC)
				version split: ['n', 'o', 'w', 't']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't']
				version split: ['n', 'o', '_', 'w', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/w/t/h
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					> version: n/o/w/th
					TRYING: w
					adding blocked set: C = C >> c, ch, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', 'w', 'th']
				n/o/w/t/h(CVCCC)
n/o/w/th(CVCC)
n/o/_/w/t/h(CVACCC)
n/o/_/w/th(CVACC)
				version split: ['n', 'o', 'w', 't', 'h']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 't', 'h']
				version split: ['n', 'o', 'w', 'th']
				{'string': 'n/o/w', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'w', 'th']
				version split: ['n', 'o', '_', 'w', 't', 'h']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				version split: ['n', 'o', '_', 'w', 'th']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: þ
					RESULT:  ['þ']
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o/þ', 'rgx': '((n))/((o))/((þ))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/ȝ/t
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ȝ', 't']
				n/o/ȝ/t(CVCC)
n/o/_/ȝ/t(CVACC)
				version split: ['n', 'o', 'ȝ', 't']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't']
				version split: ['n', 'o', '_', 'ȝ', 't']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/ȝ/t/e
					TRYING: ȝ
					adding blocked set: C = C >> c, ȝ, ch, h, _, þ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ȝ', 't', 'e']
				n/o/ȝ/t/e(CVCCV)
n/o/_/ȝ/t/e(CVACCV)
				version split: ['n', 'o', 'ȝ', 't', 'e']
				{'string': 'n/o/ȝ', 'rgx': '((n))/((o))/((_))$'}
				_____REMOVING________['n', 'o', 'ȝ', 't', 'e']
				version split: ['n', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))$'}
			___CVCCCV : 3___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_']
				n/a/_(CVA)
n/a/_/_(CVAA)
				version split: ['n', 'a', '_']
				{'string': 'n/a/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_']
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't']
				n/a/h/t(CVCC)
n/a/h/_/t(CVCAC)
				version split: ['n', 'a', 'h', 't']
				{'string': 'n/a/h/t', 'rgx': '((n))/((a))/((h))/((_))$'}
				_____REMOVING________['n', 'a', 'h', 't']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_', 'rgx': '((n))/((a))/((h))/((_))$'}
				ANALYSING: nacht
					resolving (2)
					> version: n/a/c/h/t
					TRYING: h
					> version: n/a/ch/t
					TRYING: t
					adding blocked set: C = C >> h, t, _
					RESULT:  ['h']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c/h', 'rgx': '((n))/((a))/((c)|(ch))/((h))$'}
				version split: ['n', 'a', 'ch', 't']
				{'string': 'n/a/ch/t', 'rgx': '((n))/((a))/((c)|(ch))/((h))$'}
				_____REMOVING________['n', 'a', 'ch', 't']
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s', 'rgx': '((n))/((a))/((_))/((s))$'}
				ANALYSING: nauht
					resolving (1)
					> version: n/au/h/t
					TRYING: t
					adding blocked set: C = C >> h, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'au', 'h', '_', 't']
				n/au/h/t(CVCC)
n/au/h/_/t(CVCAC)
				version split: ['n', 'au', 'h', 't']
				{'string': 'n/au/h/t', 'rgx': '((n))/((a)|(au))/((h))/((_))$'}
				_____REMOVING________['n', 'au', 'h', 't']
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_', 'rgx': '((n))/((a)|(au))/((h))/((_))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, s, u, _
					> version: n/a/_/u/t
					TRYING: u
					adding blocked set: C = C >> h, s, u, _
					> version: n/au/_/t
					TRYING: t
					adding blocked set: C = C >> h, s, t, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'au', '_', '_', 't']
				n/a/_/u/t(CVAAC)
n/a/_/u/t(CVAAC)
n/au/_/t(CVAC)
n/a/_/_/u/t(CVAAAC)
n/a/_/_/u/t(CVAAAC)
n/au/_/_/t(CVAAC)
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_/u', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'u', 't']
				version split: ['n', 'a', '_', 'u', 't']
				{'string': 'n/a/_/u', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'u', 't']
				version split: ['n', 'au', '_', 't']
				{'string': 'n/au/_/t', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				_____REMOVING________['n', 'au', '_', 't']
				version split: ['n', 'a', '_', '_', 'u', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'u', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				version split: ['n', 'au', '_', '_', 't']
				{'string': 'n/au/_/_', 'rgx': '((n))/((a)|(au))/((_))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					> version: n/a/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/ƿ/i/h/t(CVACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> h, s, _, w
					> version: n/a/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> h, s, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				n/a/_/w/i/h/t(CVACACC)
n/a/_/w/i/h/t(CVACACC)
n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/w/i/h/t(CVAACACC)
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					> version: n/a/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					> version: n/a/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					> version: n/a/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/c/h/t(CVACACCC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/ƿ/i/ch/t(CVACACC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> h, s, _, w
					> version: n/a/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> h, s, _, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				n/a/_/w/i/þ(CVACAC)
n/a/_/w/i/þ(CVACAC)
n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/w/i/þ(CVAACAC)
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/w', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, h, s, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'ƿ', 't']
				n/a/_/ƿ/t(CVACC)
n/a/_/_/ƿ/t(CVAACC)
				version split: ['n', 'a', '_', 'ƿ', 't']
				{'string': 'n/a/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ƿ', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> h, s, _, y
					> version: n/a/_/y/t
					TRYING: y
					adding blocked set: C = C >> h, s, _, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', '_', 'y', 't']
				n/a/_/y/t(CVAAC)
n/a/_/y/t(CVAAC)
n/a/_/_/y/t(CVAAAC)
n/a/_/_/y/t(CVAAAC)
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', 'y', 't']
				{'string': 'n/a/_/y', 'rgx': '((n))/((a))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'a', '_', 'ȝ', 't']
				{'string': 'n/a/_/ȝ', 'rgx': '((n))/((a))/((_))/((ȝ))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', 'e']
				n/_/_/e(CAAV)
n/_/_/_/e(CAAAV)
				version split: ['n', '_', '_', 'e']
				{'string': 'n/_/_/e', 'rgx': '((n))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', 'e']
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_', 'rgx': '((n))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_']
				n/o/_(CVA)
n/o/_/_(CVAA)
				version split: ['n', 'o', '_']
				{'string': 'n/o/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_']
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'c', '_', 't']
				n/o/c/t(CVCC)
n/o/c/_/t(CVCAC)
				version split: ['n', 'o', 'c', 't']
				{'string': 'n/o/c/t', 'rgx': '((n))/((o))/((c))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 't']
				version split: ['n', 'o', 'c', '_', 't']
				{'string': 'n/o/c/_', 'rgx': '((n))/((o))/((c))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, h, g, _
					> version: n/o/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> ȝ, s, gh, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'gh', 't']
				n/o/_/g/h/t(CVACCC)
n/o/_/gh/t(CVACC)
n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 'h', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', 'gh', 't']
				{'string': 'n/o/_/gh', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/g/t
					TRYING: g
					adding blocked set: C = C >> ȝ, s, h, g, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'g', 't']
				n/o/_/g/t(CVACC)
n/o/_/_/g/t(CVAACC)
				version split: ['n', 'o', '_', 'g', 't']
				{'string': 'n/o/_/g', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_']
				n/o/h(CVC)
n/o/h/_(CVCA)
				version split: ['n', 'o', 'h']
				{'string': 'n/o/h', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h']
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: h
					RESULT:  ['h']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h', 'rgx': '((n))/((o))/((h))/((h))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 't']
				n/o/h/t(CVCC)
n/o/h/_/t(CVCAC)
				version split: ['n', 'o', 'h', 't']
				{'string': 'n/o/h/t', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 't']
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/h/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', 'h', '_', 'u', 't']
				n/o/h/u/t(CVCCC)
n/o/h/u/t(CVCVC)
n/o/h/_/u/t(CVCAAC)
n/o/h/_/u/t(CVCAAC)
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', 'u', 't']
				{'string': 'n/o/h/u', 'rgx': '((n))/((o))/((h))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'u', 't']
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))$'}
				ANALYSING: nocht
					resolving (2)
					> version: n/o/c/h/t
					TRYING: h
					> version: n/o/ch/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, h, _
					RESULT:  ['h']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c/h', 'rgx': '((n))/((o))/((c)|(ch))/((h))$'}
				version split: ['n', 'o', 'ch', 't']
				{'string': 'n/o/ch/t', 'rgx': '((n))/((o))/((c)|(ch))/((h))$'}
				_____REMOVING________['n', 'o', 'ch', 't']
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/s/t
					TRYING: s
					RESULT:  ['s']
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_/s', 'rgx': '((n))/((o))/((_))/((s))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 't']
				n/o/_/t(CVAC)
n/o/_/_/t(CVAAC)
				version split: ['n', 'o', '_', 't']
				{'string': 'n/o/_/t', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 't']
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'h', 't']
				n/o/_/u/h/t(CVAACC)
n/o/_/u/h/t(CVAACC)
n/o/_/_/u/h/t(CVAAACC)
n/o/_/_/u/h/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't']
				n/o/_/u/t(CVAAC)
n/o/_/u/t(CVAAC)
n/o/_/_/u/t(CVAAAC)
n/o/_/_/u/t(CVAAAC)
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't']
				version split: ['n', 'o', '_', 'u', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/th
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'th']
				n/o/_/u/t/h(CVAACC)
n/o/_/u/t/h(CVAACC)
n/o/_/u/th(CVAAC)
n/o/_/u/th(CVAAC)
n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/th(CVAAAC)
n/o/_/_/u/th(CVAAAC)
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', 'u', 't', 'h']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'th']
				version split: ['n', 'o', '_', 'u', 'th']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝ/h/t(CVAACCC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/u/ȝh/t(CVAACC)
n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝh/t(CVAAACC)
n/o/_/_/u/ȝh/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					> version: n/o/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> ȝ, s, h, _, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				n/o/_/u/ȝ/t(CVAACC)
n/o/_/u/ȝ/t(CVAACC)
n/o/_/_/u/ȝ/t(CVAAACC)
n/o/_/_/u/ȝ/t(CVAAACC)
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/u', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, h, _
					> version: n/o/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/ƿ/i/h/t(CVACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					> version: n/o/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				n/o/_/w/i/h/t(CVACACC)
n/o/_/w/i/h/t(CVACACC)
n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/w/i/h/t(CVAACACC)
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, h, _
					> version: n/o/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				n/o/_/ƿ/i/t(CVACAC)
n/o/_/ƿ/i/t(CVACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					> version: n/o/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 't']
				n/o/_/w/i/t(CVACAC)
n/o/_/w/i/t(CVACAC)
n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/w/i/t(CVAACAC)
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', 'w', 'i', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					> version: n/o/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/w/i/ȝ/t(CVACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ȝ, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'ƿ', 't']
				n/o/_/ƿ/t(CVACC)
n/o/_/_/ƿ/t(CVAACC)
				version split: ['n', 'o', '_', 'ƿ', 't']
				{'string': 'n/o/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ƿ', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/_/w/t
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 't']
				n/o/_/w/t(CVACC)
n/o/_/_/w/t(CVAACC)
				version split: ['n', 'o', '_', 'w', 't']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 't']
				version split: ['n', 'o', '_', '_', 'w', 't']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					> version: n/o/_/w/th
					TRYING: w
					adding blocked set: C = C >> ȝ, s, h, w, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', 'w', 'th']
				n/o/_/w/t/h(CVACCC)
n/o/_/w/th(CVACC)
n/o/_/_/w/t/h(CVAACCC)
n/o/_/_/w/th(CVAACC)
				version split: ['n', 'o', '_', 'w', 't', 'h']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', 'w', 'th']
				{'string': 'n/o/_/w', 'rgx': '((n))/((o))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'w', 'th']
				version split: ['n', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/t
					TRYING: t
					adding blocked set: C = C >> ȝ, t, s, h, _
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'þ', '_', 't']
				n/o/þ/t(CVCC)
n/o/þ/_/t(CVCAC)
				version split: ['n', 'o', 'þ', 't']
				{'string': 'n/o/þ/t', 'rgx': '((n))/((o))/((þ))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', 't']
				version split: ['n', 'o', 'þ', '_', 't']
				{'string': 'n/o/þ/_', 'rgx': '((n))/((o))/((þ))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/_/ȝ/t
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', '_', 'ȝ', 't']
				{'string': 'n/o/_/ȝ', 'rgx': '((n))/((o))/((_))/((ȝ))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/_/ȝ/t/e
					TRYING: ȝ
					RESULT:  ['ȝ']
				version split: ['n', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/o/_/ȝ', 'rgx': '((n))/((o))/((_))/((ȝ))$'}
			___CVCCCV : 4___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_']
				n/a/_/_(CVAA)
n/a/_/_/_(CVAAA)
				version split: ['n', 'a', '_', '_']
				{'string': 'n/a/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_']
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/c/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c/h/t', 'rgx': '((n))/((a))/((c)|(ch))/((h))/((t))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s/t', 'rgx': '((n))/((a))/((_))/((s))/((t))$'}
				ANALYSING: nauht
					resolving (1)
					> version: n/au/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_/t', 'rgx': '((n))/((a)|(au))/((h))/((_))/((t))$'}
				ANALYSING: naut
					resolving (3)
					> version: n/a/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/a/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/au/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', '_', 'u', 't']
				{'string': 'n/a/_/_/u', 'rgx': '((n))/((a)|(au))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'a', '_', '_', 'u', 't']
				version split: ['n', 'a', '_', '_', 'u', 't']
				{'string': 'n/a/_/_/u', 'rgx': '((n))/((a)|(au))/((_))/((_))/((t))$'}
				_____REMOVING________['n', 'a', '_', '_', 'u', 't']
				version split: ['n', 'au', '_', '_', 't']
				{'string': 'n/au/_/_/t', 'rgx': '((n))/((a)|(au))/((_))/((_))/((t))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/ƿ/i/h/t(CVAACACC)
n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/a/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/w/i/h/t(CVAACACC)
n/a/_/_/_/w/i/h/t(CVAAACACC)
n/a/_/_/_/w/i/h/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/a/_/_/ƿ/i/ch/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/c/h/t(CVAACACCC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/ƿ/i/ch/t(CVAACACC)
n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/_/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/a/_/_/w/i/þ
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/w/i/þ(CVAACAC)
n/a/_/_/_/w/i/þ(CVAAACAC)
n/a/_/_/_/w/i/þ(CVAAACAC)
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/_/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'ƿ', 't']
				n/a/_/_/ƿ/t(CVAACC)
n/a/_/_/_/ƿ/t(CVAAACC)
				version split: ['n', 'a', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'ƿ', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					> version: n/a/_/_/y/t
					TRYING: y
					adding blocked set: C = C >> _, t, y
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'y', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', 'y', 't']
				n/a/_/_/y/t(CVAAAC)
n/a/_/_/y/t(CVAAAC)
n/a/_/_/_/y/t(CVAAAAC)
n/a/_/_/_/y/t(CVAAAAC)
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/y', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/y', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				version split: ['n', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))$'}
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/_/ȝ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'a', '_', 'ȝ', 't']
				{'string': 'n/a/_/ȝ/t', 'rgx': '((n))/((a))/((_))/((ȝ))/((t))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['n', '_', '_', '_', '_', 'e']
				n/_/_/_/e(CAAAV)
n/_/_/_/_/e(CAAAAV)
				version split: ['n', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/e', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', '_', '_', '_', 'e']
				version split: ['n', '_', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/_', 'rgx': '((n))/((_))/((_))/((_))/((_))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_']
				n/o/_/_(CVAA)
n/o/_/_/_(CVAAA)
				version split: ['n', 'o', '_', '_']
				{'string': 'n/o/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_']
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'c', '_', 't']
				{'string': 'n/o/c/_/t', 'rgx': '((n))/((o))/((c))/((_))/((t))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/g/h/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					> version: n/o/_/_/gh/t
					TRYING: gh
					adding blocked set: C = C >> gh, _, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'gh', 't']
				n/o/_/_/g/h/t(CVAACCC)
n/o/_/_/gh/t(CVAACC)
n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/g/t
					TRYING: g
					adding blocked set: C = C >> _, t, g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'g', 't']
				n/o/_/_/g/t(CVAACC)
n/o/_/_/_/g/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_']
				n/o/h/_(CVCA)
n/o/h/_/_(CVCAA)
				version split: ['n', 'o', 'h', '_']
				{'string': 'n/o/h/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_']
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h/t', 'rgx': '((n))/((o))/((h))/((h))/((t))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_/t', 'rgx': '((n))/((o))/((h))/((_))/((t))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/h/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', 'u', 't']
				n/o/h/_/u/t(CVCAAC)
n/o/h/_/u/t(CVCAAC)
n/o/h/_/_/u/t(CVCAAAC)
n/o/h/_/_/u/t(CVCAAAC)
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_/u', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'u', 't']
				version split: ['n', 'o', 'h', '_', 'u', 't']
				{'string': 'n/o/h/_/u', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 'u', 't']
				version split: ['n', 'o', 'h', '_', '_', 'u', 't']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				version split: ['n', 'o', 'h', '_', '_', 'u', 't']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))$'}
				ANALYSING: nocht
					resolving (1)
					> version: n/o/c/h/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c/h/t', 'rgx': '((n))/((o))/((c)|(ch))/((h))/((t))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/s/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_/s/t', 'rgx': '((n))/((o))/((_))/((s))/((t))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_/t', 'rgx': '((n))/((o))/((_))/((_))/((t))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				n/o/_/_/u/h/t(CVAAACC)
n/o/_/_/u/h/t(CVAAACC)
n/o/_/_/_/u/h/t(CVAAAACC)
n/o/_/_/_/u/h/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nout
					resolving (2)
					> version: n/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 't']
				n/o/_/_/u/t(CVAAAC)
n/o/_/_/u/t(CVAAAC)
n/o/_/_/_/u/t(CVAAAAC)
n/o/_/_/_/u/t(CVAAAAC)
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nouth
					resolving (4)
					> version: n/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/t/h
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/th
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'th']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'th']
				n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/t/h(CVAAACC)
n/o/_/_/u/th(CVAAAC)
n/o/_/_/u/th(CVAAAC)
n/o/_/_/_/u/t/h(CVAAAACC)
n/o/_/_/_/u/t/h(CVAAAACC)
n/o/_/_/_/u/th(CVAAAAC)
n/o/_/_/_/u/th(CVAAAAC)
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/_/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/ȝ/h/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/ȝh/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝ/h/t(CVAAACCC)
n/o/_/_/u/ȝh/t(CVAAACC)
n/o/_/_/u/ȝh/t(CVAAACC)
n/o/_/_/_/u/ȝ/h/t(CVAAAACCC)
n/o/_/_/_/u/ȝ/h/t(CVAAAACCC)
n/o/_/_/_/u/ȝh/t(CVAAAACC)
n/o/_/_/_/u/ȝh/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					> version: n/o/_/_/u/ȝ/t
					TRYING: u
					adding blocked set: C = C >> _, t, u
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				n/o/_/_/u/ȝ/t(CVAAACC)
n/o/_/_/u/ȝ/t(CVAAACC)
n/o/_/_/_/u/ȝ/t(CVAAAACC)
n/o/_/_/_/u/ȝ/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/u', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/o/_/_/ƿ/i/h/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/ƿ/i/h/t(CVAACACC)
n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/_/w/i/h/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/w/i/h/t(CVAACACC)
n/o/_/_/_/w/i/h/t(CVAAACACC)
n/o/_/_/_/w/i/h/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/_/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					> version: n/o/_/_/ƿ/i/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/ƿ/i/t(CVAACAC)
n/o/_/_/_/ƿ/i/t(CVAAACAC)
n/o/_/_/_/ƿ/i/t(CVAAACAC)
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nowit
					resolving (2)
					> version: n/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/_/w/i/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/w/i/t(CVAACAC)
n/o/_/_/_/w/i/t(CVAAACAC)
n/o/_/_/_/w/i/t(CVAAACAC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/_/w/i/ȝ/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/w/i/ȝ/t(CVAACACC)
n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/_/_/ƿ/t
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'ƿ', 't']
				n/o/_/_/ƿ/t(CVAACC)
n/o/_/_/_/ƿ/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'ƿ', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nowt
					resolving (1)
					> version: n/o/_/_/w/t
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 't']
				n/o/_/_/w/t(CVAACC)
n/o/_/_/_/w/t(CVAAACC)
				version split: ['n', 'o', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: nowth
					resolving (2)
					> version: n/o/_/_/w/t/h
					TRYING: w
					adding blocked set: C = C >> _, t, w
					> version: n/o/_/_/w/th
					TRYING: w
					adding blocked set: C = C >> _, t, w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', '_', 'w', 'th']
				n/o/_/_/w/t/h(CVAACCC)
n/o/_/_/w/th(CVAACC)
n/o/_/_/_/w/t/h(CVAAACCC)
n/o/_/_/_/w/th(CVAAACC)
				version split: ['n', 'o', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 'w', 'th']
				version split: ['n', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				version split: ['n', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))$'}
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/_/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', 'þ', '_', 't']
				{'string': 'n/o/þ/_/t', 'rgx': '((n))/((o))/((þ))/((_))/((t))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/_/ȝ/t
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', 'ȝ', 't']
				{'string': 'n/o/_/ȝ/t', 'rgx': '((n))/((o))/((_))/((ȝ))/((t))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/_/ȝ/t/e
					TRYING: t
					RESULT:  ['t']
				version split: ['n', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/o/_/ȝ/t', 'rgx': '((n))/((o))/((_))/((ȝ))/((t))$'}
			___CVCCCV : 5___
				ANALYSING: nochte
				adding littera based on matching pattern
				ANALYSING: na
					resolving (1)
					> version: n/a/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_']
				n/a/_/_/_(CVAAA)
n/a/_/_/_/_(CVAAAA)
				version split: ['n', 'a', '_', '_', '_']
				{'string': 'n/a/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_']
				version split: ['n', 'a', '_', '_', '_', '_']
				{'string': 'n/a/_/_/_/_', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				ANALYSING: naht
					resolving (1)
					> version: n/a/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'h', '_', 't', '_']
				n/a/h/_/t(CVCAC)
n/a/h/_/t/_(CVCACA)
				version split: ['n', 'a', 'h', '_', 't']
				{'string': 'n/a/h/_/t', 'rgx': '((n))/((a))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'h', '_', 't']
				version split: ['n', 'a', 'h', '_', 't', '_']
				{'string': 'n/a/h/_/t/_', 'rgx': '((n))/((a))/((h))/((_))/((t))/((_))$'}
				ANALYSING: nacht
					resolving (1)
					> version: n/a/c/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', 'c', 'h', 't', '_']
				n/a/c/h/t(CVCCC)
n/a/c/h/t/_(CVCCCA)
				version split: ['n', 'a', 'c', 'h', 't']
				{'string': 'n/a/c/h/t', 'rgx': '((n))/((a))/((c)|(ch))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'a', 'c', 'h', 't']
				version split: ['n', 'a', 'c', 'h', 't', '_']
				{'string': 'n/a/c/h/t/_', 'rgx': '((n))/((a))/((c)|(ch))/((h))/((t))/((_))$'}
				ANALYSING: nast
					resolving (1)
					> version: n/a/_/s/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 's', 't', '_']
				n/a/_/s/t(CVACC)
n/a/_/s/t/_(CVACCA)
				version split: ['n', 'a', '_', 's', 't']
				{'string': 'n/a/_/s/t', 'rgx': '((n))/((a))/((_))/((s))/((t))/((_))$'}
				_____REMOVING________['n', 'a', '_', 's', 't']
				version split: ['n', 'a', '_', 's', 't', '_']
				{'string': 'n/a/_/s/t/_', 'rgx': '((n))/((a))/((_))/((s))/((t))/((_))$'}
				ANALYSING: nauht
					resolving (1)
					> version: n/au/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'au', 'h', '_', 't', '_']
				n/au/h/_/t(CVCAC)
n/au/h/_/t/_(CVCACA)
				version split: ['n', 'au', 'h', '_', 't']
				{'string': 'n/au/h/_/t', 'rgx': '((n))/((a)|(au))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'au', 'h', '_', 't']
				version split: ['n', 'au', 'h', '_', 't', '_']
				{'string': 'n/au/h/_/t/_', 'rgx': '((n))/((a)|(au))/((h))/((_))/((t))/((_))$'}
				ANALYSING: naut
					resolving (1)
					> version: n/au/_/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'au', '_', '_', 't', '_']
				n/au/_/_/t(CVAAC)
n/au/_/_/t/_(CVAACA)
				version split: ['n', 'au', '_', '_', 't']
				{'string': 'n/au/_/_/t', 'rgx': '((n))/((a)|(au))/((_))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'au', '_', '_', 't']
				version split: ['n', 'au', '_', '_', 't', '_']
				{'string': 'n/au/_/_/t/_', 'rgx': '((n))/((a)|(au))/((_))/((_))/((t))/((_))$'}
				ANALYSING: naƿiht
					resolving (2)
					> version: n/a/_/_/_/ƿ/i/h/t
					TRYING: ƿ
					> version: n/a/_/_/_/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
n/a/_/_/_/ƿ/i/h/t(CVAAACACC)
n/a/_/_/_/_/ƿ/i/h/t(CVAAAACACC)
n/a/_/_/_/_/ƿ/i/h/t(CVAAAACACC)
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nawiht
					resolving (2)
					> version: n/a/_/_/_/w/i/h/t
					TRYING: w
					> version: n/a/_/_/_/w/i/h/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				n/a/_/_/_/w/i/h/t(CVAAACACC)
n/a/_/_/_/w/i/h/t(CVAAACACC)
n/a/_/_/_/_/w/i/h/t(CVAAAACACC)
n/a/_/_/_/_/w/i/h/t(CVAAAACACC)
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/a/_/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: naƿicht
					resolving (4)
					> version: n/a/_/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/_/_/_/ƿ/i/c/h/t
					TRYING: ƿ
					> version: n/a/_/_/_/ƿ/i/ch/t
					TRYING: ƿ
					> version: n/a/_/_/_/ƿ/i/ch/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/c/h/t(CVAAACACCC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
n/a/_/_/_/ƿ/i/ch/t(CVAAACACC)
n/a/_/_/_/_/ƿ/i/c/h/t(CVAAAACACCC)
n/a/_/_/_/_/ƿ/i/c/h/t(CVAAAACACCC)
n/a/_/_/_/_/ƿ/i/ch/t(CVAAAACACC)
n/a/_/_/_/_/ƿ/i/ch/t(CVAAAACACC)
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/ƿ/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'c', 'h', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 'i', 'ch', 't']
				ANALYSING: nawiþ
					resolving (2)
					> version: n/a/_/_/_/w/i/þ
					TRYING: w
					> version: n/a/_/_/_/w/i/þ
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				n/a/_/_/_/w/i/þ(CVAAACAC)
n/a/_/_/_/w/i/þ(CVAAACAC)
n/a/_/_/_/_/w/i/þ(CVAAAACAC)
n/a/_/_/_/_/w/i/þ(CVAAAACAC)
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/w/i', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				version split: ['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				{'string': 'n/a/_/_/_/_/w', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'w', 'i', 'þ']
				ANALYSING: naƿt
					resolving (1)
					> version: n/a/_/_/_/ƿ/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', '_', '_', '_', 'ƿ', 't']
				n/a/_/_/_/ƿ/t(CVAAACC)
n/a/_/_/_/_/ƿ/t(CVAAAACC)
				version split: ['n', 'a', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/_/ƿ/t', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'ƿ', 't']
				version split: ['n', 'a', '_', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/a/_/_/_/_/ƿ', 'rgx': '((n))/((a))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nayt
					resolving (2)
					> version: n/a/_/_/_/y/t
					TRYING: y
					> version: n/a/_/_/_/y/t
					TRYING: y
					RESULT:  ['y']
				version split: ['n', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/_/y/t', 'rgx': '((n))/((a))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'y', 't']
				version split: ['n', 'a', '_', '_', '_', 'y', 't']
				{'string': 'n/a/_/_/_/y/t', 'rgx': '((n))/((a))/((_))/((_))/((_))/((y))$'}
				_____REMOVING________['n', 'a', '_', '_', '_', 'y', 't']
				ANALYSING: naȝt
					resolving (1)
					> version: n/a/_/ȝ/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'a', '_', 'ȝ', 't', '_']
				n/a/_/ȝ/t(CVACC)
n/a/_/ȝ/t/_(CVACCA)
				version split: ['n', 'a', '_', 'ȝ', 't']
				{'string': 'n/a/_/ȝ/t', 'rgx': '((n))/((a))/((_))/((ȝ))/((t))/((_))$'}
				_____REMOVING________['n', 'a', '_', 'ȝ', 't']
				version split: ['n', 'a', '_', 'ȝ', 't', '_']
				{'string': 'n/a/_/ȝ/t/_', 'rgx': '((n))/((a))/((_))/((ȝ))/((t))/((_))$'}
				ANALYSING: ne
					resolving (1)
					> version: n/_/_/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', '_', '_', '_', '_', 'e']
				{'string': 'n/_/_/_/_/e', 'rgx': '((n))/((_))/((_))/((_))/((_))/((e))$'}
				ANALYSING: no
					resolving (1)
					> version: n/o/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_']
				n/o/_/_/_(CVAAA)
n/o/_/_/_/_(CVAAAA)
				version split: ['n', 'o', '_', '_', '_']
				{'string': 'n/o/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_']
				version split: ['n', 'o', '_', '_', '_', '_']
				{'string': 'n/o/_/_/_/_', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				ANALYSING: noct
					resolving (1)
					> version: n/o/c/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'c', '_', 't', '_']
				n/o/c/_/t(CVCAC)
n/o/c/_/t/_(CVCACA)
				version split: ['n', 'o', 'c', '_', 't']
				{'string': 'n/o/c/_/t', 'rgx': '((n))/((o))/((c))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'c', '_', 't']
				version split: ['n', 'o', 'c', '_', 't', '_']
				{'string': 'n/o/c/_/t/_', 'rgx': '((n))/((o))/((c))/((_))/((t))/((_))$'}
				ANALYSING: noght
					resolving (2)
					> version: n/o/_/_/_/g/h/t
					TRYING: g
					> version: n/o/_/_/_/gh/t
					TRYING: gh
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'gh', 't']
				n/o/_/_/_/g/h/t(CVAAACCC)
n/o/_/_/_/gh/t(CVAAACC)
n/o/_/_/_/_/g/h/t(CVAAAACCC)
n/o/_/_/_/_/gh/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/g/h', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/gh/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'gh', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				{'string': 'n/o/_/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'g', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'gh', 't']
				{'string': 'n/o/_/_/_/_/gh', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'gh', 't']
				ANALYSING: nogt
					resolving (1)
					> version: n/o/_/_/_/g/t
					TRYING: g
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'g', 't']
				n/o/_/_/_/g/t(CVAAACC)
n/o/_/_/_/_/g/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/g/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'g', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'g', 't']
				{'string': 'n/o/_/_/_/_/g', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'g', 't']
				ANALYSING: noh
					resolving (1)
					> version: n/o/h/_/_
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', '_', '_']
				n/o/h/_/_(CVCAA)
n/o/h/_/_/_(CVCAAA)
				version split: ['n', 'o', 'h', '_', '_']
				{'string': 'n/o/h/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_']
				version split: ['n', 'o', 'h', '_', '_', '_']
				{'string': 'n/o/h/_/_/_', 'rgx': '((n))/((o))/((h))/((_))/((_))/((_))$'}
				ANALYSING: nohht
					resolving (1)
					> version: n/o/h/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', 'h', 't', '_']
				n/o/h/h/t(CVCCC)
n/o/h/h/t/_(CVCCCA)
				version split: ['n', 'o', 'h', 'h', 't']
				{'string': 'n/o/h/h/t', 'rgx': '((n))/((o))/((h))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'h', 'h', 't']
				version split: ['n', 'o', 'h', 'h', 't', '_']
				{'string': 'n/o/h/h/t/_', 'rgx': '((n))/((o))/((h))/((h))/((t))/((_))$'}
				ANALYSING: noht
					resolving (1)
					> version: n/o/h/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'h', '_', 't', '_']
				n/o/h/_/t(CVCAC)
n/o/h/_/t/_(CVCACA)
				version split: ['n', 'o', 'h', '_', 't']
				{'string': 'n/o/h/_/t', 'rgx': '((n))/((o))/((h))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'h', '_', 't']
				version split: ['n', 'o', 'h', '_', 't', '_']
				{'string': 'n/o/h/_/t/_', 'rgx': '((n))/((o))/((h))/((_))/((t))/((_))$'}
				ANALYSING: nohut
					resolving (2)
					> version: n/o/h/_/_/u/t
					TRYING: u
					> version: n/o/h/_/_/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', 'h', '_', '_', 'u', 't']
				{'string': 'n/o/h/_/_/u/t', 'rgx': '((n))/((o))/((h))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_', 'u', 't']
				version split: ['n', 'o', 'h', '_', '_', 'u', 't']
				{'string': 'n/o/h/_/_/u/t', 'rgx': '((n))/((o))/((h))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', 'h', '_', '_', 'u', 't']
				ANALYSING: nocht
					resolving (1)
					> version: n/o/c/h/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'c', 'h', 't', '_']
				n/o/c/h/t(CVCCC)
n/o/c/h/t/_(CVCCCA)
				version split: ['n', 'o', 'c', 'h', 't']
				{'string': 'n/o/c/h/t', 'rgx': '((n))/((o))/((c)|(ch))/((h))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'c', 'h', 't']
				version split: ['n', 'o', 'c', 'h', 't', '_']
				{'string': 'n/o/c/h/t/_', 'rgx': '((n))/((o))/((c)|(ch))/((h))/((t))/((_))$'}
				ANALYSING: nost
					resolving (1)
					> version: n/o/_/s/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 's', 't', '_']
				n/o/_/s/t(CVACC)
n/o/_/s/t/_(CVACCA)
				version split: ['n', 'o', '_', 's', 't']
				{'string': 'n/o/_/s/t', 'rgx': '((n))/((o))/((_))/((s))/((t))/((_))$'}
				_____REMOVING________['n', 'o', '_', 's', 't']
				version split: ['n', 'o', '_', 's', 't', '_']
				{'string': 'n/o/_/s/t/_', 'rgx': '((n))/((o))/((_))/((s))/((t))/((_))$'}
				ANALYSING: not
					resolving (1)
					> version: n/o/_/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', 't', '_']
				n/o/_/_/t(CVAAC)
n/o/_/_/t/_(CVAACA)
				version split: ['n', 'o', '_', '_', 't']
				{'string': 'n/o/_/_/t', 'rgx': '((n))/((o))/((_))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', 't']
				version split: ['n', 'o', '_', '_', 't', '_']
				{'string': 'n/o/_/_/t/_', 'rgx': '((n))/((o))/((_))/((_))/((t))/((_))$'}
				ANALYSING: nouht
					resolving (2)
					> version: n/o/_/_/_/u/h/t
					TRYING: u
					> version: n/o/_/_/_/u/h/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/_/u/h', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'h', 't']
				{'string': 'n/o/_/_/_/u/h', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'h', 't']
				ANALYSING: nout
					resolving (2)
					> version: n/o/_/_/_/u/t
					TRYING: u
					> version: n/o/_/_/_/u/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 't']
				{'string': 'n/o/_/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 't']
				ANALYSING: nouth
					resolving (4)
					> version: n/o/_/_/_/u/t/h
					TRYING: u
					> version: n/o/_/_/_/u/t/h
					TRYING: u
					> version: n/o/_/_/_/u/th
					TRYING: u
					> version: n/o/_/_/_/u/th
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', '_', 'u', 't', 'h']
				{'string': 'n/o/_/_/_/u/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 't', 'h']
				version split: ['n', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/_/u/th', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'th']
				version split: ['n', 'o', '_', '_', '_', 'u', 'th']
				{'string': 'n/o/_/_/_/u/th', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'th']
				ANALYSING: nouȝht
					resolving (4)
					> version: n/o/_/_/_/u/ȝ/h/t
					TRYING: u
					> version: n/o/_/_/_/u/ȝ/h/t
					TRYING: u
					> version: n/o/_/_/_/u/ȝh/t
					TRYING: u
					> version: n/o/_/_/_/u/ȝh/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				{'string': 'n/o/_/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝ', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/_/u/ȝh', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				{'string': 'n/o/_/_/_/u/ȝh', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝh', 't']
				ANALYSING: nouȝt
					resolving (2)
					> version: n/o/_/_/_/u/ȝ/t
					TRYING: u
					> version: n/o/_/_/_/u/ȝ/t
					TRYING: u
					RESULT:  ['u']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				{'string': 'n/o/_/_/_/u/ȝ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'u', 'ȝ', 't']
				ANALYSING: noƿiht
					resolving (2)
					> version: n/o/_/_/_/ƿ/i/h/t
					TRYING: ƿ
					> version: n/o/_/_/_/ƿ/i/h/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
n/o/_/_/_/ƿ/i/h/t(CVAAACACC)
n/o/_/_/_/_/ƿ/i/h/t(CVAAAACACC)
n/o/_/_/_/_/ƿ/i/h/t(CVAAAACACC)
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 'h', 't']
				ANALYSING: nowiht
					resolving (2)
					> version: n/o/_/_/_/w/i/h/t
					TRYING: w
					> version: n/o/_/_/_/w/i/h/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				n/o/_/_/_/w/i/h/t(CVAAACACC)
n/o/_/_/_/w/i/h/t(CVAAACACC)
n/o/_/_/_/_/w/i/h/t(CVAAAACACC)
n/o/_/_/_/_/w/i/h/t(CVAAAACACC)
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 'h', 't']
				ANALYSING: noƿit
					resolving (2)
					> version: n/o/_/_/_/ƿ/i/t
					TRYING: ƿ
					> version: n/o/_/_/_/ƿ/i/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				n/o/_/_/_/ƿ/i/t(CVAAACAC)
n/o/_/_/_/ƿ/i/t(CVAAACAC)
n/o/_/_/_/_/ƿ/i/t(CVAAAACAC)
n/o/_/_/_/_/ƿ/i/t(CVAAAACAC)
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/ƿ/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				{'string': 'n/o/_/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'ƿ', 'i', 't']
				ANALYSING: nowit
					resolving (2)
					> version: n/o/_/_/_/w/i/t
					TRYING: w
					> version: n/o/_/_/_/w/i/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				n/o/_/_/_/w/i/t(CVAAACAC)
n/o/_/_/_/w/i/t(CVAAACAC)
n/o/_/_/_/_/w/i/t(CVAAAACAC)
n/o/_/_/_/_/w/i/t(CVAAAACAC)
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 't']
				ANALYSING: nowiȝt
					resolving (2)
					> version: n/o/_/_/_/w/i/ȝ/t
					TRYING: w
					> version: n/o/_/_/_/w/i/ȝ/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
n/o/_/_/_/w/i/ȝ/t(CVAAACACC)
n/o/_/_/_/_/w/i/ȝ/t(CVAAAACACC)
n/o/_/_/_/_/w/i/ȝ/t(CVAAAACACC)
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/w/i', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'i', 'ȝ', 't']
				ANALYSING: noƿt
					resolving (1)
					> version: n/o/_/_/_/ƿ/t
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'ƿ', 't']
				n/o/_/_/_/ƿ/t(CVAAACC)
n/o/_/_/_/_/ƿ/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/_/ƿ/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'ƿ', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'ƿ', 't']
				{'string': 'n/o/_/_/_/_/ƿ', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'ƿ', 't']
				ANALYSING: nowt
					resolving (1)
					> version: n/o/_/_/_/w/t
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 't']
				n/o/_/_/_/w/t(CVAAACC)
n/o/_/_/_/_/w/t(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/_/w/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 't']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 't']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 't']
				ANALYSING: nowth
					resolving (2)
					> version: n/o/_/_/_/w/t/h
					TRYING: w
					> version: n/o/_/_/_/w/th
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				adding dashed alternative: ['n', 'o', '_', '_', '_', '_', 'w', 'th']
				n/o/_/_/_/w/t/h(CVAAACCC)
n/o/_/_/_/w/th(CVAAACC)
n/o/_/_/_/_/w/t/h(CVAAAACCC)
n/o/_/_/_/_/w/th(CVAAAACC)
				version split: ['n', 'o', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/_/w/t', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/_/w/th', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', 'w', 'th']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 't', 'h']
				version split: ['n', 'o', '_', '_', '_', '_', 'w', 'th']
				{'string': 'n/o/_/_/_/_/w', 'rgx': '((n))/((o))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['n', 'o', '_', '_', '_', '_', 'w', 'th']
				ANALYSING: noþt
					resolving (1)
					> version: n/o/þ/_/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', 'þ', '_', 't', '_']
				n/o/þ/_/t(CVCAC)
n/o/þ/_/t/_(CVCACA)
				version split: ['n', 'o', 'þ', '_', 't']
				{'string': 'n/o/þ/_/t', 'rgx': '((n))/((o))/((þ))/((_))/((t))/((_))$'}
				_____REMOVING________['n', 'o', 'þ', '_', 't']
				version split: ['n', 'o', 'þ', '_', 't', '_']
				{'string': 'n/o/þ/_/t/_', 'rgx': '((n))/((o))/((þ))/((_))/((t))/((_))$'}
				ANALYSING: noȝt
					resolving (1)
					> version: n/o/_/ȝ/t
					RESULT:  ['_']
				adding dashed alternative: ['n', 'o', '_', 'ȝ', 't', '_']
				n/o/_/ȝ/t(CVACC)
n/o/_/ȝ/t/_(CVACCA)
				version split: ['n', 'o', '_', 'ȝ', 't']
				{'string': 'n/o/_/ȝ/t', 'rgx': '((n))/((o))/((_))/((ȝ))/((t))/((_))$'}
				_____REMOVING________['n', 'o', '_', 'ȝ', 't']
				version split: ['n', 'o', '_', 'ȝ', 't', '_']
				{'string': 'n/o/_/ȝ/t/_', 'rgx': '((n))/((o))/((_))/((ȝ))/((t))/((_))$'}
				ANALYSING: noȝte
					resolving (1)
					> version: n/o/_/ȝ/t/e
					TRYING: e
					RESULT:  ['e']
				version split: ['n', 'o', '_', 'ȝ', 't', 'e']
				{'string': 'n/o/_/ȝ/t/e', 'rgx': '((n))/((o))/((_))/((ȝ))/((t))/((e))$'}
		FAIL: 
		only one version left: ['n', 'a', '_', '_', '_', '_']
		only one version left: ['n', 'a', 'h', '_', 't', '_']
		only one version left: ['n', 'a', 'c', 'h', 't', '_']
		only one version left: ['n', 'a', '_', 's', 't', '_']
		only one version left: ['n', 'au', 'h', '_', 't', '_']
		only one version left: ['n', 'au', '_', '_', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'a', '_', 'ȝ', 't', '_']
		only one version left: ['n', '_', '_', '_', '_', 'e']
		only one version left: ['n', 'o', '_', '_', '_', '_']
		only one version left: ['n', 'o', 'c', '_', 't', '_']
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'h', '_', '_', '_']
		only one version left: ['n', 'o', 'h', 'h', 't', '_']
		only one version left: ['n', 'o', 'h', '_', 't', '_']
		FAIL: 
		only one version left: ['n', 'o', 'c', 'h', 't', '_']
		only one version left: ['n', 'o', '_', 's', 't', '_']
		only one version left: ['n', 'o', '_', '_', 't', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['n', 'o', 'þ', '_', 't', '_']
		only one version left: ['n', 'o', '_', 'ȝ', 't', '_']
		only one version left: ['n', 'o', '_', 'ȝ', 't', 'e']
		SPLIT: ['n', 'o', 'c', 'h', 't', 'e']
		SPLIT: ['n', 'a', '_', '_', '_', '_']
		['n', 'a', '_', '_', '_', '_']
		SPLIT: ['n', 'a', 'h', '_', 't', '_']
		['n', 'a', 'h', '_', 't', '_']
		SPLIT: ['n', 'a', 'c', 'h', 't', '_']
		['n', 'a', 'c', 'h', 't', '_']
		SPLIT: ['n', 'a', '_', 's', 't', '_']
		['n', 'a', '_', 's', 't', '_']
		SPLIT: ['n', 'au', 'h', '_', 't', '_']
		['n', 'au', 'h', '_', 't', '_']
		SPLIT: ['n', 'au', '_', '_', 't', '_']
		['n', 'au', '_', '_', 't', '_']
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['a']", "['_']", "['_']", "['_']", "['y']"]
		SPLIT: ['n', 'a', '_', 'ȝ', 't', '_']
		['n', 'a', '_', 'ȝ', 't', '_']
		SPLIT: ['n', '_', '_', '_', '_', 'e']
		['n', '_', '_', '_', '_', 'e']
		SPLIT: ['n', 'o', '_', '_', '_', '_']
		['n', 'o', '_', '_', '_', '_']
		SPLIT: ['n', 'o', 'c', '_', 't', '_']
		['n', 'o', 'c', '_', 't', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'h', '_', '_', '_']
		['n', 'o', 'h', '_', '_', '_']
		SPLIT: ['n', 'o', 'h', 'h', 't', '_']
		['n', 'o', 'h', 'h', 't', '_']
		SPLIT: ['n', 'o', 'h', '_', 't', '_']
		['n', 'o', 'h', '_', 't', '_']
		SPLIT: ["['n']", "['o']", "['h']", "['_']", "['_']", "['u']"]
		SPLIT: ['n', 'o', 'c', 'h', 't', '_']
		['n', 'o', 'c', 'h', 't', '_']
		SPLIT: ['n', 'o', '_', 's', 't', '_']
		['n', 'o', '_', 's', 't', '_']
		SPLIT: ['n', 'o', '_', '_', 't', '_']
		['n', 'o', '_', '_', 't', '_']
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['u']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['n']", "['o']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['n', 'o', 'þ', '_', 't', '_']
		['n', 'o', 'þ', '_', 't', '_']
		SPLIT: ['n', 'o', '_', 'ȝ', 't', '_']
		['n', 'o', '_', 'ȝ', 't', '_']
		SPLIT: ['n', 'o', '_', 'ȝ', 't', 'e']
		['n', 'o', '_', 'ȝ', 't', 'e']
		version for pattern CVCCCV is INVALID
		[]
		22
		OVERVIEW: version for pattern CVCCCV

faulty splits: 22
['n']['a'][''][''][''][''] <-! naƿiht
['n']['a'][''][''][''][''] <-! nawiht
['n']['a'][''][''][''][''] <-! naƿicht
['n']['a'][''][''][''][''] <-! nawiþ
['n']['a'][''][''][''][''] <-! naƿt
['n']['a']['']['']['']['y'] <-! nayt
['n']['o'][''][''][''][''] <-! noght
['n']['o'][''][''][''][''] <-! nogt
['n']['o']['h']['']['']['u'] <-! nohut
['n']['o']['']['']['']['u'] <-! nouht
['n']['o']['']['']['']['u'] <-! nout
['n']['o']['']['']['']['u'] <-! nouth
['n']['o']['']['']['']['u'] <-! nouȝht
['n']['o']['']['']['']['u'] <-! nouȝt
['n']['o'][''][''][''][''] <-! noƿiht
['n']['o'][''][''][''][''] <-! nowiht
['n']['o'][''][''][''][''] <-! noƿit
['n']['o'][''][''][''][''] <-! nowit
['n']['o'][''][''][''][''] <-! nowiȝt
['n']['o'][''][''][''][''] <-! noƿt
['n']['o'][''][''][''][''] <-! nowt
['n']['o'][''][''][''][''] <-! nowth
n | o | c | h | t | e
n | a | _ | _ | _ | _
n | a | h | _ | t | _
n | a | c | h | t | _
n | a | _ | s | t | _
n | au | h | _ | t | _
n | au | _ | _ | t | _
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['a'] | ['_'] | ['_'] | ['_'] | ['y']
n | a | _ | ȝ | t | _
n | _ | _ | _ | _ | e
n | o | _ | _ | _ | _
n | o | c | _ | t | _
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
n | o | h | _ | _ | _
n | o | h | h | t | _
n | o | h | _ | t | _
['n'] | ['o'] | ['h'] | ['_'] | ['_'] | ['u']
n | o | c | h | t | _
n | o | _ | s | t | _
n | o | _ | _ | t | _
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['u']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
n | o | þ | _ | t | _
n | o | _ | ȝ | t | _
n | o | _ | ȝ | t | e
1 : {'a', 'au', 'o', 'e'}
2 : {'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'g', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 's', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 't', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ȝ', 'ch', 'h', '_', 'þ'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 't', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 's', 'ch', 'h', '_'},{'c', 'ȝ', 'ch', 'h', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'y'},{'c', 'ȝ', 'ch', 'h', '_', 'þ'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'gh', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', 'g', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', 'w', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'ƿ', 'c', 'ch', 'h', '_'},{'c', 'ch', 'h', '_', 'u'},{'c', 'ch', 'h', '_', 'y'}
3 : {'ƿ', 'h', 's', '_'},{'h', 's', 't', '_'},{'h', 's', '_', 'y'},{'ȝ', 's', 'gh', 'h', '_'},{'ȝ', 's', 'h', 'g', '_'},{'ȝ', 's', 'h', '_', 'u'},{'h', 's', '_', 'y'},{'ȝ', 's', 'h', '_', 'u'},{'h', 's', 'u', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', '_', 'u'},{'ƿ', 'h', 's', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', 'w', '_'},{'ƿ', 'ȝ', 's', 'h', '_'},{'h', 's', '_', 'w'},{'ȝ', 't', 's', 'h', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ƿ', 'ȝ', 's', 'h', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ƿ', 'ȝ', 's', 'h', '_'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 't', 's', 'h', '_'},{'h', 's', '_', 'w'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 's', 'h', '_', 'u'},{'ȝ', 't', 's', 'h', '_'},{'ƿ', 'h', 's', '_'},{'ȝ', 's', 'h', 'w', '_'},{'ƿ', 'h', 's', '_'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', '_', 'u'},{'h', 's', 't', '_'},{'ȝ', 's', 'h', '_', 'u'},{'h', 's', '_', 'w'},{'ƿ', 'ȝ', 's', 'h', '_'},{'ƿ', 'ȝ', 's', 'h', '_'},{'ȝ', 's', 'h', 'w', '_'},{'ȝ', 's', 'h', 'g', '_'},{'ƿ', 'h', 's', '_'},{'ȝ', 't', 's', 'h', '_'},{'h', 's', 'u', '_'},{'ƿ', 'h', 's', '_'},{'ƿ', 'h', 's', '_'},{'ȝ', 's', 'h', 'w', '_'},{'h', 's', '_', 'w'},{'h', 't', '_'}
4 : {'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'g'},{'_', 't', 'y'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'g'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'gh', '_', 't'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'y'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 'ƿ', 't'},{'_', 't', 'w'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 't', 'u'},{'_', 'ƿ', 't'},{'_', 't', 'u'},{'_', 't', 'w'},{'_', 't', 'u'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVCVCC

faulty splits: 9
['n']['o'][''][''][''][''] <-! noct
['n']['o'][''][''][''][''] <-! noght
['n']['o'][''][''][''][''] <-! nogt
['n']['o']['']['']['ch']['t'] <-! nochte
['n']['o']['u']['']['']['t'] <-! nouth
['n']['o']['u']['']['ȝ'][''] <-! nouȝht
['n']['o']['w']['']['']['t'] <-! nowth
['n']['o']['']['']['']['þ'] <-! noþt
['n']['o']['ȝ']['']['']['t'] <-! noȝte
n | a | ƿ | i | h | t
n | a | w | i | h | t
n | a | ƿ | i | ch | t
n | o | ƿ | i | h | t
n | o | w | i | h | t
n | o | w | i | ȝ | t
n | a | _ | _ | _ | _
n | a | h | _ | _ | t
n | a | _ | _ | ch | t
n | a | _ | _ | s | t
n | a | u | _ | h | t
n | a | u | _ | _ | t
n | a | w | i | _ | þ
n | a | ƿ | _ | _ | t
n | a | _ | y | _ | t
n | a | ȝ | _ | _ | t
n | _ | _ | e | _ | _
n | o | _ | _ | _ | _
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['_']
n | o | h | _ | _ | _
n | o | h | _ | h | t
n | o | h | _ | _ | t
n | o | h | u | _ | t
n | o | _ | _ | ch | t
['n'] | ['o'] | ['_'] | ['_'] | ['ch'] | ['t']
n | o | _ | _ | s | t
n | o | _ | _ | _ | t
n | o | u | _ | h | t
n | o | u | _ | _ | t
['n'] | ['o'] | ['u'] | ['_'] | ['_'] | ['t']
['n'] | ['o'] | ['u'] | ['_'] | ['ȝ'] | ['_']
n | o | u | _ | ȝ | t
n | o | ƿ | i | _ | t
n | o | w | i | _ | t
n | o | ƿ | _ | _ | t
n | o | w | _ | _ | t
['n'] | ['o'] | ['w'] | ['_'] | ['_'] | ['t']
['n'] | ['o'] | ['_'] | ['_'] | ['_'] | ['þ']
n | o | ȝ | _ | _ | t
['n'] | ['o'] | ['ȝ'] | ['_'] | ['_'] | ['t']
1 : {'a', 'au', 'o', 'e'}
2 : {'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'ȝ', 'gh', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'},{'ƿ', 'ch', 'h', 'w', '_'},{'ƿ', 'ȝ', 't', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', 'g', '_', 'u'},{'ƿ', 'ȝ', 'ch', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 's', 'h', 'w', '_', 'u'},{'ƿ', 'h', 'w', '_', 'u', 'y'},{'ƿ', 'c', 'h', 'w', '_'},{'ƿ', 'ȝ', 'c', 'h', 'w', '_', 'u'},{'ƿ', 'ȝ', 'h', 'w', '_', 'u', 'þ'},{'ƿ', 's', 'h', 'w', '_'}
4 : {'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 'c', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'th', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', 'g', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'h', '_', 'þ'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 's', 'ch', 'gh', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'},{'ȝ', 't', 's', 'ch', 'h', '_'}
5 : {'_', 't', 'g', 'þ'},{'_', 't', 'g', 'þ'},{'gh', '_', 't', 'þ'},{'_', 'c', 't', 'þ'},{'h', '_', 't', 'þ'},{'h', '_', 't', 'þ'}
	{'CVCCVCCC', 'CVCVCCC', 'CVCCVCC', 'CVCVCC', 'CVCCCVC', 'CVCCCV', 'CVCCVC', 'CVVCCCC', 'CVCCCCV', 'CVCVCCCC'}
