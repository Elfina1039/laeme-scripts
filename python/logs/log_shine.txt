Analysis object initialized
{'scin': 6, 'scine': 6, 'scín': 1, 'shin': 1, 'schi': 4, 'schin': 20, 'schyn': 1, 'sin': 2, 'ssin': 3, 'ssyn': 1, 'suin': 1}
Lexel initialized
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
MIN pattern length=3
Pattern CVC is valid
Pattern CCCV is valid
Pattern CCCC is invalid
Pattern CVVC is invalid
Pattern CCVC is valid
Pattern CCCCC is invalid
Pattern CCCVC is valid
Pattern CVCV is valid
Pattern CC is invalid
Pattern CCC is valid
Pattern CCV is valid
Pattern CV is invalid
Pattern CCVCV is valid
Pattern CCCCV is invalid
{'value': 9, 'patterns': ['CVC', 'CCC']}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVC
	Selection for pattern: CVC completed
	Making a version for pattern: CVC
			___CVC : 0___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: suin
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: s
					> version: s/c/i/n/e
					TRYING: s
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: s
					> version: s/c/h/i
					TRYING: s
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
			___CVC : 1___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: suin
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: c
					> version: s/c/i/n/e
					TRYING: c
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: V = V >> i, y, ui, í
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: V = V >> i, y, ui, í
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'n', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'n', 'e']
				s/c/i/n/e(CCCCV)
s/c/i/n/e(CCVCV)
sc/i/n/e(CCCV)
sc/i/n/e(CVCV)
s/_/c/i/n/e(CACACV)
s/_/c/i/n/e(CACACV)
sc/_/i/n/e(CAACV)
sc/_/i/n/e(CAACV)
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: c
					> version: s/c/h/i
					TRYING: c
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					> version: sch/i
					TRYING: i
					adding blocked set: V = V >> ui, í, _, y, i
					> version: sch/i
					TRYING: i
					adding blocked set: V = V >> ui, í, _, y, i
					> version: s/ch/i
					TRYING: ch
					> version: s/ch/i
					TRYING: ch
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					> version: sch/i
					TRYING: i
					adding blocked set: V = V >> ui, í, _, y, i
					> version: sch/i
					TRYING: i
					adding blocked set: V = V >> ui, í, _, y, i
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sch', '_', 'i']
				adding dashed alternative: ['sch', '_', 'i']
				adding dashed alternative: ['s', '_', 'ch', 'i']
				adding dashed alternative: ['s', '_', 'ch', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sch', '_', 'i']
				adding dashed alternative: ['sch', '_', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', 'h', 'i']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/_/c/h/i(CACCA)
s/_/c/h/i(CACCA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sch/_/i(CAA)
sch/_/i(CAA)
s/_/ch/i(CACA)
s/_/ch/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sch/_/i(CAA)
sch/_/i(CAA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
			___CVC : 2___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: suin
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (8)
					> version: s/c/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/c/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/i/n/e
					TRYING: n
					> version: sc/i/n/e
					TRYING: n
					> version: s/_/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> n, c
					> version: s/_/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> n, c
					> version: sc/_/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/_/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					RESULT:  ['n']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['s', '_', 'c', 'i', 'n', 'e']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n', 'e']
				version split: ['s', '_', 'c', 'i', 'n', 'e']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n', 'e']
				version split: ['sc', '_', 'i', 'n', 'e']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['sc', '_', 'i', 'n', 'e']
				version split: ['sc', '_', 'i', 'n', 'e']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((n))$'}
				_____REMOVING________['sc', '_', 'i', 'n', 'e']
				ANALYSING: schi
					resolving (32)
					> version: s/c/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: s/c/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/ch/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/_/c/h/i
					TRYING: c
					adding blocked set: C = C >> n, c
					> version: s/_/c/h/i
					TRYING: c
					adding blocked set: C = C >> n, c
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sch/_/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/_/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/_/ch/i
					TRYING: ch
					adding blocked set: C = C >> ch, n
					> version: s/_/ch/i
					TRYING: ch
					adding blocked set: C = C >> ch, n
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sch/_/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/_/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/_/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['s', 'ch', '_', 'i']
				adding dashed alternative: ['s', 'ch', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sch', '_', '_', 'i']
				adding dashed alternative: ['sch', '_', '_', 'i']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sch', '_', '_', 'i']
				adding dashed alternative: ['sch', '_', '_', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/_/c/h/i(CACCA)
s/_/c/h/i(CACCA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sch/_/i(CAA)
sch/_/i(CAA)
s/_/ch/i(CACA)
s/_/ch/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
sch/_/i(CAA)
sch/_/i(CAA)
sc/_/h/i(CACA)
sc/_/h/i(CACA)
s/c/_/h/i(CCACA)
s/c/_/h/i(CCACA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/_/i(CCAA)
s/ch/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
s/_/_/c/h/i(CAACCA)
s/_/_/c/h/i(CAACCA)
sc/_/_/h/i(CAACA)
sc/_/_/h/i(CAACA)
sch/_/_/i(CAAA)
sch/_/_/i(CAAA)
s/_/_/ch/i(CAACA)
s/_/_/ch/i(CAACA)
sc/_/_/h/i(CAACA)
sc/_/_/h/i(CAACA)
sc/_/_/h/i(CAACA)
sc/_/_/h/i(CAACA)
sch/_/_/i(CAAA)
sch/_/_/i(CAAA)
sc/_/_/h/i(CAACA)
sc/_/_/h/i(CAACA)
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['s', '_', 'c', 'h', 'i']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i']
				version split: ['s', '_', 'c', 'h', 'i']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sch', '_', 'i']
				{'string': 'sch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', 'i']
				version split: ['sch', '_', 'i']
				{'string': 'sch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', 'i']
				version split: ['s', '_', 'ch', 'i']
				{'string': 's/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i']
				version split: ['s', '_', 'ch', 'i']
				{'string': 's/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sch', '_', 'i']
				{'string': 'sch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', 'i']
				version split: ['sch', '_', 'i']
				{'string': 'sch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['sc', '_', 'h', 'i']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i']
				version split: ['s', 'c', '_', 'h', 'i']
				{'string': 's/c/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i']
				version split: ['s', 'c', '_', 'h', 'i']
				{'string': 's/c/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['s', 'ch', '_', 'i']
				{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i']
				version split: ['s', 'ch', '_', 'i']
				{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i']
				version split: ['s', '_', '_', 'c', 'h', 'i']
				{'string': 's/_/_/c', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i']
				version split: ['s', '_', '_', 'c', 'h', 'i']
				{'string': 's/_/_/c', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sch', '_', '_', 'i']
				{'string': 'sch/_/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i']
				version split: ['sch', '_', '_', 'i']
				{'string': 'sch/_/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i']
				version split: ['s', '_', '_', 'ch', 'i']
				{'string': 's/_/_/ch', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i']
				version split: ['s', '_', '_', 'ch', 'i']
				{'string': 's/_/_/ch', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sch', '_', '_', 'i']
				{'string': 'sch/_/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i']
				version split: ['sch', '_', '_', 'i']
				{'string': 'sch/_/_/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
				version split: ['sc', '_', '_', 'h', 'i']
				{'string': 'sc/_/_/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i']
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'i', 'n']
		SPLIT: ['sc', 'í', 'n']
		SPLIT: ['sh', 'i', 'n']
		SPLIT: ['sch', 'i', 'n']
		SPLIT: ['sch', 'y', 'n']
		SPLIT: ['s', 'i', 'n']
		SPLIT: ['ss', 'i', 'n']
		SPLIT: ['ss', 'y', 'n']
		SPLIT: ['s', 'ui', 'n']
		SPLIT: ['sc.s', '_', 'n', '----!']
		SPLIT: ['sc.s.sch', '_', '_', '----!']
		version for pattern CVC is INVALID
		[{'ui', 'í', '_', 'y', 'i'}]
		2
		OVERVIEW: version for pattern CVC
{'ui', 'í', '_', 'y', 'i'}
faulty splits: 2
sc.sn----! <-! scine
sc.s.sch----! <-! schi
sc | i | n
sc | í | n
sh | i | n
sch | i | n
sch | y | n
s | i | n
ss | i | n
ss | y | n
s | ui | n
sc.s | _ | n | ----!
sc.s.sch | _ | _ | ----!
1 : {'i', 'y', 'ui', 'í'},{'ui', 'í', '_', 'y', 'i'}
2 : {'i', 'n'},{'ch', 'n'},{'n', 'c'},{'n', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: s
					> version: s/c/i/n
					TRYING: s
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: s
					> version: s/c/í/n
					TRYING: s
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: s
					> version: s/h/i/n
					TRYING: s
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: s
					> version: s/c/h/i/n
					TRYING: s
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: s
					> version: s/c/h/y/n
					TRYING: s
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCCV : 1___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i/n
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'i', 'n']
				s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/_/c/i/n(CACAC)
s/_/c/i/n(CACAC)
sc/_/i/n(CAAC)
sc/_/i/n(CAAC)
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: s/c/í/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> i, í, c, _
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> i, í, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'í', 'n']
				adding dashed alternative: ['s', '_', 'c', 'í', 'n']
				adding dashed alternative: ['sc', '_', 'í', 'n']
				adding dashed alternative: ['sc', '_', 'í', 'n']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/_/c/í/n(CACAC)
s/_/c/í/n(CACAC)
sc/_/í/n(CAAC)
sc/_/í/n(CAAC)
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: s/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sh', '_', 'i', 'n']
				adding dashed alternative: ['sh', '_', 'i', 'n']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/_/h/i/n(CACAC)
s/_/h/i/n(CACAC)
sh/_/i/n(CAAC)
sh/_/i/n(CAAC)
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: s/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: s/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, i, c, _
					> version: s/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				s/c/h/i/n(CCCCC)
s/c/h/i/n(CCCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
s/ch/i/n(CCCC)
s/ch/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
s/_/c/h/i/n(CACCAC)
s/_/c/h/i/n(CACCAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
s/_/ch/i/n(CACAC)
s/_/ch/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: s/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					> version: s/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, i, c, _
					> version: s/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> h, i, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['s', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				s/c/h/y/n(CCCCC)
s/c/h/y/n(CCCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
s/ch/y/n(CCCC)
s/ch/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
s/_/c/h/y/n(CACCAC)
s/_/c/h/y/n(CACCAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
s/_/ch/y/n(CACAC)
s/_/ch/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, i, c, _
					> version: s/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, i, c, _
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> i, c, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'n']
				adding dashed alternative: ['s', '_', 's', 'i', 'n']
				adding dashed alternative: ['ss', '_', 'i', 'n']
				adding dashed alternative: ['ss', '_', 'i', 'n']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/_/s/i/n(CACAC)
s/_/s/i/n(CACAC)
ss/_/i/n(CAAC)
ss/_/i/n(CAAC)
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, i, c, _
					> version: s/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, i, c, _
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> i, c, _, y
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'y', 'n']
				adding dashed alternative: ['s', '_', 's', 'y', 'n']
				adding dashed alternative: ['ss', '_', 'y', 'n']
				adding dashed alternative: ['ss', '_', 'y', 'n']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/_/s/y/n(CACAC)
s/_/s/y/n(CACAC)
ss/_/y/n(CAAC)
ss/_/y/n(CAAC)
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> i, u, c, _
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> i, u, c, _
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCCV : 2___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (8)
					> version: s/c/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, h
					> version: s/c/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, h
					> version: sc/i/n
					TRYING: n
					adding blocked set: C = C >> n, h
					> version: sc/i/n
					TRYING: n
					adding blocked set: C = C >> n, h
					> version: s/_/c/i/n
					TRYING: c
					adding blocked set: C = C >> n, c, h
					> version: s/_/c/i/n
					TRYING: c
					adding blocked set: C = C >> n, c, h
					> version: sc/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, h
					> version: sc/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i', 'n']
				adding dashed alternative: ['s', 'c', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'i', '_', 'n']
				adding dashed alternative: ['sc', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'i', 'n']
				s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/_/c/i/n(CACAC)
s/_/c/i/n(CACAC)
sc/_/i/n(CAAC)
sc/_/i/n(CAAC)
s/c/_/i/n(CCAAC)
s/c/_/i/n(CCAAC)
sc/i/_/n(CAAC)
sc/i/_/n(CAAC)
s/_/_/c/i/n(CAACAC)
s/_/_/c/i/n(CAACAC)
sc/_/_/i/n(CAAAC)
sc/_/_/i/n(CAAAC)
				ANALYSING: scín
					resolving (8)
					> version: s/c/í/n
					TRYING: í
					adding blocked set: C = C >> _, n, h, í
					> version: s/c/í/n
					TRYING: í
					adding blocked set: C = C >> _, n, h, í
					> version: sc/í/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sc/í/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/c/í/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: s/_/c/í/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: sc/_/í/n
					TRYING: í
					adding blocked set: C = C >> _, n, h, í
					> version: sc/_/í/n
					TRYING: í
					adding blocked set: C = C >> _, n, h, í
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'í', 'n']
				adding dashed alternative: ['s', 'c', '_', 'í', 'n']
				adding dashed alternative: ['sc', 'í', '_', 'n']
				adding dashed alternative: ['sc', 'í', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'í', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'í', 'n']
				adding dashed alternative: ['sc', '_', '_', 'í', 'n']
				adding dashed alternative: ['sc', '_', '_', 'í', 'n']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/_/c/í/n(CACAC)
s/_/c/í/n(CACAC)
sc/_/í/n(CAAC)
sc/_/í/n(CAAC)
s/c/_/í/n(CCAAC)
s/c/_/í/n(CCAAC)
sc/í/_/n(CAAC)
sc/í/_/n(CAAC)
s/_/_/c/í/n(CAACAC)
s/_/_/c/í/n(CAACAC)
sc/_/_/í/n(CAAAC)
sc/_/_/í/n(CAAAC)
				ANALYSING: shin
					resolving (8)
					> version: s/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sh/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sh/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: s/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sh/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sh/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'i', 'n']
				adding dashed alternative: ['s', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sh', 'i', '_', 'n']
				adding dashed alternative: ['sh', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sh', '_', '_', 'i', 'n']
				adding dashed alternative: ['sh', '_', '_', 'i', 'n']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/_/h/i/n(CACAC)
s/_/h/i/n(CACAC)
sh/_/i/n(CAAC)
sh/_/i/n(CAAC)
s/h/_/i/n(CCAAC)
s/h/_/i/n(CCAAC)
sh/i/_/n(CAAC)
sh/i/_/n(CAAC)
s/_/_/h/i/n(CAACAC)
s/_/_/h/i/n(CAACAC)
sh/_/_/i/n(CAAAC)
sh/_/_/i/n(CAAAC)
				ANALYSING: schin
					resolving (32)
					> version: s/c/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: s/c/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sch/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sch/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/ch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/ch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sch/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sch/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/_/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: s/_/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sch/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sch/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/_/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, _, n, h
					> version: s/_/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sch/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sch/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'n']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sch', 'i', '_', 'n']
				adding dashed alternative: ['sch', 'i', '_', 'n']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'n']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sch', 'i', '_', 'n']
				adding dashed alternative: ['sch', 'i', '_', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', '_', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'n']
				s/c/h/i/n(CCCCC)
s/c/h/i/n(CCCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
s/ch/i/n(CCCC)
s/ch/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
s/_/c/h/i/n(CACCAC)
s/_/c/h/i/n(CACCAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
s/_/ch/i/n(CACAC)
s/_/ch/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
s/c/_/h/i/n(CCACAC)
s/c/_/h/i/n(CCACAC)
sc/h/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
sch/i/_/n(CAAC)
sch/i/_/n(CAAC)
s/ch/_/i/n(CCAAC)
s/ch/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
sch/i/_/n(CAAC)
sch/i/_/n(CAAC)
sc/h/_/i/n(CCAAC)
sc/h/_/i/n(CCAAC)
s/_/_/c/h/i/n(CAACCAC)
s/_/_/c/h/i/n(CAACCAC)
sc/_/_/h/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
sch/_/_/i/n(CAAAC)
sch/_/_/i/n(CAAAC)
s/_/_/ch/i/n(CAACAC)
s/_/_/ch/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
sch/_/_/i/n(CAAAC)
sch/_/_/i/n(CAAAC)
sc/_/_/h/i/n(CAACAC)
sc/_/_/h/i/n(CAACAC)
				ANALYSING: schyn
					resolving (32)
					> version: s/c/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: s/c/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sch/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sch/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/ch/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: s/ch/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sch/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sch/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: s/_/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: s/_/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> _, n, c, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sch/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sch/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: s/_/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, _, n, h
					> version: s/_/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sch/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sch/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/_/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'y', 'n']
				adding dashed alternative: ['s', 'c', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sch', 'y', '_', 'n']
				adding dashed alternative: ['sch', 'y', '_', 'n']
				adding dashed alternative: ['s', 'ch', '_', 'y', 'n']
				adding dashed alternative: ['s', 'ch', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sch', 'y', '_', 'n']
				adding dashed alternative: ['sch', 'y', '_', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['sc', 'h', '_', 'y', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', '_', 'y', 'n']
				adding dashed alternative: ['s', '_', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['s', '_', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', '_', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', '_', 'h', 'y', 'n']
				s/c/h/y/n(CCCCC)
s/c/h/y/n(CCCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
s/ch/y/n(CCCC)
s/ch/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
s/_/c/h/y/n(CACCAC)
s/_/c/h/y/n(CACCAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
s/_/ch/y/n(CACAC)
s/_/ch/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
s/c/_/h/y/n(CCACAC)
s/c/_/h/y/n(CCACAC)
sc/h/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
sch/y/_/n(CAAC)
sch/y/_/n(CAAC)
s/ch/_/y/n(CCAAC)
s/ch/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
sch/y/_/n(CAAC)
sch/y/_/n(CAAC)
sc/h/_/y/n(CCAAC)
sc/h/_/y/n(CCAAC)
s/_/_/c/h/y/n(CAACCAC)
s/_/_/c/h/y/n(CAACCAC)
sc/_/_/h/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
sch/_/_/y/n(CAAAC)
sch/_/_/y/n(CAAAC)
s/_/_/ch/y/n(CAACAC)
s/_/_/ch/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
sch/_/_/y/n(CAAAC)
sch/_/_/y/n(CAAAC)
sc/_/_/h/y/n(CAACAC)
sc/_/_/h/y/n(CAACAC)
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_', 'n']
				adding dashed alternative: ['s', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
s/i/_/n(CAAC)
s/i/_/n(CAAC)
s/_/_/i/n(CAAAC)
s/_/_/i/n(CAAAC)
				ANALYSING: ssin
					resolving (8)
					> version: s/s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: ss/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: ss/i/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, _, n, h
					> version: s/_/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, _, n, h
					> version: ss/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: ss/_/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'i', 'n']
				adding dashed alternative: ['s', 's', '_', 'i', 'n']
				adding dashed alternative: ['ss', 'i', '_', 'n']
				adding dashed alternative: ['ss', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'n']
				adding dashed alternative: ['ss', '_', '_', 'i', 'n']
				adding dashed alternative: ['ss', '_', '_', 'i', 'n']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/_/s/i/n(CACAC)
s/_/s/i/n(CACAC)
ss/_/i/n(CAAC)
ss/_/i/n(CAAC)
s/s/_/i/n(CCAAC)
s/s/_/i/n(CCAAC)
ss/i/_/n(CAAC)
ss/i/_/n(CAAC)
s/_/_/s/i/n(CAACAC)
s/_/_/s/i/n(CAACAC)
ss/_/_/i/n(CAAAC)
ss/_/_/i/n(CAAAC)
				ANALYSING: ssyn
					resolving (8)
					> version: s/s/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: s/s/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: ss/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: ss/y/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, _, n, h
					> version: s/_/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, _, n, h
					> version: ss/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					> version: ss/_/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, h, y
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'y', 'n']
				adding dashed alternative: ['s', 's', '_', 'y', 'n']
				adding dashed alternative: ['ss', 'y', '_', 'n']
				adding dashed alternative: ['ss', 'y', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 's', 'y', 'n']
				adding dashed alternative: ['s', '_', '_', 's', 'y', 'n']
				adding dashed alternative: ['ss', '_', '_', 'y', 'n']
				adding dashed alternative: ['ss', '_', '_', 'y', 'n']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/_/s/y/n(CACAC)
s/_/s/y/n(CACAC)
ss/_/y/n(CAAC)
ss/_/y/n(CAAC)
s/s/_/y/n(CCAAC)
s/s/_/y/n(CCAAC)
ss/y/_/n(CAAC)
ss/y/_/n(CAAC)
s/_/_/s/y/n(CAACAC)
s/_/_/s/y/n(CAACAC)
ss/_/_/y/n(CAAAC)
ss/_/_/y/n(CAAAC)
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n, h
					> version: s/ui/n
					TRYING: n
					adding blocked set: C = C >> _, n, h
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> _, u, n, h
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> _, u, n, h
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'i', 'n']
				adding dashed alternative: ['s', 'u', '_', 'i', 'n']
				adding dashed alternative: ['s', 'ui', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
s/u/_/i/n(CAAAC)
s/u/_/i/n(CAAAC)
s/ui/_/n(CVAC)
s/_/_/u/i/n(CAAAAC)
s/_/_/u/i/n(CAAAAC)
s/_/_/ui/n(CAAVC)
			___CCCV : 3___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (16)
					> version: s/c/i/n
					TRYING: n
					> version: s/c/i/n
					TRYING: n
					> version: sc/i/n
					> version: sc/i/n
					> version: s/_/c/i/n
					TRYING: i
					> version: s/_/c/i/n
					TRYING: i
					> version: sc/_/i/n
					TRYING: n
					> version: sc/_/i/n
					TRYING: n
					> version: s/c/_/i/n
					TRYING: i
					> version: s/c/_/i/n
					TRYING: i
					> version: sc/i/_/n
					TRYING: n
					> version: sc/i/_/n
					TRYING: n
					> version: s/_/_/c/i/n
					TRYING: c
					> version: s/_/_/c/i/n
					TRYING: c
					> version: sc/_/_/i/n
					TRYING: i
					> version: sc/_/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['s', '_', 'c', 'i', 'n']
				{'string': 's/_/c/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n']
				version split: ['s', '_', 'c', 'i', 'n']
				{'string': 's/_/c/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n']
				version split: ['sc', '_', 'i', 'n']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'i', 'n']
				version split: ['sc', '_', 'i', 'n']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'i', 'n']
				version split: ['s', 'c', '_', 'i', 'n']
				{'string': 's/c/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'n']
				version split: ['s', 'c', '_', 'i', 'n']
				{'string': 's/c/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'n']
				version split: ['sc', 'i', '_', 'n']
				{'string': 'sc/i/_/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_', 'n']
				version split: ['sc', 'i', '_', 'n']
				{'string': 'sc/i/_/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_', 'n']
				version split: ['s', '_', '_', 'c', 'i', 'n']
				{'string': 's/_/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'n']
				version split: ['s', '_', '_', 'c', 'i', 'n']
				{'string': 's/_/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'n']
				version split: ['sc', '_', '_', 'i', 'n']
				{'string': 'sc/_/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'n']
				version split: ['sc', '_', '_', 'i', 'n']
				{'string': 'sc/_/_/i/n', 'rgx': '((sc)|(s))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'n']
				ANALYSING: scín
					resolving (16)
					> version: s/c/í/n
					TRYING: n
					> version: s/c/í/n
					TRYING: n
					> version: sc/í/n
					> version: sc/í/n
					> version: s/_/c/í/n
					TRYING: í
					> version: s/_/c/í/n
					TRYING: í
					> version: sc/_/í/n
					TRYING: n
					> version: sc/_/í/n
					TRYING: n
					> version: s/c/_/í/n
					TRYING: í
					> version: s/c/_/í/n
					TRYING: í
					> version: sc/í/_/n
					TRYING: n
					> version: sc/í/_/n
					TRYING: n
					> version: s/_/_/c/í/n
					TRYING: c
					> version: s/_/_/c/í/n
					TRYING: c
					> version: sc/_/_/í/n
					TRYING: í
					> version: sc/_/_/í/n
					TRYING: í
					RESULT:  ['í']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['s', '_', 'c', 'í', 'n']
				{'string': 's/_/c/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', '_', 'c', 'í', 'n']
				version split: ['s', '_', 'c', 'í', 'n']
				{'string': 's/_/c/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', '_', 'c', 'í', 'n']
				version split: ['sc', '_', 'í', 'n']
				{'string': 'sc/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', '_', 'í', 'n']
				version split: ['sc', '_', 'í', 'n']
				{'string': 'sc/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', '_', 'í', 'n']
				version split: ['s', 'c', '_', 'í', 'n']
				{'string': 's/c/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', 'c', '_', 'í', 'n']
				version split: ['s', 'c', '_', 'í', 'n']
				{'string': 's/c/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', 'c', '_', 'í', 'n']
				version split: ['sc', 'í', '_', 'n']
				{'string': 'sc/í/_/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', '_', 'n']
				version split: ['sc', 'í', '_', 'n']
				{'string': 'sc/í/_/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', '_', 'n']
				version split: ['s', '_', '_', 'c', 'í', 'n']
				{'string': 's/_/_/c/í', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', '_', '_', 'c', 'í', 'n']
				version split: ['s', '_', '_', 'c', 'í', 'n']
				{'string': 's/_/_/c/í', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['s', '_', '_', 'c', 'í', 'n']
				version split: ['sc', '_', '_', 'í', 'n']
				{'string': 'sc/_/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', '_', '_', 'í', 'n']
				version split: ['sc', '_', '_', 'í', 'n']
				{'string': 'sc/_/_/í/n', 'rgx': '((sc)|(s))/((_))/((_))/((í))$'}
				_____REMOVING________['sc', '_', '_', 'í', 'n']
				ANALYSING: shin
					resolving (16)
					> version: s/h/i/n
					TRYING: n
					> version: s/h/i/n
					TRYING: n
					> version: sh/i/n
					> version: sh/i/n
					> version: s/_/h/i/n
					TRYING: i
					> version: s/_/h/i/n
					TRYING: i
					> version: sh/_/i/n
					TRYING: n
					> version: sh/_/i/n
					TRYING: n
					> version: s/h/_/i/n
					TRYING: i
					> version: s/h/_/i/n
					TRYING: i
					> version: sh/i/_/n
					TRYING: n
					> version: sh/i/_/n
					TRYING: n
					> version: s/_/_/h/i/n
					TRYING: h
					> version: s/_/_/h/i/n
					TRYING: h
					> version: sh/_/_/i/n
					TRYING: i
					> version: sh/_/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['s', '_', 'h', 'i', 'n']
				{'string': 's/_/h/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'n']
				version split: ['s', '_', 'h', 'i', 'n']
				{'string': 's/_/h/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'n']
				version split: ['sh', '_', 'i', 'n']
				{'string': 'sh/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', '_', 'i', 'n']
				version split: ['sh', '_', 'i', 'n']
				{'string': 'sh/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', '_', 'i', 'n']
				version split: ['s', 'h', '_', 'i', 'n']
				{'string': 's/h/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'n']
				version split: ['s', 'h', '_', 'i', 'n']
				{'string': 's/h/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'n']
				version split: ['sh', 'i', '_', 'n']
				{'string': 'sh/i/_/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', 'i', '_', 'n']
				version split: ['sh', 'i', '_', 'n']
				{'string': 'sh/i/_/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', 'i', '_', 'n']
				version split: ['s', '_', '_', 'h', 'i', 'n']
				{'string': 's/_/_/h/i', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'n']
				version split: ['s', '_', '_', 'h', 'i', 'n']
				{'string': 's/_/_/h/i', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'n']
				version split: ['sh', '_', '_', 'i', 'n']
				{'string': 'sh/_/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'n']
				version split: ['sh', '_', '_', 'i', 'n']
				{'string': 'sh/_/_/i/n', 'rgx': '((s)|(sh))/((_))/((_))/((i))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'n']
				ANALYSING: schin
					resolving (64)
					> version: s/c/h/i/n
					TRYING: i
					> version: s/c/h/i/n
					TRYING: i
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: s/ch/i/n
					TRYING: n
					> version: s/ch/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: s/_/c/h/i/n
					TRYING: h
					> version: s/_/c/h/i/n
					TRYING: h
					> version: sc/_/h/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: sch/_/i/n
					TRYING: n
					> version: sch/_/i/n
					TRYING: n
					> version: s/_/ch/i/n
					TRYING: i
					> version: s/_/ch/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: sch/_/i/n
					TRYING: n
					> version: sch/_/i/n
					TRYING: n
					> version: sc/_/h/i/n
					TRYING: i
					> version: sc/_/h/i/n
					TRYING: i
					> version: s/c/_/h/i/n
					TRYING: h
					> version: s/c/_/h/i/n
					TRYING: h
					> version: sc/h/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: sch/i/_/n
					TRYING: n
					> version: sch/i/_/n
					TRYING: n
					> version: s/ch/_/i/n
					TRYING: i
					> version: s/ch/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: sch/i/_/n
					TRYING: n
					> version: sch/i/_/n
					TRYING: n
					> version: sc/h/_/i/n
					TRYING: i
					> version: sc/h/_/i/n
					TRYING: i
					> version: s/_/_/c/h/i/n
					TRYING: c
					> version: s/_/_/c/h/i/n
					TRYING: c
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sch/_/_/i/n
					TRYING: i
					> version: sch/_/_/i/n
					TRYING: i
					> version: s/_/_/ch/i/n
					TRYING: ch
					> version: s/_/_/ch/i/n
					TRYING: ch
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sch/_/_/i/n
					TRYING: i
					> version: sch/_/_/i/n
					TRYING: i
					> version: sc/_/_/h/i/n
					TRYING: h
					> version: sc/_/_/h/i/n
					TRYING: h
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['s', '_', 'ch', 'i', 'n']
				{'string': 's/_/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'n']
				version split: ['s', '_', 'ch', 'i', 'n']
				{'string': 's/_/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['s', 'c', '_', 'h', 'i', 'n']
				{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'n']
				version split: ['s', 'c', '_', 'h', 'i', 'n']
				{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sch', 'i', '_', 'n']
				{'string': 'sch/i/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_', 'n']
				version split: ['sch', 'i', '_', 'n']
				{'string': 'sch/i/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_', 'n']
				version split: ['s', 'ch', '_', 'i', 'n']
				{'string': 's/ch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'n']
				version split: ['s', 'ch', '_', 'i', 'n']
				{'string': 's/ch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sch', 'i', '_', 'n']
				{'string': 'sch/i/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_', 'n']
				version split: ['sch', 'i', '_', 'n']
				{'string': 'sch/i/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['sc', 'h', '_', 'i', 'n']
				{'string': 'sc/h/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'n']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'n']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sch', '_', '_', 'i', 'n']
				{'string': 'sch/_/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'n']
				version split: ['sch', '_', '_', 'i', 'n']
				{'string': 'sch/_/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'n']
				version split: ['s', '_', '_', 'ch', 'i', 'n']
				{'string': 's/_/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'n']
				version split: ['s', '_', '_', 'ch', 'i', 'n']
				{'string': 's/_/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sch', '_', '_', 'i', 'n']
				{'string': 'sch/_/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'n']
				version split: ['sch', '_', '_', 'i', 'n']
				{'string': 'sch/_/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				version split: ['sc', '_', '_', 'h', 'i', 'n']
				{'string': 'sc/_/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'n']
				ANALYSING: schyn
					resolving (64)
					> version: s/c/h/y/n
					TRYING: y
					> version: s/c/h/y/n
					TRYING: y
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: s/ch/y/n
					TRYING: n
					> version: s/ch/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: s/_/c/h/y/n
					TRYING: h
					> version: s/_/c/h/y/n
					TRYING: h
					> version: sc/_/h/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: sch/_/y/n
					TRYING: n
					> version: sch/_/y/n
					TRYING: n
					> version: s/_/ch/y/n
					TRYING: y
					> version: s/_/ch/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: sch/_/y/n
					TRYING: n
					> version: sch/_/y/n
					TRYING: n
					> version: sc/_/h/y/n
					TRYING: y
					> version: sc/_/h/y/n
					TRYING: y
					> version: s/c/_/h/y/n
					TRYING: h
					> version: s/c/_/h/y/n
					TRYING: h
					> version: sc/h/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: sch/y/_/n
					TRYING: n
					> version: sch/y/_/n
					TRYING: n
					> version: s/ch/_/y/n
					TRYING: y
					> version: s/ch/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: sch/y/_/n
					TRYING: n
					> version: sch/y/_/n
					TRYING: n
					> version: sc/h/_/y/n
					TRYING: y
					> version: sc/h/_/y/n
					TRYING: y
					> version: s/_/_/c/h/y/n
					TRYING: c
					> version: s/_/_/c/h/y/n
					TRYING: c
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sch/_/_/y/n
					TRYING: y
					> version: sch/_/_/y/n
					TRYING: y
					> version: s/_/_/ch/y/n
					TRYING: ch
					> version: s/_/_/ch/y/n
					TRYING: ch
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sch/_/_/y/n
					TRYING: y
					> version: sch/_/_/y/n
					TRYING: y
					> version: sc/_/_/h/y/n
					TRYING: h
					> version: sc/_/_/h/y/n
					TRYING: h
					RESULT:  ['y']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['s', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/c/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'y', 'n']
				version split: ['s', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/c/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['s', '_', 'ch', 'y', 'n']
				{'string': 's/_/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'ch', 'y', 'n']
				version split: ['s', '_', 'ch', 'y', 'n']
				{'string': 's/_/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'ch', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['s', 'c', '_', 'h', 'y', 'n']
				{'string': 's/c/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'y', 'n']
				version split: ['s', 'c', '_', 'h', 'y', 'n']
				{'string': 's/c/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sch', 'y', '_', 'n']
				{'string': 'sch/y/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', '_', 'n']
				version split: ['sch', 'y', '_', 'n']
				{'string': 'sch/y/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', '_', 'n']
				version split: ['s', 'ch', '_', 'y', 'n']
				{'string': 's/ch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'ch', '_', 'y', 'n']
				version split: ['s', 'ch', '_', 'y', 'n']
				{'string': 's/ch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 'ch', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sch', 'y', '_', 'n']
				{'string': 'sch/y/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', '_', 'n']
				version split: ['sch', 'y', '_', 'n']
				{'string': 'sch/y/_/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', 'y', '_', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['sc', 'h', '_', 'y', 'n']
				{'string': 'sc/h/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', 'h', '_', 'y', 'n']
				version split: ['s', '_', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'y', 'n']
				version split: ['s', '_', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sch', '_', '_', 'y', 'n']
				{'string': 'sch/_/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', '_', 'y', 'n']
				version split: ['sch', '_', '_', 'y', 'n']
				{'string': 'sch/_/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', '_', 'y', 'n']
				version split: ['s', '_', '_', 'ch', 'y', 'n']
				{'string': 's/_/_/ch/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'y', 'n']
				version split: ['s', '_', '_', 'ch', 'y', 'n']
				{'string': 's/_/_/ch/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sch', '_', '_', 'y', 'n']
				{'string': 'sch/_/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', '_', 'y', 'n']
				version split: ['sch', '_', '_', 'y', 'n']
				{'string': 'sch/_/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sch', '_', '_', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				version split: ['sc', '_', '_', 'h', 'y', 'n']
				{'string': 'sc/_/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((_))/((y))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'y', 'n']
				ANALYSING: sin
					resolving (8)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: n
					> version: s/i/_/n
					TRYING: n
					> version: s/i/_/n
					TRYING: n
					> version: s/_/_/i/n
					TRYING: i
					> version: s/_/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', 'i', '_', 'n']
				{'string': 's/i/_/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'i', '_', 'n']
				version split: ['s', 'i', '_', 'n']
				{'string': 's/i/_/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'i', '_', 'n']
				version split: ['s', '_', '_', 'i', 'n']
				{'string': 's/_/_/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'i', 'n']
				version split: ['s', '_', '_', 'i', 'n']
				{'string': 's/_/_/i/n', 'rgx': '((s))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'i', 'n']
				ANALYSING: ssin
					resolving (16)
					> version: s/s/i/n
					TRYING: n
					> version: s/s/i/n
					TRYING: n
					> version: ss/i/n
					> version: ss/i/n
					> version: s/_/s/i/n
					TRYING: i
					> version: s/_/s/i/n
					TRYING: i
					> version: ss/_/i/n
					TRYING: n
					> version: ss/_/i/n
					TRYING: n
					> version: s/s/_/i/n
					TRYING: i
					> version: s/s/_/i/n
					TRYING: i
					> version: ss/i/_/n
					TRYING: n
					> version: ss/i/_/n
					TRYING: n
					> version: s/_/_/s/i/n
					TRYING: s
					> version: s/_/_/s/i/n
					TRYING: s
					> version: ss/_/_/i/n
					TRYING: i
					> version: ss/_/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['s', '_', 's', 'i', 'n']
				{'string': 's/_/s/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 's', 'i', 'n']
				version split: ['s', '_', 's', 'i', 'n']
				{'string': 's/_/s/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 's', 'i', 'n']
				version split: ['ss', '_', 'i', 'n']
				{'string': 'ss/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', '_', 'i', 'n']
				version split: ['ss', '_', 'i', 'n']
				{'string': 'ss/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', '_', 'i', 'n']
				version split: ['s', 's', '_', 'i', 'n']
				{'string': 's/s/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 's', '_', 'i', 'n']
				version split: ['s', 's', '_', 'i', 'n']
				{'string': 's/s/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 's', '_', 'i', 'n']
				version split: ['ss', 'i', '_', 'n']
				{'string': 'ss/i/_/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', '_', 'n']
				version split: ['ss', 'i', '_', 'n']
				{'string': 'ss/i/_/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', '_', 'n']
				version split: ['s', '_', '_', 's', 'i', 'n']
				{'string': 's/_/_/s/i', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'n']
				version split: ['s', '_', '_', 's', 'i', 'n']
				{'string': 's/_/_/s/i', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'n']
				version split: ['ss', '_', '_', 'i', 'n']
				{'string': 'ss/_/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'n']
				version split: ['ss', '_', '_', 'i', 'n']
				{'string': 'ss/_/_/i/n', 'rgx': '((s)|(ss))/((_))/((_))/((i))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'n']
				ANALYSING: ssyn
					resolving (16)
					> version: s/s/y/n
					TRYING: n
					> version: s/s/y/n
					TRYING: n
					> version: ss/y/n
					> version: ss/y/n
					> version: s/_/s/y/n
					TRYING: y
					> version: s/_/s/y/n
					TRYING: y
					> version: ss/_/y/n
					TRYING: n
					> version: ss/_/y/n
					TRYING: n
					> version: s/s/_/y/n
					TRYING: y
					> version: s/s/_/y/n
					TRYING: y
					> version: ss/y/_/n
					TRYING: n
					> version: ss/y/_/n
					TRYING: n
					> version: s/_/_/s/y/n
					TRYING: s
					> version: s/_/_/s/y/n
					TRYING: s
					> version: ss/_/_/y/n
					TRYING: y
					> version: ss/_/_/y/n
					TRYING: y
					RESULT:  ['y']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['s', '_', 's', 'y', 'n']
				{'string': 's/_/s/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 's', 'y', 'n']
				version split: ['s', '_', 's', 'y', 'n']
				{'string': 's/_/s/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', 's', 'y', 'n']
				version split: ['ss', '_', 'y', 'n']
				{'string': 'ss/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', '_', 'y', 'n']
				version split: ['ss', '_', 'y', 'n']
				{'string': 'ss/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', '_', 'y', 'n']
				version split: ['s', 's', '_', 'y', 'n']
				{'string': 's/s/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 's', '_', 'y', 'n']
				version split: ['s', 's', '_', 'y', 'n']
				{'string': 's/s/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', 's', '_', 'y', 'n']
				version split: ['ss', 'y', '_', 'n']
				{'string': 'ss/y/_/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', '_', 'n']
				version split: ['ss', 'y', '_', 'n']
				{'string': 'ss/y/_/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', '_', 'n']
				version split: ['s', '_', '_', 's', 'y', 'n']
				{'string': 's/_/_/s/y', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 's', 'y', 'n']
				version split: ['s', '_', '_', 's', 'y', 'n']
				{'string': 's/_/_/s/y', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['s', '_', '_', 's', 'y', 'n']
				version split: ['ss', '_', '_', 'y', 'n']
				{'string': 'ss/_/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', '_', '_', 'y', 'n']
				version split: ['ss', '_', '_', 'y', 'n']
				{'string': 'ss/_/_/y/n', 'rgx': '((s)|(ss))/((_))/((_))/((y))$'}
				_____REMOVING________['ss', '_', '_', 'y', 'n']
				ANALYSING: suin
					resolving (12)
					> version: s/u/i/n
					TRYING: n
					> version: s/u/i/n
					TRYING: n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/ui/n
					TRYING: n
					> version: s/u/_/i/n
					TRYING: i
					> version: s/u/_/i/n
					TRYING: i
					> version: s/ui/_/n
					TRYING: n
					> version: s/_/_/u/i/n
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: s/_/_/u/i/n
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					> version: s/_/_/ui/n
					TRYING: ui
					adding blocked set: V = V >> ui, e, í, y, i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'u'}
					RESULT:  ['i', 'u']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
				version split: ['s', 'u', '_', 'i', 'n']
				{'string': 's/u/_/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'n']
				version split: ['s', 'u', '_', 'i', 'n']
				{'string': 's/u/_/i/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'n']
				version split: ['s', 'ui', '_', 'n']
				{'string': 's/ui/_/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', 'ui', '_', 'n']
				version split: ['s', '_', '_', 'u', 'i', 'n']
				{'string': 's/_/_/u/i', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', '_', 'u', 'i', 'n']
				version split: ['s', '_', '_', 'u', 'i', 'n']
				{'string': 's/_/_/u/i', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', '_', 'u', 'i', 'n']
				version split: ['s', '_', '_', 'ui', 'n']
				{'string': 's/_/_/ui/n', 'rgx': '((s))/((_))/((_))/((i)|(u))$'}
				_____REMOVING________['s', '_', '_', 'ui', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'i', 'n', 'e']
		SPLIT: ['s', 'c', 'h', 'i']
		SPLIT: ['sc.s', '_', '_', 'i', '----!']
		SPLIT: ['sc.s', '_', '_', 'í', '----!']
		SPLIT: ['s.sh', '_', '_', 'i', '----!']
		SPLIT: ['sc.s.sch', '_', '_', 'i', '----!']
		SPLIT: ['sc.s.sch', '_', '_', 'y', '----!']
		SPLIT: ['s', '_', '_', 'i', '----!']
		SPLIT: ['s.ss', '_', '_', 'i', '----!']
		SPLIT: ['s.ss', '_', '_', 'y', '----!']
		SPLIT: ['s', '_', '_', 'i.u', '----!']
		version for pattern CCCV is INVALID
		[{'i', 'c', '_'}, {'_', 'n', 'h'}]
		9
		OVERVIEW: version for pattern CCCV
{'i', 'c', '_'}, {'_', 'n', 'h'}
faulty splits: 9
sc.si----! <-! scin
sc.sí----! <-! scín
s.shi----! <-! shin
sc.s.schi----! <-! schin
sc.s.schy----! <-! schyn
si----! <-! sin
s.ssi----! <-! ssin
s.ssy----! <-! ssyn
si.u----! <-! suin
sc | i | n | e
s | c | h | i
sc.s | _ | _ | i | ----!
sc.s | _ | _ | í | ----!
s.sh | _ | _ | i | ----!
sc.s.sch | _ | _ | i | ----!
sc.s.sch | _ | _ | y | ----!
s | _ | _ | i | ----!
s.ss | _ | _ | i | ----!
s.ss | _ | _ | y | ----!
s | _ | _ | i.u | ----!
1 : {'h', 'i', 'c', '_'},{'i', 'c'},{'ch', 'i', 'c', '_'},{'i', 'u', 'c', '_'},{'s', 'i', 'c', '_'},{'i', 'c', '_', 'y'},{'i', 'c', '_'},{'i', 'í', 'c', '_'}
2 : {'_', 'n', 'h', 'y'},{'s', '_', 'n', 'h'},{'_', 'n', 'h'},{'n', 'c', 'h'},{'_', 'n', 'h', 'í'},{'i', '_', 'n', 'h'},{'_', 'n', 'c', 'h'},{'i', 'n', 'h'},{'ch', '_', 'n', 'h'},{'_', 'u', 'n', 'h'},{'n', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: s
					> version: s/c/i/n/e
					TRYING: s
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: s
					> version: s/c/h/i
					TRYING: s
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCVC : 1___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: c
					> version: s/c/i/n/e
					TRYING: c
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					RESULT:  ['c']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: c
					> version: s/c/h/i
					TRYING: c
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> s, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					RESULT:  ['ch', 'c', 'h']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, s, c, h, i
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, s, c, h, i
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCVC : 2___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: i
					> version: s/c/i/n/e
					TRYING: i
					> version: sc/i/n/e
					TRYING: n
					> version: sc/i/n/e
					TRYING: n
					RESULT:  ['i']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: h
					> version: s/c/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					TRYING: n
					> version: s/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: i
					> version: s/_/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					> version: s/u/i/n
					TRYING: i
					> version: s/ui/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['i']
			___CCVC : 3___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: n
					> version: s/c/i/n/e
					TRYING: n
					> version: sc/i/n/e
					TRYING: e
					> version: sc/i/n/e
					TRYING: e
					RESULT:  ['n']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/c/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'i']
				adding dashed alternative: ['s', 'c', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/c/h/_/i(CCCAA)
s/c/h/_/i(CCCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/i/_(CCAA)
s/ch/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['s', 'c', 'h', '_', 'i']
				{'string': 's/c/h/_/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'i']
				version split: ['s', 'c', 'h', '_', 'i']
				{'string': 's/c/h/_/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'i']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))$'}
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: n
					RESULT:  ['n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: n
					> version: s/u/i/n
					TRYING: n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/_/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/_/ui/n
					TRYING: n
					RESULT:  ['n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
		FAIL: 
		FAIL: sc/h/i/_, sc/h/i/_, s/ch/i/_, s/ch/i/_, sc/h/i/_, sc/h/i/_, sc/h/i/_, sc/h/i/_, sc/h/i/_, sc/h/i/_
		only one version left: ['s', '_', 'i', 'n']
		FAIL: 
		SPLIT: ['s', 'c', 'i', 'n']
		SPLIT: ['s', 'c', 'í', 'n']
		SPLIT: ['s', 'h', 'i', 'n']
		SPLIT: ['sc', 'h', 'i', 'n']
		SPLIT: ['sc', 'h', 'y', 'n']
		SPLIT: ['s', 's', 'i', 'n']
		SPLIT: ['s', 's', 'y', 'n']
		SPLIT: ['sc.s', 'c', 'i', 'n', '----!']
		SPLIT: ['sc.s.sch', 'ch.c.h', 'i.h', '_', '----!']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		['s', 'ch', 'i', '_']
		['s', 'ch', 'i', '_']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		['sc', 'h', 'i', '_']
		SPLIT: ['s', '_', 'i', 'n']
		['s', '_', 'i', 'n']
		['s', '_', 'i', 'n']
		SPLIT: ['s', '_', 'i', 'n', '----!']
		version for pattern CCVC is INVALID
		[]
		3
		OVERVIEW: version for pattern CCVC

faulty splits: 3
sc.scin----! <-! scine
sc.s.schch.c.hi.h----! <-! schi
sin----! <-! suin
s | c | i | n
s | c | í | n
s | h | i | n
sc | h | i | n
sc | h | y | n
s | s | i | n
s | s | y | n
sc.s | c | i | n | ----!
sc.s.sch | ch.c.h | i.h | _ | ----!
s | _ | i | n
s | _ | i | n | ----!
1 : {'ch', 's', 'c', 'h', 'u', '_'},{'ch', 's', 'c', 'h', 'i'}
3 : {'i', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: s
					> version: s/c/i/n
					TRYING: s
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: s
					> version: s/c/i/n/e
					TRYING: s
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: s
					> version: s/c/í/n
					TRYING: s
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: s
					> version: s/h/i/n
					TRYING: s
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: s
					> version: s/c/h/i
					TRYING: s
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCCVC : 1___
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: c
					> version: s/c/i/n
					TRYING: c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: c
					> version: s/c/i/n/e
					TRYING: c
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: c
					> version: s/c/í/n
					TRYING: c
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> í, c
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> í, c
					RESULT:  ['c']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: h
					> version: s/h/i/n
					TRYING: h
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: c
					> version: s/c/h/i
					TRYING: c
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					RESULT:  ['ch', 'c', 'h']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i, _
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i, _
					RESULT:  ['s']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> ch, s, c, h, y, _
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> ch, s, c, h, y, _
					RESULT:  ['s']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCCVC : 2___
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: i
					> version: s/c/i/n
					TRYING: i
					> version: sc/i/n
					TRYING: n
					adding blocked set: C = C >> n, h
					> version: sc/i/n
					TRYING: n
					adding blocked set: C = C >> n, h
					RESULT:  ['i']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: i
					> version: s/c/i/n/e
					TRYING: i
					> version: sc/i/n/e
					TRYING: n
					adding blocked set: C = C >> i, n, h
					> version: sc/i/n/e
					TRYING: n
					adding blocked set: C = C >> i, n, h
					RESULT:  ['i']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: í
					> version: s/c/í/n
					TRYING: í
					> version: sc/í/n
					TRYING: n
					adding blocked set: C = C >> i, n, h
					> version: sc/í/n
					TRYING: n
					adding blocked set: C = C >> i, n, h
					RESULT:  ['í']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: i
					> version: s/h/i/n
					TRYING: i
					> version: sh/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					> version: sh/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					RESULT:  ['i']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: h
					> version: s/c/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					> version: s/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					> version: s/_/i/n
					TRYING: i
					> version: s/_/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: i
					> version: s/s/i/n
					TRYING: i
					> version: ss/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					> version: ss/i/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					RESULT:  ['i']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: y
					> version: s/s/y/n
					TRYING: y
					> version: ss/y/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					> version: ss/y/n
					TRYING: n
					adding blocked set: C = C >> i, í, n, h
					RESULT:  ['y']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					> version: s/u/i/n
					TRYING: i
					> version: s/ui/n
					TRYING: n
					adding blocked set: C = C >> h, í, y, i, n
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> h, u, í, y, i
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> h, u, í, y, i
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['i']
			___CCCVC : 3___
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: n
					> version: s/c/i/n
					TRYING: n
					> version: sc/i/n
					> version: sc/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'n']
				adding dashed alternative: ['s', 'c', 'i', '_', 'n']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/c/i/_/n(CCAAC)
s/c/i/_/n(CCAAC)
sc/i/n/_(CACA)
sc/i/n/_(CACA)
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: n
					> version: s/c/i/n/e
					TRYING: n
					> version: sc/i/n/e
					TRYING: e
					> version: sc/i/n/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: n
					> version: s/c/í/n
					TRYING: n
					> version: sc/í/n
					> version: sc/í/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'í', '_', 'n']
				adding dashed alternative: ['s', 'c', 'í', '_', 'n']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/c/í/_/n(CCAAC)
s/c/í/_/n(CCAAC)
sc/í/n/_(CACA)
sc/í/n/_(CACA)
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: n
					> version: s/h/i/n
					TRYING: n
					> version: sh/i/n
					> version: sh/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'n']
				adding dashed alternative: ['s', 'h', 'i', '_', 'n']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/h/i/_/n(CCAAC)
s/h/i/_/n(CCAAC)
sh/i/n/_(CACA)
sh/i/n/_(CACA)
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: i
					> version: s/c/h/i
					TRYING: i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					RESULT:  ['i']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', 'i', '_', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
s/i/n/_(CACA)
s/i/n/_(CACA)
s/_/i/_/n(CAAAC)
s/_/i/_/n(CAAAC)
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: n
					> version: s/s/i/n
					TRYING: n
					> version: ss/i/n
					> version: ss/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'n']
				adding dashed alternative: ['s', 's', 'i', '_', 'n']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/s/i/_/n(CCAAC)
s/s/i/_/n(CCAAC)
ss/i/n/_(CACA)
ss/i/n/_(CACA)
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: n
					> version: s/s/y/n
					TRYING: n
					> version: ss/y/n
					> version: ss/y/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'n']
				adding dashed alternative: ['s', 's', 'y', '_', 'n']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/s/y/_/n(CCAAC)
s/s/y/_/n(CCAAC)
ss/y/n/_(CACA)
ss/y/n/_(CACA)
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: n
					> version: s/u/i/n
					TRYING: n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/ui/n
					TRYING: n
					RESULT:  ['i']
			___CCCVC : 4___
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (8)
					> version: s/c/i/n
					> version: s/c/i/n
					> version: sc/i/n
					> version: sc/i/n
					> version: s/c/i/_/n
					TRYING: n
					> version: s/c/i/_/n
					TRYING: n
					> version: sc/i/n/_
					> version: sc/i/n/_
					RESULT:  ['n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['s', 'c', 'i', '_', 'n']
				{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				version split: ['s', 'c', 'i', '_', 'n']
				{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', '_']
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((n))$'}
				_____REMOVING________['sc', 'i', 'n', '_']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: e
					> version: s/c/i/n/e
					TRYING: e
					> version: sc/i/n/e
					> version: sc/i/n/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'n', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'n', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'n', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'n', 'e', '_']
				s/c/i/n/e(CCCCV)
s/c/i/n/e(CCVCV)
sc/i/n/e(CCCV)
sc/i/n/e(CVCV)
s/c/i/n/_/e(CCACAV)
s/c/i/n/_/e(CCACAV)
sc/i/n/e/_(CACVA)
sc/i/n/e/_(CACVA)
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', '_', 'e']
				{'string': 's/c/i/n/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', '_', 'e']
				version split: ['s', 'c', 'i', 'n', '_', 'e']
				{'string': 's/c/i/n/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', '_', 'e']
				version split: ['sc', 'i', 'n', 'e', '_']
				{'string': 'sc/i/n/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e', '_']
				version split: ['sc', 'i', 'n', 'e', '_']
				{'string': 'sc/i/n/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e', '_']
				ANALYSING: scín
					resolving (8)
					> version: s/c/í/n
					> version: s/c/í/n
					> version: sc/í/n
					> version: sc/í/n
					> version: s/c/í/_/n
					TRYING: n
					> version: s/c/í/_/n
					TRYING: n
					> version: sc/í/n/_
					> version: sc/í/n/_
					RESULT:  ['n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['s', 'c', 'í', '_', 'n']
				{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				version split: ['s', 'c', 'í', '_', 'n']
				{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['sc', 'í', 'n', '_']
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((_))/((n))$'}
				_____REMOVING________['sc', 'í', 'n', '_']
				ANALYSING: shin
					resolving (8)
					> version: s/h/i/n
					> version: s/h/i/n
					> version: sh/i/n
					> version: sh/i/n
					> version: s/h/i/_/n
					TRYING: n
					> version: s/h/i/_/n
					TRYING: n
					> version: sh/i/n/_
					> version: sh/i/n/_
					RESULT:  ['n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['s', 'h', 'i', '_', 'n']
				{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				version split: ['s', 'h', 'i', '_', 'n']
				{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['sh', 'i', 'n', '_']
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((_))/((n))$'}
				_____REMOVING________['sh', 'i', 'n', '_']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					> version: s/c/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/c/h/i/_(CCCAA)
s/c/h/i/_(CCCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/i/_(CCAA)
s/ch/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['s', 'c', 'h', 'i', '_']
				{'string': 's/c/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				version split: ['s', 'c', 'h', 'i', '_']
				{'string': 's/c/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', '_']
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				ANALYSING: sin
					resolving (8)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					> version: s/_/i/n
					> version: s/i/n/_
					> version: s/i/n/_
					> version: s/_/i/_/n
					TRYING: n
					> version: s/_/i/_/n
					TRYING: n
					RESULT:  ['n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'i', 'n', '_']
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 'i', 'n', '_']
				version split: ['s', '_', 'i', '_', 'n']
				{'string': 's/_/i/_/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				version split: ['s', '_', 'i', '_', 'n']
				{'string': 's/_/i/_/n', 'rgx': '((s))/((_))/((i))/((_))/((n))$'}
				ANALYSING: ssin
					resolving (8)
					> version: s/s/i/n
					> version: s/s/i/n
					> version: ss/i/n
					> version: ss/i/n
					> version: s/s/i/_/n
					TRYING: n
					> version: s/s/i/_/n
					TRYING: n
					> version: ss/i/n/_
					> version: ss/i/n/_
					RESULT:  ['n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['s', 's', 'i', '_', 'n']
				{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				version split: ['s', 's', 'i', '_', 'n']
				{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['ss', 'i', 'n', '_']
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((_))/((n))$'}
				_____REMOVING________['ss', 'i', 'n', '_']
				ANALYSING: ssyn
					resolving (8)
					> version: s/s/y/n
					> version: s/s/y/n
					> version: ss/y/n
					> version: ss/y/n
					> version: s/s/y/_/n
					TRYING: n
					> version: s/s/y/_/n
					TRYING: n
					> version: ss/y/n/_
					> version: ss/y/n/_
					RESULT:  ['n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['s', 's', 'y', '_', 'n']
				{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				version split: ['s', 's', 'y', '_', 'n']
				{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['ss', 'y', 'n', '_']
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((_))/((n))$'}
				_____REMOVING________['ss', 'y', 'n', '_']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					> version: s/u/i/n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: n
					> version: s/_/ui/n
					RESULT:  ['n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((i))/((i))/((n))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
		only one version left: ['s', 'c', 'i', '_', 'n']
		FAIL: 
		only one version left: ['s', 'c', 'í', '_', 'n']
		only one version left: ['s', 'h', 'i', '_', 'n']
		only one version left: ['s', 'c', 'h', 'i', '_']
		only one version left: ['s', '_', 'i', '_', 'n']
		only one version left: ['s', 's', 'i', '_', 'n']
		only one version left: ['s', 's', 'y', '_', 'n']
		FAIL: 
		SPLIT: ['s', 'c', 'h', 'i', 'n']
		SPLIT: ['s', 'c', 'h', 'y', 'n']
		SPLIT: ['s', 'c', 'i', '_', 'n']
		['s', 'c', 'i', '_', 'n']
		['s', 'c', 'i', '_', 'n']
		SPLIT: ['sc.s', 'c', 'i', 'e', '_', '----!']
		SPLIT: ['s', 'c', 'í', '_', 'n']
		['s', 'c', 'í', '_', 'n']
		['s', 'c', 'í', '_', 'n']
		SPLIT: ['s', 'h', 'i', '_', 'n']
		['s', 'h', 'i', '_', 'n']
		['s', 'h', 'i', '_', 'n']
		SPLIT: ['s', 'c', 'h', 'i', '_']
		['s', 'c', 'h', 'i', '_']
		['s', 'c', 'h', 'i', '_']
		SPLIT: ['s', '_', 'i', '_', 'n']
		['s', '_', 'i', '_', 'n']
		['s', '_', 'i', '_', 'n']
		SPLIT: ['s', 's', 'i', '_', 'n']
		['s', 's', 'i', '_', 'n']
		['s', 's', 'i', '_', 'n']
		SPLIT: ['s', 's', 'y', '_', 'n']
		['s', 's', 'y', '_', 'n']
		['s', 's', 'y', '_', 'n']
		SPLIT: ['s', '_', 'i', 'i', 'n', '----!']
		version for pattern CCCVC is INVALID
		[]
		2
		OVERVIEW: version for pattern CCCVC

faulty splits: 2
sc.scie----! <-! scine
siin----! <-! suin
s | c | h | i | n
s | c | h | y | n
s | c | i | _ | n
sc.s | c | i | e | _ | ----!
s | c | í | _ | n
s | h | i | _ | n
s | c | h | i | _
s | _ | i | _ | n
s | s | i | _ | n
s | s | y | _ | n
s | _ | i | i | n | ----!
1 : {'ch', 's', 'c', 'h', 'u', '_'},{'ch', 'i', 'c', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: s
					> version: s/c/i/n
					TRYING: s
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: s
					> version: s/c/í/n
					TRYING: s
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: s
					> version: s/h/i/n
					TRYING: s
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: s
					> version: s/c/h/i
					TRYING: s
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: s
					> version: s/c/h/i/n
					TRYING: s
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: s
					> version: s/c/h/y/n
					TRYING: s
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CVCV : 1___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: c
					> version: s/c/i/n
					TRYING: c
					> version: sc/i/n
					TRYING: i
					> version: sc/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: c
					> version: s/c/í/n
					TRYING: c
					> version: sc/í/n
					TRYING: í
					> version: sc/í/n
					TRYING: í
					RESULT:  ['í']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: h
					> version: s/h/i/n
					TRYING: h
					> version: sh/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sh/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: c
					> version: s/c/h/i
					TRYING: c
					> version: sc/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: h
					> version: sch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: c
					> version: s/c/h/i/n
					TRYING: c
					> version: sc/h/i/n
					TRYING: h
					> version: sc/h/i/n
					TRYING: h
					> version: sch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: c
					> version: s/c/h/y/n
					TRYING: c
					> version: sc/h/y/n
					TRYING: h
					> version: sc/h/y/n
					TRYING: h
					> version: sch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					RESULT:  ['h', 'y']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					> version: s/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: i
					> version: ss/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: y
					> version: ss/y/n
					TRYING: y
					RESULT:  ['y']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					> version: s/u/i/n
					TRYING: u
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CVCV : 2___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/c/i/n
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/i/n
					TRYING: n
					> version: sc/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: í
					adding blocked set: C = C >> n, í
					> version: s/c/í/n
					TRYING: í
					adding blocked set: C = C >> n, í
					> version: sc/í/n
					TRYING: n
					> version: sc/í/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sh/i/n
					TRYING: n
					> version: sh/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: s/c/h/i
					TRYING: h
					adding blocked set: C = C >> n, h
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/ch/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['s', 'ch', '_', 'i']
				adding dashed alternative: ['s', 'ch', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', '_', 'i']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/c/_/h/i(CCACA)
s/c/_/h/i(CCACA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/_/i(CCAA)
s/ch/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: s/c/h/i/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sch/i/n
					TRYING: n
					> version: sch/i/n
					TRYING: n
					> version: s/ch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/ch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sch/i/n
					TRYING: n
					> version: sch/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					RESULT:  ['n']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: s/c/h/y/n
					TRYING: h
					adding blocked set: C = C >> _, n, h
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sch/y/n
					TRYING: n
					> version: sch/y/n
					TRYING: n
					> version: s/ch/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: s/ch/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sch/y/n
					TRYING: n
					> version: sch/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					RESULT:  ['n']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: n
					> version: s/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: ss/i/n
					TRYING: n
					> version: ss/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: s/s/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: ss/y/n
					TRYING: n
					> version: ss/y/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/ui/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> _, u, n
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['n']
			___CVCV : 3___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: n
					> version: s/c/i/n
					TRYING: n
					> version: sc/i/n
					> version: sc/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'n']
				adding dashed alternative: ['s', 'c', 'i', '_', 'n']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/c/i/_/n(CCAAC)
s/c/i/_/n(CCAAC)
sc/i/n/_(CACA)
sc/i/n/_(CACA)
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['s', 'c', 'i', '_', 'n']
				{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'n']
				version split: ['s', 'c', 'i', '_', 'n']
				{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'n']
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: n
					> version: s/c/í/n
					TRYING: n
					> version: sc/í/n
					> version: sc/í/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'í', '_', 'n']
				adding dashed alternative: ['s', 'c', 'í', '_', 'n']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/c/í/_/n(CCAAC)
s/c/í/_/n(CCAAC)
sc/í/n/_(CACA)
sc/í/n/_(CACA)
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['s', 'c', 'í', '_', 'n']
				{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', '_', 'n']
				version split: ['s', 'c', 'í', '_', 'n']
				{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', '_', 'n']
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: n
					> version: s/h/i/n
					TRYING: n
					> version: sh/i/n
					> version: sh/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'n']
				adding dashed alternative: ['s', 'h', 'i', '_', 'n']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/h/i/_/n(CCAAC)
s/h/i/_/n(CCAAC)
sh/i/n/_(CACA)
sh/i/n/_(CACA)
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['s', 'h', 'i', '_', 'n']
				{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'n']
				version split: ['s', 'h', 'i', '_', 'n']
				{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'n']
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
				ANALYSING: schi
					resolving (32)
					> version: s/c/h/i
					TRYING: i
					> version: s/c/h/i
					TRYING: i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: s/c/_/h/i
					TRYING: h
					> version: s/c/_/h/i
					TRYING: h
					> version: sc/h/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					> version: sch/i/_
					> version: sch/i/_
					> version: s/ch/_/i
					TRYING: i
					> version: s/ch/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					> version: sch/i/_
					> version: sch/i/_
					> version: sc/h/_/i
					TRYING: i
					> version: sc/h/_/i
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['s', 'c', '_', 'h', 'i']
				{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i']
				version split: ['s', 'c', '_', 'h', 'i']
				{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['s', 'ch', '_', 'i']
				{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', '_', 'i']
				version split: ['s', 'ch', '_', 'i']
				{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', '_', 'i']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', '_', 'i']
				{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: i
					> version: s/c/h/i/n
					TRYING: i
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: s/ch/i/n
					TRYING: n
					> version: s/ch/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: y
					> version: s/c/h/y/n
					TRYING: y
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: s/ch/y/n
					TRYING: n
					> version: s/ch/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					RESULT:  ['y']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					> version: s/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				s/i/n(CCC)
s/i/n(CVC)
s/i/n/_(CACA)
s/i/n/_(CACA)
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((i))/((n))/((_))$'}
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((i))/((n))/((_))$'}
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: n
					> version: s/s/i/n
					TRYING: n
					> version: ss/i/n
					> version: ss/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'n']
				adding dashed alternative: ['s', 's', 'i', '_', 'n']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/s/i/_/n(CCAAC)
s/s/i/_/n(CCAAC)
ss/i/n/_(CACA)
ss/i/n/_(CACA)
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['s', 's', 'i', '_', 'n']
				{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'n']
				version split: ['s', 's', 'i', '_', 'n']
				{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'n']
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: n
					> version: s/s/y/n
					TRYING: n
					> version: ss/y/n
					> version: ss/y/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'n']
				adding dashed alternative: ['s', 's', 'y', '_', 'n']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/s/y/_/n(CCAAC)
s/s/y/_/n(CCAAC)
ss/y/n/_(CACA)
ss/y/n/_(CACA)
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['s', 's', 'y', '_', 'n']
				{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'n']
				version split: ['s', 's', 'y', '_', 'n']
				{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'n']
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: n
					> version: s/u/i/n
					TRYING: n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/u/i/n
					TRYING: i
					> version: s/_/ui/n
					TRYING: n
					RESULT:  ['i']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((n))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
		only one version left: ['sc', 'i', 'n', '_']
		only one version left: ['sc', 'í', 'n', '_']
		only one version left: ['sh', 'i', 'n', '_']
		only one version left: ['sc', 'h', '_', 'i']
		FAIL: 
		FAIL: 
		only one version left: ['s', 'i', 'n', '_']
		only one version left: ['ss', 'i', 'n', '_']
		only one version left: ['ss', 'y', 'n', '_']
		FAIL: 
		SPLIT: ['sc', 'i', 'n', 'e']
		SPLIT: ['sc', 'i', 'n', '_']
		['sc', 'i', 'n', '_']
		['sc', 'i', 'n', '_']
		SPLIT: ['sc', 'í', 'n', '_']
		['sc', 'í', 'n', '_']
		['sc', 'í', 'n', '_']
		SPLIT: ['sh', 'i', 'n', '_']
		['sh', 'i', 'n', '_']
		['sh', 'i', 'n', '_']
		SPLIT: ['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		['sc', 'h', '_', 'i']
		SPLIT: ['sc.s.sch', 'i.h', 'n', 'i', '----!']
		SPLIT: ['sc.s.sch', 'h.y', 'n', 'y', '----!']
		SPLIT: ['s', 'i', 'n', '_']
		['s', 'i', 'n', '_']
		['s', 'i', 'n', '_']
		SPLIT: ['ss', 'i', 'n', '_']
		['ss', 'i', 'n', '_']
		['ss', 'i', 'n', '_']
		SPLIT: ['ss', 'y', 'n', '_']
		['ss', 'y', 'n', '_']
		['ss', 'y', 'n', '_']
		SPLIT: ['s', '_', 'n', 'i', '----!']
		version for pattern CVCV is INVALID
		[]
		3
		OVERVIEW: version for pattern CVCV

faulty splits: 3
sc.s.schi.hni----! <-! schin
sc.s.schh.yny----! <-! schyn
sni----! <-! suin
sc | i | n | e
sc | i | n | _
sc | í | n | _
sh | i | n | _
sc | h | _ | i
sc.s.sch | i.h | n | i | ----!
sc.s.sch | h.y | n | y | ----!
s | i | n | _
ss | i | n | _
ss | y | n | _
s | _ | n | i | ----!
2 : {'i', 'n'},{'n', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCC
	Selection for pattern: CCC completed
	Making a version for pattern: CCC
			___CCC : 0___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: s
					> version: s/c/i/n/e
					TRYING: s
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCC : 1___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> c, h, í, y, i
					> version: s/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> c, h, í, y, i
					> version: sc/i/n/e
					TRYING: i
					> version: sc/i/n/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> h, u, í, y, i
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> h, u, í, y, i
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCC : 2___
				ANALYSING: scin
				adding littera based on matching pattern
				ANALYSING: scín
				adding littera based on matching pattern
				ANALYSING: shin
				adding littera based on matching pattern
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: schin
				adding littera based on matching pattern
				ANALYSING: schyn
				adding littera based on matching pattern
				ANALYSING: sin
				adding littera based on matching pattern
				ANALYSING: ssin
				adding littera based on matching pattern
				ANALYSING: ssyn
				adding littera based on matching pattern
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/c/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/i/n/e
					TRYING: n
					adding blocked set: C = C >> i, n
					> version: sc/i/n/e
					TRYING: n
					adding blocked set: C = C >> i, n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i', 'n', 'e']
				adding dashed alternative: ['s', 'c', '_', 'i', 'n', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'n', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'n', 'e']
				s/c/i/n/e(CCCCV)
s/c/i/n/e(CCVCV)
sc/i/n/e(CCCV)
sc/i/n/e(CVCV)
s/c/_/i/n/e(CCAACV)
s/c/_/i/n/e(CCAACV)
sc/i/_/n/e(CAACV)
sc/i/_/n/e(CAACV)
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['s', 'c', '_', 'i', 'n', 'e']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'n', 'e']
				version split: ['s', 'c', '_', 'i', 'n', 'e']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'n', 'e']
				version split: ['sc', 'i', '_', 'n', 'e']
				{'string': 'sc/i/_/n', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'n', 'e']
				version split: ['sc', 'i', '_', 'n', 'e']
				{'string': 'sc/i/_/n', 'rgx': '((sc)|(s))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'n', 'e']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, _
					> version: s/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, n, _
					> version: s/ui/n
					TRYING: n
					adding blocked set: C = C >> i, n, _
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> i, u, n, _
					> version: s/_/u/i/n
					TRYING: u
					adding blocked set: C = C >> i, u, n, _
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'i', 'n']
				adding dashed alternative: ['s', 'u', '_', 'i', 'n']
				adding dashed alternative: ['s', 'ui', '_', 'n']
				adding dashed alternative: ['s', '_', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
s/u/_/i/n(CAAAC)
s/u/_/i/n(CAAAC)
s/ui/_/n(CVAC)
s/_/_/u/i/n(CAAAAC)
s/_/_/u/i/n(CAAAAC)
s/_/_/ui/n(CAAVC)
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
				version split: ['s', 'u', '_', 'i', 'n']
				{'string': 's/u/_/i', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'n']
				version split: ['s', 'u', '_', 'i', 'n']
				{'string': 's/u/_/i', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'n']
				version split: ['s', 'ui', '_', 'n']
				{'string': 's/ui/_/n', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'n']
				version split: ['s', '_', '_', 'u', 'i', 'n']
				{'string': 's/_/_/u', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'u', 'i', 'n']
				version split: ['s', '_', '_', 'u', 'i', 'n']
				{'string': 's/_/_/u', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'u', 'i', 'n']
				version split: ['s', '_', '_', 'ui', 'n']
				{'string': 's/_/_/ui', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ui', 'n']
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'i', 'n']
		SPLIT: ['sc', 'í', 'n']
		SPLIT: ['sh', 'i', 'n']
		SPLIT: ['sc', 'h', 'i']
		SPLIT: ['sch', 'i', 'n']
		SPLIT: ['sch', 'y', 'n']
		SPLIT: ['s', 'i', 'n']
		SPLIT: ['ss', 'i', 'n']
		SPLIT: ['ss', 'y', 'n']
		SPLIT: ['sc.s', 'i', '_', '----!']
		SPLIT: ['s', '_', '_', '----!']
		version for pattern CCC is INVALID
		[{'i', 'n', '_'}]
		2
		OVERVIEW: version for pattern CCC
{'i', 'n', '_'}
faulty splits: 2
sc.si----! <-! scine
s----! <-! suin
sc | i | n
sc | í | n
sh | i | n
sc | h | i
sch | i | n
sch | y | n
s | i | n
ss | i | n
ss | y | n
sc.s | i | _ | ----!
s | _ | _ | ----!
1 : {'h', 'u', 'í', 'y', 'i'}
2 : {'i', 'n', '_'},{'i', 'n'},{'i', 'u', 'n', '_'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCV
	Selection for pattern: CCV completed
	Making a version for pattern: CCV
			___CCV : 0___
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: s
					> version: s/c/i/n
					TRYING: s
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: s
					> version: s/c/i/n/e
					TRYING: s
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: s
					> version: s/c/í/n
					TRYING: s
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: s
					> version: s/h/i/n
					TRYING: s
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: s
					> version: s/c/h/i/n
					TRYING: s
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: s
					> version: s/c/h/y/n
					TRYING: s
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCV : 1___
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: c
					> version: s/c/i/n
					TRYING: c
					> version: sc/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					> version: sc/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					RESULT:  ['i', 'c']
				ANALYSING: scine
					resolving (4)
					> version: s/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> i, c, h
					> version: s/c/i/n/e
					TRYING: c
					adding blocked set: C = C >> i, c, h
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, c, h
					> version: sc/i/n/e
					TRYING: i
					adding blocked set: C = C >> i, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'n', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'n', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'n', 'e']
				s/c/i/n/e(CCCCV)
s/c/i/n/e(CCVCV)
sc/i/n/e(CCCV)
sc/i/n/e(CVCV)
s/_/c/i/n/e(CACACV)
s/_/c/i/n/e(CACACV)
sc/_/i/n/e(CAACV)
sc/_/i/n/e(CAACV)
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: s/c/í/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> c, h, í, _, i
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> c, h, í, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'í', 'n']
				adding dashed alternative: ['s', '_', 'c', 'í', 'n']
				adding dashed alternative: ['sc', '_', 'í', 'n']
				adding dashed alternative: ['sc', '_', 'í', 'n']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/_/c/í/n(CACAC)
s/_/c/í/n(CACAC)
sc/_/í/n(CAAC)
sc/_/í/n(CAAC)
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: s/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sh', '_', 'i', 'n']
				adding dashed alternative: ['sh', '_', 'i', 'n']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/_/h/i/n(CACAC)
s/_/h/i/n(CACAC)
sh/_/i/n(CAAC)
sh/_/i/n(CAAC)
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: s/c/h/i/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: s/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, c, h, _, i
					> version: s/ch/i/n
					TRYING: ch
					adding blocked set: C = C >> ch, c, h, _, i
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'n']
				s/c/h/i/n(CCCCC)
s/c/h/i/n(CCCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
s/ch/i/n(CCCC)
s/ch/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
s/_/c/h/i/n(CACCAC)
s/_/c/h/i/n(CACCAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
s/_/ch/i/n(CACAC)
s/_/ch/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
sch/_/i/n(CAAC)
sch/_/i/n(CAAC)
sc/_/h/i/n(CACAC)
sc/_/h/i/n(CACAC)
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: s/c/h/y/n
					TRYING: c
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					> version: s/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, c, h, _, i
					> version: s/ch/y/n
					TRYING: ch
					adding blocked set: C = C >> ch, c, h, _, i
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/y/n
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['s', '_', 'c', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sch', '_', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'y', 'n']
				s/c/h/y/n(CCCCC)
s/c/h/y/n(CCCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
s/ch/y/n(CCCC)
s/ch/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
s/_/c/h/y/n(CACCAC)
s/_/c/h/y/n(CACCAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
s/_/ch/y/n(CACAC)
s/_/ch/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
sch/_/y/n(CAAC)
sch/_/y/n(CAAC)
sc/_/h/y/n(CACAC)
sc/_/h/y/n(CACAC)
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, c, h, _, i
					> version: s/s/i/n
					TRYING: s
					adding blocked set: C = C >> s, c, h, _, i
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'n']
				adding dashed alternative: ['s', '_', 's', 'i', 'n']
				adding dashed alternative: ['ss', '_', 'i', 'n']
				adding dashed alternative: ['ss', '_', 'i', 'n']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/_/s/i/n(CACAC)
s/_/s/i/n(CACAC)
ss/_/i/n(CAAC)
ss/_/i/n(CAAC)
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, c, h, _, i
					> version: s/s/y/n
					TRYING: s
					adding blocked set: C = C >> s, c, h, _, i
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> c, h, _, y, i
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'y', 'n']
				adding dashed alternative: ['s', '_', 's', 'y', 'n']
				adding dashed alternative: ['ss', '_', 'y', 'n']
				adding dashed alternative: ['ss', '_', 'y', 'n']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/_/s/y/n(CACAC)
s/_/s/y/n(CACAC)
ss/_/y/n(CAAC)
ss/_/y/n(CAAC)
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> c, h, u, _, i
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> c, h, u, _, i
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCV : 2___
				ANALYSING: schi
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: i
					> version: s/c/i/n
					TRYING: i
					> version: sc/i/n
					TRYING: n
					> version: sc/i/n
					TRYING: n
					RESULT:  ['i']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i)|(c))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i)|(c))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i)|(c))/((i))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i)|(c))/((i))$'}
				_____REMOVING________['sc', 'i', 'n']
				ANALYSING: scine
					resolving (8)
					> version: s/c/i/n/e
					TRYING: i
					> version: s/c/i/n/e
					TRYING: i
					> version: sc/i/n/e
					TRYING: n
					> version: sc/i/n/e
					TRYING: n
					> version: s/_/c/i/n/e
					TRYING: c
					> version: s/_/c/i/n/e
					TRYING: c
					> version: sc/_/i/n/e
					TRYING: i
					> version: sc/_/i/n/e
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['s', 'c', 'i', 'n', 'e']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['sc', 'i', 'n', 'e']
				{'string': 'sc/i/n/e', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', 'n', 'e']
				version split: ['s', '_', 'c', 'i', 'n', 'e']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n', 'e']
				version split: ['s', '_', 'c', 'i', 'n', 'e']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'n', 'e']
				version split: ['sc', '_', 'i', 'n', 'e']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'i', 'n', 'e']
				version split: ['sc', '_', 'i', 'n', 'e']
				{'string': 'sc/_/i/n', 'rgx': '((sc)|(s))/((_))/((i))$'}
				_____REMOVING________['sc', '_', 'i', 'n', 'e']
				ANALYSING: scín
					resolving (8)
					> version: s/c/í/n
					TRYING: í
					> version: s/c/í/n
					TRYING: í
					> version: sc/í/n
					TRYING: n
					> version: sc/í/n
					TRYING: n
					> version: s/_/c/í/n
					TRYING: c
					> version: s/_/c/í/n
					TRYING: c
					> version: sc/_/í/n
					TRYING: í
					> version: sc/_/í/n
					TRYING: í
					RESULT:  ['í']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['s', '_', 'c', 'í', 'n']
				{'string': 's/_/c/í', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['s', '_', 'c', 'í', 'n']
				version split: ['s', '_', 'c', 'í', 'n']
				{'string': 's/_/c/í', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['s', '_', 'c', 'í', 'n']
				version split: ['sc', '_', 'í', 'n']
				{'string': 'sc/_/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['sc', '_', 'í', 'n']
				version split: ['sc', '_', 'í', 'n']
				{'string': 'sc/_/í/n', 'rgx': '((sc)|(s))/((_))/((í))$'}
				_____REMOVING________['sc', '_', 'í', 'n']
				ANALYSING: shin
					resolving (8)
					> version: s/h/i/n
					TRYING: i
					> version: s/h/i/n
					TRYING: i
					> version: sh/i/n
					TRYING: n
					> version: sh/i/n
					TRYING: n
					> version: s/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sh/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sh/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['s', '_', 'h', 'i', 'n']
				{'string': 's/_/h/i', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'n']
				version split: ['s', '_', 'h', 'i', 'n']
				{'string': 's/_/h/i', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'n']
				version split: ['sh', '_', 'i', 'n']
				{'string': 'sh/_/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['sh', '_', 'i', 'n']
				version split: ['sh', '_', 'i', 'n']
				{'string': 'sh/_/i/n', 'rgx': '((s)|(sh))/((_))/((i)|(h))$'}
				_____REMOVING________['sh', '_', 'i', 'n']
				ANALYSING: schin
					resolving (32)
					> version: s/c/h/i/n
					TRYING: h
					> version: s/c/h/i/n
					TRYING: h
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/_/c/h/i/n
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/_/c/h/i/n
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/_/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/_/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/_/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/_/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'n']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['s', '_', 'ch', 'i', 'n']
				{'string': 's/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'n']
				version split: ['s', '_', 'ch', 'i', 'n']
				{'string': 's/_/ch/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sch', '_', 'i', 'n']
				{'string': 'sch/_/i/n', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sch', '_', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				version split: ['sc', '_', 'h', 'i', 'n']
				{'string': 'sc/_/h/i', 'rgx': '((sc)|(s)|(sch))/((_))/((i)|(h))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'n']
				ANALYSING: schyn
					resolving (32)
					> version: s/c/h/y/n
					TRYING: h
					> version: s/c/h/y/n
					TRYING: h
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/_/c/h/y/n
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/_/c/h/y/n
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/_/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/_/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/_/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/_/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/_/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/_/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/_/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					RESULT:  ['h', 'y']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['s', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'y', 'n']
				version split: ['s', '_', 'c', 'h', 'y', 'n']
				{'string': 's/_/c/h', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['s', '_', 'ch', 'y', 'n']
				{'string': 's/_/ch/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', '_', 'ch', 'y', 'n']
				version split: ['s', '_', 'ch', 'y', 'n']
				{'string': 's/_/ch/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['s', '_', 'ch', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sch', '_', 'y', 'n']
				{'string': 'sch/_/y/n', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sch', '_', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				version split: ['sc', '_', 'h', 'y', 'n']
				{'string': 'sc/_/h/y', 'rgx': '((sc)|(s)|(sch))/((_))/((h)|(y))$'}
				_____REMOVING________['sc', '_', 'h', 'y', 'n']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					TRYING: n
					> version: s/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: i
					> version: s/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				ANALYSING: ssin
					resolving (8)
					> version: s/s/i/n
					TRYING: i
					> version: s/s/i/n
					TRYING: i
					> version: ss/i/n
					TRYING: n
					> version: ss/i/n
					TRYING: n
					> version: s/_/s/i/n
					TRYING: s
					> version: s/_/s/i/n
					TRYING: s
					> version: ss/_/i/n
					TRYING: i
					> version: ss/_/i/n
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['s', '_', 's', 'i', 'n']
				{'string': 's/_/s/i', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['s', '_', 's', 'i', 'n']
				version split: ['s', '_', 's', 'i', 'n']
				{'string': 's/_/s/i', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['s', '_', 's', 'i', 'n']
				version split: ['ss', '_', 'i', 'n']
				{'string': 'ss/_/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['ss', '_', 'i', 'n']
				version split: ['ss', '_', 'i', 'n']
				{'string': 'ss/_/i/n', 'rgx': '((s)|(ss))/((_))/((i))$'}
				_____REMOVING________['ss', '_', 'i', 'n']
				ANALYSING: ssyn
					resolving (8)
					> version: s/s/y/n
					TRYING: y
					> version: s/s/y/n
					TRYING: y
					> version: ss/y/n
					TRYING: n
					> version: ss/y/n
					TRYING: n
					> version: s/_/s/y/n
					TRYING: s
					> version: s/_/s/y/n
					TRYING: s
					> version: ss/_/y/n
					TRYING: y
					> version: ss/_/y/n
					TRYING: y
					RESULT:  ['y']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['s', '_', 's', 'y', 'n']
				{'string': 's/_/s/y', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['s', '_', 's', 'y', 'n']
				version split: ['s', '_', 's', 'y', 'n']
				{'string': 's/_/s/y', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['s', '_', 's', 'y', 'n']
				version split: ['ss', '_', 'y', 'n']
				{'string': 'ss/_/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['ss', '_', 'y', 'n']
				version split: ['ss', '_', 'y', 'n']
				{'string': 'ss/_/y/n', 'rgx': '((s)|(ss))/((_))/((y))$'}
				_____REMOVING________['ss', '_', 'y', 'n']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					> version: s/u/i/n
					TRYING: i
					> version: s/ui/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['i']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'h', 'i']
		SPLIT: ['sc.s', 'i.c', 'i', '----!']
		SPLIT: ['sc.s', '_', 'i', '----!']
		SPLIT: ['sc.s', '_', 'í', '----!']
		SPLIT: ['s.sh', '_', 'i.h', '----!']
		SPLIT: ['sc.s.sch', '_', 'i.h', '----!']
		SPLIT: ['sc.s.sch', '_', 'h.y', '----!']
		SPLIT: ['s', '_', 'i', '----!']
		SPLIT: ['s.ss', '_', 'i', '----!']
		SPLIT: ['s.ss', '_', 'y', '----!']
		SPLIT: ['s', '_', 'i', '----!']
		version for pattern CCV is INVALID
		[{'i', '_', 'h', 'c'}]
		10
		OVERVIEW: version for pattern CCV
{'i', '_', 'h', 'c'}
faulty splits: 10
sc.si.ci----! <-! scin
sc.si----! <-! scine
sc.sí----! <-! scín
s.shi.h----! <-! shin
sc.s.schi.h----! <-! schin
sc.s.schh.y----! <-! schyn
si----! <-! sin
s.ssi----! <-! ssin
s.ssy----! <-! ssyn
si----! <-! suin
sc | h | i
sc.s | i.c | i | ----!
sc.s | _ | i | ----!
sc.s | _ | í | ----!
s.sh | _ | i.h | ----!
sc.s.sch | _ | i.h | ----!
sc.s.sch | _ | h.y | ----!
s | _ | i | ----!
s.ss | _ | i | ----!
s.ss | _ | y | ----!
s | _ | i | ----!
1 : {'c', 'h', 'í', '_', 'i'},{'i', 'c', 'h'},{'c', 'h', '_', 'y', 'i'},{'c', 'h', 'u', '_', 'i'},{'s', 'c', 'h', '_', 'i'},{'ch', 'c', 'h', '_', 'i'},{'i', '_', 'h', 'c'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	MIN pattern length=3
	Pattern CVC is valid
	Pattern CCCV is valid
	Pattern CCCC is invalid
	Pattern CVVC is invalid
	Pattern CCVC is valid
	Pattern CCCVC is valid
	Pattern CCCCC is invalid
	Pattern CVCV is valid
	Pattern CC is invalid
	Pattern CCC is valid
	Pattern CCV is valid
	Pattern CV is invalid
	Pattern CCVCV is valid
	Pattern CCCCV is invalid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: s
					> version: s/c/i/n
					TRYING: s
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: s
					> version: s/c/í/n
					TRYING: s
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/í/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: s
					> version: s/h/i/n
					TRYING: s
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/i/n
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: s
					> version: s/c/h/i
					TRYING: s
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: s
					> version: s/c/h/i/n
					TRYING: s
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/i/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/i/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/i/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: s
					> version: s/c/h/y/n
					TRYING: s
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: s/ch/y/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sch/y/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					> version: sc/h/y/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
					RESULT:  ['sc', 's', 'sch']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: s
					> version: s/i/n
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/i/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					> version: ss/y/n
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
					RESULT:  ['s', 'ss']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: s
					> version: s/u/i/n
					TRYING: s
					> version: s/ui/n
					TRYING: s
					RESULT:  ['s']
			___CCVCV : 1___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: c
					> version: s/c/i/n
					TRYING: c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: c
					> version: s/c/í/n
					TRYING: c
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> í, c
					> version: sc/í/n
					TRYING: í
					adding blocked set: C = C >> í, c
					RESULT:  ['c']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: h
					> version: s/h/i/n
					TRYING: h
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/n
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: c
					> version: s/c/h/i
					TRYING: c
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: s/ch/i
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i
					TRYING: i
					adding blocked set: C = C >> i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					RESULT:  ['ch', 'c', 'h']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: c
					> version: s/c/h/i/n
					TRYING: c
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: s/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: s/ch/i/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/i/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					RESULT:  ['ch', 'c', 'h']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: c
					> version: s/c/h/y/n
					TRYING: c
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> ch, c, h, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> ch, c, h, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'h'}
					> version: s/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: s/ch/y/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> ch, c, h, y
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sch/y/n
					TRYING: y
					adding blocked set: C = C >> ch, c, h, y
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					> version: sc/h/y/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c', 'h'}
					RESULT:  ['ch', 'c', 'h']
				ANALYSING: sin
					resolving (2)
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					> version: s/i/n
					TRYING: i
					adding blocked set: C = C >> ch, i, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'n']
				adding dashed alternative: ['s', '_', 'i', 'n']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: s
					> version: s/s/i/n
					TRYING: s
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i, _
					> version: ss/i/n
					TRYING: i
					adding blocked set: C = C >> ch, c, h, i, _
					RESULT:  ['s']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: s
					> version: s/s/y/n
					TRYING: s
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> ch, s, c, h, y, _
					> version: ss/y/n
					TRYING: y
					adding blocked set: C = C >> ch, s, c, h, y, _
					RESULT:  ['s']
				ANALYSING: suin
					resolving (3)
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/u/i/n
					TRYING: u
					adding blocked set: C = C >> ch, s, c, h, u, _
					> version: s/ui/n
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
			___CCVCV : 2___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: i
					> version: s/c/i/n
					TRYING: i
					> version: sc/i/n
					TRYING: n
					> version: sc/i/n
					TRYING: n
					RESULT:  ['i']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: í
					> version: s/c/í/n
					TRYING: í
					> version: sc/í/n
					TRYING: n
					> version: sc/í/n
					TRYING: n
					RESULT:  ['í']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: i
					> version: s/h/i/n
					TRYING: i
					> version: sh/i/n
					TRYING: n
					> version: sh/i/n
					TRYING: n
					RESULT:  ['i']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: h
					> version: s/c/h/i
					TRYING: h
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: h
					> version: s/c/h/i/n
					TRYING: h
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: s/ch/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sch/i/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					> version: sc/h/i/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
					RESULT:  ['i', 'h']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: h
					> version: s/c/h/y/n
					TRYING: h
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: s/ch/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sch/y/n
					TRYING: n
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					> version: sc/h/y/n
					TRYING: y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
					RESULT:  ['h', 'y']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					TRYING: n
					> version: s/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: i
					> version: s/_/i/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: i
					> version: s/s/i/n
					TRYING: i
					> version: ss/i/n
					TRYING: n
					> version: ss/i/n
					TRYING: n
					RESULT:  ['i']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: y
					> version: s/s/y/n
					TRYING: y
					> version: ss/y/n
					TRYING: n
					> version: ss/y/n
					TRYING: n
					RESULT:  ['y']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: i
					> version: s/u/i/n
					TRYING: i
					> version: s/ui/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/u/i/n
					TRYING: u
					> version: s/_/ui/n
					TRYING: ui
					RESULT:  ['i']
			___CCVCV : 3___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					TRYING: n
					> version: s/c/i/n
					TRYING: n
					> version: sc/i/n
					> version: sc/i/n
					RESULT:  ['n']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					TRYING: n
					> version: s/c/í/n
					TRYING: n
					> version: sc/í/n
					> version: sc/í/n
					RESULT:  ['n']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					TRYING: n
					> version: s/h/i/n
					TRYING: n
					> version: sh/i/n
					> version: sh/i/n
					RESULT:  ['n']
				ANALYSING: schi
					resolving (16)
					> version: s/c/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: s/c/h/i
					TRYING: i
					adding blocked set: C = C >> i, n
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'i']
				adding dashed alternative: ['s', 'c', 'h', '_', 'i']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['s', 'ch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sch', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				adding dashed alternative: ['sc', 'h', 'i', '_']
				s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/c/h/_/i(CCCAA)
s/c/h/_/i(CCCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/i/_(CCAA)
s/ch/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/i/_(CCAA)
sc/h/i/_(CCAA)
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/c/h/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: s/ch/i/n
					TRYING: n
					> version: s/ch/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					> version: sch/i/n
					> version: sch/i/n
					> version: sc/h/i/n
					TRYING: n
					> version: sc/h/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: s/c/h/y/n
					TRYING: y
					adding blocked set: C = C >> _, n, y
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: s/ch/y/n
					TRYING: n
					> version: s/ch/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					> version: sch/y/n
					> version: sch/y/n
					> version: sc/h/y/n
					TRYING: n
					> version: sc/h/y/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					TRYING: n
					> version: s/_/i/n
					TRYING: n
					RESULT:  ['n']
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					TRYING: n
					> version: s/s/i/n
					TRYING: n
					> version: ss/i/n
					> version: ss/i/n
					RESULT:  ['n']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					TRYING: n
					> version: s/s/y/n
					TRYING: n
					> version: ss/y/n
					> version: ss/y/n
					RESULT:  ['n']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					TRYING: n
					> version: s/u/i/n
					TRYING: n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/_/u/i/n
					TRYING: i
					adding blocked set: C = C >> i, _, n
					> version: s/_/ui/n
					TRYING: n
					RESULT:  ['n']
			___CCVCV : 4___
				ANALYSING: scine
				adding littera based on matching pattern
				ANALYSING: scin
					resolving (4)
					> version: s/c/i/n
					> version: s/c/i/n
					> version: sc/i/n
					> version: sc/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'n', '_']
				adding dashed alternative: ['s', 'c', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'i', 'n', '_']
				s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/c/i/n/_(CCACA)
s/c/i/n/_(CCACA)
sc/i/n/_(CACA)
sc/i/n/_(CACA)
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['s', 'c', 'i', 'n']
				{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['sc', 'i', 'n']
				{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n']
				version split: ['s', 'c', 'i', 'n', '_']
				{'string': 's/c/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				version split: ['s', 'c', 'i', 'n', '_']
				{'string': 's/c/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', '_']
				version split: ['sc', 'i', 'n', '_']
				{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((c))/((i))/((n))/((_))$'}
				_____REMOVING________['sc', 'i', 'n', '_']
				ANALYSING: scín
					resolving (4)
					> version: s/c/í/n
					> version: s/c/í/n
					> version: sc/í/n
					> version: sc/í/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'í', 'n', '_']
				adding dashed alternative: ['s', 'c', 'í', 'n', '_']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				adding dashed alternative: ['sc', 'í', 'n', '_']
				s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/c/í/n/_(CCACA)
s/c/í/n/_(CCACA)
sc/í/n/_(CACA)
sc/í/n/_(CACA)
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['s', 'c', 'í', 'n']
				{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['sc', 'í', 'n']
				{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n']
				version split: ['s', 'c', 'í', 'n', '_']
				{'string': 's/c/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				version split: ['s', 'c', 'í', 'n', '_']
				{'string': 's/c/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n', '_']
				version split: ['sc', 'í', 'n', '_']
				{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((c))/((í))/((n))/((_))$'}
				_____REMOVING________['sc', 'í', 'n', '_']
				ANALYSING: shin
					resolving (4)
					> version: s/h/i/n
					> version: s/h/i/n
					> version: sh/i/n
					> version: sh/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'n', '_']
				adding dashed alternative: ['s', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				adding dashed alternative: ['sh', 'i', 'n', '_']
				s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/h/i/n/_(CCACA)
s/h/i/n/_(CCACA)
sh/i/n/_(CACA)
sh/i/n/_(CACA)
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['s', 'h', 'i', 'n']
				{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['sh', 'i', 'n']
				{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n']
				version split: ['s', 'h', 'i', 'n', '_']
				{'string': 's/h/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				version split: ['s', 'h', 'i', 'n', '_']
				{'string': 's/h/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n', '_']
				version split: ['sh', 'i', 'n', '_']
				{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((h))/((i))/((n))/((_))$'}
				_____REMOVING________['sh', 'i', 'n', '_']
				ANALYSING: schi
					resolving (32)
					> version: s/c/h/i
					> version: s/c/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: s/ch/i
					> version: s/ch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sc/h/i
					> version: sch/i
					> version: sch/i
					> version: sc/h/i
					> version: sc/h/i
					> version: s/c/h/_/i
					TRYING: i
					> version: s/c/h/_/i
					TRYING: i
					> version: sc/h/i/_
					> version: sc/h/i/_
					> version: sch/i/_
					> version: sch/i/_
					> version: s/ch/i/_
					> version: s/ch/i/_
					> version: sc/h/i/_
					> version: sc/h/i/_
					> version: sc/h/i/_
					> version: sc/h/i/_
					> version: sch/i/_
					> version: sch/i/_
					> version: sc/h/i/_
					> version: sc/h/i/_
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['s', 'c', 'h', 'i']
				{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['s', 'ch', 'i']
				{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sch', 'i']
				{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['sc', 'h', 'i']
				{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i']
				version split: ['s', 'c', 'h', '_', 'i']
				{'string': 's/c/h/_/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				version split: ['s', 'c', 'h', '_', 'i']
				{'string': 's/c/h/_/i', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', '_']
				version split: ['s', 'ch', 'i', '_']
				{'string': 's/ch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sch', 'i', '_']
				{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sch', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				version split: ['sc', 'h', 'i', '_']
				{'string': 'sc/h/i/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((_))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', '_']
				ANALYSING: schin
					resolving (16)
					> version: s/c/h/i/n
					TRYING: n
					> version: s/c/h/i/n
					TRYING: n
					> version: sc/h/i/n
					> version: sc/h/i/n
					> version: sch/i/n
					> version: sch/i/n
					> version: s/ch/i/n
					> version: s/ch/i/n
					> version: sc/h/i/n
					> version: sc/h/i/n
					> version: sc/h/i/n
					> version: sc/h/i/n
					> version: sch/i/n
					> version: sch/i/n
					> version: sc/h/i/n
					> version: sc/h/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'n']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'n', '_']
				s/c/h/i/n(CCCCC)
s/c/h/i/n(CCCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
s/ch/i/n(CCCC)
s/ch/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
sch/i/n(CCC)
sch/i/n(CVC)
sc/h/i/n(CCCC)
sc/h/i/n(CCVC)
s/c/h/i/_/n(CCCAAC)
s/c/h/i/_/n(CCCAAC)
sc/h/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
sch/i/n/_(CACA)
sch/i/n/_(CACA)
s/ch/i/n/_(CCACA)
s/ch/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
sch/i/n/_(CACA)
sch/i/n/_(CACA)
sc/h/i/n/_(CCACA)
sc/h/i/n/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['s', 'c', 'h', 'i', 'n']
				{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['s', 'ch', 'i', 'n']
				{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sch', 'i', 'n']
				{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['sc', 'h', 'i', 'n']
				{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'n']
				version split: ['s', 'c', 'h', 'i', '_', 'n']
				{'string': 's/c/h/i/_/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'n']
				version split: ['s', 'c', 'h', 'i', '_', 'n']
				{'string': 's/c/h/i/_/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'n']
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sch', 'i', 'n', '_']
				{'string': 'sch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n', '_']
				version split: ['sch', 'i', 'n', '_']
				{'string': 'sch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n', '_']
				version split: ['s', 'ch', 'i', 'n', '_']
				{'string': 's/ch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['s', 'ch', 'i', 'n', '_']
				{'string': 's/ch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sch', 'i', 'n', '_']
				{'string': 'sch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n', '_']
				version split: ['sch', 'i', 'n', '_']
				{'string': 'sch/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				_____REMOVING________['sch', 'i', 'n', '_']
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				version split: ['sc', 'h', 'i', 'n', '_']
				{'string': 'sc/h/i/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((i)|(h))/((n))/((_))$'}
				ANALYSING: schyn
					resolving (16)
					> version: s/c/h/y/n
					TRYING: n
					> version: s/c/h/y/n
					TRYING: n
					> version: sc/h/y/n
					> version: sc/h/y/n
					> version: sch/y/n
					> version: sch/y/n
					> version: s/ch/y/n
					> version: s/ch/y/n
					> version: sc/h/y/n
					> version: sc/h/y/n
					> version: sc/h/y/n
					> version: sc/h/y/n
					> version: sch/y/n
					> version: sch/y/n
					> version: sc/h/y/n
					> version: sc/h/y/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'y', '_', 'n']
				adding dashed alternative: ['s', 'c', 'h', 'y', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sch', 'y', 'n', '_']
				adding dashed alternative: ['sch', 'y', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'y', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sch', 'y', 'n', '_']
				adding dashed alternative: ['sch', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'y', 'n', '_']
				s/c/h/y/n(CCCCC)
s/c/h/y/n(CCCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
s/ch/y/n(CCCC)
s/ch/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
sch/y/n(CCC)
sch/y/n(CVC)
sc/h/y/n(CCCC)
sc/h/y/n(CCVC)
s/c/h/y/_/n(CCCAAC)
s/c/h/y/_/n(CCCAAC)
sc/h/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
sch/y/n/_(CACA)
sch/y/n/_(CACA)
s/ch/y/n/_(CCACA)
s/ch/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
sch/y/n/_(CACA)
sch/y/n/_(CACA)
sc/h/y/n/_(CCACA)
sc/h/y/n/_(CCACA)
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['s', 'c', 'h', 'y', 'n']
				{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['s', 'ch', 'y', 'n']
				{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'ch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sch', 'y', 'n']
				{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['sc', 'h', 'y', 'n']
				{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sc', 'h', 'y', 'n']
				version split: ['s', 'c', 'h', 'y', '_', 'n']
				{'string': 's/c/h/y/_/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'y', '_', 'n']
				version split: ['s', 'c', 'h', 'y', '_', 'n']
				{'string': 's/c/h/y/_/n', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'y', '_', 'n']
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sch', 'y', 'n', '_']
				{'string': 'sch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n', '_']
				version split: ['sch', 'y', 'n', '_']
				{'string': 'sch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n', '_']
				version split: ['s', 'ch', 'y', 'n', '_']
				{'string': 's/ch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['s', 'ch', 'y', 'n', '_']
				{'string': 's/ch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sch', 'y', 'n', '_']
				{'string': 'sch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n', '_']
				version split: ['sch', 'y', 'n', '_']
				{'string': 'sch/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				_____REMOVING________['sch', 'y', 'n', '_']
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				version split: ['sc', 'h', 'y', 'n', '_']
				{'string': 'sc/h/y/n/_', 'rgx': '((sc)|(s)|(sch))/((ch)|(c)|(h))/((h)|(y))/((n))/((_))$'}
				ANALYSING: sin
					resolving (4)
					> version: s/i/n
					> version: s/i/n
					> version: s/_/i/n
					> version: s/_/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				adding dashed alternative: ['s', 'i', 'n', '_']
				adding dashed alternative: ['s', '_', 'i', 'n', '_']
				adding dashed alternative: ['s', '_', 'i', 'n', '_']
				s/i/n(CCC)
s/i/n(CVC)
s/_/i/n(CAAC)
s/_/i/n(CAAC)
s/i/n/_(CACA)
s/i/n/_(CACA)
s/_/i/n/_(CAACA)
s/_/i/n/_(CAACA)
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', 'i', 'n']
				{'string': 's/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', '_', 'i', 'n']
				{'string': 's/_/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'n']
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n', '_']
				version split: ['s', 'i', 'n', '_']
				{'string': 's/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'i', 'n', '_']
				version split: ['s', '_', 'i', 'n', '_']
				{'string': 's/_/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				version split: ['s', '_', 'i', 'n', '_']
				{'string': 's/_/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				ANALYSING: ssin
					resolving (4)
					> version: s/s/i/n
					> version: s/s/i/n
					> version: ss/i/n
					> version: ss/i/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'n', '_']
				adding dashed alternative: ['s', 's', 'i', 'n', '_']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				adding dashed alternative: ['ss', 'i', 'n', '_']
				s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/s/i/n/_(CCACA)
s/s/i/n/_(CCACA)
ss/i/n/_(CACA)
ss/i/n/_(CACA)
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['s', 's', 'i', 'n']
				{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['ss', 'i', 'n']
				{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n']
				version split: ['s', 's', 'i', 'n', '_']
				{'string': 's/s/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				version split: ['s', 's', 'i', 'n', '_']
				{'string': 's/s/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n', '_']
				version split: ['ss', 'i', 'n', '_']
				{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((s))/((i))/((n))/((_))$'}
				_____REMOVING________['ss', 'i', 'n', '_']
				ANALYSING: ssyn
					resolving (4)
					> version: s/s/y/n
					> version: s/s/y/n
					> version: ss/y/n
					> version: ss/y/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'n', '_']
				adding dashed alternative: ['s', 's', 'y', 'n', '_']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				adding dashed alternative: ['ss', 'y', 'n', '_']
				s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/s/y/n/_(CCACA)
s/s/y/n/_(CCACA)
ss/y/n/_(CACA)
ss/y/n/_(CACA)
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['s', 's', 'y', 'n']
				{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['ss', 'y', 'n']
				{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n']
				version split: ['s', 's', 'y', 'n', '_']
				{'string': 's/s/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				version split: ['s', 's', 'y', 'n', '_']
				{'string': 's/s/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n', '_']
				version split: ['ss', 'y', 'n', '_']
				{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((s))/((y))/((n))/((_))$'}
				_____REMOVING________['ss', 'y', 'n', '_']
				ANALYSING: suin
					resolving (6)
					> version: s/u/i/n
					> version: s/u/i/n
					> version: s/ui/n
					> version: s/_/u/i/n
					TRYING: n
					> version: s/_/u/i/n
					TRYING: n
					> version: s/_/ui/n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'n', '_']
				adding dashed alternative: ['s', 'u', 'i', 'n', '_']
				adding dashed alternative: ['s', 'ui', 'n', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'n']
				adding dashed alternative: ['s', '_', 'ui', 'n', '_']
				s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
s/u/i/n/_(CAACA)
s/u/i/n/_(CAACA)
s/ui/n/_(CVCA)
s/_/u/i/_/n(CAAAAC)
s/_/u/i/_/n(CAAAAC)
s/_/ui/n/_(CAVCA)
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'u', 'i', 'n']
				{'string': 's/u/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n']
				version split: ['s', 'ui', 'n']
				{'string': 's/ui/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'ui', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'u', 'i', 'n']
				{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'n']
				version split: ['s', '_', 'ui', 'n']
				{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'n']
				version split: ['s', 'u', 'i', 'n', '_']
				{'string': 's/u/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n', '_']
				version split: ['s', 'u', 'i', 'n', '_']
				{'string': 's/u/i/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'n', '_']
				version split: ['s', 'ui', 'n', '_']
				{'string': 's/ui/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', 'ui', 'n', '_']
				version split: ['s', '_', 'u', 'i', '_', 'n']
				{'string': 's/_/u/i/_/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'n']
				version split: ['s', '_', 'u', 'i', '_', 'n']
				{'string': 's/_/u/i/_/n', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'n']
				version split: ['s', '_', 'ui', 'n', '_']
				{'string': 's/_/ui/n/_', 'rgx': '((s))/((_))/((i))/((n))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'n', '_']
		only one version left: ['s', 'c', 'i', 'n', '_']
		only one version left: ['s', 'c', 'í', 'n', '_']
		only one version left: ['s', 'h', 'i', 'n', '_']
		only one version left: ['s', 'c', 'h', '_', 'i']
		FAIL: sc/h/i/n/_, sc/h/i/n/_, s/ch/i/n/_, s/ch/i/n/_, sc/h/i/n/_, sc/h/i/n/_, sc/h/i/n/_, sc/h/i/n/_, sc/h/i/n/_, sc/h/i/n/_
		FAIL: sc/h/y/n/_, sc/h/y/n/_, s/ch/y/n/_, s/ch/y/n/_, sc/h/y/n/_, sc/h/y/n/_, sc/h/y/n/_, sc/h/y/n/_, sc/h/y/n/_, sc/h/y/n/_
		only one version left: ['s', '_', 'i', 'n', '_']
		only one version left: ['s', 's', 'i', 'n', '_']
		only one version left: ['s', 's', 'y', 'n', '_']
		FAIL: 
		SPLIT: ['s', 'c', 'i', 'n', 'e']
		SPLIT: ['s', 'c', 'i', 'n', '_']
		['s', 'c', 'i', 'n', '_']
		['s', 'c', 'i', 'n', '_']
		SPLIT: ['s', 'c', 'í', 'n', '_']
		['s', 'c', 'í', 'n', '_']
		['s', 'c', 'í', 'n', '_']
		SPLIT: ['s', 'h', 'i', 'n', '_']
		['s', 'h', 'i', 'n', '_']
		['s', 'h', 'i', 'n', '_']
		SPLIT: ['s', 'c', 'h', '_', 'i']
		['s', 'c', 'h', '_', 'i']
		['s', 'c', 'h', '_', 'i']
		SPLIT: ['sc.s.sch', 'ch.c.h', 'i.h', 'n', '_', '----!']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['s', 'ch', 'i', 'n', '_']
		['s', 'ch', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		['sc', 'h', 'i', 'n', '_']
		SPLIT: ['sc.s.sch', 'ch.c.h', 'h.y', 'n', '_', '----!']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['s', 'ch', 'y', 'n', '_']
		['s', 'ch', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		['sc', 'h', 'y', 'n', '_']
		SPLIT: ['s', '_', 'i', 'n', '_']
		['s', '_', 'i', 'n', '_']
		['s', '_', 'i', 'n', '_']
		SPLIT: ['s', 's', 'i', 'n', '_']
		['s', 's', 'i', 'n', '_']
		['s', 's', 'i', 'n', '_']
		SPLIT: ['s', 's', 'y', 'n', '_']
		['s', 's', 'y', 'n', '_']
		['s', 's', 'y', 'n', '_']
		SPLIT: ['s', '_', 'i', 'n', '_', '----!']
		version for pattern CCVCV is INVALID
		[]
		3
		OVERVIEW: version for pattern CCVCV

faulty splits: 3
sc.s.schch.c.hi.hn----! <-! schin
sc.s.schch.c.hh.yn----! <-! schyn
sin----! <-! suin
s | c | i | n | e
s | c | i | n | _
s | c | í | n | _
s | h | i | n | _
s | c | h | _ | i
sc.s.sch | ch.c.h | i.h | n | _ | ----!
sc.s.sch | ch.c.h | h.y | n | _ | ----!
s | _ | i | n | _
s | s | i | n | _
s | s | y | n | _
s | _ | i | n | _ | ----!
1 : {'ch', 's', 'c', 'h', 'u', '_'},{'ch', 'i', 'c', 'h'}
3 : {'i', 'n'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CVC
{'ui', 'í', '_', 'y', 'i'}
faulty splits: 2
sc.sn----! <-! scine
sc.s.sch----! <-! schi
sc | i | n
sc | í | n
sh | i | n
sch | i | n
sch | y | n
s | i | n
ss | i | n
ss | y | n
s | ui | n
sc.s | _ | n | ----!
sc.s.sch | _ | _ | ----!
1 : {'i', 'y', 'ui', 'í'},{'ui', 'í', '_', 'y', 'i'}
2 : {'i', 'n'},{'ch', 'n'},{'n', 'c'},{'n', 'h'}
	{'CVCCV', 'CCCC'}
		[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
		[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
		[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
		[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
		[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
		MIN pattern length=3
		Pattern CVC is valid
		Pattern CCCV is valid
		Pattern CCCC is invalid
		Pattern CVVC is invalid
		Pattern CCVC is valid
		Pattern CCCVC is valid
		Pattern CCCCC is invalid
		Pattern CVCV is valid
		Pattern CC is invalid
		Pattern CCC is valid
		Pattern CCV is valid
		Pattern CV is invalid
		Pattern CCVCV is valid
		Pattern CCCCV is invalid
		Making the selection for pattern: CVCV
		Selection for pattern: CVCV completed
		Making a version for pattern: CVCV
				___CVCV : 0___
					ANALYSING: scine
					adding littera based on matching pattern
					ANALYSING: scin
						resolving (4)
						> version: s/c/i/n
						TRYING: s
						> version: s/c/i/n
						TRYING: s
						> version: sc/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sc/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						RESULT:  ['sc', 's']
					ANALYSING: scín
						resolving (4)
						> version: s/c/í/n
						TRYING: s
						> version: s/c/í/n
						TRYING: s
						> version: sc/í/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sc/í/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						RESULT:  ['sc', 's']
					ANALYSING: shin
						resolving (4)
						> version: s/h/i/n
						TRYING: s
						> version: s/h/i/n
						TRYING: s
						> version: sh/i/n
						TRYING: sh
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
						> version: sh/i/n
						TRYING: sh
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
						RESULT:  ['s', 'sh']
					ANALYSING: schi
						resolving (16)
						> version: s/c/h/i
						TRYING: s
						> version: s/c/h/i
						TRYING: s
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sch/i
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/i
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/i
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						RESULT:  ['sc', 's', 'sch']
					ANALYSING: schin
						resolving (16)
						> version: s/c/h/i/n
						TRYING: s
						> version: s/c/h/i/n
						TRYING: s
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sch/i/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/i/n
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/i/n
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/i/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/i/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						RESULT:  ['sc', 's', 'sch']
					ANALYSING: schyn
						resolving (16)
						> version: s/c/h/y/n
						TRYING: s
						> version: s/c/h/y/n
						TRYING: s
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
						> version: sch/y/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/y/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/y/n
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: s/ch/y/n
						TRYING: s
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/y/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sch/y/n
						TRYING: sch
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						> version: sc/h/y/n
						TRYING: sc
						>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's', 'sch'}
						RESULT:  ['sc', 's', 'sch']
					ANALYSING: sin
						resolving (2)
						> version: s/i/n
						TRYING: s
						> version: s/i/n
						TRYING: s
						RESULT:  ['s']
					ANALYSING: ssin
						resolving (4)
						> version: s/s/i/n
						TRYING: s
						> version: s/s/i/n
						TRYING: s
						> version: ss/i/n
						TRYING: ss
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
						> version: ss/i/n
						TRYING: ss
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
						RESULT:  ['s', 'ss']
					ANALYSING: ssyn
						resolving (4)
						> version: s/s/y/n
						TRYING: s
						> version: s/s/y/n
						TRYING: s
						> version: ss/y/n
						TRYING: ss
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
						> version: ss/y/n
						TRYING: ss
						>>> MULTIPLE RESOLVE OPTIONS: {'s', 'ss'}
						RESULT:  ['s', 'ss']
					ANALYSING: suin
						resolving (3)
						> version: s/u/i/n
						TRYING: s
						> version: s/u/i/n
						TRYING: s
						> version: s/ui/n
						TRYING: s
						RESULT:  ['s']
				___CVCV : 1___
					ANALYSING: scine
					adding littera based on matching pattern
					ANALYSING: scin
						resolving (4)
						> version: s/c/i/n
						TRYING: c
						> version: s/c/i/n
						TRYING: c
						> version: sc/i/n
						TRYING: i
						> version: sc/i/n
						TRYING: i
						RESULT:  ['i']
					ANALYSING: scín
						resolving (4)
						> version: s/c/í/n
						TRYING: c
						> version: s/c/í/n
						TRYING: c
						> version: sc/í/n
						TRYING: í
						> version: sc/í/n
						TRYING: í
						RESULT:  ['í']
					ANALYSING: shin
						resolving (4)
						> version: s/h/i/n
						TRYING: h
						> version: s/h/i/n
						TRYING: h
						> version: sh/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sh/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						RESULT:  ['i', 'h']
					ANALYSING: schi
						resolving (16)
						> version: s/c/h/i
						TRYING: c
						> version: s/c/h/i
						TRYING: c
						> version: sc/h/i
						TRYING: h
						> version: sc/h/i
						TRYING: h
						> version: sch/i
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: s/ch/i
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: s/ch/i
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						RESULT:  ['i', 'h']
					ANALYSING: schin
						resolving (16)
						> version: s/c/h/i/n
						TRYING: c
						> version: s/c/h/i/n
						TRYING: c
						> version: sc/h/i/n
						TRYING: h
						> version: sc/h/i/n
						TRYING: h
						> version: sch/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: s/ch/i/n
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: s/ch/i/n
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sch/i/n
						TRYING: i
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						> version: sc/h/i/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'i', 'h'}
						RESULT:  ['i', 'h']
					ANALYSING: schyn
						resolving (16)
						> version: s/c/h/y/n
						TRYING: c
						> version: s/c/h/y/n
						TRYING: c
						> version: sc/h/y/n
						TRYING: h
						> version: sc/h/y/n
						TRYING: h
						> version: sch/y/n
						TRYING: y
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sch/y/n
						TRYING: y
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: s/ch/y/n
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: s/ch/y/n
						TRYING: ch
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sch/y/n
						TRYING: y
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sch/y/n
						TRYING: y
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						> version: sc/h/y/n
						TRYING: h
						>>> MULTIPLE RESOLVE OPTIONS: {'h', 'y'}
						RESULT:  ['h', 'y']
					ANALYSING: sin
						resolving (2)
						> version: s/i/n
						TRYING: i
						> version: s/i/n
						TRYING: i
						RESULT:  ['i']
					ANALYSING: ssin
						resolving (4)
						> version: s/s/i/n
						TRYING: s
						> version: s/s/i/n
						TRYING: s
						> version: ss/i/n
						TRYING: i
						> version: ss/i/n
						TRYING: i
						RESULT:  ['i']
					ANALYSING: ssyn
						resolving (4)
						> version: s/s/y/n
						TRYING: s
						> version: s/s/y/n
						TRYING: s
						> version: ss/y/n
						TRYING: y
						> version: ss/y/n
						TRYING: y
						RESULT:  ['y']
					ANALYSING: suin
						resolving (3)
						> version: s/u/i/n
						TRYING: u
						> version: s/u/i/n
						TRYING: u
						> version: s/ui/n
						TRYING: ui
						RESULT:  ['_']
					adding dashed alternative: ['s', '_', 'u', 'i', 'n']
					adding dashed alternative: ['s', '_', 'u', 'i', 'n']
					adding dashed alternative: ['s', '_', 'ui', 'n']
					s/u/i/n(CCCC)
s/u/i/n(CVVC)
s/ui/n(CVC)
s/_/u/i/n(CAAAC)
s/_/u/i/n(CAAAC)
s/_/ui/n(CAVC)
				___CVCV : 2___
					ANALYSING: scine
					adding littera based on matching pattern
					ANALYSING: scin
						resolving (4)
						> version: s/c/i/n
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: s/c/i/n
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/i/n
						TRYING: n
						> version: sc/i/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: scín
						resolving (4)
						> version: s/c/í/n
						TRYING: í
						adding blocked set: C = C >> n, í
						> version: s/c/í/n
						TRYING: í
						adding blocked set: C = C >> n, í
						> version: sc/í/n
						TRYING: n
						> version: sc/í/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: shin
						resolving (4)
						> version: s/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: s/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sh/i/n
						TRYING: n
						> version: sh/i/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: schi
						resolving (16)
						> version: s/c/h/i
						TRYING: h
						adding blocked set: C = C >> n, h
						> version: s/c/h/i
						TRYING: h
						adding blocked set: C = C >> n, h
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sch/i
						> version: sch/i
						> version: s/ch/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: s/ch/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sch/i
						> version: sch/i
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						> version: sc/h/i
						TRYING: i
						adding blocked set: C = C >> i, n
						RESULT:  ['_']
					adding dashed alternative: ['s', 'c', '_', 'h', 'i']
					adding dashed alternative: ['s', 'c', '_', 'h', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sch', 'i', '_']
					adding dashed alternative: ['sch', 'i', '_']
					adding dashed alternative: ['s', 'ch', '_', 'i']
					adding dashed alternative: ['s', 'ch', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sch', 'i', '_']
					adding dashed alternative: ['sch', 'i', '_']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					adding dashed alternative: ['sc', 'h', '_', 'i']
					s/c/h/i(CCCC)
s/c/h/i(CCCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
s/ch/i(CCC)
s/ch/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sc/h/i(CCC)
sc/h/i(CCV)
sch/i(CC)
sch/i(CV)
sc/h/i(CCC)
sc/h/i(CCV)
s/c/_/h/i(CCACA)
s/c/_/h/i(CCACA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
s/ch/_/i(CCAA)
s/ch/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
sch/i/_(CAA)
sch/i/_(CAA)
sc/h/_/i(CCAA)
sc/h/_/i(CCAA)
					ANALYSING: schin
						resolving (16)
						> version: s/c/h/i/n
						TRYING: h
						adding blocked set: C = C >> _, n, h
						> version: s/c/h/i/n
						TRYING: h
						adding blocked set: C = C >> _, n, h
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sch/i/n
						TRYING: n
						> version: sch/i/n
						TRYING: n
						> version: s/ch/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: s/ch/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sch/i/n
						TRYING: n
						> version: sch/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: sc/h/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						RESULT:  ['n']
					ANALYSING: schyn
						resolving (16)
						> version: s/c/h/y/n
						TRYING: h
						adding blocked set: C = C >> _, n, h
						> version: s/c/h/y/n
						TRYING: h
						adding blocked set: C = C >> _, n, h
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sch/y/n
						TRYING: n
						> version: sch/y/n
						TRYING: n
						> version: s/ch/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: s/ch/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sch/y/n
						TRYING: n
						> version: sch/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: sc/h/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						RESULT:  ['n']
					ANALYSING: sin
						resolving (2)
						> version: s/i/n
						TRYING: n
						> version: s/i/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: ssin
						resolving (4)
						> version: s/s/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: s/s/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: ss/i/n
						TRYING: n
						> version: ss/i/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: ssyn
						resolving (4)
						> version: s/s/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: s/s/y/n
						TRYING: y
						adding blocked set: C = C >> _, n, y
						> version: ss/y/n
						TRYING: n
						> version: ss/y/n
						TRYING: n
						RESULT:  ['n']
					ANALYSING: suin
						resolving (6)
						> version: s/u/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: s/u/i/n
						TRYING: i
						adding blocked set: C = C >> i, _, n
						> version: s/ui/n
						TRYING: n
						> version: s/_/u/i/n
						TRYING: u
						adding blocked set: C = C >> _, u, n
						> version: s/_/u/i/n
						TRYING: u
						adding blocked set: C = C >> _, u, n
						> version: s/_/ui/n
						TRYING: ui
						RESULT:  ['n']
				___CVCV : 3___
					ANALYSING: scine
					adding littera based on matching pattern
					ANALYSING: scin
						resolving (4)
						> version: s/c/i/n
						TRYING: n
						> version: s/c/i/n
						TRYING: n
						> version: sc/i/n
						> version: sc/i/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 'c', 'i', '_', 'n']
					adding dashed alternative: ['s', 'c', 'i', '_', 'n']
					adding dashed alternative: ['sc', 'i', 'n', '_']
					adding dashed alternative: ['sc', 'i', 'n', '_']
					s/c/i/n(CCCC)
s/c/i/n(CCVC)
sc/i/n(CCC)
sc/i/n(CVC)
s/c/i/_/n(CCAAC)
s/c/i/_/n(CCAAC)
sc/i/n/_(CACA)
sc/i/n/_(CACA)
					version split: ['s', 'c', 'i', 'n']
					{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'i', 'n']
					version split: ['s', 'c', 'i', 'n']
					{'string': 's/c/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'i', 'n']
					version split: ['sc', 'i', 'n']
					{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['sc', 'i', 'n']
					version split: ['sc', 'i', 'n']
					{'string': 'sc/i/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['sc', 'i', 'n']
					version split: ['s', 'c', 'i', '_', 'n']
					{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'i', '_', 'n']
					version split: ['s', 'c', 'i', '_', 'n']
					{'string': 's/c/i/_/n', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'i', '_', 'n']
					version split: ['sc', 'i', 'n', '_']
					{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					version split: ['sc', 'i', 'n', '_']
					{'string': 'sc/i/n/_', 'rgx': '((sc)|(s))/((i))/((n))/((_))$'}
					ANALYSING: scín
						resolving (4)
						> version: s/c/í/n
						TRYING: n
						> version: s/c/í/n
						TRYING: n
						> version: sc/í/n
						> version: sc/í/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 'c', 'í', '_', 'n']
					adding dashed alternative: ['s', 'c', 'í', '_', 'n']
					adding dashed alternative: ['sc', 'í', 'n', '_']
					adding dashed alternative: ['sc', 'í', 'n', '_']
					s/c/í/n(CCCC)
s/c/í/n(CCVC)
sc/í/n(CCC)
sc/í/n(CVC)
s/c/í/_/n(CCAAC)
s/c/í/_/n(CCAAC)
sc/í/n/_(CACA)
sc/í/n/_(CACA)
					version split: ['s', 'c', 'í', 'n']
					{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'í', 'n']
					version split: ['s', 'c', 'í', 'n']
					{'string': 's/c/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'í', 'n']
					version split: ['sc', 'í', 'n']
					{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['sc', 'í', 'n']
					version split: ['sc', 'í', 'n']
					{'string': 'sc/í/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['sc', 'í', 'n']
					version split: ['s', 'c', 'í', '_', 'n']
					{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'í', '_', 'n']
					version split: ['s', 'c', 'í', '_', 'n']
					{'string': 's/c/í/_/n', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					_____REMOVING________['s', 'c', 'í', '_', 'n']
					version split: ['sc', 'í', 'n', '_']
					{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					version split: ['sc', 'í', 'n', '_']
					{'string': 'sc/í/n/_', 'rgx': '((sc)|(s))/((í))/((n))/((_))$'}
					ANALYSING: shin
						resolving (4)
						> version: s/h/i/n
						TRYING: n
						> version: s/h/i/n
						TRYING: n
						> version: sh/i/n
						> version: sh/i/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 'h', 'i', '_', 'n']
					adding dashed alternative: ['s', 'h', 'i', '_', 'n']
					adding dashed alternative: ['sh', 'i', 'n', '_']
					adding dashed alternative: ['sh', 'i', 'n', '_']
					s/h/i/n(CCCC)
s/h/i/n(CCVC)
sh/i/n(CCC)
sh/i/n(CVC)
s/h/i/_/n(CCAAC)
s/h/i/_/n(CCAAC)
sh/i/n/_(CACA)
sh/i/n/_(CACA)
					version split: ['s', 'h', 'i', 'n']
					{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['s', 'h', 'i', 'n']
					version split: ['s', 'h', 'i', 'n']
					{'string': 's/h/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['s', 'h', 'i', 'n']
					version split: ['sh', 'i', 'n']
					{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['sh', 'i', 'n']
					version split: ['sh', 'i', 'n']
					{'string': 'sh/i/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['sh', 'i', 'n']
					version split: ['s', 'h', 'i', '_', 'n']
					{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['s', 'h', 'i', '_', 'n']
					version split: ['s', 'h', 'i', '_', 'n']
					{'string': 's/h/i/_/n', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					_____REMOVING________['s', 'h', 'i', '_', 'n']
					version split: ['sh', 'i', 'n', '_']
					{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					version split: ['sh', 'i', 'n', '_']
					{'string': 'sh/i/n/_', 'rgx': '((s)|(sh))/((i)|(h))/((n))/((_))$'}
					ANALYSING: schi
						resolving (32)
						> version: s/c/h/i
						TRYING: i
						> version: s/c/h/i
						TRYING: i
						> version: sc/h/i
						> version: sc/h/i
						> version: sch/i
						> version: sch/i
						> version: s/ch/i
						> version: s/ch/i
						> version: sc/h/i
						> version: sc/h/i
						> version: sc/h/i
						> version: sc/h/i
						> version: sch/i
						> version: sch/i
						> version: sc/h/i
						> version: sc/h/i
						> version: s/c/_/h/i
						TRYING: h
						> version: s/c/_/h/i
						TRYING: h
						> version: sc/h/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						> version: sch/i/_
						> version: sch/i/_
						> version: s/ch/_/i
						TRYING: i
						> version: s/ch/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						> version: sch/i/_
						> version: sch/i/_
						> version: sc/h/_/i
						TRYING: i
						> version: sc/h/_/i
						TRYING: i
						RESULT:  ['i']
					version split: ['s', 'c', 'h', 'i']
					{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'c', 'h', 'i']
					version split: ['s', 'c', 'h', 'i']
					{'string': 's/c/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'c', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sch', 'i']
					{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i']
					version split: ['sch', 'i']
					{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i']
					version split: ['s', 'ch', 'i']
					{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'ch', 'i']
					version split: ['s', 'ch', 'i']
					{'string': 's/ch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'ch', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sch', 'i']
					{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i']
					version split: ['sch', 'i']
					{'string': 'sch/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['sc', 'h', 'i']
					{'string': 'sc/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sc', 'h', 'i']
					version split: ['s', 'c', '_', 'h', 'i']
					{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'c', '_', 'h', 'i']
					version split: ['s', 'c', '_', 'h', 'i']
					{'string': 's/c/_/h/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'c', '_', 'h', 'i']
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sch', 'i', '_']
					{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i', '_']
					version split: ['sch', 'i', '_']
					{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i', '_']
					version split: ['s', 'ch', '_', 'i']
					{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'ch', '_', 'i']
					version split: ['s', 'ch', '_', 'i']
					{'string': 's/ch/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['s', 'ch', '_', 'i']
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sch', 'i', '_']
					{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i', '_']
					version split: ['sch', 'i', '_']
					{'string': 'sch/i/_', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					_____REMOVING________['sch', 'i', '_']
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					version split: ['sc', 'h', '_', 'i']
					{'string': 'sc/h/_/i', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((_))/((i))$'}
					ANALYSING: schin
						resolving (16)
						> version: s/c/h/i/n
						TRYING: i
						> version: s/c/h/i/n
						TRYING: i
						> version: sc/h/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						> version: sch/i/n
						> version: sch/i/n
						> version: s/ch/i/n
						TRYING: n
						> version: s/ch/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						> version: sch/i/n
						> version: sch/i/n
						> version: sc/h/i/n
						TRYING: n
						> version: sc/h/i/n
						TRYING: n
						RESULT:  ['i']
					version split: ['s', 'c', 'h', 'i', 'n']
					{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['s', 'c', 'h', 'i', 'n']
					version split: ['s', 'c', 'h', 'i', 'n']
					{'string': 's/c/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['s', 'c', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sch', 'i', 'n']
					{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sch', 'i', 'n']
					version split: ['sch', 'i', 'n']
					{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sch', 'i', 'n']
					version split: ['s', 'ch', 'i', 'n']
					{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['s', 'ch', 'i', 'n']
					version split: ['s', 'ch', 'i', 'n']
					{'string': 's/ch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['s', 'ch', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sch', 'i', 'n']
					{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sch', 'i', 'n']
					version split: ['sch', 'i', 'n']
					{'string': 'sch/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sch', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					version split: ['sc', 'h', 'i', 'n']
					{'string': 'sc/h/i/n', 'rgx': '((sc)|(s)|(sch))/((i)|(h))/((n))/((i))$'}
					_____REMOVING________['sc', 'h', 'i', 'n']
					ANALYSING: schyn
						resolving (16)
						> version: s/c/h/y/n
						TRYING: y
						> version: s/c/h/y/n
						TRYING: y
						> version: sc/h/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						> version: sch/y/n
						> version: sch/y/n
						> version: s/ch/y/n
						TRYING: n
						> version: s/ch/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						> version: sch/y/n
						> version: sch/y/n
						> version: sc/h/y/n
						TRYING: n
						> version: sc/h/y/n
						TRYING: n
						RESULT:  ['y']
					version split: ['s', 'c', 'h', 'y', 'n']
					{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['s', 'c', 'h', 'y', 'n']
					version split: ['s', 'c', 'h', 'y', 'n']
					{'string': 's/c/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['s', 'c', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sch', 'y', 'n']
					{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sch', 'y', 'n']
					version split: ['sch', 'y', 'n']
					{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sch', 'y', 'n']
					version split: ['s', 'ch', 'y', 'n']
					{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['s', 'ch', 'y', 'n']
					version split: ['s', 'ch', 'y', 'n']
					{'string': 's/ch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['s', 'ch', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sch', 'y', 'n']
					{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sch', 'y', 'n']
					version split: ['sch', 'y', 'n']
					{'string': 'sch/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sch', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					version split: ['sc', 'h', 'y', 'n']
					{'string': 'sc/h/y/n', 'rgx': '((sc)|(s)|(sch))/((h)|(y))/((n))/((y))$'}
					_____REMOVING________['sc', 'h', 'y', 'n']
					ANALYSING: sin
						resolving (2)
						> version: s/i/n
						> version: s/i/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 'i', 'n', '_']
					adding dashed alternative: ['s', 'i', 'n', '_']
					s/i/n(CCC)
s/i/n(CVC)
s/i/n/_(CACA)
s/i/n/_(CACA)
					version split: ['s', 'i', 'n']
					{'string': 's/i/n', 'rgx': '((s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'i', 'n']
					version split: ['s', 'i', 'n']
					{'string': 's/i/n', 'rgx': '((s))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 'i', 'n']
					version split: ['s', 'i', 'n', '_']
					{'string': 's/i/n/_', 'rgx': '((s))/((i))/((n))/((_))$'}
					version split: ['s', 'i', 'n', '_']
					{'string': 's/i/n/_', 'rgx': '((s))/((i))/((n))/((_))$'}
					ANALYSING: ssin
						resolving (4)
						> version: s/s/i/n
						TRYING: n
						> version: s/s/i/n
						TRYING: n
						> version: ss/i/n
						> version: ss/i/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 's', 'i', '_', 'n']
					adding dashed alternative: ['s', 's', 'i', '_', 'n']
					adding dashed alternative: ['ss', 'i', 'n', '_']
					adding dashed alternative: ['ss', 'i', 'n', '_']
					s/s/i/n(CCCC)
s/s/i/n(CCVC)
ss/i/n(CCC)
ss/i/n(CVC)
s/s/i/_/n(CCAAC)
s/s/i/_/n(CCAAC)
ss/i/n/_(CACA)
ss/i/n/_(CACA)
					version split: ['s', 's', 'i', 'n']
					{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'i', 'n']
					version split: ['s', 's', 'i', 'n']
					{'string': 's/s/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'i', 'n']
					version split: ['ss', 'i', 'n']
					{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['ss', 'i', 'n']
					version split: ['ss', 'i', 'n']
					{'string': 'ss/i/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['ss', 'i', 'n']
					version split: ['s', 's', 'i', '_', 'n']
					{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'i', '_', 'n']
					version split: ['s', 's', 'i', '_', 'n']
					{'string': 's/s/i/_/n', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'i', '_', 'n']
					version split: ['ss', 'i', 'n', '_']
					{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					version split: ['ss', 'i', 'n', '_']
					{'string': 'ss/i/n/_', 'rgx': '((s)|(ss))/((i))/((n))/((_))$'}
					ANALYSING: ssyn
						resolving (4)
						> version: s/s/y/n
						TRYING: n
						> version: s/s/y/n
						TRYING: n
						> version: ss/y/n
						> version: ss/y/n
						RESULT:  ['_']
					adding dashed alternative: ['s', 's', 'y', '_', 'n']
					adding dashed alternative: ['s', 's', 'y', '_', 'n']
					adding dashed alternative: ['ss', 'y', 'n', '_']
					adding dashed alternative: ['ss', 'y', 'n', '_']
					s/s/y/n(CCCC)
s/s/y/n(CCVC)
ss/y/n(CCC)
ss/y/n(CVC)
s/s/y/_/n(CCAAC)
s/s/y/_/n(CCAAC)
ss/y/n/_(CACA)
ss/y/n/_(CACA)
					version split: ['s', 's', 'y', 'n']
					{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'y', 'n']
					version split: ['s', 's', 'y', 'n']
					{'string': 's/s/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'y', 'n']
					version split: ['ss', 'y', 'n']
					{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['ss', 'y', 'n']
					version split: ['ss', 'y', 'n']
					{'string': 'ss/y/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['ss', 'y', 'n']
					version split: ['s', 's', 'y', '_', 'n']
					{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'y', '_', 'n']
					version split: ['s', 's', 'y', '_', 'n']
					{'string': 's/s/y/_/n', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					_____REMOVING________['s', 's', 'y', '_', 'n']
					version split: ['ss', 'y', 'n', '_']
					{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					version split: ['ss', 'y', 'n', '_']
					{'string': 'ss/y/n/_', 'rgx': '((s)|(ss))/((y))/((n))/((_))$'}
					ANALYSING: suin
						resolving (6)
						> version: s/u/i/n
						TRYING: n
						> version: s/u/i/n
						TRYING: n
						> version: s/ui/n
						> version: s/_/u/i/n
						TRYING: i
						> version: s/_/u/i/n
						TRYING: i
						> version: s/_/ui/n
						TRYING: n
						RESULT:  ['i']
					version split: ['s', 'u', 'i', 'n']
					{'string': 's/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', 'u', 'i', 'n']
					version split: ['s', 'u', 'i', 'n']
					{'string': 's/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', 'u', 'i', 'n']
					version split: ['s', 'ui', 'n']
					{'string': 's/ui/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', 'ui', 'n']
					version split: ['s', '_', 'u', 'i', 'n']
					{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', '_', 'u', 'i', 'n']
					version split: ['s', '_', 'u', 'i', 'n']
					{'string': 's/_/u/i/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', '_', 'u', 'i', 'n']
					version split: ['s', '_', 'ui', 'n']
					{'string': 's/_/ui/n', 'rgx': '((s))/((_))/((n))/((i))$'}
					_____REMOVING________['s', '_', 'ui', 'n']
			only one version left: ['sc', 'i', 'n', '_']
			only one version left: ['sc', 'í', 'n', '_']
			only one version left: ['sh', 'i', 'n', '_']
			only one version left: ['sc', 'h', '_', 'i']
			FAIL: 
			FAIL: 
			only one version left: ['s', 'i', 'n', '_']
			only one version left: ['ss', 'i', 'n', '_']
			only one version left: ['ss', 'y', 'n', '_']
			FAIL: 
			SPLIT: ['sc', 'i', 'n', 'e']
			SPLIT: ['sc', 'i', 'n', '_']
			['sc', 'i', 'n', '_']
			['sc', 'i', 'n', '_']
			SPLIT: ['sc', 'í', 'n', '_']
			['sc', 'í', 'n', '_']
			['sc', 'í', 'n', '_']
			SPLIT: ['sh', 'i', 'n', '_']
			['sh', 'i', 'n', '_']
			['sh', 'i', 'n', '_']
			SPLIT: ['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			['sc', 'h', '_', 'i']
			SPLIT: ['sc.s.sch', 'i.h', 'n', 'i', '----!']
			SPLIT: ['sc.s.sch', 'h.y', 'n', 'y', '----!']
			SPLIT: ['s', 'i', 'n', '_']
			['s', 'i', 'n', '_']
			['s', 'i', 'n', '_']
			SPLIT: ['ss', 'i', 'n', '_']
			['ss', 'i', 'n', '_']
			['ss', 'i', 'n', '_']
			SPLIT: ['ss', 'y', 'n', '_']
			['ss', 'y', 'n', '_']
			['ss', 'y', 'n', '_']
			SPLIT: ['s', '_', 'n', 'i', '----!']
			version for pattern CVCV is INVALID
			[]
			3
			OVERVIEW: version for pattern CVCV

faulty splits: 3
sc.s.schi.hni----! <-! schin
sc.s.schh.yny----! <-! schyn
sni----! <-! suin
sc | i | n | e
sc | i | n | _
sc | í | n | _
sh | i | n | _
sc | h | _ | i
sc.s.sch | i.h | n | i | ----!
sc.s.sch | h.y | n | y | ----!
s | i | n | _
ss | i | n | _
ss | y | n | _
s | _ | n | i | ----!
2 : {'i', 'n'},{'n', 'h'}
		FOUND __ 0 __ VALID VERSION(S)
		OVERVIEW: version for pattern CVC
{'ui', 'í', '_', 'y', 'i'}
faulty splits: 2
sc.sn----! <-! scine
sc.s.sch----! <-! schi
sc | i | n
sc | í | n
sh | i | n
sch | i | n
sch | y | n
s | i | n
ss | i | n
ss | y | n
s | ui | n
sc.s | _ | n | ----!
sc.s.sch | _ | _ | ----!
1 : {'i', 'y', 'ui', 'í'},{'ui', 'í', '_', 'y', 'i'}
2 : {'i', 'n'},{'ch', 'n'},{'n', 'c'},{'n', 'h'}
