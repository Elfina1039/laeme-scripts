Analysis object initialized
{'sci': 2, 'scip': 44, 'scipe': 5, 'scipp': 1, 'scup': 1, 'ship': 11, 'shipe': 4, 'shipp': 1, 'schepe': 1, 'schip': 21, 'schipe': 2, 'schipen': 1, 'schipp': 1, 'schippe': 2, 'si': 5, 'sip': 19, 'sipe': 5, 'ssip': 41, 'ssipe': 9, 'ssyp': 2}
Lexel initialized
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
MIN pattern length=4
Pattern CCCCCVC is invalid
Pattern CVCVC is valid
Pattern CCCCCV is invalid
Pattern CVCV is valid
Pattern CCVCC is valid
Pattern CCCC is invalid
Pattern CCCCVC is invalid
Pattern CCCVCC is valid
Pattern CCVC is valid
Pattern CCCCV is invalid
Pattern CCCCCC is invalid
Pattern CCCVCVC is valid
Pattern CCVCCV is valid
Pattern CVCCV is valid
Pattern CVC is invalid
Pattern CCVCV is valid
Pattern CV is invalid
Pattern CCCCC is invalid
Pattern CVCC is valid
Pattern CCCV is valid
Pattern CCVCVC is valid
Pattern CCC is invalid
Pattern CCCVC is valid
Pattern CC is invalid
Pattern CCCVCCV is valid
Pattern CCCCCCV is invalid
Pattern CCCVCV is valid
Pattern CCV is invalid
{'value': 9, 'patterns': ['CCVC']}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CVCVC
	Selection for pattern: CVCVC completed
	Making a version for pattern: CVCVC
			___CVCVC : 0___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CVCVC : 1___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					> version: sc/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: i
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					> version: s/cu/p
					TRYING: cu
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: i
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					> version: sc/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: ch
					> version: s/ch/i/p
					TRYING: ch
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: ch
					> version: s/ch/i/p/e
					TRYING: ch
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/c/h/i/pp
					TRYING: c
					> version: s/c/h/i/pp
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: ch
					> version: s/ch/i/pp
					TRYING: ch
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: i
					> version: s/ch/i/p/p/e
					TRYING: ch
					> version: s/ch/i/p/p/e
					TRYING: ch
					> version: s/c/h/i/pp/e
					TRYING: c
					> version: s/c/h/i/pp/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: s/ch/i/pp/e
					TRYING: ch
					> version: s/ch/i/pp/e
					TRYING: ch
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sch/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					> version: s/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					> version: s/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					> version: s/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: y
					RESULT:  ['y']
			___CVCVC : 2___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (2)
					> version: s/i
					> version: s/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['p']
			___CVCVC : 3___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					TRYING: i
					> version: s/c/_/i
					TRYING: i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/_/p(CCAAC)
s/c/u/_/p(CCAAC)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					> version: s/c/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					> version: s/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
			___CVCVC : 4___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					> version: s/c/_/i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/_/i/_(CCAAA)
s/c/_/i/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', '_', 'i', '_']
				{'string': 's/c/_/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_']
				version split: ['s', 'c', '_', 'i', '_']
				{'string': 's/c/_/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/_/p(CCAAAC)
s/c/i/_/_/p(CCAAAC)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', '_', 'p']
				{'string': 's/c/i/_/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'p']
				version split: ['s', 'c', 'i', '_', '_', 'p']
				{'string': 's/c/i/_/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'p']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))/((_))$'}
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((i))/((p))/((e))/((_))$'}
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/c/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/_/p/p(CCAAACC)
s/c/i/_/_/p/p(CCAAACC)
sc/i/p/_/_/p(CACAAC)
sc/i/p/_/_/p(CACAAC)
s/c/i/_/_/pp(CCAAAC)
s/c/i/_/_/pp(CCAAAC)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', '_', '_', 'p', 'p']
				{'string': 's/c/i/_/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', '_', 'p', 'p']
				{'string': 's/c/i/_/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', '_', 'p']
				{'string': 'sc/i/p/_/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', 'p']
				version split: ['sc', 'i', 'p', '_', '_', 'p']
				{'string': 'sc/i/p/_/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', 'p']
				version split: ['s', 'c', 'i', '_', '_', 'pp']
				{'string': 's/c/i/_/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'pp']
				version split: ['s', 'c', 'i', '_', '_', 'pp']
				{'string': 's/c/i/_/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/u/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/u/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/cu/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'u', '_', '_', 'p']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/_/p(CCAAC)
s/c/u/_/p(CCAAC)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/u/_/_/p(CCAAAC)
s/c/u/_/_/p(CCAAAC)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/cu/p/_/_(CCCAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', 'u', '_', '_', 'p']
				{'string': 's/c/u/_/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', '_', 'p']
				version split: ['s', 'c', 'u', '_', '_', 'p']
				{'string': 's/c/u/_/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', '_', 'p']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				version split: ['s', 'cu', 'p', '_', '_']
				{'string': 's/cu/p/_/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))/((_))$'}
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/_/p(CCAAAC)
s/h/i/_/_/p(CCAAAC)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', '_', 'p']
				{'string': 's/h/i/_/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'p']
				version split: ['s', 'h', 'i', '_', '_', 'p']
				{'string': 's/h/i/_/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'p']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))/((_))$'}
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((i))/((p))/((e))/((_))$'}
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/h/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/_/p/p(CCAAACC)
s/h/i/_/_/p/p(CCAAACC)
sh/i/p/_/_/p(CACAAC)
sh/i/p/_/_/p(CACAAC)
s/h/i/_/_/pp(CCAAAC)
s/h/i/_/_/pp(CCAAAC)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', '_', '_', 'p', 'p']
				{'string': 's/h/i/_/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', '_', 'p', 'p']
				{'string': 's/h/i/_/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', '_', 'p']
				{'string': 'sh/i/p/_/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', 'p']
				version split: ['sh', 'i', 'p', '_', '_', 'p']
				{'string': 'sh/i/p/_/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', 'p']
				version split: ['s', 'h', 'i', '_', '_', 'pp']
				{'string': 's/h/i/_/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'pp']
				version split: ['s', 'h', 'i', '_', '_', 'pp']
				{'string': 's/h/i/_/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))/((_))$'}
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/c/h/e/_/p/e(CCCVACV)
sc/h/e/p/_/e(CCVCAV)
sch/e/p/e/_(CVCVA)
s/ch/e/p/_/e(CCVCAV)
sc/h/e/p/_/e(CCVCAV)
sc/h/e/p/_/e(CCVCAV)
sch/e/p/e/_(CVCVA)
sc/h/e/p/_/e(CCVCAV)
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', '_', 'p', 'e']
				{'string': 's/c/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', '_', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				version split: ['s', 'ch', 'e', 'p', '_', 'e']
				{'string': 's/ch/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/_/p(CCCAAC)
s/c/h/i/_/p(CCCAAC)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/c/h/i/_/p/e(CCCAACV)
s/c/h/i/_/p/e(CCCAACV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/_/e(CCACAV)
s/ch/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['s', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/ch/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/c/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/_/p/p(CCCAACC)
s/c/h/i/_/p/p(CCCAACC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/_/p(CCACAC)
s/ch/i/p/_/p(CCACAC)
s/c/h/i/_/pp(CCCAAC)
s/c/h/i/_/pp(CCCAAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/c/h/i/_/p/p/e(CCCAACCV)
s/c/h/i/_/p/p/e(CCCAACCV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sch/i/p/p/_/e(CACCAV)
sch/i/p/p/_/e(CACCAV)
s/ch/i/p/_/p/e(CCACACV)
s/ch/i/p/_/p/e(CCACACV)
s/c/h/i/_/pp/e(CCCAACV)
s/c/h/i/_/pp/e(CCCAACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sch/i/p/p/_/e(CACCAV)
sch/i/p/p/_/e(CACCAV)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
s/ch/i/pp/_/e(CCACAV)
s/ch/i/pp/_/e(CCACAV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['s', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', 'e']
				version split: ['s', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					> version: s/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((i))/((p))/((e))/((_))$'}
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((i))/((p))/((e))/((_))$'}
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/s/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/_/p(CCAAAC)
s/s/i/_/_/p(CCAAAC)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', '_', 'p']
				{'string': 's/s/i/_/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', '_', 'p']
				version split: ['s', 's', 'i', '_', '_', 'p']
				{'string': 's/s/i/_/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', '_', 'p']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))/((_))$'}
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((i))/((p))/((e))/((_))$'}
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/s/y/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/_/p(CCAAAC)
s/s/y/_/_/p(CCAAAC)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', '_', 'p']
				{'string': 's/s/y/_/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', '_', 'p']
				version split: ['s', 's', 'y', '_', '_', 'p']
				{'string': 's/s/y/_/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', '_', 'p']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))/((_))$'}
		FAIL: 
		only one version left: ['sc', 'i', 'p', '_', '_']
		only one version left: ['sc', 'i', 'p', 'e', '_']
		only one version left: ['sc', 'i', 'pp', '_', '_']
		only one version left: ['sc', 'u', 'p', '_', '_']
		only one version left: ['sh', 'i', 'p', '_', '_']
		only one version left: ['sh', 'i', 'p', 'e', '_']
		only one version left: ['sh', 'i', 'pp', '_', '_']
		only one version left: ['sch', 'e', 'p', 'e', '_']
		FAIL: 
		only one version left: ['sch', 'i', 'p', 'e', '_']
		FAIL: 
		only one version left: ['sch', 'i', 'pp', 'e', '_']
		only one version left: ['s', 'i', '_', '_', '_']
		only one version left: ['s', 'i', 'p', '_', '_']
		only one version left: ['s', 'i', 'p', 'e', '_']
		only one version left: ['ss', 'i', 'p', '_', '_']
		only one version left: ['ss', 'i', 'p', 'e', '_']
		only one version left: ['ss', 'y', 'p', '_', '_']
		SPLIT: ['sch', 'i', 'p', 'e', 'n']
		SPLIT: ['sc.s', 'i', '_', 'i', '_', '----!']
		SPLIT: ['sc', 'i', 'p', '_', '_']
		['sc', 'i', 'p', '_', '_']
		['sc', 'i', 'p', '_', '_']
		SPLIT: ['sc', 'i', 'p', 'e', '_']
		['sc', 'i', 'p', 'e', '_']
		['sc', 'i', 'p', 'e', '_']
		SPLIT: ['sc', 'i', 'pp', '_', '_']
		['sc', 'i', 'pp', '_', '_']
		['sc', 'i', 'pp', '_', '_']
		SPLIT: ['sc', 'u', 'p', '_', '_']
		['sc', 'u', 'p', '_', '_']
		['sc', 'u', 'p', '_', '_']
		['sc', 'u', 'p', '_', '_']
		['sc', 'u', 'p', '_', '_']
		SPLIT: ['sh', 'i', 'p', '_', '_']
		['sh', 'i', 'p', '_', '_']
		['sh', 'i', 'p', '_', '_']
		SPLIT: ['sh', 'i', 'p', 'e', '_']
		['sh', 'i', 'p', 'e', '_']
		['sh', 'i', 'p', 'e', '_']
		SPLIT: ['sh', 'i', 'pp', '_', '_']
		['sh', 'i', 'pp', '_', '_']
		['sh', 'i', 'pp', '_', '_']
		SPLIT: ['sch', 'e', 'p', 'e', '_']
		['sch', 'e', 'p', 'e', '_']
		['sch', 'e', 'p', 'e', '_']
		SPLIT: ['sch.sc.s', 'i', 'p', 'i', '_', '----!']
		SPLIT: ['sch', 'i', 'p', 'e', '_']
		['sch', 'i', 'p', 'e', '_']
		['sch', 'i', 'p', 'e', '_']
		['sch', 'i', 'p', 'e', '_']
		['sch', 'i', 'p', 'e', '_']
		SPLIT: ['sch.sc.s', 'i', 'p.pp', 'i', '_', '----!']
		SPLIT: ['sch', 'i', 'pp', 'e', '_']
		['sch', 'i', 'pp', 'e', '_']
		['sch', 'i', 'pp', 'e', '_']
		['sch', 'i', 'pp', 'e', '_']
		['sch', 'i', 'pp', 'e', '_']
		SPLIT: ['s', 'i', '_', '_', '_']
		['s', 'i', '_', '_', '_']
		['s', 'i', '_', '_', '_']
		SPLIT: ['s', 'i', 'p', '_', '_']
		['s', 'i', 'p', '_', '_']
		['s', 'i', 'p', '_', '_']
		SPLIT: ['s', 'i', 'p', 'e', '_']
		['s', 'i', 'p', 'e', '_']
		['s', 'i', 'p', 'e', '_']
		SPLIT: ['ss', 'i', 'p', '_', '_']
		['ss', 'i', 'p', '_', '_']
		['ss', 'i', 'p', '_', '_']
		SPLIT: ['ss', 'i', 'p', 'e', '_']
		['ss', 'i', 'p', 'e', '_']
		['ss', 'i', 'p', 'e', '_']
		SPLIT: ['ss', 'y', 'p', '_', '_']
		['ss', 'y', 'p', '_', '_']
		['ss', 'y', 'p', '_', '_']
		version for pattern CVCVC is INVALID
		[]
		3
		OVERVIEW: version for pattern CVCVC

faulty splits: 3
sc.sii----! <-! sci
sch.sc.sipi----! <-! schip
sch.sc.sip.ppi----! <-! schipp
sch | i | p | e | n
sc.s | i | _ | i | _ | ----!
sc | i | p | _ | _
sc | i | p | e | _
sc | i | pp | _ | _
sc | u | p | _ | _
sh | i | p | _ | _
sh | i | p | e | _
sh | i | pp | _ | _
sch | e | p | e | _
sch.sc.s | i | p | i | _ | ----!
sch | i | p | e | _
sch.sc.s | i | p.pp | i | _ | ----!
sch | i | pp | e | _
s | i | _ | _ | _
s | i | p | _ | _
s | i | p | e | _
ss | i | p | _ | _
ss | i | p | e | _
ss | y | p | _ | _
2 : {'p', 'i'}
4 : {'pp', '_', 'n'},{'p', '_', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CVCV
	Selection for pattern: CVCV completed
	Making a version for pattern: CVCV
			___CVCV : 0___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CVCV : 1___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					> version: sc/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: i
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					> version: s/cu/p
					TRYING: cu
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: i
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: ch
					> version: s/ch/i/p
					TRYING: ch
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/c/h/i/pp
					TRYING: c
					> version: s/c/h/i/pp
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: ch
					> version: s/ch/i/pp
					TRYING: ch
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					> version: s/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					> version: s/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: y
					RESULT:  ['y']
			___CVCV : 2___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, pp
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, pp
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (2)
					> version: s/i
					> version: s/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['p']
			___CVCV : 3___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					TRYING: i
					> version: s/c/_/i
					TRYING: i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/_/p(CCAAC)
s/c/u/_/p(CCAAC)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					> version: s/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
		FAIL: 
		only one version left: ['sc', 'i', 'p', '_']
		only one version left: ['sc', 'i', 'pp', '_']
		only one version left: ['sc', 'u', 'p', '_']
		only one version left: ['sh', 'i', 'p', '_']
		only one version left: ['sh', 'i', 'pp', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'i', '_', '_']
		only one version left: ['s', 'i', 'p', '_']
		only one version left: ['ss', 'i', 'p', '_']
		only one version left: ['ss', 'y', 'p', '_']
		SPLIT: ['sc', 'i', 'p', 'e']
		SPLIT: ['sh', 'i', 'p', 'e']
		SPLIT: ['sch', 'e', 'p', 'e']
		SPLIT: ['sch', 'i', 'p', 'e']
		SPLIT: ['sch', 'i', 'pp', 'e']
		SPLIT: ['s', 'i', 'p', 'e']
		SPLIT: ['ss', 'i', 'p', 'e']
		SPLIT: ['sc.s', 'i', '_', 'i', '----!']
		SPLIT: ['sc', 'i', 'p', '_']
		['sc', 'i', 'p', '_']
		['sc', 'i', 'p', '_']
		SPLIT: ['sc', 'i', 'pp', '_']
		['sc', 'i', 'pp', '_']
		['sc', 'i', 'pp', '_']
		SPLIT: ['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		SPLIT: ['sh', 'i', 'p', '_']
		['sh', 'i', 'p', '_']
		['sh', 'i', 'p', '_']
		SPLIT: ['sh', 'i', 'pp', '_']
		['sh', 'i', 'pp', '_']
		['sh', 'i', 'pp', '_']
		SPLIT: ['sch.sc.s', 'i', 'p', 'i', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'i.e', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p.pp', 'i', '----!']
		SPLIT: ['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		SPLIT: ['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		SPLIT: ['ss', 'i', 'p', '_']
		['ss', 'i', 'p', '_']
		['ss', 'i', 'p', '_']
		SPLIT: ['ss', 'y', 'p', '_']
		['ss', 'y', 'p', '_']
		['ss', 'y', 'p', '_']
		version for pattern CVCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CVCV

faulty splits: 4
sc.sii----! <-! sci
sch.sc.sipi----! <-! schip
sch.sc.sipi.e----! <-! schipen
sch.sc.sip.ppi----! <-! schipp
sc | i | p | e
sh | i | p | e
sch | e | p | e
sch | i | p | e
sch | i | pp | e
s | i | p | e
ss | i | p | e
sc.s | i | _ | i | ----!
sc | i | p | _
sc | i | pp | _
sc | u | p | _
sh | i | p | _
sh | i | pp | _
sch.sc.s | i | p | i | ----!
sch.sc.s | i | p | i.e | ----!
sch.sc.s | i | p.pp | i | ----!
s | i | _ | _
s | i | p | _
ss | i | p | _
ss | y | p | _
2 : {'p', 'i', 'pp'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCVCC
	Selection for pattern: CCVCC completed
	Making a version for pattern: CCVCC
			___CCVCC : 0___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCVCC : 1___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> h, cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/e/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCVCC : 2___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					> version: s/c/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: s/ch/i/pp/e
					TRYING: i
					> version: s/ch/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['y']
			___CCVCC : 3___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['p']
			___CCVCC : 4___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
		only one version left: ['s', 'c', 'i', '_', '_']
		only one version left: ['s', 'c', 'i', 'p', '_']
		FAIL: 
		only one version left: ['s', 'c', 'u', 'p', '_']
		only one version left: ['s', 'h', 'i', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'i', '_', '_']
		only one version left: ['s', '_', 'i', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'i', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'y', 'p', '_']
		SPLIT: ['s', 'c', 'i', 'p', 'p']
		SPLIT: ['s', 'h', 'i', 'p', 'p']
		SPLIT: ['sc', 'h', 'i', 'p', 'p']
		SPLIT: ['s', 'c', 'i', '_', '_']
		['s', 'c', 'i', '_', '_']
		['s', 'c', 'i', '_', '_']
		SPLIT: ['s', 'c', 'i', 'p', '_']
		['s', 'c', 'i', 'p', '_']
		['s', 'c', 'i', 'p', '_']
		SPLIT: ['sc.s', 'c', 'i', 'p', '_', '----!']
		SPLIT: ['s', 'c', 'u', 'p', '_']
		['s', 'c', 'u', 'p', '_']
		['s', 'c', 'u', 'p', '_']
		SPLIT: ['s', 'h', 'i', 'p', '_']
		['s', 'h', 'i', 'p', '_']
		['s', 'h', 'i', 'p', '_']
		SPLIT: ['sh.s', 'h', 'i', 'p', '_', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'e', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p.pp', 'p.pp', '----!']
		SPLIT: ['s', '_', 'i', '_', '_']
		['s', '_', 'i', '_', '_']
		['s', '_', 'i', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', '_']
		['s', '_', 'i', 'p', '_']
		['s', '_', 'i', 'p', '_']
		SPLIT: ['s', '_', 'i', 'p', '_', '----!']
		SPLIT: ['s', 's', 'i', 'p', '_']
		['s', 's', 'i', 'p', '_']
		['s', 's', 'i', 'p', '_']
		SPLIT: ['ss.s', 's', 'i', 'p', '_', '----!']
		SPLIT: ['s', 's', 'y', 'p', '_']
		['s', 's', 'y', 'p', '_']
		['s', 's', 'y', 'p', '_']
		version for pattern CCVCC is INVALID
		[]
		9
		OVERVIEW: version for pattern CCVCC

faulty splits: 9
sc.scip----! <-! scipe
sh.ship----! <-! shipe
sch.sc.sh.c.chepp----! <-! schepe
sch.sc.sh.c.chipp----! <-! schip
sch.sc.sh.c.chipp----! <-! schipe
sch.sc.sh.c.chipp----! <-! schipen
sch.sc.sh.c.chip.ppp.pp----! <-! schippe
sip----! <-! sipe
ss.ssip----! <-! ssipe
s | c | i | p | p
s | h | i | p | p
sc | h | i | p | p
s | c | i | _ | _
s | c | i | p | _
sc.s | c | i | p | _ | ----!
s | c | u | p | _
s | h | i | p | _
sh.s | h | i | p | _ | ----!
sch.sc.s | h.c.ch | e | p | p | ----!
sch.sc.s | h.c.ch | i | p | p | ----!
sch.sc.s | h.c.ch | i | p | p | ----!
sch.sc.s | h.c.ch | i | p | p | ----!
sch.sc.s | h.c.ch | i | p.pp | p.pp | ----!
s | _ | i | _ | _
s | _ | i | p | _
s | _ | i | p | _ | ----!
s | s | i | p | _
ss.s | s | i | p | _ | ----!
s | s | y | p | _
1 : {'h', 'i', 'c', 'ch'},{'i', '_', 'ch', 'c', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCVCC
	Selection for pattern: CCCVCC completed
	Making a version for pattern: CCCVCC
			___CCCVCC : 0___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCVCC : 1___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/e/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCCVCC : 2___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/cu/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', 'cu', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['y']
			___CCCVCC : 3___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: u
					> version: s/c/_/u/p
					TRYING: u
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/cu/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					> version: s/c/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
			___CCCVCC : 4___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					TRYING: p
					> version: s/c/i/_/p
					TRYING: p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: p
					> version: s/c/_/u/p
					TRYING: p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					TRYING: p
					> version: s/h/i/_/p
					TRYING: p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					TRYING: p
					> version: s/_/i/_/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					TRYING: p
					> version: s/s/i/_/p
					TRYING: p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					TRYING: p
					> version: s/s/y/_/p
					TRYING: p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['p']
			___CCCVCC : 5___
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/e/_(CCACVA)
s/c/i/p/e/_(CCACVA)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/_/_/e(CCACAAV)
s/c/i/p/_/_/e(CCACAAV)
sc/i/p/e/_/_(CACVAA)
sc/i/p/e/_/_(CACVAA)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'e']
				{'string': 's/c/i/p/_/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'e']
				{'string': 's/c/i/p/_/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'cu', '_', 'p']
				{'string': 's/cu/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/e/_(CCACVA)
s/h/i/p/e/_(CCACVA)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/_/_/e(CCACAAV)
s/h/i/p/_/_/e(CCACAAV)
sh/i/p/e/_/_(CACVAA)
sh/i/p/e/_/_(CACVAA)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'e']
				{'string': 's/h/i/p/_/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'e']
				{'string': 's/h/i/p/_/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/c/h/e/p/_/e(CCCVCAV)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
s/ch/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
sc/h/e/p/e/_(CCVCVA)
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				{'string': 's/c/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['s', 'ch', 'e', 'p', 'e', '_']
				{'string': 's/ch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: e
					> version: s/c/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/c/h/i/p/_/e(CCCACAV)
s/c/h/i/p/_/e(CCCACAV)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/e/_(CCACVA)
s/ch/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: s/ch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: s/ch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				s/c/h/i/p/e/n(CCCCCVC)
s/c/h/i/p/e/n(CCCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
s/ch/i/p/e/n(CCCCVC)
s/ch/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
s/c/h/i/p/_/e/n(CCCACAVC)
s/c/h/i/p/_/e/n(CCCACAVC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sch/i/p/e/n/_(CACVCA)
sch/i/p/e/n/_(CACVCA)
s/ch/i/p/e/_/n(CCACVAC)
s/ch/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sch/i/p/e/n/_(CACVCA)
sch/i/p/e/n/_(CACVCA)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				{'string': 's/ch/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				{'string': 's/ch/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					> version: s/ch/i/pp/e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					TRYING: e
					> version: s/_/i/p/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/e/_(CAACVA)
s/_/i/p/e/_(CAACVA)
s/i/p/e/_/_(CACVAA)
s/i/p/e/_/_(CACVAA)
s/_/i/p/_/_/e(CAACAAV)
s/_/i/p/_/_/e(CAACAAV)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_', 'e']
				{'string': 's/_/i/p/_/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', '_', 'e']
				{'string': 's/_/i/p/_/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_', 'e']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/e/_(CCACVA)
s/s/i/p/e/_(CCACVA)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/_/_/e(CCACAAV)
s/s/i/p/_/_/e(CCACAAV)
ss/i/p/e/_/_(CACVAA)
ss/i/p/e/_/_(CACVAA)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', '_', '_', 'e']
				{'string': 's/s/i/p/_/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', '_', 'e']
				{'string': 's/s/i/p/_/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
		only one version left: ['s', 'c', 'i', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 'c', 'i', '_', 'p', 'p']
		only one version left: ['s', 'c', '_', 'u', 'p', '_']
		only one version left: ['s', 'h', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 'h', 'i', '_', 'p', 'p']
		FAIL: 
		only one version left: ['s', 'c', 'h', 'i', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'i', '_', '_', '_']
		only one version left: ['s', '_', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'y', '_', 'p', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'p']
		SPLIT: ['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		SPLIT: ['s', 'c', 'i', '_', 'p', '_']
		['s', 'c', 'i', '_', 'p', '_']
		['s', 'c', 'i', '_', 'p', '_']
		SPLIT: ['sc.s', 'c', 'i', 'e', '_', '_', '----!']
		SPLIT: ['s', 'c', 'i', '_', 'p', 'p']
		['s', 'c', 'i', '_', 'p', 'p']
		['s', 'c', 'i', '_', 'p', 'p']
		SPLIT: ['s', 'c', '_', 'u', 'p', '_']
		['s', 'c', '_', 'u', 'p', '_']
		['s', 'c', '_', 'u', 'p', '_']
		SPLIT: ['s', 'h', 'i', '_', 'p', '_']
		['s', 'h', 'i', '_', 'p', '_']
		['s', 'h', 'i', '_', 'p', '_']
		SPLIT: ['sh.s', 'h', 'i', 'e', '_', '_', '----!']
		SPLIT: ['s', 'h', 'i', '_', 'p', 'p']
		['s', 'h', 'i', '_', 'p', 'p']
		['s', 'h', 'i', '_', 'p', 'p']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h', 'e', 'p', '_', '----!']
		SPLIT: ['s', 'c', 'h', 'i', 'p', '_']
		['s', 'c', 'h', 'i', 'p', '_']
		['s', 'c', 'h', 'i', 'p', '_']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h.i', 'i.e', 'p', '_', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h.i', 'i.e', 'p', '_', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h.i', 'i.e', 'p.pp', 'p', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		SPLIT: ['s', '_', 'i', '_', 'p', '_']
		['s', '_', 'i', '_', 'p', '_']
		['s', '_', 'i', '_', 'p', '_']
		SPLIT: ['s', '_', 'i', 'e', '_', '_', '----!']
		SPLIT: ['s', 's', 'i', '_', 'p', '_']
		['s', 's', 'i', '_', 'p', '_']
		['s', 's', 'i', '_', 'p', '_']
		SPLIT: ['ss.s', 's', 'i', 'e', '_', '_', '----!']
		SPLIT: ['s', 's', 'y', '_', 'p', '_']
		['s', 's', 'y', '_', 'p', '_']
		['s', 's', 'y', '_', 'p', '_']
		version for pattern CCCVCC is INVALID
		[]
		8
		OVERVIEW: version for pattern CCCVCC

faulty splits: 8
sc.scie----! <-! scipe
sh.shie----! <-! shipe
sch.sc.sh.c.chhep----! <-! schepe
sch.sc.sh.c.chh.ii.ep----! <-! schipe
sch.sc.sh.c.chh.ii.ep----! <-! schipen
sch.sc.sh.c.chh.ii.ep.ppp----! <-! schippe
sie----! <-! sipe
ss.ssie----! <-! ssipe
s | c | h | i | p | p
s | c | i | _ | _ | _
s | c | i | _ | p | _
sc.s | c | i | e | _ | _ | ----!
s | c | i | _ | p | p
s | c | _ | u | p | _
s | h | i | _ | p | _
sh.s | h | i | e | _ | _ | ----!
s | h | i | _ | p | p
sch.sc.s | h.c.ch | h | e | p | _ | ----!
s | c | h | i | p | _
sch.sc.s | h.c.ch | h.i | i.e | p | _ | ----!
sch.sc.s | h.c.ch | h.i | i.e | p | _ | ----!
sch.sc.s | h.c.ch | h.i | i.e | p.pp | p | ----!
s | _ | i | _ | _ | _
s | _ | i | _ | p | _
s | _ | i | e | _ | _ | ----!
s | s | i | _ | p | _
ss.s | s | i | e | _ | _ | ----!
s | s | y | _ | p | _
1 : {'h', 'i', 'c', 'ch'},{'i', '_', 'ch', 'c', 'h'}
2 : {'h', 'i', 'p'},{'h', 'i', 'u'}
5 : {'p', '_', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: scip
				adding littera based on matching pattern
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: scup
				adding littera based on matching pattern
				ANALYSING: ship
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: ssip
				adding littera based on matching pattern
				ANALYSING: ssyp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCVC : 1___
				ANALYSING: scip
				adding littera based on matching pattern
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: scup
				adding littera based on matching pattern
				ANALYSING: ship
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: ssip
				adding littera based on matching pattern
				ANALYSING: ssyp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['c']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['h']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/e/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
			___CCVC : 2___
				ANALYSING: scip
				adding littera based on matching pattern
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: scup
				adding littera based on matching pattern
				ANALYSING: ship
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: ssip
				adding littera based on matching pattern
				ANALYSING: ssyp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: s/ch/i/pp/e
					TRYING: i
					> version: s/ch/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					RESULT:  ['i']
			___CCVC : 3___
				ANALYSING: scip
				adding littera based on matching pattern
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: scup
				adding littera based on matching pattern
				ANALYSING: ship
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: ssip
				adding littera based on matching pattern
				ANALYSING: ssyp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((e))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))$'}
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))$'}
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))$'}
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))$'}
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((p))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
		only one version left: ['s', 'c', 'i', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'i', '_']
		only one version left: ['s', '_', 'i', 'p']
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'c', 'i', 'p']
		SPLIT: ['s', 'c', 'i', 'pp']
		SPLIT: ['s', 'c', 'u', 'p']
		SPLIT: ['s', 'h', 'i', 'p']
		SPLIT: ['s', 'h', 'i', 'pp']
		SPLIT: ['sc', 'h', 'i', 'p']
		SPLIT: ['sc', 'h', 'i', 'pp']
		SPLIT: ['s', 's', 'i', 'p']
		SPLIT: ['s', 's', 'y', 'p']
		SPLIT: ['s', 'c', 'i', '_']
		['s', 'c', 'i', '_']
		['s', 'c', 'i', '_']
		SPLIT: ['sc.s', 'c', 'i', 'p', '----!']
		SPLIT: ['sh.s', 'h', 'i', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'e', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p.pp', '----!']
		SPLIT: ['s', '_', 'i', '_']
		['s', '_', 'i', '_']
		['s', '_', 'i', '_']
		SPLIT: ['s', '_', 'i', 'p']
		['s', '_', 'i', 'p']
		['s', '_', 'i', 'p']
		SPLIT: ['s', '_', 'i', 'p', '----!']
		SPLIT: ['ss.s', 's', 'i', 'p', '----!']
		version for pattern CCVC is INVALID
		[]
		8
		OVERVIEW: version for pattern CCVC

faulty splits: 8
sc.scip----! <-! scipe
sh.ship----! <-! shipe
sch.sc.sh.c.chep----! <-! schepe
sch.sc.sh.c.chip----! <-! schipe
sch.sc.sh.c.chip----! <-! schipen
sch.sc.sh.c.chip.pp----! <-! schippe
sip----! <-! sipe
ss.ssip----! <-! ssipe
s | c | i | p
s | c | i | pp
s | c | u | p
s | h | i | p
s | h | i | pp
sc | h | i | p
sc | h | i | pp
s | s | i | p
s | s | y | p
s | c | i | _
sc.s | c | i | p | ----!
sh.s | h | i | p | ----!
sch.sc.s | h.c.ch | e | p | ----!
sch.sc.s | h.c.ch | i | p | ----!
sch.sc.s | h.c.ch | i | p | ----!
sch.sc.s | h.c.ch | i | p.pp | ----!
s | _ | i | _
s | _ | i | p
s | _ | i | p | ----!
ss.s | s | i | p | ----!
1 : {'ch', '_', 'i', 'c', 's', 'h'},{'i', 'ch', 'c', 's', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCVCVC
	Selection for pattern: CCCVCVC completed
	Making a version for pattern: CCCVCVC
			___CCCVCVC : 0___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCVCVC : 1___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/e/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCCVCVC : 2___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/cu/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', 'cu', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['y']
			___CCCVCVC : 3___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: u
					> version: s/c/_/u/p
					TRYING: u
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/cu/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					> version: s/c/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
			___CCCVCVC : 4___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					TRYING: p
					> version: s/c/i/_/p
					TRYING: p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: p
					> version: s/c/_/u/p
					TRYING: p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					TRYING: p
					> version: s/h/i/_/p
					TRYING: p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					TRYING: p
					> version: s/_/i/_/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					TRYING: p
					> version: s/s/i/_/p
					TRYING: p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					TRYING: p
					> version: s/s/y/_/p
					TRYING: p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['p']
			___CCCVCVC : 5___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/p/_/p(CCAACAC)
s/c/i/_/p/_/p(CCAACAC)
sc/i/p/_/p/_(CACACA)
sc/i/p/_/p/_(CACACA)
s/c/i/_/pp/_(CCAACA)
s/c/i/_/pp/_(CCAACA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/p/_/p(CCAACAC)
s/h/i/_/p/_/p(CCAACAC)
sh/i/p/_/p/_(CACACA)
sh/i/p/_/p/_(CACACA)
s/h/i/_/pp/_(CCAACA)
s/h/i/_/pp/_(CCAACA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: e
					> version: s/c/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					RESULT:  ['e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/p/_/p(CCCACAC)
s/c/h/i/p/_/p(CCCACAC)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					> version: s/ch/i/pp/e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					RESULT:  ['e']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					TRYING: e
					> version: s/_/i/p/_/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
			___CCCVCVC : 6___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (32)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_/_/_
					> version: s/c/i/_/_/_
					> version: sc/i/_/_/_
					> version: sc/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_/_/_(CCAAAAA)
s/c/i/_/_/_/_(CCAAAAA)
sc/i/_/_/_/_(CAAAAA)
sc/i/_/_/_/_(CAAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_', '_']
				{'string': 's/c/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_', '_']
				{'string': 's/c/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_', '_']
				{'string': 'sc/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_', '_']
				{'string': 'sc/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_', '_']
				ANALYSING: scip
					resolving (16)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					> version: s/c/i/p/_
					> version: s/c/i/p/_
					> version: sc/i/p/_
					> version: sc/i/p/_
					> version: s/c/i/_/p/_
					> version: s/c/i/_/p/_
					> version: sc/i/p/_/_
					> version: sc/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/p/_/_(CCACAA)
s/c/i/p/_/_(CCACAA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/_/p/_/_(CCAACAA)
s/c/i/_/p/_/_(CCAACAA)
sc/i/p/_/_/_(CACAAA)
sc/i/p/_/_/_(CACAAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_', '_']
				{'string': 's/c/i/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'p', '_', '_']
				{'string': 's/c/i/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['sc', 'i', 'p', '_', '_', '_']
				{'string': 'sc/i/p/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_', '_']
				{'string': 'sc/i/p/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', '_']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					> version: s/c/i/p/_/e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/e/_(CCACVA)
s/c/i/p/e/_(CCACVA)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/_/e/_(CCACAVA)
s/c/i/p/_/e/_(CCACAVA)
sc/i/p/e/_/_(CACVAA)
sc/i/p/e/_/_(CACVAA)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', '_', 'e', '_']
				{'string': 's/c/i/p/_/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e', '_']
				version split: ['s', 'c', 'i', 'p', '_', 'e', '_']
				{'string': 's/c/i/p/_/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				ANALYSING: scipp
					resolving (32)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					> version: s/c/i/_/p/p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					> version: s/c/i/p/p/_
					> version: s/c/i/p/p/_
					> version: sc/i/p/p/_
					> version: sc/i/p/p/_
					> version: s/c/i/pp/_
					> version: s/c/i/pp/_
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					> version: s/c/i/_/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/_/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/_/p/_
					> version: sc/i/p/_/p/_
					> version: s/c/i/_/pp/_
					> version: s/c/i/_/pp/_
					> version: sc/i/pp/_/_
					> version: sc/i/pp/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/p/_/p(CCAACAC)
s/c/i/_/p/_/p(CCAACAC)
sc/i/p/_/p/_(CACACA)
sc/i/p/_/p/_(CACACA)
s/c/i/_/pp/_(CCAACA)
s/c/i/_/pp/_(CCAACA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/p/p/_(CCAACCA)
s/c/i/_/p/p/_(CCAACCA)
sc/i/p/_/p/_(CACACA)
sc/i/p/_/p/_(CACACA)
s/c/i/_/pp/_(CCAACA)
s/c/i/_/pp/_(CCAACA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
s/c/i/p/p/_/_(CCACCAA)
s/c/i/p/p/_/_(CCACCAA)
sc/i/p/p/_/_(CACCAA)
sc/i/p/p/_/_(CACCAA)
s/c/i/pp/_/_(CCACAA)
s/c/i/pp/_/_(CCACAA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
s/c/i/_/p/_/_/p(CCAACAAC)
s/c/i/_/p/_/_/p(CCAACAAC)
sc/i/p/_/p/_/_(CACACAA)
sc/i/p/_/p/_/_(CACACAA)
s/c/i/_/pp/_/_(CCAACAA)
s/c/i/_/pp/_/_(CCAACAA)
sc/i/pp/_/_/_(CACAAA)
sc/i/pp/_/_/_(CACAAA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_', 'p']
				{'string': 's/c/i/_/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p', '_', 'p']
				{'string': 's/c/i/_/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'p', 'p', '_']
				{'string': 's/c/i/_/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', 'p', '_']
				{'string': 's/c/i/_/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_', '_']
				{'string': 's/c/i/p/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_', '_']
				{'string': 's/c/i/p/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/i/p/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/i/p/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'pp', '_', '_']
				{'string': 's/c/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_', '_']
				version split: ['s', 'c', 'i', 'pp', '_', '_']
				{'string': 's/c/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				{'string': 's/c/i/_/p/_/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				{'string': 's/c/i/_/p/_/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p', '_', '_']
				{'string': 'sc/i/p/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_', '_']
				{'string': 'sc/i/p/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_', '_']
				{'string': 's/c/i/_/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'pp', '_', '_']
				{'string': 's/c/i/_/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				version split: ['sc', 'i', 'pp', '_', '_', '_']
				{'string': 'sc/i/pp/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_', '_']
				{'string': 'sc/i/pp/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_', '_']
				ANALYSING: scup
					resolving (28)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/c/u/p/_
					> version: s/c/u/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/cu/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/c/_/u/p/_
					> version: s/c/_/u/p/_
					> version: sc/u/_/p/_
					> version: sc/u/_/p/_
					> version: s/cu/_/p/_
					> version: sc/u/_/p/_
					> version: sc/u/_/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/c/u/p/_/_(CCACAA)
s/c/u/p/_/_(CCACAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/cu/p/_/_(CCCAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/c/_/u/p/_/_(CCAACAA)
s/c/_/u/p/_/_(CCAACAA)
sc/u/_/p/_/_(CAACAA)
sc/u/_/p/_/_(CAACAA)
s/cu/_/p/_/_(CCACAA)
sc/u/_/p/_/_(CAACAA)
sc/u/_/p/_/_(CAACAA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'cu', '_', 'p']
				{'string': 's/cu/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', 'cu', 'p', '_', '_']
				{'string': 's/cu/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_', '_']
				{'string': 's/c/_/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['s', 'c', '_', 'u', 'p', '_', '_']
				{'string': 's/c/_/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['s', 'cu', '_', 'p', '_', '_']
				{'string': 's/cu/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				ANALYSING: ship
					resolving (16)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					> version: s/h/i/p/_
					> version: s/h/i/p/_
					> version: sh/i/p/_
					> version: sh/i/p/_
					> version: s/h/i/_/p/_
					> version: s/h/i/_/p/_
					> version: sh/i/p/_/_
					> version: sh/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/p/_/_(CCACAA)
s/h/i/p/_/_(CCACAA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/_/p/_/_(CCAACAA)
s/h/i/_/p/_/_(CCAACAA)
sh/i/p/_/_/_(CACAAA)
sh/i/p/_/_/_(CACAAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_', '_']
				{'string': 's/h/i/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'p', '_', '_']
				{'string': 's/h/i/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['sh', 'i', 'p', '_', '_', '_']
				{'string': 'sh/i/p/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_', '_']
				{'string': 'sh/i/p/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', '_']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					> version: s/h/i/p/_/e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/e/_(CCACVA)
s/h/i/p/e/_(CCACVA)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/_/e/_(CCACAVA)
s/h/i/p/_/e/_(CCACAVA)
sh/i/p/e/_/_(CACVAA)
sh/i/p/e/_/_(CACVAA)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', '_', 'e', '_']
				{'string': 's/h/i/p/_/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e', '_']
				version split: ['s', 'h', 'i', 'p', '_', 'e', '_']
				{'string': 's/h/i/p/_/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				ANALYSING: shipp
					resolving (32)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					> version: s/h/i/_/p/p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					> version: s/h/i/p/p/_
					> version: s/h/i/p/p/_
					> version: sh/i/p/p/_
					> version: sh/i/p/p/_
					> version: s/h/i/pp/_
					> version: s/h/i/pp/_
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					> version: s/h/i/_/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/_/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/_/p/_
					> version: sh/i/p/_/p/_
					> version: s/h/i/_/pp/_
					> version: s/h/i/_/pp/_
					> version: sh/i/pp/_/_
					> version: sh/i/pp/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/p/_/p(CCAACAC)
s/h/i/_/p/_/p(CCAACAC)
sh/i/p/_/p/_(CACACA)
sh/i/p/_/p/_(CACACA)
s/h/i/_/pp/_(CCAACA)
s/h/i/_/pp/_(CCAACA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/p/p/_(CCAACCA)
s/h/i/_/p/p/_(CCAACCA)
sh/i/p/_/p/_(CACACA)
sh/i/p/_/p/_(CACACA)
s/h/i/_/pp/_(CCAACA)
s/h/i/_/pp/_(CCAACA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
s/h/i/p/p/_/_(CCACCAA)
s/h/i/p/p/_/_(CCACCAA)
sh/i/p/p/_/_(CACCAA)
sh/i/p/p/_/_(CACCAA)
s/h/i/pp/_/_(CCACAA)
s/h/i/pp/_/_(CCACAA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
s/h/i/_/p/_/_/p(CCAACAAC)
s/h/i/_/p/_/_/p(CCAACAAC)
sh/i/p/_/p/_/_(CACACAA)
sh/i/p/_/p/_/_(CACACAA)
s/h/i/_/pp/_/_(CCAACAA)
s/h/i/_/pp/_/_(CCAACAA)
sh/i/pp/_/_/_(CACAAA)
sh/i/pp/_/_/_(CACAAA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_', 'p']
				{'string': 's/h/i/_/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p', '_', 'p']
				{'string': 's/h/i/_/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'p', 'p', '_']
				{'string': 's/h/i/_/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', 'p', '_']
				{'string': 's/h/i/_/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 's/h/i/p/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 's/h/i/p/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sh', 'i', 'p', 'p', '_', '_']
				{'string': 'sh/i/p/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_', '_']
				version split: ['sh', 'i', 'p', 'p', '_', '_']
				{'string': 'sh/i/p/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'pp', '_', '_']
				{'string': 's/h/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_', '_']
				version split: ['s', 'h', 'i', 'pp', '_', '_']
				{'string': 's/h/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				{'string': 's/h/i/_/p/_/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				{'string': 's/h/i/_/p/_/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p', '_', '_']
				{'string': 'sh/i/p/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_', '_']
				{'string': 'sh/i/p/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_', '_']
				{'string': 's/h/i/_/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'pp', '_', '_']
				{'string': 's/h/i/_/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				version split: ['sh', 'i', 'pp', '_', '_', '_']
				{'string': 'sh/i/pp/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_', '_']
				{'string': 'sh/i/pp/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_', '_']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/c/h/e/p/e/_(CCCVCVA)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
s/ch/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
sc/h/e/p/e/_(CCVCVA)
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', 'p', 'e', '_']
				{'string': 's/c/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['s', 'ch', 'e', 'p', 'e', '_']
				{'string': 's/ch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/c/h/i/p/_
					> version: s/c/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sch/i/p/_
					> version: sch/i/p/_
					> version: s/ch/i/p/_
					> version: s/ch/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sch/i/p/_
					> version: sch/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/c/h/i/p/_/_(CCCACAA)
s/c/h/i/p/_/_(CCCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sch/i/p/_/_(CACAA)
sch/i/p/_/_(CACAA)
s/ch/i/p/_/_(CCACAA)
s/ch/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sch/i/p/_/_(CACAA)
sch/i/p/_/_(CACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_']
				{'string': 's/c/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_']
				{'string': 's/c/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', '_', '_']
				{'string': 's/ch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', '_', '_']
				{'string': 's/ch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					> version: s/c/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/c/h/i/p/e/_(CCCACVA)
s/c/h/i/p/e/_(CCCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/e/_(CCACVA)
s/ch/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', '_']
				{'string': 's/c/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', 'e', '_']
				{'string': 's/c/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					> version: s/c/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: s/c/h/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/_
					> version: sc/h/i/p/p/_
					> version: sch/i/p/p/_
					> version: sch/i/p/p/_
					> version: s/ch/i/p/p/_
					> version: s/ch/i/p/p/_
					> version: s/c/h/i/pp/_
					> version: s/c/h/i/pp/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/pp/_
					> version: sc/h/i/pp/_
					> version: sch/i/p/p/_
					> version: sch/i/p/p/_
					> version: sch/i/pp/_
					> version: sch/i/pp/_
					> version: s/ch/i/pp/_
					> version: s/ch/i/pp/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/p/p/_
					> version: sc/h/i/pp/_
					> version: sc/h/i/pp/_
					> version: sc/h/i/pp/_
					> version: sc/h/i/pp/_
					> version: sch/i/pp/_
					> version: sch/i/pp/_
					> version: sc/h/i/pp/_
					> version: sc/h/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/p/_/p(CCCACAC)
s/c/h/i/p/_/p(CCCACAC)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
s/c/h/i/p/p/_(CCCACCA)
s/c/h/i/p/p/_(CCCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
s/c/h/i/p/_/_/p(CCCACAAC)
s/c/h/i/p/_/_/p(CCCACAAC)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/p/p/_/_(CCACCAA)
sch/i/p/p/_/_(CACCAA)
sch/i/p/p/_/_(CACCAA)
s/ch/i/p/p/_/_(CCACCAA)
s/ch/i/p/p/_/_(CCACCAA)
s/c/h/i/pp/_/_(CCCACAA)
s/c/h/i/pp/_/_(CCCACAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/pp/_/_(CCACAA)
sc/h/i/pp/_/_(CCACAA)
sch/i/p/p/_/_(CACCAA)
sch/i/p/p/_/_(CACCAA)
sch/i/pp/_/_(CACAA)
sch/i/pp/_/_(CACAA)
s/ch/i/pp/_/_(CCACAA)
s/ch/i/pp/_/_(CCACAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/p/p/_/_(CCACCAA)
sc/h/i/pp/_/_(CCACAA)
sc/h/i/pp/_/_(CCACAA)
sc/h/i/pp/_/_(CCACAA)
sc/h/i/pp/_/_(CCACAA)
sch/i/pp/_/_(CACAA)
sch/i/pp/_/_(CACAA)
sc/h/i/pp/_/_(CCACAA)
sc/h/i/pp/_/_(CCACAA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				{'string': 's/c/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				{'string': 's/c/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				{'string': 's/c/h/i/p/_/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				{'string': 's/c/h/i/p/_/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sch', 'i', 'p', 'p', '_', '_']
				{'string': 'sch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', '_']
				version split: ['sch', 'i', 'p', 'p', '_', '_']
				{'string': 'sch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_', '_']
				{'string': 's/ch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_', '_']
				{'string': 's/ch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_', '_']
				{'string': 's/c/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'pp', '_', '_']
				{'string': 's/c/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sch', 'i', 'p', 'p', '_', '_']
				{'string': 'sch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', '_']
				version split: ['sch', 'i', 'p', 'p', '_', '_']
				{'string': 'sch/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', '_']
				version split: ['sch', 'i', 'pp', '_', '_']
				{'string': 'sch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_', '_']
				version split: ['sch', 'i', 'pp', '_', '_']
				{'string': 'sch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_', '_']
				version split: ['s', 'ch', 'i', 'pp', '_', '_']
				{'string': 's/ch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', '_']
				version split: ['s', 'ch', 'i', 'pp', '_', '_']
				{'string': 's/ch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/h/i/p/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sch', 'i', 'pp', '_', '_']
				{'string': 'sch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_', '_']
				version split: ['sch', 'i', 'pp', '_', '_']
				{'string': 'sch/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', '_']
				{'string': 'sc/h/i/pp/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', '_']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: e
					> version: s/c/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/p/p/e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: s/ch/i/p/p/e
					> version: s/ch/i/p/p/e
					> version: s/c/h/i/pp/e
					> version: s/c/h/i/pp/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					> version: s/ch/i/pp/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/p/p/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/c/h/i/p/p/_/e(CCCACCAV)
s/c/h/i/p/p/_/e(CCCACCAV)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/p/p/e/_(CCACCVA)
sch/i/p/p/e/_(CACCVA)
sch/i/p/p/e/_(CACCVA)
s/ch/i/p/p/e/_(CCACCVA)
s/ch/i/p/p/e/_(CCACCVA)
s/c/h/i/pp/e/_(CCCACVA)
s/c/h/i/pp/e/_(CCCACVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sch/i/p/p/e/_(CACCVA)
sch/i/p/p/e/_(CACCVA)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
s/ch/i/pp/e/_(CCACVA)
s/ch/i/pp/e/_(CCACVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/p/p/e/_(CCACCVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 's/c/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 's/c/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e', '_']
				{'string': 's/ch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e', '_']
				{'string': 's/ch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
				{'string': 's/c/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
				{'string': 's/c/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['s', 'ch', 'i', 'pp', 'e', '_']
				{'string': 's/ch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e', '_']
				version split: ['s', 'ch', 'i', 'pp', 'e', '_']
				{'string': 's/ch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e', '_']
				{'string': 'sc/h/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p)|(pp))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				ANALYSING: si
					resolving (32)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_/_/_
					> version: s/i/_/_/_
					> version: s/_/i/_/_/_
					> version: s/_/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_/_/_(CAAAAA)
s/i/_/_/_/_(CAAAAA)
s/_/i/_/_/_/_(CAAAAAA)
s/_/i/_/_/_/_(CAAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_', '_']
				{'string': 's/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_', '_']
				{'string': 's/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_', '_']
				{'string': 's/_/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_', '_']
				{'string': 's/_/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (16)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/p/_
					> version: s/_/i/p/_
					> version: s/i/p/_/_
					> version: s/i/p/_/_
					> version: s/_/i/_/p/_
					> version: s/_/i/_/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/p/_/_(CAACAA)
s/_/i/p/_/_(CAACAA)
s/i/p/_/_/_(CACAAA)
s/i/p/_/_/_(CACAAA)
s/_/i/_/p/_/_(CAAACAA)
s/_/i/_/p/_/_(CAAACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_', '_']
				{'string': 's/i/p/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_', '_']
				version split: ['s', 'i', 'p', '_', '_', '_']
				{'string': 's/i/p/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_', '_']
				{'string': 's/_/i/_/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', 'p', '_', '_']
				{'string': 's/_/i/_/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					> version: s/_/i/p/_/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e', '_']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/e/_(CAACVA)
s/_/i/p/e/_(CAACVA)
s/i/p/e/_/_(CACVAA)
s/i/p/e/_/_(CACVAA)
s/_/i/p/_/e/_(CAACAVA)
s/_/i/p/_/e/_(CAACAVA)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e', '_']
				{'string': 's/_/i/p/_/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e', '_']
				{'string': 's/_/i/p/_/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e', '_']
				ANALYSING: ssip
					resolving (16)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					> version: s/s/i/p/_
					> version: s/s/i/p/_
					> version: ss/i/p/_
					> version: ss/i/p/_
					> version: s/s/i/_/p/_
					> version: s/s/i/_/p/_
					> version: ss/i/p/_/_
					> version: ss/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/p/_/_(CCACAA)
s/s/i/p/_/_(CCACAA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/_/p/_/_(CCAACAA)
s/s/i/_/p/_/_(CCAACAA)
ss/i/p/_/_/_(CACAAA)
ss/i/p/_/_/_(CACAAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', '_', 'p', '_', '_']
				{'string': 's/s/i/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 's', 'i', '_', 'p', '_', '_']
				{'string': 's/s/i/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['ss', 'i', 'p', '_', '_', '_']
				{'string': 'ss/i/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_', '_']
				{'string': 'ss/i/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_', '_']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					> version: s/s/i/p/_/e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/e/_(CCACVA)
s/s/i/p/e/_(CCACVA)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/_/e/_(CCACAVA)
s/s/i/p/_/e/_(CCACAVA)
ss/i/p/e/_/_(CACVAA)
ss/i/p/e/_/_(CACVAA)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', '_', 'e', '_']
				{'string': 's/s/i/p/_/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e', '_']
				version split: ['s', 's', 'i', 'p', '_', 'e', '_']
				{'string': 's/s/i/p/_/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				ANALYSING: ssyp
					resolving (16)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					> version: s/s/y/p/_
					> version: s/s/y/p/_
					> version: ss/y/p/_
					> version: ss/y/p/_
					> version: s/s/y/_/p/_
					> version: s/s/y/_/p/_
					> version: ss/y/p/_/_
					> version: ss/y/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/p/_/_(CCACAA)
s/s/y/p/_/_(CCACAA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/_/p/_/_(CCAACAA)
s/s/y/_/p/_/_(CCAACAA)
ss/y/p/_/_/_(CACAAA)
ss/y/p/_/_/_(CACAAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', '_', 'p', '_', '_']
				{'string': 's/s/y/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 's', 'y', '_', 'p', '_', '_']
				{'string': 's/s/y/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				version split: ['ss', 'y', 'p', '_', '_', '_']
				{'string': 'ss/y/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_', '_']
				{'string': 'ss/y/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 'c', 'i', '_', 'pp', '_', '_']
		only one version left: ['s', 'c', '_', 'u', 'p', '_', '_']
		only one version left: ['s', 'h', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 'h', 'i', '_', 'pp', '_', '_']
		only one version left: ['s', 'c', 'h', 'e', 'p', 'e', '_']
		only one version left: ['s', 'c', 'h', 'i', 'p', '_', '_']
		only one version left: ['s', 'c', 'h', 'i', 'p', 'e', '_']
		only one version left: ['s', 'c', 'h', 'i', 'pp', '_', '_']
		only one version left: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
		only one version left: ['s', '_', 'i', '_', '_', '_', '_']
		only one version left: ['s', '_', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 's', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 's', 'y', '_', 'p', '_', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
		SPLIT: ['s', 'c', 'i', '_', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_', '_']
		SPLIT: ['s', 'c', 'i', '_', 'p', '_', '_']
		['s', 'c', 'i', '_', 'p', '_', '_']
		['s', 'c', 'i', '_', 'p', '_', '_']
		SPLIT: ['sc.s', 'c', 'i', 'e', '_', 'e', '_', '----!']
		SPLIT: ['s', 'c', 'i', '_', 'pp', '_', '_']
		['s', 'c', 'i', '_', 'pp', '_', '_']
		['s', 'c', 'i', '_', 'pp', '_', '_']
		SPLIT: ['s', 'c', '_', 'u', 'p', '_', '_']
		['s', 'c', '_', 'u', 'p', '_', '_']
		['s', 'c', '_', 'u', 'p', '_', '_']
		SPLIT: ['s', 'h', 'i', '_', 'p', '_', '_']
		['s', 'h', 'i', '_', 'p', '_', '_']
		['s', 'h', 'i', '_', 'p', '_', '_']
		SPLIT: ['sh.s', 'h', 'i', 'e', '_', 'e', '_', '----!']
		SPLIT: ['s', 'h', 'i', '_', 'pp', '_', '_']
		['s', 'h', 'i', '_', 'pp', '_', '_']
		['s', 'h', 'i', '_', 'pp', '_', '_']
		SPLIT: ['s', 'c', 'h', 'e', 'p', 'e', '_']
		['s', 'c', 'h', 'e', 'p', 'e', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', '_', '_']
		['s', 'c', 'h', 'i', 'p', '_', '_']
		['s', 'c', 'h', 'i', 'p', '_', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'e', '_']
		['s', 'c', 'h', 'i', 'p', 'e', '_']
		['s', 'c', 'h', 'i', 'p', 'e', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'pp', '_', '_']
		['s', 'c', 'h', 'i', 'pp', '_', '_']
		['s', 'c', 'h', 'i', 'pp', '_', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'pp', 'e', '_']
		['s', 'c', 'h', 'i', 'pp', 'e', '_']
		['s', 'c', 'h', 'i', 'pp', 'e', '_']
		SPLIT: ['s', '_', 'i', '_', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_', '_']
		SPLIT: ['s', '_', 'i', '_', 'p', '_', '_']
		['s', '_', 'i', '_', 'p', '_', '_']
		['s', '_', 'i', '_', 'p', '_', '_']
		SPLIT: ['s', '_', 'i', 'e', '_', 'e', '_', '----!']
		SPLIT: ['s', 's', 'i', '_', 'p', '_', '_']
		['s', 's', 'i', '_', 'p', '_', '_']
		['s', 's', 'i', '_', 'p', '_', '_']
		SPLIT: ['ss.s', 's', 'i', 'e', '_', 'e', '_', '----!']
		SPLIT: ['s', 's', 'y', '_', 'p', '_', '_']
		['s', 's', 'y', '_', 'p', '_', '_']
		['s', 's', 'y', '_', 'p', '_', '_']
		version for pattern CCCVCVC is INVALID
		[]
		4
		OVERVIEW: version for pattern CCCVCVC

faulty splits: 4
sc.sciee----! <-! scipe
sh.shiee----! <-! shipe
siee----! <-! sipe
ss.ssiee----! <-! ssipe
s | c | h | i | p | e | n
s | c | i | _ | _ | _ | _
s | c | i | _ | p | _ | _
sc.s | c | i | e | _ | e | _ | ----!
s | c | i | _ | pp | _ | _
s | c | _ | u | p | _ | _
s | h | i | _ | p | _ | _
sh.s | h | i | e | _ | e | _ | ----!
s | h | i | _ | pp | _ | _
s | c | h | e | p | e | _
s | c | h | i | p | _ | _
s | c | h | i | p | e | _
s | c | h | i | pp | _ | _
s | c | h | i | pp | e | _
s | _ | i | _ | _ | _ | _
s | _ | i | _ | p | _ | _
s | _ | i | e | _ | e | _ | ----!
s | s | i | _ | p | _ | _
ss.s | s | i | e | _ | e | _ | ----!
s | s | y | _ | p | _ | _
1 : {'h', 'i', 'c', 'ch'},{'i', '_', 'ch', 'c', 'h'}
2 : {'h', 'i', 'p'},{'h', 'i', 'u'}
6 : {'p', '_', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCVCCV : 1___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					> version: sc/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					RESULT:  ['i', 'c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, c
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> i, _, cu, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['s', '_', 'cu', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/_/c/h/i/p(CACCAC)
s/_/c/h/i/p(CACCAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
s/_/ch/i/p(CACAC)
s/_/ch/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/e/n
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/e/n
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/e/n
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				s/c/h/i/p/e/n(CCCCCVC)
s/c/h/i/p/e/n(CCCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
s/ch/i/p/e/n(CCCCVC)
s/ch/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
s/_/c/h/i/p/e/n(CACCACVC)
s/_/c/h/i/p/e/n(CACCACVC)
sc/_/h/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
sch/_/i/p/e/n(CAACVC)
sch/_/i/p/e/n(CAACVC)
s/_/ch/i/p/e/n(CACACVC)
s/_/ch/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
sch/_/i/p/e/n(CAACVC)
sch/_/i/p/e/n(CAACVC)
sc/_/h/i/p/e/n(CACACVC)
sc/_/h/i/p/e/n(CACACVC)
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/c/h/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/pp
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/pp
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/_/c/h/i/p/p(CACCACC)
s/_/c/h/i/p/p(CACCACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
s/_/ch/i/p/p(CACACC)
s/_/ch/i/p/p(CACACC)
s/_/c/h/i/pp(CACCAC)
s/_/c/h/i/pp(CACCAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
s/_/ch/i/pp(CACAC)
s/_/ch/i/pp(CACAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, i, _, c, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, i, _, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
			___CCVCCV : 2___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					> version: s/_/c/i/p
					TRYING: c
					> version: s/_/c/i/p
					TRYING: c
					> version: sc/_/i/p
					TRYING: i
					> version: sc/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					> version: s/_/c/i/p/e
					TRYING: c
					> version: s/_/c/i/p/e
					TRYING: c
					> version: sc/_/i/p/e
					TRYING: i
					> version: sc/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					> version: sc/i/pp
					TRYING: pp
					> version: s/_/c/i/p/p
					TRYING: c
					> version: s/_/c/i/p/p
					TRYING: c
					> version: sc/_/i/p/p
					TRYING: i
					> version: sc/_/i/p/p
					TRYING: i
					> version: s/_/c/i/pp
					TRYING: c
					> version: s/_/c/i/pp
					TRYING: c
					> version: sc/_/i/pp
					TRYING: i
					> version: sc/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: u
					> version: s/c/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/_/c/u/p
					TRYING: c
					> version: s/_/c/u/p
					TRYING: c
					> version: sc/_/u/p
					TRYING: u
					> version: sc/_/u/p
					TRYING: u
					> version: s/_/cu/p
					TRYING: cu
					> version: sc/_/u/p
					TRYING: u
					> version: sc/_/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					> version: s/_/h/i/p
					TRYING: h
					> version: s/_/h/i/p
					TRYING: h
					> version: sh/_/i/p
					TRYING: i
					> version: sh/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					> version: s/_/h/i/p/e
					TRYING: h
					> version: s/_/h/i/p/e
					TRYING: h
					> version: sh/_/i/p/e
					TRYING: i
					> version: sh/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					> version: sh/i/pp
					TRYING: pp
					> version: s/_/h/i/p/p
					TRYING: h
					> version: s/_/h/i/p/p
					TRYING: h
					> version: sh/_/i/p/p
					TRYING: i
					> version: sh/_/i/p/p
					TRYING: i
					> version: s/_/h/i/pp
					TRYING: h
					> version: s/_/h/i/pp
					TRYING: h
					> version: sh/_/i/pp
					TRYING: i
					> version: sh/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: c
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: ch
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: s/_/c/h/i/p
					TRYING: c
					> version: s/_/c/h/i/p
					TRYING: c
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sch/_/i/p
					TRYING: i
					> version: sch/_/i/p
					TRYING: i
					> version: s/_/ch/i/p
					TRYING: ch
					> version: s/_/ch/i/p
					TRYING: ch
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sch/_/i/p
					TRYING: i
					> version: sch/_/i/p
					TRYING: i
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: s/_/c/h/i/p/e
					TRYING: c
					> version: s/_/c/h/i/p/e
					TRYING: c
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sch/_/i/p/e
					TRYING: i
					> version: sch/_/i/p/e
					TRYING: i
					> version: s/_/ch/i/p/e
					TRYING: ch
					> version: s/_/ch/i/p/e
					TRYING: ch
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sch/_/i/p/e
					TRYING: i
					> version: sch/_/i/p/e
					TRYING: i
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (32)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: s/_/c/h/i/p/e/n
					TRYING: c
					> version: s/_/c/h/i/p/e/n
					TRYING: c
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sch/_/i/p/e/n
					TRYING: i
					> version: sch/_/i/p/e/n
					TRYING: i
					> version: s/_/ch/i/p/e/n
					TRYING: ch
					> version: s/_/ch/i/p/e/n
					TRYING: ch
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sch/_/i/p/e/n
					TRYING: i
					> version: sch/_/i/p/e/n
					TRYING: i
					> version: sc/_/h/i/p/e/n
					TRYING: h
					> version: sc/_/h/i/p/e/n
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: h
					> version: s/c/h/i/pp
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: s/_/c/h/i/p/p
					TRYING: c
					> version: s/_/c/h/i/p/p
					TRYING: c
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/p/p
					TRYING: i
					> version: s/_/ch/i/p/p
					TRYING: ch
					> version: s/_/ch/i/p/p
					TRYING: ch
					> version: s/_/c/h/i/pp
					TRYING: c
					> version: s/_/c/h/i/pp
					TRYING: c
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: s/_/ch/i/pp
					TRYING: ch
					> version: s/_/ch/i/pp
					TRYING: ch
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sch/_/i/pp
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					> version: s/_/s/i/p
					TRYING: s
					> version: s/_/s/i/p
					TRYING: s
					> version: ss/_/i/p
					TRYING: i
					> version: ss/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					> version: s/_/s/i/p/e
					TRYING: s
					> version: s/_/s/i/p/e
					TRYING: s
					> version: ss/_/i/p/e
					TRYING: i
					> version: ss/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					> version: s/_/s/y/p
					TRYING: s
					> version: s/_/s/y/p
					TRYING: s
					> version: ss/_/y/p
					TRYING: y
					> version: ss/_/y/p
					TRYING: y
					RESULT:  ['y']
			___CCVCCV : 3___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/_/i/p
					TRYING: p
					> version: sc/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					> version: s/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/_/i/p/e
					TRYING: p
					> version: sc/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: s/_/cu/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/_/i/p
					TRYING: p
					> version: sh/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					> version: s/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/_/i/p/e
					TRYING: p
					> version: sh/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: s/_/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: s/_/ch/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: s/_/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/_/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p
					TRYING: p
					> version: sch/_/i/p
					TRYING: p
					> version: s/_/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p
					TRYING: p
					> version: sch/_/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: s/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: p
					> version: s/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (32)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: s/_/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/_/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e/n
					TRYING: p
					> version: sch/_/i/p/e/n
					TRYING: p
					> version: s/_/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e/n
					TRYING: p
					> version: sch/_/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/_/i/p
					TRYING: p
					> version: ss/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					> version: s/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/_/i/p/e
					TRYING: p
					> version: ss/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/_/y/p
					TRYING: p
					> version: ss/_/y/p
					TRYING: p
					RESULT:  ['p']
			___CCVCCV : 4___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: p
					> version: s/_/c/i/p
					TRYING: p
					> version: sc/_/i/p
					> version: sc/_/i/p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/_/c/i/p/e
					TRYING: p
					> version: s/_/c/i/p/e
					TRYING: p
					> version: sc/_/i/p/e
					TRYING: e
					> version: sc/_/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: p
					> version: s/_/c/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					TRYING: p
					> version: s/_/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: p
					> version: s/_/c/u/p
					TRYING: p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/_/cu/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: p
					> version: s/_/h/i/p
					TRYING: p
					> version: sh/_/i/p
					> version: sh/_/i/p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/_/h/i/p/e
					TRYING: p
					> version: s/_/h/i/p/e
					TRYING: p
					> version: sh/_/i/p/e
					TRYING: e
					> version: sh/_/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: p
					> version: s/_/h/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					TRYING: p
					> version: s/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/_/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: s/_/ch/i/p
					TRYING: p
					> version: s/_/ch/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: s/_/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					TRYING: e
					> version: s/_/ch/i/p/e
					TRYING: p
					> version: s/_/ch/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (32)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: s/_/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sch/_/i/p/e/n
					TRYING: e
					> version: sch/_/i/p/e/n
					TRYING: e
					> version: s/_/ch/i/p/e/n
					TRYING: p
					> version: s/_/ch/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sch/_/i/p/e/n
					TRYING: e
					> version: sch/_/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: p
					> version: s/_/s/i/p
					TRYING: p
					> version: ss/_/i/p
					> version: ss/_/i/p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/_/s/i/p/e
					TRYING: p
					> version: s/_/s/i/p/e
					TRYING: p
					> version: ss/_/i/p/e
					TRYING: e
					> version: ss/_/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: p
					> version: s/_/s/y/p
					TRYING: p
					> version: ss/_/y/p
					> version: ss/_/y/p
					RESULT:  ['p']
			___CCVCCV : 5___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					> version: s/_/c/i/p
					> version: sc/_/i/p
					> version: sc/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/_/c/i/p/_(CACACA)
s/_/c/i/p/_(CACACA)
sc/_/i/p/_(CAACA)
sc/_/i/p/_(CAACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_']
				{'string': 's/_/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_']
				{'string': 's/_/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/_/c/i/p/e
					TRYING: e
					> version: s/_/c/i/p/e
					TRYING: e
					> version: sc/_/i/p/e
					> version: sc/_/i/p/e
					RESULT:  ['e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: p
					> version: s/_/c/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					> version: sc/_/i/p/p
					> version: s/_/c/i/pp
					> version: s/_/c/i/pp
					> version: sc/_/i/pp
					> version: sc/_/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/_/c/i/p/_/p(CACACAC)
s/_/c/i/p/_/p(CACACAC)
sc/_/i/p/p/_(CAACCA)
sc/_/i/p/p/_(CAACCA)
s/_/c/i/pp/_(CACACA)
s/_/c/i/pp/_(CACACA)
sc/_/i/pp/_(CAACA)
sc/_/i/pp/_(CAACA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'p']
				{'string': 's/_/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'p']
				{'string': 's/_/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'i', 'p', 'p', '_']
				{'string': 'sc/_/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sc', '_', 'i', 'p', 'p', '_']
				{'string': 'sc/_/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', '_', 'c', 'i', 'pp', '_']
				{'string': 's/_/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', 'pp', '_']
				{'string': 's/_/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					> version: s/_/c/u/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/_/cu/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'cu', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/_/c/u/p/_(CACACA)
s/_/c/u/p/_(CACACA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/_/cu/p/_(CACCA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', '_', 'cu', 'p']
				{'string': 's/_/cu/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', 'p', '_']
				{'string': 's/_/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', 'p', '_']
				{'string': 's/_/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', '_', 'cu', 'p', '_']
				{'string': 's/_/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					> version: s/_/h/i/p
					> version: sh/_/i/p
					> version: sh/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/_/h/i/p/_(CACACA)
s/_/h/i/p/_(CACACA)
sh/_/i/p/_(CAACA)
sh/_/i/p/_(CAACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_']
				{'string': 's/_/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_']
				{'string': 's/_/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/_/h/i/p/e
					TRYING: e
					> version: s/_/h/i/p/e
					TRYING: e
					> version: sh/_/i/p/e
					> version: sh/_/i/p/e
					RESULT:  ['e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: p
					> version: s/_/h/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					> version: sh/_/i/p/p
					> version: s/_/h/i/pp
					> version: s/_/h/i/pp
					> version: sh/_/i/pp
					> version: sh/_/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/_/h/i/p/_/p(CACACAC)
s/_/h/i/p/_/p(CACACAC)
sh/_/i/p/p/_(CAACCA)
sh/_/i/p/p/_(CAACCA)
s/_/h/i/pp/_(CACACA)
s/_/h/i/pp/_(CACACA)
sh/_/i/pp/_(CAACA)
sh/_/i/pp/_(CAACA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 's/_/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 's/_/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', '_', 'i', 'p', 'p', '_']
				{'string': 'sh/_/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sh', '_', 'i', 'p', 'p', '_']
				{'string': 'sh/_/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', '_', 'h', 'i', 'pp', '_']
				{'string': 's/_/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', 'pp', '_']
				{'string': 's/_/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					> version: s/_/c/h/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					> version: s/_/ch/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					> version: sc/_/h/e/p/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/_/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['s', '_', 'ch', 'e', 'p', 'e']
				{'string': 's/_/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/_/c/h/i/p
					TRYING: p
					> version: s/_/c/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: s/_/ch/i/p
					> version: s/_/ch/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/_/c/h/i/p(CACCAC)
s/_/c/h/i/p(CACCAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
s/_/ch/i/p(CACAC)
s/_/ch/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/_/c/h/i/_/p(CACCAAC)
s/_/c/h/i/_/p(CACCAAC)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sch/_/i/p/_(CAACA)
sch/_/i/p/_(CAACA)
s/_/ch/i/p/_(CACACA)
s/_/ch/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sch/_/i/p/_(CAACA)
sch/_/i/p/_(CAACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['s', '_', 'ch', 'i', 'p']
				{'string': 's/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p']
				version split: ['s', '_', 'ch', 'i', 'p']
				{'string': 's/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['s', '_', 'ch', 'i', 'p', '_']
				{'string': 's/_/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_']
				version split: ['s', '_', 'ch', 'i', 'p', '_']
				{'string': 's/_/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: e
					> version: s/c/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: s/_/c/h/i/p/e
					TRYING: p
					> version: s/_/c/h/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					> version: sch/_/i/p/e
					> version: s/_/ch/i/p/e
					TRYING: e
					> version: s/_/ch/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					> version: sch/_/i/p/e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				ANALYSING: schipen
					resolving (32)
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: s/ch/i/p/e/n
					TRYING: n
					> version: s/ch/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: s/_/c/h/i/p/e/n
					TRYING: p
					> version: s/_/c/h/i/p/e/n
					TRYING: p
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sch/_/i/p/e/n
					TRYING: n
					> version: sch/_/i/p/e/n
					TRYING: n
					> version: s/_/ch/i/p/e/n
					TRYING: e
					> version: s/_/ch/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sch/_/i/p/e/n
					TRYING: n
					> version: sch/_/i/p/e/n
					TRYING: n
					> version: sc/_/h/i/p/e/n
					TRYING: e
					> version: sc/_/h/i/p/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', '_', 'i', 'p', 'e', 'n']
				{'string': 'sch/_/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e', 'n']
				version split: ['sch', '_', 'i', 'p', 'e', 'n']
				{'string': 'sch/_/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e', 'n']
				version split: ['s', '_', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/_/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', '_', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/_/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', '_', 'i', 'p', 'e', 'n']
				{'string': 'sch/_/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e', 'n']
				version split: ['sch', '_', 'i', 'p', 'e', 'n']
				{'string': 'sch/_/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', '_', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/_/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: s/_/c/h/i/p/p
					TRYING: p
					> version: s/_/c/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sch/_/i/p/p
					> version: sch/_/i/p/p
					> version: s/_/ch/i/p/p
					TRYING: p
					> version: s/_/ch/i/p/p
					TRYING: p
					> version: s/_/c/h/i/pp
					TRYING: pp
					> version: s/_/c/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sch/_/i/p/p
					> version: sch/_/i/p/p
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: s/_/ch/i/pp
					> version: s/_/ch/i/pp
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/_/c/h/i/p/p(CACCACC)
s/_/c/h/i/p/p(CACCACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
s/_/ch/i/p/p(CACACC)
s/_/ch/i/p/p(CACACC)
s/_/c/h/i/pp(CACCAC)
s/_/c/h/i/pp(CACCAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
s/_/ch/i/pp(CACAC)
s/_/ch/i/pp(CACAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
s/c/h/i/p/_/p(CCCACAC)
s/c/h/i/p/_/p(CCCACAC)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
s/_/c/h/i/_/p/p(CACCAACC)
s/_/c/h/i/_/p/p(CACCAACC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sch/_/i/p/p/_(CAACCA)
sch/_/i/p/p/_(CAACCA)
s/_/ch/i/p/_/p(CACACAC)
s/_/ch/i/p/_/p(CACACAC)
s/_/c/h/i/_/pp(CACCAAC)
s/_/c/h/i/_/pp(CACCAAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sch/_/i/p/p/_(CAACCA)
sch/_/i/p/p/_(CAACCA)
sch/_/i/pp/_(CAACA)
sch/_/i/pp/_(CAACA)
s/_/ch/i/pp/_(CACACA)
s/_/ch/i/pp/_(CACACA)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sch/_/i/pp/_(CAACA)
sch/_/i/pp/_(CAACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', 'p']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', 'p']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'pp']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', 'pp']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['s', '_', 'ch', 'i', 'pp']
				{'string': 's/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp']
				version split: ['s', '_', 'ch', 'i', 'pp']
				{'string': 's/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['s', '_', 'ch', 'i', 'pp', '_']
				{'string': 's/_/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_']
				version split: ['s', '_', 'ch', 'i', 'pp', '_']
				{'string': 's/_/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/p/_
					> version: s/_/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/p/_/_(CAACAA)
s/_/i/p/_/_(CAACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					TRYING: e
					> version: s/_/i/p/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((p))/((_))/((e))$'}
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					> version: s/_/s/i/p
					> version: ss/_/i/p
					> version: ss/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/_/s/i/p/_(CACACA)
s/_/s/i/p/_(CACACA)
ss/_/i/p/_(CAACA)
ss/_/i/p/_(CAACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', 'p', '_']
				{'string': 's/_/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', 'p', '_']
				{'string': 's/_/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/_/s/i/p/e
					TRYING: e
					> version: s/_/s/i/p/e
					TRYING: e
					> version: ss/_/i/p/e
					> version: ss/_/i/p/e
					RESULT:  ['e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					> version: s/_/s/y/p
					> version: ss/_/y/p
					> version: ss/_/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/_/s/y/p/_(CACACA)
s/_/s/y/p/_(CACACA)
ss/_/y/p/_(CAACA)
ss/_/y/p/_(CAACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', 'p', '_']
				{'string': 's/_/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', 'p', '_']
				{'string': 's/_/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
		only one version left: ['s', 'c', 'i', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['sc', '_', 'i', 'p', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sh', '_', 'i', 'p', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sch', '_', 'i', 'p', 'p', '_']
		only one version left: ['s', '_', 'i', '_', '_', '_']
		only one version left: ['s', '_', 'i', 'p', '_', '_']
		only one version left: ['s', '_', 'i', 'p', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'h', 'i', 'p', 'p', 'e']
		SPLIT: ['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		SPLIT: ['sc.s', '_', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sc.s', '_', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sc', '_', 'i', 'p', 'p', '_']
		['sc', '_', 'i', 'p', 'p', '_']
		['sc', '_', 'i', 'p', 'p', '_']
		SPLIT: ['sc.s', '_', 'u', 'p', 'p', '_', '----!']
		SPLIT: ['sh.s', '_', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sh.s', '_', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sh', '_', 'i', 'p', 'p', '_']
		['sh', '_', 'i', 'p', 'p', '_']
		['sh', '_', 'i', 'p', 'p', '_']
		SPLIT: ['sch.sc.s', '_', 'e', 'p', 'p', 'e', '----!']
		SPLIT: ['sch.sc.s', '_', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sch.sc.s', '_', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sch.sc.s', '_', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sch', '_', 'i', 'p', 'p', '_']
		['sch', '_', 'i', 'p', 'p', '_']
		['sch', '_', 'i', 'p', 'p', '_']
		['sch', '_', 'i', 'p', 'p', '_']
		['sch', '_', 'i', 'p', 'p', '_']
		SPLIT: ['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', '_', '_']
		['s', '_', 'i', 'p', '_', '_']
		['s', '_', 'i', 'p', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', '_', 'e']
		['s', '_', 'i', 'p', '_', 'e']
		['s', '_', 'i', 'p', '_', 'e']
		SPLIT: ['ss.s', '_', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['ss.s', '_', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['ss.s', '_', 'y', 'p', 'p', '_', '----!']
		version for pattern CCVCCV is INVALID
		[{'h', 'i', '_', 'c'}]
		12
		OVERVIEW: version for pattern CCVCCV
{'h', 'i', '_', 'c'}
faulty splits: 12
sc.sipp----! <-! scip
sc.sippe----! <-! scipe
sc.supp----! <-! scup
sh.sipp----! <-! ship
sh.sippe----! <-! shipe
sch.sc.seppe----! <-! schepe
sch.sc.sipp----! <-! schip
sch.sc.sippe----! <-! schipe
sch.sc.sippe----! <-! schipen
ss.sipp----! <-! ssip
ss.sippe----! <-! ssipe
ss.sypp----! <-! ssyp
sc | h | i | p | p | e
s | c | i | _ | _ | _
sc.s | _ | i | p | p | _ | ----!
sc.s | _ | i | p | p | e | ----!
sc | _ | i | p | p | _
sc.s | _ | u | p | p | _ | ----!
sh.s | _ | i | p | p | _ | ----!
sh.s | _ | i | p | p | e | ----!
sh | _ | i | p | p | _
sch.sc.s | _ | e | p | p | e | ----!
sch.sc.s | _ | i | p | p | _ | ----!
sch.sc.s | _ | i | p | p | e | ----!
sch.sc.s | _ | i | p | p | e | ----!
sch | _ | i | p | p | _
s | _ | i | _ | _ | _
s | _ | i | p | _ | _
s | _ | i | p | _ | e
ss.s | _ | i | p | p | _ | ----!
ss.s | _ | i | p | p | e | ----!
ss.s | _ | y | p | p | _ | ----!
1 : {'y', 'i', '_', 'c', 'h'},{'h', 'i', '_', 'c'},{'u', 'i', '_', 'c', 'h'},{'h', 'i', 'c'},{'i', '_', 'ch', 'c', 'h'},{'i', '_', 'c', 's', 'h'},{'i', '_', 'cu', 'c', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CVCCV : 1___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					> version: sc/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: i
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					> version: s/cu/p
					TRYING: cu
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: i
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					> version: sc/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: ch
					> version: s/ch/i/p
					TRYING: ch
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: ch
					> version: s/ch/i/p/e
					TRYING: ch
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/c/h/i/pp
					TRYING: c
					> version: s/c/h/i/pp
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: ch
					> version: s/ch/i/pp
					TRYING: ch
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					> version: s/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					> version: s/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					> version: s/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: y
					RESULT:  ['y']
			___CVCCV : 2___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (2)
					> version: s/i
					> version: s/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['p']
			___CVCCV : 3___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: s/c/_/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/_/_/i(CCAAA)
s/c/_/_/i(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					> version: s/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/i/p/_/e(CACAV)
s/i/p/_/e(CACAV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['p']
			___CVCCV : 4___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					> version: s/c/_/i
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/_/_/i
					TRYING: i
					> version: s/c/_/_/i
					TRYING: i
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', '_', '_', 'i']
				{'string': 's/c/_/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', '_', 'i']
				version split: ['s', 'c', '_', '_', 'i']
				{'string': 's/c/_/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', '_', 'i']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/_/p(CCCAAC)
s/c/h/i/_/p(CCCAAC)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					TRYING: n
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					> version: s/c/h/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/_/p/p(CCCAACC)
s/c/h/i/_/p/p(CCCAACC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/_/p(CCACAC)
s/ch/i/p/_/p(CCACAC)
s/c/h/i/_/pp(CCCAAC)
s/c/h/i/_/pp(CCCAAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((i))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/i/p/_/e
					TRYING: e
					> version: s/i/p/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', '_', 'e']
				{'string': 's/i/p/_/e', 'rgx': '((s))/((i))/((p))/((_))/((e))$'}
				version split: ['s', 'i', 'p', '_', 'e']
				{'string': 's/i/p/_/e', 'rgx': '((s))/((i))/((p))/((_))/((e))$'}
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sc', 'i', 'p', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sh', 'i', 'p', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sch', 'i', 'p', 'p', '_']
		only one version left: ['s', 'i', '_', '_', '_']
		only one version left: ['s', 'i', 'p', '_', '_']
		only one version left: ['s', 'i', 'p', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sch', 'i', 'p', 'p', 'e']
		SPLIT: ['sc.s', 'i', '_', '_', 'i', '----!']
		SPLIT: ['sc.s', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sc.s', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sc', 'i', 'p', 'p', '_']
		['sc', 'i', 'p', 'p', '_']
		['sc', 'i', 'p', 'p', '_']
		SPLIT: ['sc.s', 'u', 'p', 'p', '_', '----!']
		SPLIT: ['sh.s', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sh.s', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sh', 'i', 'p', 'p', '_']
		['sh', 'i', 'p', 'p', '_']
		['sh', 'i', 'p', 'p', '_']
		SPLIT: ['sch.sc.s', 'e', 'p', 'p', 'e', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['sch', 'i', 'p', 'p', '_']
		['sch', 'i', 'p', 'p', '_']
		['sch', 'i', 'p', 'p', '_']
		['sch', 'i', 'p', 'p', '_']
		['sch', 'i', 'p', 'p', '_']
		SPLIT: ['s', 'i', '_', '_', '_']
		['s', 'i', '_', '_', '_']
		['s', 'i', '_', '_', '_']
		SPLIT: ['s', 'i', 'p', '_', '_']
		['s', 'i', 'p', '_', '_']
		['s', 'i', 'p', '_', '_']
		SPLIT: ['s', 'i', 'p', '_', 'e']
		['s', 'i', 'p', '_', 'e']
		['s', 'i', 'p', '_', 'e']
		SPLIT: ['ss.s', 'i', 'p', 'p', '_', '----!']
		SPLIT: ['ss.s', 'i', 'p', 'p', 'e', '----!']
		SPLIT: ['ss.s', 'y', 'p', 'p', '_', '----!']
		version for pattern CVCCV is INVALID
		[]
		13
		OVERVIEW: version for pattern CVCCV

faulty splits: 13
sc.sii----! <-! sci
sc.sipp----! <-! scip
sc.sippe----! <-! scipe
sc.supp----! <-! scup
sh.sipp----! <-! ship
sh.sippe----! <-! shipe
sch.sc.seppe----! <-! schepe
sch.sc.sipp----! <-! schip
sch.sc.sippe----! <-! schipe
sch.sc.sippe----! <-! schipen
ss.sipp----! <-! ssip
ss.sippe----! <-! ssipe
ss.sypp----! <-! ssyp
sch | i | p | p | e
sc.s | i | _ | _ | i | ----!
sc.s | i | p | p | _ | ----!
sc.s | i | p | p | e | ----!
sc | i | p | p | _
sc.s | u | p | p | _ | ----!
sh.s | i | p | p | _ | ----!
sh.s | i | p | p | e | ----!
sh | i | p | p | _
sch.sc.s | e | p | p | e | ----!
sch.sc.s | i | p | p | _ | ----!
sch.sc.s | i | p | p | e | ----!
sch.sc.s | i | p | p | e | ----!
sch | i | p | p | _
s | i | _ | _ | _
s | i | p | _ | _
s | i | p | _ | e
ss.s | i | p | p | _ | ----!
ss.s | i | p | p | e | ----!
ss.s | y | p | p | _ | ----!
2 : {'p', 'i'}
3 : {'p', 'i'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCVCV : 1___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['c']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c, s
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c, s
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> h, cu, c, s
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c, s
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> h, u, c, s
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['h']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					RESULT:  ['h']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, s
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, ch, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCVCV : 2___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					> version: sc/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					> version: s/c/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					> version: sh/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: h
					> version: s/c/h/i/pp
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['y']
			___CCVCV : 3___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['p']
			___CCVCV : 4___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/_/p(CCCAAC)
s/c/h/i/_/p(CCCAAC)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((_))$'}
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					TRYING: n
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					> version: s/c/h/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/_/p/p(CCCAACC)
s/c/h/i/_/p/p(CCCAACC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/_/p(CCACAC)
s/ch/i/p/_/p(CCACAC)
s/c/h/i/_/pp(CCCAAC)
s/c/h/i/_/pp(CCCAAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/_/p(CCACAC)
sc/h/i/p/_/p(CCACAC)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['s', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((i))/((p)|(pp))/((_))$'}
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))$'}
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))$'}
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))$'}
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))$'}
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
		only one version left: ['s', 'c', 'i', '_', '_']
		only one version left: ['s', 'c', 'i', 'p', '_']
		only one version left: ['s', 'c', 'i', 'pp', '_']
		only one version left: ['s', 'c', 'u', 'p', '_']
		only one version left: ['s', 'h', 'i', 'p', '_']
		only one version left: ['s', 'h', 'i', 'pp', '_']
		FAIL: sc/h/i/p/_, sc/h/i/p/_, s/ch/i/p/_, s/ch/i/p/_, sc/h/i/p/_, sc/h/i/p/_, sc/h/i/p/_, sc/h/i/p/_, sc/h/i/p/_, sc/h/i/p/_
		FAIL: 
		FAIL: sc/h/i/pp/_, sc/h/i/pp/_, s/ch/i/pp/_, s/ch/i/pp/_, sc/h/i/pp/_, sc/h/i/pp/_, sc/h/i/pp/_, sc/h/i/pp/_, sc/h/i/pp/_, sc/h/i/pp/_
		only one version left: ['s', '_', 'i', '_', '_']
		only one version left: ['s', '_', 'i', 'p', '_']
		only one version left: ['s', '_', 'i', 'p', 'e']
		only one version left: ['s', 's', 'i', 'p', '_']
		only one version left: ['s', 's', 'y', 'p', '_']
		SPLIT: ['s', 'c', 'i', 'p', 'e']
		SPLIT: ['s', 'h', 'i', 'p', 'e']
		SPLIT: ['sc', 'h', 'e', 'p', 'e']
		SPLIT: ['sc', 'h', 'i', 'p', 'e']
		SPLIT: ['sc', 'h', 'i', 'pp', 'e']
		SPLIT: ['s', 's', 'i', 'p', 'e']
		SPLIT: ['s', 'c', 'i', '_', '_']
		['s', 'c', 'i', '_', '_']
		['s', 'c', 'i', '_', '_']
		SPLIT: ['s', 'c', 'i', 'p', '_']
		['s', 'c', 'i', 'p', '_']
		['s', 'c', 'i', 'p', '_']
		SPLIT: ['s', 'c', 'i', 'pp', '_']
		['s', 'c', 'i', 'pp', '_']
		['s', 'c', 'i', 'pp', '_']
		SPLIT: ['s', 'c', 'u', 'p', '_']
		['s', 'c', 'u', 'p', '_']
		['s', 'c', 'u', 'p', '_']
		SPLIT: ['s', 'h', 'i', 'p', '_']
		['s', 'h', 'i', 'p', '_']
		['s', 'h', 'i', 'p', '_']
		SPLIT: ['s', 'h', 'i', 'pp', '_']
		['s', 'h', 'i', 'pp', '_']
		['s', 'h', 'i', 'pp', '_']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', '_', '----!']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['s', 'ch', 'i', 'p', '_']
		['s', 'ch', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		['sc', 'h', 'i', 'p', '_']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p', 'e', '----!']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'i', 'p.pp', '_', '----!']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['s', 'ch', 'i', 'pp', '_']
		['s', 'ch', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		['sc', 'h', 'i', 'pp', '_']
		SPLIT: ['s', '_', 'i', '_', '_']
		['s', '_', 'i', '_', '_']
		['s', '_', 'i', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', '_']
		['s', '_', 'i', 'p', '_']
		['s', '_', 'i', 'p', '_']
		SPLIT: ['s', '_', 'i', 'p', 'e']
		['s', '_', 'i', 'p', 'e']
		['s', '_', 'i', 'p', 'e']
		SPLIT: ['s', 's', 'i', 'p', '_']
		['s', 's', 'i', 'p', '_']
		['s', 's', 'i', 'p', '_']
		SPLIT: ['s', 's', 'y', 'p', '_']
		['s', 's', 'y', 'p', '_']
		['s', 's', 'y', 'p', '_']
		version for pattern CCVCV is INVALID
		[]
		3
		OVERVIEW: version for pattern CCVCV

faulty splits: 3
sch.sc.sh.c.chip----! <-! schip
sch.sc.sh.c.chipe----! <-! schipen
sch.sc.sh.c.chip.pp----! <-! schipp
s | c | i | p | e
s | h | i | p | e
sc | h | e | p | e
sc | h | i | p | e
sc | h | i | pp | e
s | s | i | p | e
s | c | i | _ | _
s | c | i | p | _
s | c | i | pp | _
s | c | u | p | _
s | h | i | p | _
s | h | i | pp | _
sch.sc.s | h.c.ch | i | p | _ | ----!
sch.sc.s | h.c.ch | i | p | e | ----!
sch.sc.s | h.c.ch | i | p.pp | _ | ----!
s | _ | i | _ | _
s | _ | i | p | _
s | _ | i | p | e
s | s | i | p | _
s | s | y | p | _
1 : {'ch', '_', 'i', 'c', 's', 'h'},{'i', 'ch', 'c', 's', 'h'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CVCC : 1___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					> version: sc/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					> version: s/cu/p
					TRYING: cu
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					> version: sc/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: h
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: ch
					> version: s/ch/i/p
					TRYING: ch
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: ch
					> version: s/ch/i/p/e
					TRYING: ch
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					> version: sch/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: s/c/h/i/p/p/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: i
					> version: s/ch/i/p/p/e
					TRYING: ch
					> version: s/ch/i/p/p/e
					TRYING: ch
					> version: s/c/h/i/pp/e
					TRYING: c
					> version: s/c/h/i/pp/e
					TRYING: c
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: s/ch/i/pp/e
					TRYING: ch
					> version: s/ch/i/pp/e
					TRYING: ch
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sch/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: h
					> version: sc/h/i/pp/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					> version: s/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					> version: s/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					> version: s/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: y
					RESULT:  ['y']
			___CVCC : 2___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					RESULT:  ['p']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (2)
					> version: s/i
					> version: s/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['p']
			___CVCC : 3___
				ANALYSING: scipp
				adding littera based on matching pattern
				ANALYSING: shipp
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: s/c/_/i
					TRYING: i
					adding blocked set: C = C >> p, i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/_/_/i(CCAAA)
s/c/_/_/i(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', '_', '_', 'i']
				{'string': 's/c/_/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'i']
				version split: ['s', 'c', '_', '_', 'i']
				{'string': 's/c/_/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'i']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i))/((_))/((_))$'}
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'i', 'p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((p))$'}
				_____REMOVING________['sc', 'u', 'p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sh', 'i', 'p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					RESULT:  ['p']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((p)|(pp))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					> version: s/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/i/p/_/e(CACAV)
s/i/p/_/e(CACAV)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', '_', 'e']
				{'string': 's/i/p/_/e', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', 'e']
				version split: ['s', 'i', 'p', '_', 'e']
				{'string': 's/i/p/_/e', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', 'e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['ss', 'i', 'p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['p']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((i))/((p))/((p))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((p))$'}
				_____REMOVING________['ss', 'y', 'p']
		only one version left: ['sc', 'i', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'i', '_', '_']
		only one version left: ['s', 'i', 'p', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'i', 'p', 'p']
		SPLIT: ['sh', 'i', 'p', 'p']
		SPLIT: ['sch', 'i', 'p', 'p']
		SPLIT: ['sc', 'i', '_', '_']
		['sc', 'i', '_', '_']
		['sc', 'i', '_', '_']
		SPLIT: ['sc.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sc.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sc.s', 'u', 'p', 'p', '----!']
		SPLIT: ['sh.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sh.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'e', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'p', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p.pp', 'p.pp', '----!']
		SPLIT: ['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		SPLIT: ['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		SPLIT: ['s', 'i', 'p', '_', '----!']
		SPLIT: ['ss.s', 'i', 'p', 'p', '----!']
		SPLIT: ['ss.s', 'i', 'p', 'p', '----!']
		SPLIT: ['ss.s', 'y', 'p', 'p', '----!']
		version for pattern CVCC is INVALID
		[]
		14
		OVERVIEW: version for pattern CVCC

faulty splits: 14
sc.sipp----! <-! scip
sc.sipp----! <-! scipe
sc.supp----! <-! scup
sh.sipp----! <-! ship
sh.sipp----! <-! shipe
sch.sc.sepp----! <-! schepe
sch.sc.sipp----! <-! schip
sch.sc.sipp----! <-! schipe
sch.sc.sipp----! <-! schipen
sch.sc.sip.ppp.pp----! <-! schippe
sip----! <-! sipe
ss.sipp----! <-! ssip
ss.sipp----! <-! ssipe
ss.sypp----! <-! ssyp
sc | i | p | p
sh | i | p | p
sch | i | p | p
sc | i | _ | _
sc.s | i | p | p | ----!
sc.s | i | p | p | ----!
sc.s | u | p | p | ----!
sh.s | i | p | p | ----!
sh.s | i | p | p | ----!
sch.sc.s | e | p | p | ----!
sch.sc.s | i | p | p | ----!
sch.sc.s | i | p | p | ----!
sch.sc.s | i | p | p | ----!
sch.sc.s | i | p.pp | p.pp | ----!
s | i | _ | _
s | i | p | _
s | i | p | _ | ----!
ss.s | i | p | p | ----!
ss.s | i | p | p | ----!
ss.s | y | p | p | ----!
2 : {'p', 'i'}
3 : {'p', 'i'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCV : 1___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					> version: sc/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: i
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> i, cu
					> version: sc/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sh/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sh/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: i
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sh/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					adding blocked set: C = C >> i, u, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					adding blocked set: C = C >> i, u, ch
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, h, u
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, h, u
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: ch
					> version: s/ch/i/p
					TRYING: ch
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					> version: sch/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: s/ch/i/p/e/n
					TRYING: ch
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sch/i/p/e/n
					TRYING: i
					> version: sch/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/ch/i/p/p
					TRYING: ch
					> version: s/c/h/i/pp
					TRYING: c
					> version: s/c/h/i/pp
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: ch
					> version: s/ch/i/pp
					TRYING: ch
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					> version: sch/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: h
					> version: sc/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					> version: s/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					> version: s/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: y
					RESULT:  ['y']
			___CCCV : 2___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, pp
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, pp
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/e/n
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (2)
					> version: s/i
					> version: s/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					RESULT:  ['p']
			___CCCV : 3___
				ANALYSING: scipe
				adding littera based on matching pattern
				ANALYSING: shipe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sipe
				adding littera based on matching pattern
				ANALYSING: ssipe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/_/i
					TRYING: i
					> version: s/c/_/i
					TRYING: i
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i))/((_))/((i))$'}
				_____REMOVING________['sc', 'i', '_']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((i))/((p))/((_))$'}
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((i))/((p)|(pp))/((_))$'}
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['s', 'c', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/u/_/p(CCAAC)
s/c/u/_/p(CCAAC)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['s', 'c', 'u', '_', 'p']
				{'string': 's/c/u/_/p', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', '_', 'p']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((u))/((p))/((_))$'}
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((i))/((p))/((_))$'}
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((i))/((p)|(pp))/((_))$'}
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((i))/((p))/((i)|(e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((i))/((p)|(pp))/((i))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/i/_
					> version: s/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((i))/((_))/((_))$'}
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					> version: s/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/i/p/_(CACA)
s/i/p/_(CACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((i))/((p))/((_))$'}
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((i))/((p))/((_))$'}
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((y))/((p))/((_))$'}
		FAIL: 
		only one version left: ['sc', 'i', 'p', '_']
		only one version left: ['sc', 'i', 'pp', '_']
		only one version left: ['sc', 'u', 'p', '_']
		only one version left: ['sh', 'i', 'p', '_']
		only one version left: ['sh', 'i', 'pp', '_']
		only one version left: ['sch', 'e', 'p', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'i', '_', '_']
		only one version left: ['s', 'i', 'p', '_']
		only one version left: ['ss', 'i', 'p', '_']
		only one version left: ['ss', 'y', 'p', '_']
		SPLIT: ['sc', 'i', 'p', 'e']
		SPLIT: ['sh', 'i', 'p', 'e']
		SPLIT: ['sch', 'i', 'p', 'e']
		SPLIT: ['sch', 'i', 'pp', 'e']
		SPLIT: ['s', 'i', 'p', 'e']
		SPLIT: ['ss', 'i', 'p', 'e']
		SPLIT: ['sc.s', 'i', '_', 'i', '----!']
		SPLIT: ['sc', 'i', 'p', '_']
		['sc', 'i', 'p', '_']
		['sc', 'i', 'p', '_']
		SPLIT: ['sc', 'i', 'pp', '_']
		['sc', 'i', 'pp', '_']
		['sc', 'i', 'pp', '_']
		SPLIT: ['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		['sc', 'u', 'p', '_']
		SPLIT: ['sh', 'i', 'p', '_']
		['sh', 'i', 'p', '_']
		['sh', 'i', 'p', '_']
		SPLIT: ['sh', 'i', 'pp', '_']
		['sh', 'i', 'pp', '_']
		['sh', 'i', 'pp', '_']
		SPLIT: ['sch', 'e', 'p', 'e']
		['sch', 'e', 'p', 'e']
		['sch', 'e', 'p', 'e']
		SPLIT: ['sch.sc.s', 'i', 'p', 'i', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p', 'i.e', '----!']
		SPLIT: ['sch.sc.s', 'i', 'p.pp', 'i', '----!']
		SPLIT: ['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		['s', 'i', '_', '_']
		SPLIT: ['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		['s', 'i', 'p', '_']
		SPLIT: ['ss', 'i', 'p', '_']
		['ss', 'i', 'p', '_']
		['ss', 'i', 'p', '_']
		SPLIT: ['ss', 'y', 'p', '_']
		['ss', 'y', 'p', '_']
		['ss', 'y', 'p', '_']
		version for pattern CCCV is INVALID
		[]
		4
		OVERVIEW: version for pattern CCCV

faulty splits: 4
sc.sii----! <-! sci
sch.sc.sipi----! <-! schip
sch.sc.sipi.e----! <-! schipen
sch.sc.sip.ppi----! <-! schipp
sc | i | p | e
sh | i | p | e
sch | i | p | e
sch | i | pp | e
s | i | p | e
ss | i | p | e
sc.s | i | _ | i | ----!
sc | i | p | _
sc | i | pp | _
sc | u | p | _
sh | i | p | _
sh | i | pp | _
sch | e | p | e
sch.sc.s | i | p | i | ----!
sch.sc.s | i | p | i.e | ----!
sch.sc.s | i | p.pp | i | ----!
s | i | _ | _
s | i | p | _
ss | i | p | _
ss | y | p | _
2 : {'p', 'i', 'pp'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCVCVC
	Selection for pattern: CCVCVC completed
	Making a version for pattern: CCVCVC
			___CCVCVC : 0___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCVCVC : 1___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					> version: sc/i
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'c'}
					RESULT:  ['i', 'c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, c
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> i, _, cu, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, i, _, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['s', '_', 'cu', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/_/c/h/i/p(CACCAC)
s/_/c/h/i/p(CACCAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
s/_/ch/i/p(CACAC)
s/_/ch/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/p
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/c/h/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/pp
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/pp
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/pp
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sch', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/_/c/h/i/p/p(CACCACC)
s/_/c/h/i/p/p(CACCACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
s/_/ch/i/p/p(CACACC)
s/_/ch/i/p/p(CACACC)
s/_/c/h/i/pp(CACCAC)
s/_/c/h/i/pp(CACCAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
s/_/ch/i/pp(CACAC)
s/_/ch/i/pp(CACAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: s/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> i, _, ch, c, h
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/_/c/h/i/p/p/e(CACCACCV)
s/_/c/h/i/p/p/e(CACCACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/c/h/i/pp/e(CACCACV)
s/_/c/h/i/pp/e(CACCACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
s/_/ch/i/pp/e(CACACV)
s/_/ch/i/pp/e(CACACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, i, _, c, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, i, _, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
			___CCVCVC : 2___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					> version: sc/i/p
					TRYING: p
					> version: s/_/c/i/p
					TRYING: c
					> version: s/_/c/i/p
					TRYING: c
					> version: sc/_/i/p
					TRYING: i
					> version: sc/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: p
					> version: s/_/c/i/p/e
					TRYING: c
					> version: s/_/c/i/p/e
					TRYING: c
					> version: sc/_/i/p/e
					TRYING: i
					> version: sc/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					> version: sc/i/pp
					TRYING: pp
					> version: s/_/c/i/p/p
					TRYING: c
					> version: s/_/c/i/p/p
					TRYING: c
					> version: sc/_/i/p/p
					TRYING: i
					> version: sc/_/i/p/p
					TRYING: i
					> version: s/_/c/i/pp
					TRYING: c
					> version: s/_/c/i/pp
					TRYING: c
					> version: sc/_/i/pp
					TRYING: i
					> version: sc/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: u
					> version: s/c/u/p
					TRYING: u
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/cu/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: sc/u/p
					TRYING: p
					> version: s/_/c/u/p
					TRYING: c
					> version: s/_/c/u/p
					TRYING: c
					> version: sc/_/u/p
					TRYING: u
					> version: sc/_/u/p
					TRYING: u
					> version: s/_/cu/p
					TRYING: cu
					> version: sc/_/u/p
					TRYING: u
					> version: sc/_/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					> version: sh/i/p
					TRYING: p
					> version: s/_/h/i/p
					TRYING: h
					> version: s/_/h/i/p
					TRYING: h
					> version: sh/_/i/p
					TRYING: i
					> version: sh/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: p
					> version: s/_/h/i/p/e
					TRYING: h
					> version: s/_/h/i/p/e
					TRYING: h
					> version: sh/_/i/p/e
					TRYING: i
					> version: sh/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					> version: sh/i/pp
					TRYING: pp
					> version: s/_/h/i/p/p
					TRYING: h
					> version: s/_/h/i/p/p
					TRYING: h
					> version: sh/_/i/p/p
					TRYING: i
					> version: sh/_/i/p/p
					TRYING: i
					> version: s/_/h/i/pp
					TRYING: h
					> version: s/_/h/i/pp
					TRYING: h
					> version: sh/_/i/pp
					TRYING: i
					> version: sh/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: c
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: ch
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sc/_/h/e/p/e
					TRYING: h
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: i
					> version: s/ch/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: sch/i/p
					TRYING: p
					> version: sch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: i
					> version: s/_/c/h/i/p
					TRYING: c
					> version: s/_/c/h/i/p
					TRYING: c
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sch/_/i/p
					TRYING: i
					> version: sch/_/i/p
					TRYING: i
					> version: s/_/ch/i/p
					TRYING: ch
					> version: s/_/ch/i/p
					TRYING: ch
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					> version: sch/_/i/p
					TRYING: i
					> version: sch/_/i/p
					TRYING: i
					> version: sc/_/h/i/p
					TRYING: h
					> version: sc/_/h/i/p
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: i
					> version: s/ch/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: sch/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: i
					> version: s/_/c/h/i/p/e
					TRYING: c
					> version: s/_/c/h/i/p/e
					TRYING: c
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sch/_/i/p/e
					TRYING: i
					> version: sch/_/i/p/e
					TRYING: i
					> version: s/_/ch/i/p/e
					TRYING: ch
					> version: s/_/ch/i/p/e
					TRYING: ch
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sch/_/i/p/e
					TRYING: i
					> version: sch/_/i/p/e
					TRYING: i
					> version: sc/_/h/i/p/e
					TRYING: h
					> version: sc/_/h/i/p/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/ch/i/p/p
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: h
					> version: s/c/h/i/pp
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: i
					> version: s/ch/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: sch/i/pp
					TRYING: pp
					> version: sch/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: i
					> version: sc/h/i/pp
					TRYING: i
					> version: s/_/c/h/i/p/p
					TRYING: c
					> version: s/_/c/h/i/p/p
					TRYING: c
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/p/p
					TRYING: i
					> version: s/_/ch/i/p/p
					TRYING: ch
					> version: s/_/ch/i/p/p
					TRYING: ch
					> version: s/_/c/h/i/pp
					TRYING: c
					> version: s/_/c/h/i/pp
					TRYING: c
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/p/p
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: s/_/ch/i/pp
					TRYING: ch
					> version: s/_/ch/i/pp
					TRYING: ch
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/p/p
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sch/_/i/pp
					TRYING: i
					> version: sch/_/i/pp
					TRYING: i
					> version: sc/_/h/i/pp
					TRYING: h
					> version: sc/_/h/i/pp
					TRYING: h
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (64)
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: s/c/h/i/p/p/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/ch/i/p/p/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: s/c/h/i/pp/e
					TRYING: h
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: s/ch/i/pp/e
					TRYING: i
					> version: s/ch/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sch/i/pp/e
					TRYING: pp
					> version: sch/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: i
					> version: sc/h/i/pp/e
					TRYING: i
					> version: s/_/c/h/i/p/p/e
					TRYING: c
					> version: s/_/c/h/i/p/p/e
					TRYING: c
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sch/_/i/p/p/e
					TRYING: i
					> version: sch/_/i/p/p/e
					TRYING: i
					> version: s/_/ch/i/p/p/e
					TRYING: ch
					> version: s/_/ch/i/p/p/e
					TRYING: ch
					> version: s/_/c/h/i/pp/e
					TRYING: c
					> version: s/_/c/h/i/pp/e
					TRYING: c
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sch/_/i/p/p/e
					TRYING: i
					> version: sch/_/i/p/p/e
					TRYING: i
					> version: sch/_/i/pp/e
					TRYING: i
					> version: sch/_/i/pp/e
					TRYING: i
					> version: s/_/ch/i/pp/e
					TRYING: ch
					> version: s/_/ch/i/pp/e
					TRYING: ch
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/p/p/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sch/_/i/pp/e
					TRYING: i
					> version: sch/_/i/pp/e
					TRYING: i
					> version: sc/_/h/i/pp/e
					TRYING: h
					> version: sc/_/h/i/pp/e
					TRYING: h
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					> version: s/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					> version: s/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					> version: ss/i/p
					TRYING: p
					> version: s/_/s/i/p
					TRYING: s
					> version: s/_/s/i/p
					TRYING: s
					> version: ss/_/i/p
					TRYING: i
					> version: ss/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: p
					> version: s/_/s/i/p/e
					TRYING: s
					> version: s/_/s/i/p/e
					TRYING: s
					> version: ss/_/i/p/e
					TRYING: i
					> version: ss/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					> version: ss/y/p
					TRYING: p
					> version: s/_/s/y/p
					TRYING: s
					> version: s/_/s/y/p
					TRYING: s
					> version: ss/_/y/p
					TRYING: y
					> version: ss/_/y/p
					TRYING: y
					RESULT:  ['y']
			___CCVCVC : 3___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/_/i/p
					TRYING: p
					> version: sc/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					> version: s/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: s/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i
					> version: sc/_/i/p/e
					TRYING: p
					> version: sc/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: s/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, _, u, pp
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: s/_/cu/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/_/i/p
					TRYING: p
					> version: sh/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					> version: s/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sh/_/i/p/e
					TRYING: p
					> version: sh/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: s/_/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: s/_/ch/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: s/_/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/_/c/h/i/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p
					TRYING: p
					> version: sch/_/i/p
					TRYING: p
					> version: s/_/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/ch/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p
					TRYING: p
					> version: sch/_/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: p
					> version: s/ch/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					> version: sch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: s/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: s/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: p
					> version: s/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sch/_/i/p/e
					TRYING: p
					> version: sch/_/i/p/e
					TRYING: p
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schippe
					resolving (64)
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, _, h, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/_/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/_/i/p
					TRYING: p
					> version: ss/_/i/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					> version: s/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: s/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, _, i, pp
					> version: ss/_/i/p/e
					TRYING: p
					> version: ss/_/i/p/e
					TRYING: p
					RESULT:  ['p']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: s/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, _, y, pp
					> version: ss/_/y/p
					TRYING: p
					> version: ss/_/y/p
					TRYING: p
					RESULT:  ['p']
			___CCVCVC : 4___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: p
					> version: s/_/c/i/p
					TRYING: p
					> version: sc/_/i/p
					> version: sc/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/_/c/i/_/p(CACAAC)
s/_/c/i/_/p(CACAAC)
sc/_/i/p/_(CAACA)
sc/_/i/p/_(CAACA)
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/_/c/i/p/e
					TRYING: p
					> version: s/_/c/i/p/e
					TRYING: p
					> version: sc/_/i/p/e
					TRYING: e
					> version: sc/_/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: p
					> version: s/_/c/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					TRYING: p
					> version: s/_/c/i/pp
					TRYING: pp
					> version: s/_/c/i/pp
					TRYING: pp
					> version: sc/_/i/pp
					> version: sc/_/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/_/c/i/_/p/p(CACAACC)
s/_/c/i/_/p/p(CACAACC)
sc/_/i/p/_/p(CAACAC)
sc/_/i/p/_/p(CAACAC)
s/_/c/i/_/pp(CACAAC)
s/_/c/i/_/pp(CACAAC)
sc/_/i/pp/_(CAACA)
sc/_/i/pp/_(CAACA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: p
					> version: s/_/c/u/p
					TRYING: p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/_/cu/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'cu', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/_/c/u/_/p(CACAAC)
s/_/c/u/_/p(CACAAC)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/_/cu/p/_(CACCA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: p
					> version: s/_/h/i/p
					TRYING: p
					> version: sh/_/i/p
					> version: sh/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/_/h/i/_/p(CACAAC)
s/_/h/i/_/p(CACAAC)
sh/_/i/p/_(CAACA)
sh/_/i/p/_(CAACA)
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/_/h/i/p/e
					TRYING: p
					> version: s/_/h/i/p/e
					TRYING: p
					> version: sh/_/i/p/e
					TRYING: e
					> version: sh/_/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: p
					> version: s/_/h/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					TRYING: p
					> version: s/_/h/i/pp
					TRYING: pp
					> version: s/_/h/i/pp
					TRYING: pp
					> version: sh/_/i/pp
					> version: sh/_/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/_/h/i/_/p/p(CACAACC)
s/_/h/i/_/p/p(CACAACC)
sh/_/i/p/_/p(CAACAC)
sh/_/i/p/_/p(CAACAC)
s/_/h/i/_/pp(CACAAC)
s/_/h/i/_/pp(CACAAC)
sh/_/i/pp/_(CAACA)
sh/_/i/pp/_(CAACA)
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: p
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/_/c/h/i/p
					TRYING: i
					> version: s/_/c/h/i/p
					TRYING: i
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: s/_/ch/i/p
					TRYING: p
					> version: s/_/ch/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: sc/_/h/i/p
					TRYING: p
					> version: sc/_/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: s/_/c/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					> version: s/c/h/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: s/_/c/h/i/p/p
					TRYING: i
					> version: s/_/c/h/i/p/p
					TRYING: i
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sch/_/i/p/p
					TRYING: p
					> version: sch/_/i/p/p
					TRYING: p
					> version: s/_/ch/i/p/p
					TRYING: p
					> version: s/_/ch/i/p/p
					TRYING: p
					> version: s/_/c/h/i/pp
					TRYING: i
					> version: s/_/c/h/i/pp
					TRYING: i
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sch/_/i/p/p
					TRYING: p
					> version: sch/_/i/p/p
					TRYING: p
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: s/_/ch/i/pp
					TRYING: pp
					> version: s/_/ch/i/pp
					TRYING: pp
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/p/p
					TRYING: p
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: sc/_/h/i/pp
					TRYING: pp
					> version: sc/_/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: schippe
					resolving (64)
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: s/c/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: pp
					> version: s/c/h/i/pp/e
					TRYING: pp
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: s/_/c/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: p
					> version: s/_/s/i/p
					TRYING: p
					> version: ss/_/i/p
					> version: ss/_/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/_/s/i/_/p(CACAAC)
s/_/s/i/_/p(CACAAC)
ss/_/i/p/_(CAACA)
ss/_/i/p/_(CAACA)
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/_/s/i/p/e
					TRYING: p
					> version: s/_/s/i/p/e
					TRYING: p
					> version: ss/_/i/p/e
					TRYING: e
					> version: ss/_/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: p
					> version: s/_/s/y/p
					TRYING: p
					> version: ss/_/y/p
					> version: ss/_/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/_/s/y/_/p(CACAAC)
s/_/s/y/_/p(CACAAC)
ss/_/y/p/_(CAACA)
ss/_/y/p/_(CAACA)
			___CCVCVC : 5___
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((i)|(c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				ANALYSING: scip
					resolving (16)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					> version: s/_/c/i/p
					> version: sc/_/i/p
					> version: sc/_/i/p
					> version: s/c/i/p/_
					> version: s/c/i/p/_
					> version: sc/i/p/_
					> version: sc/i/p/_
					> version: s/_/c/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/i/p/_
					> version: sc/_/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/_/c/i/_/p(CACAAC)
s/_/c/i/_/p(CACAAC)
sc/_/i/p/_(CAACA)
sc/_/i/p/_(CAACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/_/c/i/p/_(CACACA)
s/_/c/i/p/_(CACACA)
sc/_/i/p/_(CAACA)
sc/_/i/p/_(CAACA)
s/c/i/p/_/_(CCACAA)
s/c/i/p/_/_(CCACAA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/_/c/i/_/_/p(CACAAAC)
s/_/c/i/_/_/p(CACAAAC)
sc/_/i/p/_/_(CAACAA)
sc/_/i/p/_/_(CAACAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', '_', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_']
				{'string': 's/_/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_']
				{'string': 's/_/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', '_', 'c', 'i', '_', '_', 'p']
				{'string': 's/_/c/i/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', '_', 'p']
				{'string': 's/_/c/i/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_', '_']
				{'string': 'sc/_/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				version split: ['sc', '_', 'i', 'p', '_', '_']
				{'string': 'sc/_/i/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/_/c/i/p/e
					TRYING: e
					> version: s/_/c/i/p/e
					TRYING: e
					> version: sc/_/i/p/e
					> version: sc/_/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
s/c/i/p/e/_(CCACVA)
s/c/i/p/e/_(CCACVA)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/_/c/i/p/_/e(CACACAV)
s/_/c/i/p/_/e(CACACAV)
sc/_/i/p/e/_(CAACVA)
sc/_/i/p/e/_(CAACVA)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'e']
				{'string': 's/_/c/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'e']
				{'string': 's/_/c/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'i', 'p', 'e', '_']
				{'string': 'sc/_/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				version split: ['sc', '_', 'i', 'p', 'e', '_']
				{'string': 'sc/_/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				ANALYSING: scipp
					resolving (32)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/i/p/p
					> version: sc/_/i/p/p
					> version: s/_/c/i/pp
					> version: s/_/c/i/pp
					> version: sc/_/i/pp
					> version: sc/_/i/pp
					> version: s/c/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/i/p/p/_
					> version: sc/i/p/p/_
					> version: s/c/i/pp/_
					> version: s/c/i/pp/_
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					> version: s/_/c/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/_/c/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/_/i/pp/_
					> version: sc/_/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', '_', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/_/c/i/_/p/p(CACAACC)
s/_/c/i/_/p/p(CACAACC)
sc/_/i/p/_/p(CAACAC)
sc/_/i/p/_/p(CAACAC)
s/_/c/i/_/pp(CACAAC)
s/_/c/i/_/pp(CACAAC)
sc/_/i/pp/_(CAACA)
sc/_/i/pp/_(CAACA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/_/c/i/p/_/p(CACACAC)
s/_/c/i/p/_/p(CACACAC)
sc/_/i/p/p/_(CAACCA)
sc/_/i/p/p/_(CAACCA)
s/_/c/i/pp/_(CACACA)
s/_/c/i/pp/_(CACACA)
sc/_/i/pp/_(CAACA)
sc/_/i/pp/_(CAACA)
s/c/i/p/_/_/p(CCACAAC)
s/c/i/p/_/_/p(CCACAAC)
sc/i/p/p/_/_(CACCAA)
sc/i/p/p/_/_(CACCAA)
s/c/i/pp/_/_(CCACAA)
s/c/i/pp/_/_(CCACAA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
s/_/c/i/_/_/p/p(CACAAACC)
s/_/c/i/_/_/p/p(CACAAACC)
sc/_/i/p/_/_/p(CAACAAC)
sc/_/i/p/_/_/p(CAACAAC)
s/_/c/i/_/_/pp(CACAAAC)
s/_/c/i/_/_/pp(CACAAAC)
sc/_/i/pp/_/_(CAACAA)
sc/_/i/pp/_/_(CAACAA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'p']
				{'string': 's/_/c/i/_/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'p']
				{'string': 's/_/c/i/_/p/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', '_', 'p']
				{'string': 'sc/_/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_', 'p']
				{'string': 'sc/_/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'pp']
				{'string': 's/_/c/i/_/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'pp']
				version split: ['s', '_', 'c', 'i', '_', 'pp']
				{'string': 's/_/c/i/_/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'pp']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'p']
				{'string': 's/_/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'i', 'p', '_', 'p']
				{'string': 's/_/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'i', 'p', 'p', '_']
				{'string': 'sc/_/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p', '_']
				version split: ['sc', '_', 'i', 'p', 'p', '_']
				{'string': 'sc/_/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p', '_']
				version split: ['s', '_', 'c', 'i', 'pp', '_']
				{'string': 's/_/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', 'pp', '_']
				{'string': 's/_/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'p']
				{'string': 's/c/i/p/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'p']
				{'string': 's/c/i/p/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/i/p/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_', '_']
				version split: ['sc', 'i', 'p', 'p', '_', '_']
				{'string': 'sc/i/p/p/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'pp', '_', '_']
				{'string': 's/c/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_', '_']
				version split: ['s', 'c', 'i', 'pp', '_', '_']
				{'string': 's/c/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				{'string': 's/_/c/i/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				version split: ['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				{'string': 's/_/c/i/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', '_', '_', 'p']
				{'string': 'sc/_/i/p/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_', '_', 'p']
				{'string': 'sc/_/i/p/_/_/p', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', '_', 'pp']
				{'string': 's/_/c/i/_/_/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'pp']
				version split: ['s', '_', 'c', 'i', '_', '_', 'pp']
				{'string': 's/_/c/i/_/_/pp', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', '_', 'pp']
				version split: ['sc', '_', 'i', 'pp', '_', '_']
				{'string': 'sc/_/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['sc', '_', 'i', 'pp', '_', '_']
				{'string': 'sc/_/i/pp/_/_', 'rgx': '((sc)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				ANALYSING: scup
					resolving (28)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					> version: s/_/c/u/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/_/cu/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/c/u/p/_
					> version: s/c/u/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/cu/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/_/c/u/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/u/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/u/p/_
					> version: sc/_/u/p/_
					> version: s/_/cu/p/_
					> version: sc/_/u/p/_
					> version: sc/_/u/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'cu', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', '_', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'cu', 'p', '_', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/_/c/u/_/p(CACAAC)
s/_/c/u/_/p(CACAAC)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/_/cu/p/_(CACCA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/_/c/u/p/_(CACACA)
s/_/c/u/p/_(CACACA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/_/cu/p/_(CACCA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/c/u/p/_/_(CCACAA)
s/c/u/p/_/_(CCACAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/cu/p/_/_(CCCAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/_/c/u/_/_/p(CACAAAC)
s/_/c/u/_/_/p(CACAAAC)
sc/_/u/p/_/_(CAACAA)
sc/_/u/p/_/_(CAACAA)
s/_/cu/p/_/_(CACCAA)
sc/_/u/p/_/_(CAACAA)
sc/_/u/p/_/_(CAACAA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', '_', 'cu', 'p']
				{'string': 's/_/cu/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', '_', 'p']
				{'string': 's/_/c/u/_/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', 'p']
				version split: ['s', '_', 'c', 'u', '_', 'p']
				{'string': 's/_/c/u/_/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', 'p']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', '_', 'cu', 'p', '_']
				{'string': 's/_/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', 'p', '_']
				{'string': 's/_/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', 'p', '_']
				{'string': 's/_/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', '_', 'cu', 'p', '_']
				{'string': 's/_/cu/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', 'cu', 'p', '_', '_']
				{'string': 's/cu/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', '_', 'c', 'u', '_', '_', 'p']
				{'string': 's/_/c/u/_/_/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', '_', 'p']
				version split: ['s', '_', 'c', 'u', '_', '_', 'p']
				{'string': 's/_/c/u/_/_/p', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', '_', 'p']
				version split: ['sc', '_', 'u', 'p', '_', '_']
				{'string': 'sc/_/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', '_', 'u', 'p', '_', '_']
				{'string': 'sc/_/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['s', '_', 'cu', 'p', '_', '_']
				{'string': 's/_/cu/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p', '_', '_']
				version split: ['sc', '_', 'u', 'p', '_', '_']
				{'string': 'sc/_/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', '_', 'u', 'p', '_', '_']
				{'string': 'sc/_/u/p/_/_', 'rgx': '((sc)|(s))/((_))/((u))/((p))/((_))/((_))$'}
				ANALYSING: ship
					resolving (16)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					> version: s/_/h/i/p
					> version: sh/_/i/p
					> version: sh/_/i/p
					> version: s/h/i/p/_
					> version: s/h/i/p/_
					> version: sh/i/p/_
					> version: sh/i/p/_
					> version: s/_/h/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/h/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/_/i/p/_
					> version: sh/_/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/_/h/i/_/p(CACAAC)
s/_/h/i/_/p(CACAAC)
sh/_/i/p/_(CAACA)
sh/_/i/p/_(CAACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/_/h/i/p/_(CACACA)
s/_/h/i/p/_(CACACA)
sh/_/i/p/_(CAACA)
sh/_/i/p/_(CAACA)
s/h/i/p/_/_(CCACAA)
s/h/i/p/_/_(CCACAA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/_/h/i/_/_/p(CACAAAC)
s/_/h/i/_/_/p(CACAAAC)
sh/_/i/p/_/_(CAACAA)
sh/_/i/p/_/_(CAACAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', '_', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_']
				{'string': 's/_/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_']
				{'string': 's/_/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', '_', 'h', 'i', '_', '_', 'p']
				{'string': 's/_/h/i/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', '_', 'p']
				{'string': 's/_/h/i/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_', '_']
				{'string': 'sh/_/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				version split: ['sh', '_', 'i', 'p', '_', '_']
				{'string': 'sh/_/i/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/_/h/i/p/e
					TRYING: e
					> version: s/_/h/i/p/e
					TRYING: e
					> version: sh/_/i/p/e
					> version: sh/_/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
s/h/i/p/e/_(CCACVA)
s/h/i/p/e/_(CCACVA)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/_/h/i/p/_/e(CACACAV)
s/_/h/i/p/_/e(CACACAV)
sh/_/i/p/e/_(CAACVA)
sh/_/i/p/e/_(CAACVA)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 's/_/h/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 's/_/h/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', '_', 'i', 'p', 'e', '_']
				{'string': 'sh/_/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				version split: ['sh', '_', 'i', 'p', 'e', '_']
				{'string': 'sh/_/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				ANALYSING: shipp
					resolving (32)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/_/i/p/p
					> version: sh/_/i/p/p
					> version: s/_/h/i/pp
					> version: s/_/h/i/pp
					> version: sh/_/i/pp
					> version: sh/_/i/pp
					> version: s/h/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/h/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/i/p/p/_
					> version: sh/i/p/p/_
					> version: s/h/i/pp/_
					> version: s/h/i/pp/_
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					> version: s/_/h/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/h/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/_/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sh/_/i/p/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/h/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/_/h/i/_/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sh/_/i/pp/_
					> version: sh/_/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', '_', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/_/h/i/_/p/p(CACAACC)
s/_/h/i/_/p/p(CACAACC)
sh/_/i/p/_/p(CAACAC)
sh/_/i/p/_/p(CAACAC)
s/_/h/i/_/pp(CACAAC)
s/_/h/i/_/pp(CACAAC)
sh/_/i/pp/_(CAACA)
sh/_/i/pp/_(CAACA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/_/h/i/p/_/p(CACACAC)
s/_/h/i/p/_/p(CACACAC)
sh/_/i/p/p/_(CAACCA)
sh/_/i/p/p/_(CAACCA)
s/_/h/i/pp/_(CACACA)
s/_/h/i/pp/_(CACACA)
sh/_/i/pp/_(CAACA)
sh/_/i/pp/_(CAACA)
s/h/i/p/_/_/p(CCACAAC)
s/h/i/p/_/_/p(CCACAAC)
sh/i/p/p/_/_(CACCAA)
sh/i/p/p/_/_(CACCAA)
s/h/i/pp/_/_(CCACAA)
s/h/i/pp/_/_(CCACAA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
s/_/h/i/_/_/p/p(CACAAACC)
s/_/h/i/_/_/p/p(CACAAACC)
sh/_/i/p/_/_/p(CAACAAC)
sh/_/i/p/_/_/p(CAACAAC)
s/_/h/i/_/_/pp(CACAAAC)
s/_/h/i/_/_/pp(CACAAAC)
sh/_/i/pp/_/_(CAACAA)
sh/_/i/pp/_/_(CAACAA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/h/i/_/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/h/i/_/p/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', '_', 'p']
				{'string': 'sh/_/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_', 'p']
				{'string': 'sh/_/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'pp']
				{'string': 's/_/h/i/_/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'pp']
				version split: ['s', '_', 'h', 'i', '_', 'pp']
				{'string': 's/_/h/i/_/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'pp']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 's/_/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 's/_/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', '_', 'i', 'p', 'p', '_']
				{'string': 'sh/_/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p', '_']
				version split: ['sh', '_', 'i', 'p', 'p', '_']
				{'string': 'sh/_/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p', '_']
				version split: ['s', '_', 'h', 'i', 'pp', '_']
				{'string': 's/_/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', 'pp', '_']
				{'string': 's/_/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'p']
				{'string': 's/h/i/p/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'p']
				{'string': 's/h/i/p/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_', '_']
				{'string': 'sh/i/p/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_', '_']
				version split: ['sh', 'i', 'p', 'p', '_', '_']
				{'string': 'sh/i/p/p/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'pp', '_', '_']
				{'string': 's/h/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_', '_']
				version split: ['s', 'h', 'i', 'pp', '_', '_']
				{'string': 's/h/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				{'string': 's/_/h/i/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				version split: ['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				{'string': 's/_/h/i/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', '_', '_', 'p']
				{'string': 'sh/_/i/p/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_', '_', 'p']
				{'string': 'sh/_/i/p/_/_/p', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', '_', 'pp']
				{'string': 's/_/h/i/_/_/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'pp']
				version split: ['s', '_', 'h', 'i', '_', '_', 'pp']
				{'string': 's/_/h/i/_/_/pp', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', '_', 'pp']
				version split: ['sh', '_', 'i', 'pp', '_', '_']
				{'string': 'sh/_/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				version split: ['sh', '_', 'i', 'pp', '_', '_']
				{'string': 'sh/_/i/pp/_/_', 'rgx': '((sh)|(s))/((_))/((i))/((p)|(pp))/((_))/((_))$'}
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					> version: s/_/c/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					> version: s/_/ch/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					> version: sc/_/h/e/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
s/c/h/e/p/_/e(CCCVCAV)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
s/ch/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
sc/h/e/p/e/_(CCVCVA)
s/_/c/h/e/_/p/e(CACCVACV)
sc/_/h/e/p/_/e(CACVCAV)
sch/_/e/p/e/_(CAVCVA)
s/_/ch/e/p/_/e(CACVCAV)
sc/_/h/e/p/_/e(CACVCAV)
sc/_/h/e/p/_/e(CACVCAV)
sch/_/e/p/e/_(CAVCVA)
sc/_/h/e/p/_/e(CACVCAV)
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/_/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['s', '_', 'ch', 'e', 'p', 'e']
				{'string': 's/_/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				{'string': 's/c/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['s', 'ch', 'e', 'p', 'e', '_']
				{'string': 's/ch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['s', '_', 'c', 'h', 'e', '_', 'p', 'e']
				{'string': 's/_/c/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/_/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', '_', 'e', 'p', 'e', '_']
				{'string': 'sch/_/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'p', '_', 'e']
				{'string': 's/_/ch/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/_/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/_/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', '_', 'e', 'p', 'e', '_']
				{'string': 'sch/_/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/_/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((e))/((p))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', '_', 'e']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/_/c/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: s/_/ch/i/p
					> version: s/_/ch/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					> version: sch/_/i/p
					> version: sch/_/i/p
					> version: sc/_/h/i/p
					> version: sc/_/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/_/c/h/i/p(CACCAC)
s/_/c/h/i/p(CACCAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
s/_/ch/i/p(CACAC)
s/_/ch/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
sch/_/i/p(CAAC)
sch/_/i/p(CAAC)
sc/_/h/i/p(CACAC)
sc/_/h/i/p(CACAC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/_/c/h/i/_/p(CACCAAC)
s/_/c/h/i/_/p(CACCAAC)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sch/_/i/p/_(CAACA)
sch/_/i/p/_(CAACA)
s/_/ch/i/p/_(CACACA)
s/_/ch/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
sch/_/i/p/_(CAACA)
sch/_/i/p/_(CAACA)
sc/_/h/i/p/_(CACACA)
sc/_/h/i/p/_(CACACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['s', '_', 'ch', 'i', 'p']
				{'string': 's/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p']
				version split: ['s', '_', 'ch', 'i', 'p']
				{'string': 's/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sch', '_', 'i', 'p']
				{'string': 'sch/_/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['sc', '_', 'h', 'i', 'p']
				{'string': 'sc/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['s', '_', 'ch', 'i', 'p', '_']
				{'string': 's/_/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_']
				version split: ['s', '_', 'ch', 'i', 'p', '_']
				{'string': 's/_/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sch', '_', 'i', 'p', '_']
				{'string': 'sch/_/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_']
				{'string': 'sc/_/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: e
					> version: s/c/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: s/_/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					> version: sch/_/i/p/e
					> version: s/_/ch/i/p/e
					TRYING: e
					> version: s/_/ch/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					> version: sch/_/i/p/e
					> version: sc/_/h/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
s/c/h/i/p/_/e(CCCACAV)
s/c/h/i/p/_/e(CCCACAV)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/e/_(CCACVA)
s/ch/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
s/_/c/h/i/_/p/e(CACCAACV)
s/_/c/h/i/_/p/e(CACCAACV)
sc/_/h/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
sch/_/i/p/e/_(CAACVA)
sch/_/i/p/e/_(CAACVA)
s/_/ch/i/p/_/e(CACACAV)
s/_/ch/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
sch/_/i/p/e/_(CAACVA)
sch/_/i/p/e/_(CAACVA)
sc/_/h/i/p/_/e(CACACAV)
sc/_/h/i/p/_/e(CACACAV)
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', 'e', '_']
				{'string': 'sch/_/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sch', '_', 'i', 'p', 'e', '_']
				{'string': 'sch/_/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/_/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/_/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', 'e', '_']
				{'string': 'sch/_/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sch', '_', 'i', 'p', 'e', '_']
				{'string': 'sch/_/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/_/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'e']
				ANALYSING: schipp
					resolving (64)
					> version: s/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: s/_/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sch/_/i/p/p
					> version: sch/_/i/p/p
					> version: s/_/ch/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/ch/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/_/c/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sch/_/i/p/p
					> version: sch/_/i/p/p
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: s/_/ch/i/pp
					> version: s/_/ch/i/pp
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					> version: sch/_/i/pp
					> version: sch/_/i/pp
					> version: sc/_/h/i/pp
					> version: sc/_/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/_/c/h/i/p/p(CACCACC)
s/_/c/h/i/p/p(CACCACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
s/_/ch/i/p/p(CACACC)
s/_/ch/i/p/p(CACACC)
s/_/c/h/i/pp(CACCAC)
s/_/c/h/i/pp(CACCAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/p/p(CAACC)
sch/_/i/p/p(CAACC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
s/_/ch/i/pp(CACAC)
s/_/ch/i/pp(CACAC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/p/p(CACACC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
sch/_/i/pp(CAAC)
sch/_/i/pp(CAAC)
sc/_/h/i/pp(CACAC)
sc/_/h/i/pp(CACAC)
s/c/h/i/p/_/p(CCCACAC)
s/c/h/i/p/_/p(CCCACAC)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
s/_/c/h/i/_/p/p(CACCAACC)
s/_/c/h/i/_/p/p(CACCAACC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sch/_/i/p/p/_(CAACCA)
sch/_/i/p/p/_(CAACCA)
s/_/ch/i/p/_/p(CACACAC)
s/_/ch/i/p/_/p(CACACAC)
s/_/c/h/i/_/pp(CACCAAC)
s/_/c/h/i/_/pp(CACCAAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sch/_/i/p/p/_(CAACCA)
sch/_/i/p/p/_(CAACCA)
sch/_/i/pp/_(CAACA)
sch/_/i/pp/_(CAACA)
s/_/ch/i/pp/_(CACACA)
s/_/ch/i/pp/_(CACACA)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/p/_/p(CACACAC)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
sch/_/i/pp/_(CAACA)
sch/_/i/pp/_(CAACA)
sc/_/h/i/pp/_(CACACA)
sc/_/h/i/pp/_(CACACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', 'p']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', 'p']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', 'pp']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', 'pp']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'p', 'p']
				{'string': 'sch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['s', '_', 'ch', 'i', 'pp']
				{'string': 's/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp']
				version split: ['s', '_', 'ch', 'i', 'pp']
				{'string': 's/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', 'p']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sch', '_', 'i', 'pp']
				{'string': 'sch/_/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['sc', '_', 'h', 'i', 'pp']
				{'string': 'sc/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_']
				version split: ['sch', '_', 'i', 'p', 'p', '_']
				{'string': 'sch/_/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['s', '_', 'ch', 'i', 'pp', '_']
				{'string': 's/_/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_']
				version split: ['s', '_', 'ch', 'i', 'pp', '_']
				{'string': 's/_/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sch', '_', 'i', 'pp', '_']
				{'string': 'sch/_/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				version split: ['sc', '_', 'h', 'i', 'pp', '_']
				{'string': 'sc/_/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_']
				ANALYSING: schippe
					resolving (64)
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: s/c/h/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/p/p/e
					> version: sch/i/p/p/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					> version: s/ch/i/pp/e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					> version: sc/h/i/pp/e
					> version: s/_/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sch/_/i/p/p/e
					TRYING: e
					> version: sch/_/i/p/p/e
					TRYING: e
					> version: s/_/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: s/_/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> pp, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sch/_/i/p/p/e
					TRYING: e
					> version: sch/_/i/p/p/e
					TRYING: e
					> version: sch/_/i/pp/e
					> version: sch/_/i/pp/e
					> version: s/_/ch/i/pp/e
					TRYING: e
					> version: s/_/ch/i/pp/e
					TRYING: e
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sch/_/i/pp/e
					> version: sch/_/i/pp/e
					> version: sc/_/h/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/_/c/h/i/p/p/e(CACCACCV)
s/_/c/h/i/p/p/e(CACCACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/c/h/i/pp/e(CACCACV)
s/_/c/h/i/pp/e(CACCACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
s/_/ch/i/pp/e(CACACV)
s/_/ch/i/pp/e(CACACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
s/c/h/i/p/_/p/e(CCCACACV)
s/c/h/i/p/_/p/e(CCCACACV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/p/p/_/e(CCACCAV)
sch/i/p/p/e/_(CACCVA)
sch/i/p/p/e/_(CACCVA)
s/ch/i/p/p/_/e(CCACCAV)
s/ch/i/p/p/_/e(CCACCAV)
s/c/h/i/pp/_/e(CCCACAV)
s/c/h/i/pp/_/e(CCCACAV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sch/i/p/p/e/_(CACCVA)
sch/i/p/p/e/_(CACCVA)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
s/ch/i/pp/e/_(CCACVA)
s/ch/i/pp/e/_(CCACVA)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/p/p/_/e(CCACCAV)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
sc/h/i/pp/e/_(CCACVA)
sc/h/i/pp/e/_(CCACVA)
s/_/c/h/i/_/p/p/e(CACCAACCV)
s/_/c/h/i/_/p/p/e(CACCAACCV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/p/_/p/e(CACACACV)
sch/_/i/p/p/_/e(CAACCAV)
sch/_/i/p/p/_/e(CAACCAV)
s/_/ch/i/p/_/p/e(CACACACV)
s/_/ch/i/p/_/p/e(CACACACV)
s/_/c/h/i/_/pp/e(CACCAACV)
s/_/c/h/i/_/pp/e(CACCAACV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/pp/_/e(CACACAV)
sc/_/h/i/pp/_/e(CACACAV)
sch/_/i/p/p/_/e(CAACCAV)
sch/_/i/p/p/_/e(CAACCAV)
sch/_/i/pp/e/_(CAACVA)
sch/_/i/pp/e/_(CAACVA)
s/_/ch/i/pp/_/e(CACACAV)
s/_/ch/i/pp/_/e(CACACAV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/p/_/p/e(CACACACV)
sc/_/h/i/pp/_/e(CACACAV)
sc/_/h/i/pp/_/e(CACACAV)
sc/_/h/i/pp/_/e(CACACAV)
sc/_/h/i/pp/_/e(CACACAV)
sch/_/i/pp/e/_(CAACVA)
sch/_/i/pp/e/_(CAACVA)
sc/_/h/i/pp/_/e(CACACAV)
sc/_/h/i/pp/_/e(CACACAV)
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['s', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', 'e']
				version split: ['s', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_', 'e']
				{'string': 's/ch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', '_', 'e']
				{'string': 's/ch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', '_', 'e']
				{'string': 's/c/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', '_', 'e']
				{'string': 's/c/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'p', 'e', '_']
				{'string': 'sch/i/p/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['s', 'ch', 'i', 'pp', 'e', '_']
				{'string': 's/ch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e', '_']
				version split: ['s', 'ch', 'i', 'pp', 'e', '_']
				{'string': 's/ch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', '_', 'e']
				{'string': 'sc/h/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', 'e', '_']
				{'string': 'sc/h/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e', '_']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/_/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/_/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/_/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/_/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/_/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/_/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e', '_']
				{'string': 'sch/_/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sch', '_', 'i', 'pp', 'e', '_']
				{'string': 'sch/_/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['s', '_', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/_/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_', 'e']
				version split: ['s', '_', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/_/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/_/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e', '_']
				{'string': 'sch/_/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sch', '_', 'i', 'pp', 'e', '_']
				{'string': 'sch/_/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/_/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((i))/((p)|(pp))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', '_', 'e']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/p/_
					> version: s/_/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/p/_/_(CAACAA)
s/_/i/p/_/_(CAACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/e/_(CAACVA)
s/_/i/p/e/_(CAACVA)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((p))/((e))/((_))$'}
				ANALYSING: ssip
					resolving (16)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					> version: s/_/s/i/p
					> version: ss/_/i/p
					> version: ss/_/i/p
					> version: s/s/i/p/_
					> version: s/s/i/p/_
					> version: ss/i/p/_
					> version: ss/i/p/_
					> version: s/_/s/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/s/i/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: ss/_/i/p/_
					> version: ss/_/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 's', 'i', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', '_', '_', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/_/s/i/_/p(CACAAC)
s/_/s/i/_/p(CACAAC)
ss/_/i/p/_(CAACA)
ss/_/i/p/_(CAACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/_/s/i/p/_(CACACA)
s/_/s/i/p/_(CACACA)
ss/_/i/p/_(CAACA)
ss/_/i/p/_(CAACA)
s/s/i/p/_/_(CCACAA)
s/s/i/p/_/_(CCACAA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/_/s/i/_/_/p(CACAAAC)
s/_/s/i/_/_/p(CACAAAC)
ss/_/i/p/_/_(CAACAA)
ss/_/i/p/_/_(CAACAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', '_', 'p']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p']
				version split: ['s', '_', 's', 'i', '_', 'p']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', 'p', '_']
				{'string': 's/_/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', 'p', '_']
				{'string': 's/_/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', '_', 's', 'i', '_', '_', 'p']
				{'string': 's/_/s/i/_/_/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', '_', 'p']
				version split: ['s', '_', 's', 'i', '_', '_', 'p']
				{'string': 's/_/s/i/_/_/p', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', '_', 'p']
				version split: ['ss', '_', 'i', 'p', '_', '_']
				{'string': 'ss/_/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				version split: ['ss', '_', 'i', 'p', '_', '_']
				{'string': 'ss/_/i/p/_/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((_))/((_))$'}
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/_/s/i/p/e
					TRYING: e
					> version: s/_/s/i/p/e
					TRYING: e
					> version: ss/_/i/p/e
					> version: ss/_/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
s/s/i/p/e/_(CCACVA)
s/s/i/p/e/_(CCACVA)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/_/s/i/p/_/e(CACACAV)
s/_/s/i/p/_/e(CACACAV)
ss/_/i/p/e/_(CAACVA)
ss/_/i/p/e/_(CAACVA)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', '_', 's', 'i', 'p', '_', 'e']
				{'string': 's/_/s/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_', 'e']
				version split: ['s', '_', 's', 'i', 'p', '_', 'e']
				{'string': 's/_/s/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', '_', 'e']
				version split: ['ss', '_', 'i', 'p', 'e', '_']
				{'string': 'ss/_/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				version split: ['ss', '_', 'i', 'p', 'e', '_']
				{'string': 'ss/_/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((i))/((p))/((e))/((_))$'}
				ANALYSING: ssyp
					resolving (16)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					> version: s/_/s/y/p
					> version: ss/_/y/p
					> version: ss/_/y/p
					> version: s/s/y/p/_
					> version: s/s/y/p/_
					> version: ss/y/p/_
					> version: ss/y/p/_
					> version: s/_/s/y/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: s/_/s/y/_/p
					TRYING: p
					adding blocked set: C = C >> p, _, n
					> version: ss/_/y/p/_
					> version: ss/_/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 's', 'y', '_', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', '_', '_', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/_/s/y/_/p(CACAAC)
s/_/s/y/_/p(CACAAC)
ss/_/y/p/_(CAACA)
ss/_/y/p/_(CAACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/_/s/y/p/_(CACACA)
s/_/s/y/p/_(CACACA)
ss/_/y/p/_(CAACA)
ss/_/y/p/_(CAACA)
s/s/y/p/_/_(CCACAA)
s/s/y/p/_/_(CCACAA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/_/s/y/_/_/p(CACAAAC)
s/_/s/y/_/_/p(CACAAAC)
ss/_/y/p/_/_(CAACAA)
ss/_/y/p/_/_(CAACAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', '_', 'p']
				{'string': 's/_/s/y/_/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', 'p']
				version split: ['s', '_', 's', 'y', '_', 'p']
				{'string': 's/_/s/y/_/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', 'p']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', 'p', '_']
				{'string': 's/_/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', 'p', '_']
				{'string': 's/_/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', '_', 's', 'y', '_', '_', 'p']
				{'string': 's/_/s/y/_/_/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', '_', 'p']
				version split: ['s', '_', 's', 'y', '_', '_', 'p']
				{'string': 's/_/s/y/_/_/p', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', '_', 'p']
				version split: ['ss', '_', 'y', 'p', '_', '_']
				{'string': 'ss/_/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
				version split: ['ss', '_', 'y', 'p', '_', '_']
				{'string': 'ss/_/y/p/_/_', 'rgx': '((ss)|(s))/((_))/((y))/((p))/((_))/((_))$'}
		only one version left: ['s', 'c', 'i', '_', '_', '_']
		only one version left: ['sc', '_', 'i', 'p', '_', '_']
		only one version left: ['sc', '_', 'i', 'p', 'e', '_']
		only one version left: ['sc', '_', 'i', 'pp', '_', '_']
		only one version left: ['sc', '_', 'u', 'p', '_', '_']
		only one version left: ['sh', '_', 'i', 'p', '_', '_']
		only one version left: ['sh', '_', 'i', 'p', 'e', '_']
		only one version left: ['sh', '_', 'i', 'pp', '_', '_']
		only one version left: ['sch', '_', 'e', 'p', 'e', '_']
		FAIL: 
		only one version left: ['sch', '_', 'i', 'p', 'e', '_']
		FAIL: 
		only one version left: ['sch', '_', 'i', 'pp', 'e', '_']
		only one version left: ['s', '_', 'i', '_', '_', '_']
		only one version left: ['s', '_', 'i', 'p', '_', '_']
		only one version left: ['s', '_', 'i', 'p', 'e', '_']
		only one version left: ['ss', '_', 'i', 'p', '_', '_']
		only one version left: ['ss', '_', 'i', 'p', 'e', '_']
		only one version left: ['ss', '_', 'y', 'p', '_', '_']
		SPLIT: ['sc', 'h', 'i', 'p', 'e', 'n']
		SPLIT: ['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		SPLIT: ['sc', '_', 'i', 'p', '_', '_']
		['sc', '_', 'i', 'p', '_', '_']
		['sc', '_', 'i', 'p', '_', '_']
		SPLIT: ['sc', '_', 'i', 'p', 'e', '_']
		['sc', '_', 'i', 'p', 'e', '_']
		['sc', '_', 'i', 'p', 'e', '_']
		SPLIT: ['sc', '_', 'i', 'pp', '_', '_']
		['sc', '_', 'i', 'pp', '_', '_']
		['sc', '_', 'i', 'pp', '_', '_']
		SPLIT: ['sc', '_', 'u', 'p', '_', '_']
		['sc', '_', 'u', 'p', '_', '_']
		['sc', '_', 'u', 'p', '_', '_']
		['sc', '_', 'u', 'p', '_', '_']
		['sc', '_', 'u', 'p', '_', '_']
		SPLIT: ['sh', '_', 'i', 'p', '_', '_']
		['sh', '_', 'i', 'p', '_', '_']
		['sh', '_', 'i', 'p', '_', '_']
		SPLIT: ['sh', '_', 'i', 'p', 'e', '_']
		['sh', '_', 'i', 'p', 'e', '_']
		['sh', '_', 'i', 'p', 'e', '_']
		SPLIT: ['sh', '_', 'i', 'pp', '_', '_']
		['sh', '_', 'i', 'pp', '_', '_']
		['sh', '_', 'i', 'pp', '_', '_']
		SPLIT: ['sch', '_', 'e', 'p', 'e', '_']
		['sch', '_', 'e', 'p', 'e', '_']
		['sch', '_', 'e', 'p', 'e', '_']
		SPLIT: ['sch.sc.s', '_', 'i', 'p', 'i', '_', '----!']
		SPLIT: ['sch', '_', 'i', 'p', 'e', '_']
		['sch', '_', 'i', 'p', 'e', '_']
		['sch', '_', 'i', 'p', 'e', '_']
		['sch', '_', 'i', 'p', 'e', '_']
		['sch', '_', 'i', 'p', 'e', '_']
		SPLIT: ['sch.sc.s', '_', 'i', 'p.pp', 'i', '_', '----!']
		SPLIT: ['sch', '_', 'i', 'pp', 'e', '_']
		['sch', '_', 'i', 'pp', 'e', '_']
		['sch', '_', 'i', 'pp', 'e', '_']
		['sch', '_', 'i', 'pp', 'e', '_']
		['sch', '_', 'i', 'pp', 'e', '_']
		SPLIT: ['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', '_', '_']
		['s', '_', 'i', 'p', '_', '_']
		['s', '_', 'i', 'p', '_', '_']
		SPLIT: ['s', '_', 'i', 'p', 'e', '_']
		['s', '_', 'i', 'p', 'e', '_']
		['s', '_', 'i', 'p', 'e', '_']
		SPLIT: ['ss', '_', 'i', 'p', '_', '_']
		['ss', '_', 'i', 'p', '_', '_']
		['ss', '_', 'i', 'p', '_', '_']
		SPLIT: ['ss', '_', 'i', 'p', 'e', '_']
		['ss', '_', 'i', 'p', 'e', '_']
		['ss', '_', 'i', 'p', 'e', '_']
		SPLIT: ['ss', '_', 'y', 'p', '_', '_']
		['ss', '_', 'y', 'p', '_', '_']
		['ss', '_', 'y', 'p', '_', '_']
		version for pattern CCVCVC is INVALID
		[{'h', 'i', '_', 'c'}]
		2
		OVERVIEW: version for pattern CCVCVC
{'h', 'i', '_', 'c'}
faulty splits: 2
sch.sc.sipi----! <-! schip
sch.sc.sip.ppi----! <-! schipp
sc | h | i | p | e | n
s | c | i | _ | _ | _
sc | _ | i | p | _ | _
sc | _ | i | p | e | _
sc | _ | i | pp | _ | _
sc | _ | u | p | _ | _
sh | _ | i | p | _ | _
sh | _ | i | p | e | _
sh | _ | i | pp | _ | _
sch | _ | e | p | e | _
sch.sc.s | _ | i | p | i | _ | ----!
sch | _ | i | p | e | _
sch.sc.s | _ | i | p.pp | i | _ | ----!
sch | _ | i | pp | e | _
s | _ | i | _ | _ | _
s | _ | i | p | _ | _
s | _ | i | p | e | _
ss | _ | i | p | _ | _
ss | _ | i | p | e | _
ss | _ | y | p | _ | _
1 : {'y', 'i', '_', 'c', 'h'},{'h', 'i', '_', 'c'},{'u', 'i', '_', 'c', 'h'},{'h', 'i', 'c'},{'i', '_', 'ch', 'c', 'h'},{'i', '_', 'c', 's', 'h'},{'i', '_', 'cu', 'c', 'h'}
5 : {'pp', '_', 'n'},{'p', '_', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: s/c/h/i/p/p/e
					TRYING: s
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCVC : 1___
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: s/c/i
					TRYING: c
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i']
				adding dashed alternative: ['s', '_', 'c', 'i']
				adding dashed alternative: ['sc', '_', 'i']
				adding dashed alternative: ['sc', '_', 'i']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/_/c/i(CACA)
s/_/c/i(CACA)
sc/_/i(CAA)
sc/_/i(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/i/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'e']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/i/pp
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/u/p
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> i, _, u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> i, _, u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> i, _, cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> i, _, u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> i, _, u, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['s', '_', 'cu', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: s/h/i/p
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: s/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'e']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: s/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: s/h/i/pp
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'p', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: s/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
				ANALYSING: schippe
					resolving (32)
					> version: s/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: s/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: s/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: s/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> i, _, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: s/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> i, _, c, ch
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					> version: sc/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> i, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', 'pp', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/_/c/h/i/p/p/e(CACCACCV)
s/_/c/h/i/p/p/e(CACCACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/c/h/i/pp/e(CACCACV)
s/_/c/h/i/pp/e(CACCACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
s/_/ch/i/pp/e(CACACV)
s/_/ch/i/pp/e(CACACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: s/s/i/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: s/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', 'e']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: s/s/y/p
					TRYING: s
					adding blocked set: C = C >> i, _, c, s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> i, _, y, c
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> i, _, y, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
			___CCCVC : 2___
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> h, i, p
					> version: s/c/i
					TRYING: i
					adding blocked set: C = C >> h, i, p
					> version: sc/i
					> version: sc/i
					> version: s/_/c/i
					TRYING: c
					adding blocked set: C = C >> h, p, c
					> version: s/_/c/i
					TRYING: c
					adding blocked set: C = C >> h, p, c
					> version: sc/_/i
					TRYING: i
					adding blocked set: C = C >> h, i, p
					> version: sc/_/i
					TRYING: i
					adding blocked set: C = C >> h, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['s', 'c', '_', 'i']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', '_', '_', 'c', 'i']
				adding dashed alternative: ['s', '_', '_', 'c', 'i']
				adding dashed alternative: ['sc', '_', '_', 'i']
				adding dashed alternative: ['sc', '_', '_', 'i']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/_/c/i(CACA)
s/_/c/i(CACA)
sc/_/i(CAA)
sc/_/i(CAA)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/_/_/c/i(CAACA)
s/_/_/c/i(CAACA)
sc/_/_/i(CAAA)
sc/_/_/i(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/c/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/i/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
s/c/_/i/p(CCAAC)
s/c/_/i/p(CCAAC)
sc/i/_/p(CAAC)
sc/i/_/p(CAAC)
s/_/_/c/i/p(CAACAC)
s/_/_/c/i/p(CAACAC)
sc/_/_/i/p(CAAAC)
sc/_/_/i/p(CAAAC)
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p', 'e']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
s/c/_/i/p/e(CCAACV)
s/c/_/i/p/e(CCAACV)
sc/i/_/p/e(CAACV)
sc/i/_/p/e(CAACV)
s/_/_/c/i/p/e(CAACACV)
s/_/_/c/i/p/e(CAACACV)
sc/_/_/i/p/e(CAAACV)
sc/_/_/i/p/e(CAAACV)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/c/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: s/_/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/i/p/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/i/pp
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', 'pp']
				adding dashed alternative: ['s', 'c', '_', 'i', 'pp']
				adding dashed alternative: ['sc', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['s', '_', '_', 'c', 'i', 'pp']
				adding dashed alternative: ['sc', '_', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', '_', 'i', 'pp']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
s/c/_/i/p/p(CCAACC)
s/c/_/i/p/p(CCAACC)
sc/i/_/p/p(CAACC)
sc/i/_/p/p(CAACC)
s/c/_/i/pp(CCAAC)
s/c/_/i/pp(CCAAC)
sc/i/_/pp(CAAC)
sc/i/_/pp(CAAC)
s/_/_/c/i/p/p(CAACACC)
s/_/_/c/i/p/p(CAACACC)
sc/_/_/i/p/p(CAAACC)
sc/_/_/i/p/p(CAAACC)
s/_/_/c/i/pp(CAACAC)
s/_/_/c/i/pp(CAACAC)
sc/_/_/i/pp(CAAAC)
sc/_/_/i/pp(CAAAC)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/cu/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/u/p
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					> version: sc/_/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					> version: s/_/cu/p
					TRYING: cu
					adding blocked set: C = C >> h, _, cu, p
					> version: sc/_/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					> version: sc/_/u/p
					TRYING: u
					adding blocked set: C = C >> h, _, p, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', 'cu', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'u', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', 'u', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', 'p']
				adding dashed alternative: ['s', '_', '_', 'cu', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/_/_/c/u/p(CAACAC)
s/_/_/c/u/p(CAACAC)
sc/_/_/u/p(CAAAC)
sc/_/_/u/p(CAAAC)
s/_/_/cu/p(CAACC)
sc/_/_/u/p(CAAAC)
sc/_/_/u/p(CAAAC)
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/h/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/p
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sh/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
s/h/_/i/p(CCAAC)
s/h/_/i/p(CCAAC)
sh/i/_/p(CAAC)
sh/i/_/p(CAAC)
s/_/_/h/i/p(CAACAC)
s/_/_/h/i/p(CAACAC)
sh/_/_/i/p(CAAAC)
sh/_/_/i/p(CAAAC)
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sh/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sh', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p', 'e']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
s/h/_/i/p/e(CCAACV)
s/h/_/i/p/e(CCAACV)
sh/i/_/p/e(CAACV)
sh/i/_/p/e(CAACV)
s/_/_/h/i/p/e(CAACACV)
s/_/_/h/i/p/e(CAACACV)
sh/_/_/i/p/e(CAAACV)
sh/_/_/i/p/e(CAAACV)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/h/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: s/_/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/p/p
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sh/_/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/_/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/_/h/i/pp
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sh/_/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sh/_/i/pp
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', 'pp']
				adding dashed alternative: ['s', 'h', '_', 'i', 'pp']
				adding dashed alternative: ['sh', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['s', '_', '_', 'h', 'i', 'pp']
				adding dashed alternative: ['sh', '_', '_', 'i', 'pp']
				adding dashed alternative: ['sh', '_', '_', 'i', 'pp']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
s/h/_/i/p/p(CCAACC)
s/h/_/i/p/p(CCAACC)
sh/i/_/p/p(CAACC)
sh/i/_/p/p(CAACC)
s/h/_/i/pp(CCAAC)
s/h/_/i/pp(CCAAC)
sh/i/_/pp(CAAC)
sh/i/_/pp(CAAC)
s/_/_/h/i/p/p(CAACACC)
s/_/_/h/i/p/p(CAACACC)
sh/_/_/i/p/p(CAAACC)
sh/_/_/i/p/p(CAAACC)
s/_/_/h/i/pp(CAACAC)
s/_/_/h/i/pp(CAACAC)
sh/_/_/i/pp(CAAAC)
sh/_/_/i/pp(CAAAC)
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: sc/_/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sch', 'e', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sch', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'e', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
s/c/_/h/e/p/e(CCACVCV)
sc/h/_/e/p/e(CCAVCV)
sch/e/_/p/e(CVACV)
s/ch/_/e/p/e(CCAVCV)
sc/h/_/e/p/e(CCAVCV)
sc/h/_/e/p/e(CCAVCV)
sch/e/_/p/e(CVACV)
sc/h/_/e/p/e(CCAVCV)
s/_/_/c/h/e/p/e(CAACCVCV)
sc/_/_/h/e/p/e(CAACVCV)
sch/_/_/e/p/e(CAAVCV)
s/_/_/ch/e/p/e(CAACVCV)
sc/_/_/h/e/p/e(CAACVCV)
sc/_/_/h/e/p/e(CAACVCV)
sch/_/_/e/p/e(CAAVCV)
sc/_/_/h/e/p/e(CAACVCV)
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/h/i/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: s/_/ch/i/p/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
s/c/_/h/i/p/e(CCACACV)
s/c/_/h/i/p/e(CCACACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sch/i/_/p/e(CAACV)
sch/i/_/p/e(CAACV)
s/ch/_/i/p/e(CCAACV)
s/ch/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sch/i/_/p/e(CAACV)
sch/i/_/p/e(CAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
s/_/_/c/h/i/p/e(CAACCACV)
s/_/_/c/h/i/p/e(CAACCACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sch/_/_/i/p/e(CAAACV)
sch/_/_/i/p/e(CAAACV)
s/_/_/ch/i/p/e(CAACACV)
s/_/_/ch/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sch/_/_/i/p/e(CAAACV)
sch/_/_/i/p/e(CAAACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
				ANALYSING: schippe
					resolving (64)
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: s/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: sch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> h, _, p, pp
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/h/i/p/p/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: s/_/ch/i/p/p/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: s/_/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: s/_/c/h/i/pp/e
					TRYING: c
					adding blocked set: C = C >> h, _, p, c
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: s/_/ch/i/pp/e
					TRYING: ch
					adding blocked set: C = C >> h, _, p, ch
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sch/_/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sch/_/i/pp/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					> version: sc/_/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> h, _, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/_/c/h/i/p/p/e(CACCACCV)
s/_/c/h/i/p/p/e(CACCACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/c/h/i/pp/e(CACCACV)
s/_/c/h/i/pp/e(CACCACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
s/_/ch/i/pp/e(CACACV)
s/_/ch/i/pp/e(CACACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
s/c/_/h/i/p/p/e(CCACACCV)
s/c/_/h/i/p/p/e(CCACACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/p/p/e(CAACCV)
s/ch/_/i/p/p/e(CCAACCV)
s/ch/_/i/p/p/e(CCAACCV)
s/c/_/h/i/pp/e(CCACACV)
s/c/_/h/i/pp/e(CCACACV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/pp/e(CAACV)
sch/i/_/pp/e(CAACV)
s/ch/_/i/pp/e(CCAACV)
s/ch/_/i/pp/e(CCAACV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sch/i/_/pp/e(CAACV)
sch/i/_/pp/e(CAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
s/_/_/c/h/i/p/p/e(CAACCACCV)
s/_/_/c/h/i/p/p/e(CAACCACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/p/p/e(CAAACCV)
s/_/_/ch/i/p/p/e(CAACACCV)
s/_/_/ch/i/p/p/e(CAACACCV)
s/_/_/c/h/i/pp/e(CAACCACV)
s/_/_/c/h/i/pp/e(CAACCACV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/pp/e(CAAACV)
sch/_/_/i/pp/e(CAAACV)
s/_/_/ch/i/pp/e(CAACACV)
s/_/_/ch/i/pp/e(CAACACV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sch/_/_/i/pp/e(CAAACV)
sch/_/_/i/pp/e(CAAACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/i
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', '_', 'i']
				adding dashed alternative: ['s', '_', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/_/i(CAAA)
s/_/_/i(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_', 'p']
				adding dashed alternative: ['s', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/_/p(CAAC)
s/i/_/p(CAAC)
s/_/_/i/p(CAAAC)
s/_/_/i/p(CAAAC)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/_/p/e(CAACV)
s/i/_/p/e(CAACV)
s/_/_/i/p/e(CAAACV)
s/_/_/i/p/e(CAAACV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/s/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/s/i/p
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: s/_/s/i/p
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: ss/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: ss/_/i/p
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'i', 'p']
				adding dashed alternative: ['s', 's', '_', 'i', 'p']
				adding dashed alternative: ['ss', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'p']
				adding dashed alternative: ['ss', '_', '_', 'i', 'p']
				adding dashed alternative: ['ss', '_', '_', 'i', 'p']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
s/s/_/i/p(CCAAC)
s/s/_/i/p(CCAAC)
ss/i/_/p(CAAC)
ss/i/_/p(CAAC)
s/_/_/s/i/p(CAACAC)
s/_/_/s/i/p(CAACAC)
ss/_/_/i/p(CAAAC)
ss/_/_/i/p(CAAAC)
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: s/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: s/_/s/i/p/e
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: ss/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					> version: ss/_/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, _, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', 's', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', 'i', '_', 'p', 'e']
				adding dashed alternative: ['ss', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 's', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', '_', 'i', 'p', 'e']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
s/s/_/i/p/e(CCAACV)
s/s/_/i/p/e(CCAACV)
ss/i/_/p/e(CAACV)
ss/i/_/p/e(CAACV)
s/_/_/s/i/p/e(CAACACV)
s/_/_/s/i/p/e(CAACACV)
ss/_/_/i/p/e(CAAACV)
ss/_/_/i/p/e(CAAACV)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> h, _, p, y
					> version: s/s/y/p
					TRYING: y
					adding blocked set: C = C >> h, _, p, y
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, _, p
					> version: s/_/s/y/p
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: s/_/s/y/p
					TRYING: s
					adding blocked set: C = C >> h, _, p, s
					> version: ss/_/y/p
					TRYING: y
					adding blocked set: C = C >> h, _, p, y
					> version: ss/_/y/p
					TRYING: y
					adding blocked set: C = C >> h, _, p, y
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'y', 'p']
				adding dashed alternative: ['s', 's', '_', 'y', 'p']
				adding dashed alternative: ['ss', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 's', 'y', 'p']
				adding dashed alternative: ['s', '_', '_', 's', 'y', 'p']
				adding dashed alternative: ['ss', '_', '_', 'y', 'p']
				adding dashed alternative: ['ss', '_', '_', 'y', 'p']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
s/s/_/y/p(CCAAC)
s/s/_/y/p(CCAAC)
ss/y/_/p(CAAC)
ss/y/_/p(CAAC)
s/_/_/s/y/p(CAACAC)
s/_/_/s/y/p(CAACAC)
ss/_/_/y/p(CAAAC)
ss/_/_/y/p(CAAAC)
			___CCCVC : 3___
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/_/c/i
					TRYING: i
					> version: s/_/c/i
					TRYING: i
					> version: sc/_/i
					> version: sc/_/i
					> version: s/c/_/i
					TRYING: i
					> version: s/c/_/i
					TRYING: i
					> version: sc/i/_
					> version: sc/i/_
					> version: s/_/_/c/i
					TRYING: c
					> version: s/_/_/c/i
					TRYING: c
					> version: sc/_/_/i
					TRYING: i
					> version: sc/_/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (16)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: i
					> version: s/_/c/i/p
					TRYING: i
					> version: sc/_/i/p
					TRYING: p
					> version: sc/_/i/p
					TRYING: p
					> version: s/c/_/i/p
					TRYING: i
					> version: s/c/_/i/p
					TRYING: i
					> version: sc/i/_/p
					TRYING: p
					> version: sc/i/_/p
					TRYING: p
					> version: s/_/_/c/i/p
					TRYING: c
					> version: s/_/_/c/i/p
					TRYING: c
					> version: sc/_/_/i/p
					TRYING: i
					> version: sc/_/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (16)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					> version: s/_/c/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/i/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/i/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: scipp
					resolving (32)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: i
					> version: s/_/c/i/p/p
					TRYING: i
					> version: sc/_/i/p/p
					TRYING: p
					> version: sc/_/i/p/p
					TRYING: p
					> version: s/_/c/i/pp
					TRYING: i
					> version: s/_/c/i/pp
					TRYING: i
					> version: sc/_/i/pp
					TRYING: pp
					> version: sc/_/i/pp
					TRYING: pp
					> version: s/c/_/i/p/p
					TRYING: i
					> version: s/c/_/i/p/p
					TRYING: i
					> version: sc/i/_/p/p
					TRYING: p
					> version: sc/i/_/p/p
					TRYING: p
					> version: s/c/_/i/pp
					TRYING: i
					> version: s/c/_/i/pp
					TRYING: i
					> version: sc/i/_/pp
					TRYING: pp
					> version: sc/i/_/pp
					TRYING: pp
					> version: s/_/_/c/i/p/p
					TRYING: c
					> version: s/_/_/c/i/p/p
					TRYING: c
					> version: sc/_/_/i/p/p
					TRYING: i
					> version: sc/_/_/i/p/p
					TRYING: i
					> version: s/_/_/c/i/pp
					TRYING: c
					> version: s/_/_/c/i/pp
					TRYING: c
					> version: sc/_/_/i/pp
					TRYING: i
					> version: sc/_/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: scup
					resolving (28)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: u
					> version: s/_/c/u/p
					TRYING: u
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: s/_/cu/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: sc/_/u/p
					TRYING: p
					> version: s/c/_/u/p
					TRYING: u
					> version: s/c/_/u/p
					TRYING: u
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/cu/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/_/_/c/u/p
					TRYING: c
					> version: s/_/_/c/u/p
					TRYING: c
					> version: sc/_/_/u/p
					TRYING: u
					> version: sc/_/_/u/p
					TRYING: u
					> version: s/_/_/cu/p
					TRYING: cu
					> version: sc/_/_/u/p
					TRYING: u
					> version: sc/_/_/u/p
					TRYING: u
					RESULT:  ['u']
				ANALYSING: ship
					resolving (16)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: i
					> version: s/_/h/i/p
					TRYING: i
					> version: sh/_/i/p
					TRYING: p
					> version: sh/_/i/p
					TRYING: p
					> version: s/h/_/i/p
					TRYING: i
					> version: s/h/_/i/p
					TRYING: i
					> version: sh/i/_/p
					TRYING: p
					> version: sh/i/_/p
					TRYING: p
					> version: s/_/_/h/i/p
					TRYING: h
					> version: s/_/_/h/i/p
					TRYING: h
					> version: sh/_/_/i/p
					TRYING: i
					> version: sh/_/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (16)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					> version: s/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sh/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: shipp
					resolving (32)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: i
					> version: s/_/h/i/p/p
					TRYING: i
					> version: sh/_/i/p/p
					TRYING: p
					> version: sh/_/i/p/p
					TRYING: p
					> version: s/_/h/i/pp
					TRYING: i
					> version: s/_/h/i/pp
					TRYING: i
					> version: sh/_/i/pp
					TRYING: pp
					> version: sh/_/i/pp
					TRYING: pp
					> version: s/h/_/i/p/p
					TRYING: i
					> version: s/h/_/i/p/p
					TRYING: i
					> version: sh/i/_/p/p
					TRYING: p
					> version: sh/i/_/p/p
					TRYING: p
					> version: s/h/_/i/pp
					TRYING: i
					> version: s/h/_/i/pp
					TRYING: i
					> version: sh/i/_/pp
					TRYING: pp
					> version: sh/i/_/pp
					TRYING: pp
					> version: s/_/_/h/i/p/p
					TRYING: h
					> version: s/_/_/h/i/p/p
					TRYING: h
					> version: sh/_/_/i/p/p
					TRYING: i
					> version: sh/_/_/i/p/p
					TRYING: i
					> version: s/_/_/h/i/pp
					TRYING: h
					> version: s/_/_/h/i/pp
					TRYING: h
					> version: sh/_/_/i/pp
					TRYING: i
					> version: sh/_/_/i/pp
					TRYING: i
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (32)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: s/_/c/h/e/p/e
					TRYING: h
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: s/_/ch/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: sch/_/e/p/e
					TRYING: p
					> version: sc/_/h/e/p/e
					TRYING: e
					> version: s/c/_/h/e/p/e
					TRYING: h
					> version: sc/h/_/e/p/e
					TRYING: e
					> version: sch/e/_/p/e
					TRYING: p
					> version: s/ch/_/e/p/e
					TRYING: e
					> version: sc/h/_/e/p/e
					TRYING: e
					> version: sc/h/_/e/p/e
					TRYING: e
					> version: sch/e/_/p/e
					TRYING: p
					> version: sc/h/_/e/p/e
					TRYING: e
					> version: s/_/_/c/h/e/p/e
					TRYING: c
					> version: sc/_/_/h/e/p/e
					TRYING: h
					> version: sch/_/_/e/p/e
					TRYING: e
					> version: s/_/_/ch/e/p/e
					TRYING: ch
					> version: sc/_/_/h/e/p/e
					TRYING: h
					> version: sc/_/_/h/e/p/e
					TRYING: h
					> version: sch/_/_/e/p/e
					TRYING: e
					> version: sc/_/_/h/e/p/e
					TRYING: h
					RESULT:  ['e']
				ANALYSING: schipe
					resolving (64)
					> version: s/c/h/i/p/e
					TRYING: i
					> version: s/c/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schippe
					resolving (128)
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: s/c/h/i/p/p/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/ch/i/p/p/e
					TRYING: p
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: s/c/h/i/pp/e
					TRYING: i
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/p/p/e
					TRYING: p
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sc/h/i/pp/e
					TRYING: pp
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/p/p/e
					TRYING: p
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/pp/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/c/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/ch/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/i/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/h/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/c/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/p/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/_/pp/e
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/p/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/p/p/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/p/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/c/h/i/pp/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/p/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/ch/i/pp/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/p/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/_/_/i/pp/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/_/_/h/i/pp/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/_/i
					TRYING: i
					> version: s/_/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					> version: s/i/_/p
					TRYING: p
					> version: s/i/_/p
					TRYING: p
					> version: s/_/_/i/p
					TRYING: i
					> version: s/_/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					> version: s/i/_/p/e
					TRYING: p
					> version: s/i/_/p/e
					TRYING: p
					> version: s/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: ssip
					resolving (16)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: i
					> version: s/_/s/i/p
					TRYING: i
					> version: ss/_/i/p
					TRYING: p
					> version: ss/_/i/p
					TRYING: p
					> version: s/s/_/i/p
					TRYING: i
					> version: s/s/_/i/p
					TRYING: i
					> version: ss/i/_/p
					TRYING: p
					> version: ss/i/_/p
					TRYING: p
					> version: s/_/_/s/i/p
					TRYING: s
					> version: s/_/_/s/i/p
					TRYING: s
					> version: ss/_/_/i/p
					TRYING: i
					> version: ss/_/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (16)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					> version: s/_/s/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/s/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/_/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/s/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/s/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/i/_/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/s/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/_/_/s/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: ss/_/_/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: ssyp
					resolving (16)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: y
					> version: s/_/s/y/p
					TRYING: y
					> version: ss/_/y/p
					TRYING: p
					> version: ss/_/y/p
					TRYING: p
					> version: s/s/_/y/p
					TRYING: y
					> version: s/s/_/y/p
					TRYING: y
					> version: ss/y/_/p
					TRYING: p
					> version: ss/y/_/p
					TRYING: p
					> version: s/_/_/s/y/p
					TRYING: s
					> version: s/_/_/s/y/p
					TRYING: s
					> version: ss/_/_/y/p
					TRYING: y
					> version: ss/_/_/y/p
					TRYING: y
					RESULT:  ['y']
			___CCCVC : 4___
				ANALYSING: schip
				adding littera based on matching pattern
				ANALYSING: schipen
				adding littera based on matching pattern
				ANALYSING: schipp
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/_/c/i
					> version: s/_/c/i
					> version: sc/_/i
					> version: sc/_/i
					> version: s/c/_/i
					> version: s/c/_/i
					> version: sc/i/_
					> version: sc/i/_
					> version: s/_/_/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, n, pp
					> version: s/_/_/c/i
					TRYING: i
					adding blocked set: C = C >> p, i, n, pp
					> version: sc/_/_/i
					> version: sc/_/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_']
				adding dashed alternative: ['sc', '_', 'i', '_']
				adding dashed alternative: ['sc', '_', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i']
				adding dashed alternative: ['sc', '_', '_', 'i', '_']
				adding dashed alternative: ['sc', '_', '_', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/_/c/i(CACA)
s/_/c/i(CACA)
sc/_/i(CAA)
sc/_/i(CAA)
s/c/_/i(CCAA)
s/c/_/i(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/_/_/c/i(CAACA)
s/_/_/c/i(CAACA)
sc/_/_/i(CAAA)
sc/_/_/i(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/_/c/i/_(CACAA)
s/_/c/i/_(CACAA)
sc/_/i/_(CAAA)
sc/_/i/_(CAAA)
s/c/_/i/_(CCAAA)
s/c/_/i/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/_/_/c/_/i(CAACAA)
s/_/_/c/_/i(CAACAA)
sc/_/_/i/_(CAAAA)
sc/_/_/i/_(CAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', '_', 'c', 'i']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i']
				version split: ['s', '_', 'c', 'i']
				{'string': 's/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i']
				version split: ['sc', '_', 'i']
				{'string': 'sc/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i']
				version split: ['sc', '_', 'i']
				{'string': 'sc/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['s', 'c', '_', 'i']
				{'string': 's/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', '_', '_', 'c', 'i']
				{'string': 's/_/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i']
				version split: ['s', '_', '_', 'c', 'i']
				{'string': 's/_/_/c/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i']
				version split: ['sc', '_', '_', 'i']
				{'string': 'sc/_/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i']
				version split: ['sc', '_', '_', 'i']
				{'string': 'sc/_/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', '_', 'c', 'i', '_']
				{'string': 's/_/c/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_']
				version split: ['s', '_', 'c', 'i', '_']
				{'string': 's/_/c/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_']
				version split: ['sc', '_', 'i', '_']
				{'string': 'sc/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', '_']
				version split: ['sc', '_', 'i', '_']
				{'string': 'sc/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', '_']
				version split: ['s', 'c', '_', 'i', '_']
				{'string': 's/c/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_']
				version split: ['s', 'c', '_', 'i', '_']
				{'string': 's/c/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', '_', '_', 'c', '_', 'i']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i']
				version split: ['s', '_', '_', 'c', '_', 'i']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i']
				version split: ['sc', '_', '_', 'i', '_']
				{'string': 'sc/_/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				version split: ['sc', '_', '_', 'i', '_']
				{'string': 'sc/_/_/i/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				ANALYSING: scip
					resolving (16)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/_/c/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/i/p
					> version: sc/_/i/p
					> version: s/c/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/_/p
					> version: sc/i/_/p
					> version: s/_/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/c/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/_/c/i/p(CACAC)
s/_/c/i/p(CACAC)
sc/_/i/p(CAAC)
sc/_/i/p(CAAC)
s/c/_/i/p(CCAAC)
s/c/_/i/p(CCAAC)
sc/i/_/p(CAAC)
sc/i/_/p(CAAC)
s/_/_/c/i/p(CAACAC)
s/_/_/c/i/p(CAACAC)
sc/_/_/i/p(CAAAC)
sc/_/_/i/p(CAAAC)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/_/c/i/_/p(CACAAC)
s/_/c/i/_/p(CACAAC)
sc/_/i/p/_(CAACA)
sc/_/i/p/_(CAACA)
s/c/_/i/_/p(CCAAAC)
s/c/_/i/_/p(CCAAAC)
sc/i/_/p/_(CAACA)
sc/i/_/p/_(CAACA)
s/_/_/c/_/i/p(CAACAAC)
s/_/_/c/_/i/p(CAACAAC)
sc/_/_/i/_/p(CAAAAC)
sc/_/_/i/_/p(CAAAAC)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['s', '_', 'c', 'i', 'p']
				{'string': 's/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['sc', '_', 'i', 'p']
				{'string': 'sc/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p']
				version split: ['s', 'c', '_', 'i', 'p']
				{'string': 's/c/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p']
				version split: ['s', 'c', '_', 'i', 'p']
				{'string': 's/c/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p']
				version split: ['sc', 'i', '_', 'p']
				{'string': 'sc/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p']
				version split: ['sc', 'i', '_', 'p']
				{'string': 'sc/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p']
				version split: ['s', '_', '_', 'c', 'i', 'p']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p']
				version split: ['s', '_', '_', 'c', 'i', 'p']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p']
				version split: ['sc', '_', '_', 'i', 'p']
				{'string': 'sc/_/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p']
				version split: ['sc', '_', '_', 'i', 'p']
				{'string': 'sc/_/_/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', '_', 'c', 'i', '_', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['sc', '_', 'i', 'p', '_']
				{'string': 'sc/_/i/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_']
				version split: ['s', 'c', '_', 'i', '_', 'p']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p']
				version split: ['s', 'c', '_', 'i', '_', 'p']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p']
				version split: ['sc', 'i', '_', 'p', '_']
				{'string': 'sc/i/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_']
				version split: ['sc', 'i', '_', 'p', '_']
				{'string': 'sc/i/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p']
				version split: ['sc', '_', '_', 'i', '_', 'p']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p']
				version split: ['sc', '_', '_', 'i', '_', 'p']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p']
				ANALYSING: scipe
					resolving (16)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/_/c/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/i/p/e
					TRYING: e
					> version: sc/_/i/p/e
					TRYING: e
					> version: s/c/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/_/p/e
					TRYING: e
					> version: sc/i/_/p/e
					TRYING: e
					> version: s/_/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/c/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p', 'e']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/_/c/i/p/e(CACACV)
s/_/c/i/p/e(CACACV)
sc/_/i/p/e(CAACV)
sc/_/i/p/e(CAACV)
s/c/_/i/p/e(CCAACV)
s/c/_/i/p/e(CCAACV)
sc/i/_/p/e(CAACV)
sc/i/_/p/e(CAACV)
s/_/_/c/i/p/e(CAACACV)
s/_/_/c/i/p/e(CAACACV)
sc/_/_/i/p/e(CAAACV)
sc/_/_/i/p/e(CAAACV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/_/c/i/_/p/e(CACAACV)
s/_/c/i/_/p/e(CACAACV)
sc/_/i/p/_/e(CAACAV)
sc/_/i/p/_/e(CAACAV)
s/c/_/i/_/p/e(CCAAACV)
s/c/_/i/_/p/e(CCAAACV)
sc/i/_/p/_/e(CAACAV)
sc/i/_/p/_/e(CAACAV)
s/_/_/c/_/i/p/e(CAACAACV)
s/_/_/c/_/i/p/e(CAACAACV)
sc/_/_/i/_/p/e(CAAAACV)
sc/_/_/i/_/p/e(CAAAACV)
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/c/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', 'e']
				{'string': 'sc/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'e']
				version split: ['s', 'c', '_', 'i', 'p', 'e']
				{'string': 's/c/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p', 'e']
				version split: ['s', 'c', '_', 'i', 'p', 'e']
				{'string': 's/c/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p', 'e']
				version split: ['sc', 'i', '_', 'p', 'e']
				{'string': 'sc/i/_/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', 'e']
				version split: ['sc', 'i', '_', 'p', 'e']
				{'string': 'sc/i/_/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'i', 'p', 'e']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/i/p/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'e']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'e']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'e']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'i', 'p', '_', 'e']
				{'string': 'sc/_/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'i', 'p', '_', 'e']
				{'string': 'sc/_/i/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'c', '_', 'i', '_', 'p', 'e']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p', 'e']
				version split: ['s', 'c', '_', 'i', '_', 'p', 'e']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'i', '_', 'p', '_', 'e']
				{'string': 'sc/i/_/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_', 'e']
				version split: ['sc', 'i', '_', 'p', '_', 'e']
				{'string': 'sc/i/_/p/_/e', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_', 'e']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p', 'e']
				version split: ['sc', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p', 'e']
				ANALYSING: scipp
					resolving (32)
					> version: s/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/_/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/i/pp
					> version: sc/_/i/pp
					> version: s/c/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/i/_/pp
					> version: sc/i/_/pp
					> version: s/_/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/c/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/c/i/pp
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sc', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', '_', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sc', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'pp']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'i', 'pp']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'pp']
				adding dashed alternative: ['sc', '_', '_', 'i', '_', 'pp']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/_/c/i/p/p(CACACC)
s/_/c/i/p/p(CACACC)
sc/_/i/p/p(CAACC)
sc/_/i/p/p(CAACC)
s/_/c/i/pp(CACAC)
s/_/c/i/pp(CACAC)
sc/_/i/pp(CAAC)
sc/_/i/pp(CAAC)
s/c/_/i/p/p(CCAACC)
s/c/_/i/p/p(CCAACC)
sc/i/_/p/p(CAACC)
sc/i/_/p/p(CAACC)
s/c/_/i/pp(CCAAC)
s/c/_/i/pp(CCAAC)
sc/i/_/pp(CAAC)
sc/i/_/pp(CAAC)
s/_/_/c/i/p/p(CAACACC)
s/_/_/c/i/p/p(CAACACC)
sc/_/_/i/p/p(CAAACC)
sc/_/_/i/p/p(CAAACC)
s/_/_/c/i/pp(CAACAC)
s/_/_/c/i/pp(CAACAC)
sc/_/_/i/pp(CAAAC)
sc/_/_/i/pp(CAAAC)
s/c/i/p/_/p(CCACAC)
s/c/i/p/_/p(CCACAC)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/_/c/i/_/p/p(CACAACC)
s/_/c/i/_/p/p(CACAACC)
sc/_/i/p/_/p(CAACAC)
sc/_/i/p/_/p(CAACAC)
s/_/c/i/_/pp(CACAAC)
s/_/c/i/_/pp(CACAAC)
sc/_/i/pp/_(CAACA)
sc/_/i/pp/_(CAACA)
s/c/_/i/_/p/p(CCAAACC)
s/c/_/i/_/p/p(CCAAACC)
sc/i/_/p/_/p(CAACAC)
sc/i/_/p/_/p(CAACAC)
s/c/_/i/_/pp(CCAAAC)
s/c/_/i/_/pp(CCAAAC)
sc/i/_/pp/_(CAACA)
sc/i/_/pp/_(CAACA)
s/_/_/c/_/i/p/p(CAACAACC)
s/_/_/c/_/i/p/p(CAACAACC)
sc/_/_/i/_/p/p(CAAAACC)
sc/_/_/i/_/p/p(CAAAACC)
s/_/_/c/_/i/pp(CAACAAC)
s/_/_/c/_/i/pp(CAACAAC)
sc/_/_/i/_/pp(CAAAAC)
sc/_/_/i/_/pp(CAAAAC)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/c/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', 'p']
				{'string': 'sc/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['s', '_', 'c', 'i', 'pp']
				{'string': 's/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['sc', '_', 'i', 'pp']
				{'string': 'sc/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp']
				version split: ['s', 'c', '_', 'i', 'p', 'p']
				{'string': 's/c/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p', 'p']
				version split: ['s', 'c', '_', 'i', 'p', 'p']
				{'string': 's/c/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'p', 'p']
				version split: ['sc', 'i', '_', 'p', 'p']
				{'string': 'sc/i/_/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', '_', 'p', 'p']
				{'string': 'sc/i/_/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', 'p']
				version split: ['s', 'c', '_', 'i', 'pp']
				{'string': 's/c/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'pp']
				version split: ['s', 'c', '_', 'i', 'pp']
				{'string': 's/c/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', 'pp']
				version split: ['sc', 'i', '_', 'pp']
				{'string': 'sc/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'pp']
				version split: ['sc', 'i', '_', 'pp']
				{'string': 'sc/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'pp']
				version split: ['s', '_', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'c', 'i', 'p', 'p']
				{'string': 's/_/_/c/i/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'p', 'p']
				version split: ['sc', '_', '_', 'i', 'p', 'p']
				{'string': 'sc/_/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p', 'p']
				version split: ['sc', '_', '_', 'i', 'p', 'p']
				{'string': 'sc/_/_/i/p/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'c', 'i', 'pp']
				{'string': 's/_/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'pp']
				version split: ['s', '_', '_', 'c', 'i', 'pp']
				{'string': 's/_/_/c/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'i', 'pp']
				version split: ['sc', '_', '_', 'i', 'pp']
				{'string': 'sc/_/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'pp']
				version split: ['sc', '_', '_', 'i', 'pp']
				{'string': 'sc/_/_/i/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', 'pp']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', 'p', '_', 'p']
				{'string': 's/c/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'p', 'p']
				{'string': 's/_/c/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', '_', 'i', 'p', '_', 'p']
				{'string': 'sc/_/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'p']
				version split: ['sc', '_', 'i', 'p', '_', 'p']
				{'string': 'sc/_/i/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'c', 'i', '_', 'pp']
				{'string': 's/_/c/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'pp']
				version split: ['s', '_', 'c', 'i', '_', 'pp']
				{'string': 's/_/c/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'i', '_', 'pp']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['sc', '_', 'i', 'pp', '_']
				{'string': 'sc/_/i/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', 'i', 'pp', '_']
				version split: ['s', 'c', '_', 'i', '_', 'p', 'p']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p', 'p']
				version split: ['s', 'c', '_', 'i', '_', 'p', 'p']
				{'string': 's/c/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', '_', 'p', '_', 'p']
				{'string': 'sc/i/_/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_', 'p']
				version split: ['sc', 'i', '_', 'p', '_', 'p']
				{'string': 'sc/i/_/p/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'c', '_', 'i', '_', 'pp']
				{'string': 's/c/_/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'pp']
				version split: ['s', 'c', '_', 'i', '_', 'pp']
				{'string': 's/c/_/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'i', '_', 'pp']
				version split: ['sc', 'i', '_', 'pp', '_']
				{'string': 'sc/i/_/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'pp', '_']
				version split: ['sc', 'i', '_', 'pp', '_']
				{'string': 'sc/i/_/pp/_', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', 'i', '_', 'pp', '_']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'p', 'p']
				version split: ['sc', '_', '_', 'i', '_', 'p', 'p']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p', 'p']
				version split: ['sc', '_', '_', 'i', '_', 'p', 'p']
				{'string': 'sc/_/_/i/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'p', 'p']
				version split: ['s', '_', '_', 'c', '_', 'i', 'pp']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'pp']
				version split: ['s', '_', '_', 'c', '_', 'i', 'pp']
				{'string': 's/_/_/c/_/i', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'i', 'pp']
				version split: ['sc', '_', '_', 'i', '_', 'pp']
				{'string': 'sc/_/_/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'pp']
				version split: ['sc', '_', '_', 'i', '_', 'pp']
				{'string': 'sc/_/_/i/_/pp', 'rgx': '((sc)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'i', '_', 'pp']
				ANALYSING: scup
					resolving (28)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/_/c/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/_/cu/p
					> version: sc/_/u/p
					> version: sc/_/u/p
					> version: s/c/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/_/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, pp, n, u, _
					> version: s/_/_/c/u/p
					TRYING: u
					adding blocked set: C = C >> p, pp, n, u, _
					> version: sc/_/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/cu/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/u/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', 'p']
				adding dashed alternative: ['s', '_', 'c', 'u', '_', 'p']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', '_', 'cu', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', '_', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', '_', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'cu', '_', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', '_', 'p']
				adding dashed alternative: ['sc', '_', '_', 'u', '_', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/_/c/u/p(CACAC)
s/_/c/u/p(CACAC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/_/cu/p(CACC)
sc/_/u/p(CAAC)
sc/_/u/p(CAAC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/_/_/c/u/p(CAACAC)
s/_/_/c/u/p(CAACAC)
sc/_/_/u/p(CAAAC)
sc/_/_/u/p(CAAAC)
s/_/_/cu/p(CAACC)
sc/_/_/u/p(CAAAC)
sc/_/_/u/p(CAAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/_/c/u/_/p(CACAAC)
s/_/c/u/_/p(CACAAC)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/_/cu/p/_(CACCA)
sc/_/u/p/_(CAACA)
sc/_/u/p/_(CAACA)
s/c/_/u/_/p(CCAAAC)
s/c/_/u/_/p(CCAAAC)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/_/_/c/_/u/p(CAACAAC)
s/_/_/c/_/u/p(CAACAAC)
sc/_/_/u/_/p(CAAAAC)
sc/_/_/u/_/p(CAAAAC)
s/_/_/cu/_/p(CAACAC)
sc/_/_/u/_/p(CAAAAC)
sc/_/_/u/_/p(CAAAAC)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['s', '_', 'c', 'u', 'p']
				{'string': 's/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', '_', 'cu', 'p']
				{'string': 's/_/cu/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['sc', '_', 'u', 'p']
				{'string': 'sc/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'cu', '_', 'p']
				{'string': 's/cu/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', '_', '_', 'c', 'u', 'p']
				{'string': 's/_/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'u', 'p']
				version split: ['s', '_', '_', 'c', 'u', 'p']
				{'string': 's/_/_/c/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'u', 'p']
				version split: ['sc', '_', '_', 'u', 'p']
				{'string': 'sc/_/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', 'p']
				version split: ['sc', '_', '_', 'u', 'p']
				{'string': 'sc/_/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', 'p']
				version split: ['s', '_', '_', 'cu', 'p']
				{'string': 's/_/_/cu/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'cu', 'p']
				version split: ['sc', '_', '_', 'u', 'p']
				{'string': 'sc/_/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', 'p']
				version split: ['sc', '_', '_', 'u', 'p']
				{'string': 'sc/_/_/u/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', '_', 'c', 'u', '_', 'p']
				{'string': 's/_/c/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', 'p']
				version split: ['s', '_', 'c', 'u', '_', 'p']
				{'string': 's/_/c/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'u', '_', 'p']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', '_', 'cu', 'p', '_']
				{'string': 's/_/cu/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', 'cu', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['sc', '_', 'u', 'p', '_']
				{'string': 'sc/_/u/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', '_', 'p']
				{'string': 's/c/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', '_', 'p']
				version split: ['s', 'c', '_', 'u', '_', 'p']
				{'string': 's/c/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', '_', '_', 'c', '_', 'u', 'p']
				{'string': 's/_/_/c/_/u', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'u', 'p']
				version split: ['s', '_', '_', 'c', '_', 'u', 'p']
				{'string': 's/_/_/c/_/u', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'u', 'p']
				version split: ['sc', '_', '_', 'u', '_', 'p']
				{'string': 'sc/_/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', '_', 'p']
				version split: ['sc', '_', '_', 'u', '_', 'p']
				{'string': 'sc/_/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', '_', 'p']
				version split: ['s', '_', '_', 'cu', '_', 'p']
				{'string': 's/_/_/cu/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['s', '_', '_', 'cu', '_', 'p']
				version split: ['sc', '_', '_', 'u', '_', 'p']
				{'string': 'sc/_/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', '_', 'p']
				version split: ['sc', '_', '_', 'u', '_', 'p']
				{'string': 'sc/_/_/u/_/p', 'rgx': '((sc)|(s))/((_))/((_))/((u))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'u', '_', 'p']
				ANALYSING: ship
					resolving (16)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/_/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/h/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/i/p
					> version: sh/_/i/p
					> version: s/h/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/_/p
					> version: sh/i/_/p
					> version: s/_/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/h/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sh/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/_/h/i/p(CACAC)
s/_/h/i/p(CACAC)
sh/_/i/p(CAAC)
sh/_/i/p(CAAC)
s/h/_/i/p(CCAAC)
s/h/_/i/p(CCAAC)
sh/i/_/p(CAAC)
sh/i/_/p(CAAC)
s/_/_/h/i/p(CAACAC)
s/_/_/h/i/p(CAACAC)
sh/_/_/i/p(CAAAC)
sh/_/_/i/p(CAAAC)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/_/h/i/_/p(CACAAC)
s/_/h/i/_/p(CACAAC)
sh/_/i/p/_(CAACA)
sh/_/i/p/_(CAACA)
s/h/_/i/_/p(CCAAAC)
s/h/_/i/_/p(CCAAAC)
sh/i/_/p/_(CAACA)
sh/i/_/p/_(CAACA)
s/_/_/h/_/i/p(CAACAAC)
s/_/_/h/_/i/p(CAACAAC)
sh/_/_/i/_/p(CAAAAC)
sh/_/_/i/_/p(CAAAAC)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['s', '_', 'h', 'i', 'p']
				{'string': 's/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['sh', '_', 'i', 'p']
				{'string': 'sh/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p']
				version split: ['s', 'h', '_', 'i', 'p']
				{'string': 's/h/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p']
				version split: ['s', 'h', '_', 'i', 'p']
				{'string': 's/h/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p']
				version split: ['sh', 'i', '_', 'p']
				{'string': 'sh/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p']
				version split: ['sh', 'i', '_', 'p']
				{'string': 'sh/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p']
				version split: ['s', '_', '_', 'h', 'i', 'p']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p']
				version split: ['s', '_', '_', 'h', 'i', 'p']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p']
				version split: ['sh', '_', '_', 'i', 'p']
				{'string': 'sh/_/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p']
				version split: ['sh', '_', '_', 'i', 'p']
				{'string': 'sh/_/_/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', '_', 'h', 'i', '_', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['sh', '_', 'i', 'p', '_']
				{'string': 'sh/_/i/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_']
				version split: ['s', 'h', '_', 'i', '_', 'p']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p']
				version split: ['s', 'h', '_', 'i', '_', 'p']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p']
				version split: ['sh', 'i', '_', 'p', '_']
				{'string': 'sh/i/_/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_']
				version split: ['sh', 'i', '_', 'p', '_']
				{'string': 'sh/i/_/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p']
				version split: ['sh', '_', '_', 'i', '_', 'p']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p']
				version split: ['sh', '_', '_', 'i', '_', 'p']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p']
				ANALYSING: shipe
					resolving (16)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/i/p/e
					TRYING: e
					> version: sh/_/i/p/e
					TRYING: e
					> version: s/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/_/p/e
					TRYING: e
					> version: sh/i/_/p/e
					TRYING: e
					> version: s/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sh/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p', 'e']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/_/h/i/p/e(CACACV)
s/_/h/i/p/e(CACACV)
sh/_/i/p/e(CAACV)
sh/_/i/p/e(CAACV)
s/h/_/i/p/e(CCAACV)
s/h/_/i/p/e(CCAACV)
sh/i/_/p/e(CAACV)
sh/i/_/p/e(CAACV)
s/_/_/h/i/p/e(CAACACV)
s/_/_/h/i/p/e(CAACACV)
sh/_/_/i/p/e(CAAACV)
sh/_/_/i/p/e(CAAACV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/_/h/i/_/p/e(CACAACV)
s/_/h/i/_/p/e(CACAACV)
sh/_/i/p/_/e(CAACAV)
sh/_/i/p/_/e(CAACAV)
s/h/_/i/_/p/e(CCAAACV)
s/h/_/i/_/p/e(CCAAACV)
sh/i/_/p/_/e(CAACAV)
sh/i/_/p/_/e(CAACAV)
s/_/_/h/_/i/p/e(CAACAACV)
s/_/_/h/_/i/p/e(CAACAACV)
sh/_/_/i/_/p/e(CAAAACV)
sh/_/_/i/_/p/e(CAAAACV)
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/h/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', 'e']
				{'string': 'sh/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'e']
				version split: ['s', 'h', '_', 'i', 'p', 'e']
				{'string': 's/h/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p', 'e']
				version split: ['s', 'h', '_', 'i', 'p', 'e']
				{'string': 's/h/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p', 'e']
				version split: ['sh', 'i', '_', 'p', 'e']
				{'string': 'sh/i/_/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', 'e']
				version split: ['sh', 'i', '_', 'p', 'e']
				{'string': 'sh/i/_/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sh', '_', '_', 'i', 'p', 'e']
				{'string': 'sh/_/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p', 'e']
				version split: ['sh', '_', '_', 'i', 'p', 'e']
				{'string': 'sh/_/_/i/p/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sh', '_', 'i', 'p', '_', 'e']
				{'string': 'sh/_/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'e']
				version split: ['sh', '_', 'i', 'p', '_', 'e']
				{'string': 'sh/_/i/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['s', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sh', 'i', '_', 'p', '_', 'e']
				{'string': 'sh/i/_/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_', 'e']
				version split: ['sh', 'i', '_', 'p', '_', 'e']
				{'string': 'sh/i/_/p/_/e', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_', 'e']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sh', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p', 'e']
				version split: ['sh', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p', 'e']
				ANALYSING: shipp
					resolving (32)
					> version: s/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/h/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/h/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/i/pp
					> version: sh/_/i/pp
					> version: s/h/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/_/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/h/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/i/_/pp
					> version: sh/i/_/pp
					> version: s/_/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/h/i/p/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sh/_/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/_/i/p/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/h/i/pp
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sh/_/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sh/_/_/i/pp
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', '_', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', '_', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['sh', '_', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', '_', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sh', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'pp']
				adding dashed alternative: ['s', '_', '_', 'h', '_', 'i', 'pp']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'pp']
				adding dashed alternative: ['sh', '_', '_', 'i', '_', 'pp']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/_/h/i/p/p(CACACC)
s/_/h/i/p/p(CACACC)
sh/_/i/p/p(CAACC)
sh/_/i/p/p(CAACC)
s/_/h/i/pp(CACAC)
s/_/h/i/pp(CACAC)
sh/_/i/pp(CAAC)
sh/_/i/pp(CAAC)
s/h/_/i/p/p(CCAACC)
s/h/_/i/p/p(CCAACC)
sh/i/_/p/p(CAACC)
sh/i/_/p/p(CAACC)
s/h/_/i/pp(CCAAC)
s/h/_/i/pp(CCAAC)
sh/i/_/pp(CAAC)
sh/i/_/pp(CAAC)
s/_/_/h/i/p/p(CAACACC)
s/_/_/h/i/p/p(CAACACC)
sh/_/_/i/p/p(CAAACC)
sh/_/_/i/p/p(CAAACC)
s/_/_/h/i/pp(CAACAC)
s/_/_/h/i/pp(CAACAC)
sh/_/_/i/pp(CAAAC)
sh/_/_/i/pp(CAAAC)
s/h/i/p/_/p(CCACAC)
s/h/i/p/_/p(CCACAC)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/_/h/i/_/p/p(CACAACC)
s/_/h/i/_/p/p(CACAACC)
sh/_/i/p/_/p(CAACAC)
sh/_/i/p/_/p(CAACAC)
s/_/h/i/_/pp(CACAAC)
s/_/h/i/_/pp(CACAAC)
sh/_/i/pp/_(CAACA)
sh/_/i/pp/_(CAACA)
s/h/_/i/_/p/p(CCAAACC)
s/h/_/i/_/p/p(CCAAACC)
sh/i/_/p/_/p(CAACAC)
sh/i/_/p/_/p(CAACAC)
s/h/_/i/_/pp(CCAAAC)
s/h/_/i/_/pp(CCAAAC)
sh/i/_/pp/_(CAACA)
sh/i/_/pp/_(CAACA)
s/_/_/h/_/i/p/p(CAACAACC)
s/_/_/h/_/i/p/p(CAACAACC)
sh/_/_/i/_/p/p(CAAAACC)
sh/_/_/i/_/p/p(CAAAACC)
s/_/_/h/_/i/pp(CAACAAC)
s/_/_/h/_/i/pp(CAACAAC)
sh/_/_/i/_/pp(CAAAAC)
sh/_/_/i/_/pp(CAAAAC)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/h/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', 'p']
				{'string': 'sh/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', 'p']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['s', '_', 'h', 'i', 'pp']
				{'string': 's/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['sh', '_', 'i', 'pp']
				{'string': 'sh/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp']
				version split: ['s', 'h', '_', 'i', 'p', 'p']
				{'string': 's/h/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p', 'p']
				version split: ['s', 'h', '_', 'i', 'p', 'p']
				{'string': 's/h/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'p', 'p']
				version split: ['sh', 'i', '_', 'p', 'p']
				{'string': 'sh/i/_/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', '_', 'p', 'p']
				{'string': 'sh/i/_/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', 'p']
				version split: ['s', 'h', '_', 'i', 'pp']
				{'string': 's/h/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'pp']
				version split: ['s', 'h', '_', 'i', 'pp']
				{'string': 's/h/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', 'pp']
				version split: ['sh', 'i', '_', 'pp']
				{'string': 'sh/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'pp']
				version split: ['sh', 'i', '_', 'pp']
				{'string': 'sh/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'pp']
				version split: ['s', '_', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'h', 'i', 'p', 'p']
				{'string': 's/_/_/h/i/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'p', 'p']
				version split: ['sh', '_', '_', 'i', 'p', 'p']
				{'string': 'sh/_/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p', 'p']
				version split: ['sh', '_', '_', 'i', 'p', 'p']
				{'string': 'sh/_/_/i/p/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'h', 'i', 'pp']
				{'string': 's/_/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'pp']
				version split: ['s', '_', '_', 'h', 'i', 'pp']
				{'string': 's/_/_/h/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'i', 'pp']
				version split: ['sh', '_', '_', 'i', 'pp']
				{'string': 'sh/_/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'pp']
				version split: ['sh', '_', '_', 'i', 'pp']
				{'string': 'sh/_/_/i/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', 'pp']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', 'p', '_', 'p']
				{'string': 's/h/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'p', 'p']
				{'string': 's/_/h/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', '_', 'i', 'p', '_', 'p']
				{'string': 'sh/_/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'p']
				version split: ['sh', '_', 'i', 'p', '_', 'p']
				{'string': 'sh/_/i/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'p', '_', 'p']
				version split: ['s', '_', 'h', 'i', '_', 'pp']
				{'string': 's/_/h/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'pp']
				version split: ['s', '_', 'h', 'i', '_', 'pp']
				{'string': 's/_/h/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'i', '_', 'pp']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['sh', '_', 'i', 'pp', '_']
				{'string': 'sh/_/i/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', 'i', 'pp', '_']
				version split: ['s', 'h', '_', 'i', '_', 'p', 'p']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p', 'p']
				version split: ['s', 'h', '_', 'i', '_', 'p', 'p']
				{'string': 's/h/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', '_', 'p', '_', 'p']
				{'string': 'sh/i/_/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_', 'p']
				version split: ['sh', 'i', '_', 'p', '_', 'p']
				{'string': 'sh/i/_/p/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'h', '_', 'i', '_', 'pp']
				{'string': 's/h/_/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'pp']
				version split: ['s', 'h', '_', 'i', '_', 'pp']
				{'string': 's/h/_/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'i', '_', 'pp']
				version split: ['sh', 'i', '_', 'pp', '_']
				{'string': 'sh/i/_/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'pp', '_']
				version split: ['sh', 'i', '_', 'pp', '_']
				{'string': 'sh/i/_/pp/_', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', 'i', '_', 'pp', '_']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				version split: ['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'p', 'p']
				version split: ['sh', '_', '_', 'i', '_', 'p', 'p']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p', 'p']
				version split: ['sh', '_', '_', 'i', '_', 'p', 'p']
				{'string': 'sh/_/_/i/_/p', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'p', 'p']
				version split: ['s', '_', '_', 'h', '_', 'i', 'pp']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'pp']
				version split: ['s', '_', '_', 'h', '_', 'i', 'pp']
				{'string': 's/_/_/h/_/i', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', '_', 'i', 'pp']
				version split: ['sh', '_', '_', 'i', '_', 'pp']
				{'string': 'sh/_/_/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'pp']
				version split: ['sh', '_', '_', 'i', '_', 'pp']
				{'string': 'sh/_/_/i/_/pp', 'rgx': '((sh)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['sh', '_', '_', 'i', '_', 'pp']
				ANALYSING: schepe
					resolving (32)
					> version: s/c/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					> version: s/_/c/h/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/e/p/e
					TRYING: e
					> version: s/_/ch/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/e/p/e
					TRYING: e
					> version: sc/_/h/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/h/e/p/e
					TRYING: e
					> version: sc/h/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/e/_/p/e
					TRYING: e
					> version: s/ch/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/e/_/p/e
					TRYING: e
					> version: sc/h/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/c/h/e/p/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: sc/_/_/h/e/p/e
					TRYING: e
					> version: sch/_/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/ch/e/p/e
					TRYING: e
					> version: sc/_/_/h/e/p/e
					TRYING: e
					> version: sc/_/_/h/e/p/e
					TRYING: e
					> version: sch/_/_/e/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/h/e/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'e', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'e', '_', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'e', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/_/c/h/e/p/e(CACCVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
s/_/ch/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sc/_/h/e/p/e(CACVCV)
sch/_/e/p/e(CAVCV)
sc/_/h/e/p/e(CACVCV)
s/c/_/h/e/p/e(CCACVCV)
sc/h/_/e/p/e(CCAVCV)
sch/e/_/p/e(CVACV)
s/ch/_/e/p/e(CCAVCV)
sc/h/_/e/p/e(CCAVCV)
sc/h/_/e/p/e(CCAVCV)
sch/e/_/p/e(CVACV)
sc/h/_/e/p/e(CCAVCV)
s/_/_/c/h/e/p/e(CAACCVCV)
sc/_/_/h/e/p/e(CAACVCV)
sch/_/_/e/p/e(CAAVCV)
s/_/_/ch/e/p/e(CAACVCV)
sc/_/_/h/e/p/e(CAACVCV)
sc/_/_/h/e/p/e(CAACVCV)
sch/_/_/e/p/e(CAAVCV)
sc/_/_/h/e/p/e(CAACVCV)
s/c/h/e/_/p/e(CCCVACV)
sc/h/e/p/_/e(CCVCAV)
sch/e/p/e/_(CVCVA)
s/ch/e/p/_/e(CCVCAV)
sc/h/e/p/_/e(CCVCAV)
sc/h/e/p/_/e(CCVCAV)
sch/e/p/e/_(CVCVA)
sc/h/e/p/_/e(CCVCAV)
s/_/c/h/_/e/p/e(CACCAVCV)
sc/_/h/e/_/p/e(CACVACV)
sch/_/e/p/_/e(CAVCAV)
s/_/ch/e/_/p/e(CACVACV)
sc/_/h/e/_/p/e(CACVACV)
sc/_/h/e/_/p/e(CACVACV)
sch/_/e/p/_/e(CAVCAV)
sc/_/h/e/_/p/e(CACVACV)
s/c/_/h/_/e/p/e(CCACAVCV)
sc/h/_/e/_/p/e(CCAVACV)
sch/e/_/p/_/e(CVACAV)
s/ch/_/e/_/p/e(CCAVACV)
sc/h/_/e/_/p/e(CCAVACV)
sc/h/_/e/_/p/e(CCAVACV)
sch/e/_/p/_/e(CVACAV)
sc/h/_/e/_/p/e(CCAVACV)
s/_/_/c/_/h/e/p/e(CAACACVCV)
sc/_/_/h/_/e/p/e(CAACAVCV)
sch/_/_/e/_/p/e(CAAVACV)
s/_/_/ch/_/e/p/e(CAACAVCV)
sc/_/_/h/_/e/p/e(CAACAVCV)
sc/_/_/h/_/e/p/e(CAACAVCV)
sch/_/_/e/_/p/e(CAAVACV)
sc/_/_/h/_/e/p/e(CAACAVCV)
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/_/c/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['s', '_', 'ch', 'e', 'p', 'e']
				{'string': 's/_/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', 'e']
				{'string': 'sch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', '_', 'h', 'e', 'p', 'e']
				{'string': 's/c/_/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/h/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', 'p', 'e']
				version split: ['sch', 'e', '_', 'p', 'e']
				{'string': 'sch/e/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'p', 'e']
				version split: ['s', 'ch', '_', 'e', 'p', 'e']
				{'string': 's/ch/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'e', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/h/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/h/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', 'p', 'e']
				version split: ['sch', 'e', '_', 'p', 'e']
				{'string': 'sch/e/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/h/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/_/_/c/h/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', '_', 'e', 'p', 'e']
				{'string': 'sch/_/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'e', 'p', 'e']
				version split: ['s', '_', '_', 'ch', 'e', 'p', 'e']
				{'string': 's/_/_/ch/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'p', 'e']
				version split: ['sch', '_', '_', 'e', 'p', 'e']
				{'string': 'sch/_/_/e/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/e/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', '_', 'p', 'e']
				{'string': 's/c/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', '_', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['s', 'ch', 'e', 'p', '_', 'e']
				{'string': 's/ch/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', '_', 'e']
				{'string': 'sc/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', '_', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'e', 'p', 'e']
				{'string': 's/_/c/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'e', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				{'string': 'sc/_/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', '_', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', '_', 'e']
				{'string': 'sch/_/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', '_', 'e']
				version split: ['s', '_', 'ch', 'e', '_', 'p', 'e']
				{'string': 's/_/ch/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				{'string': 'sc/_/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				{'string': 'sc/_/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', '_', 'p', 'e']
				version split: ['sch', '_', 'e', 'p', '_', 'e']
				{'string': 'sch/_/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', 'e', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'e', '_', 'p', 'e']
				{'string': 'sc/_/h/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', '_', 'p', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'e', 'p', 'e']
				{'string': 's/c/_/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'e', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				{'string': 'sc/h/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', '_', 'p', 'e']
				version split: ['sch', 'e', '_', 'p', '_', 'e']
				{'string': 'sch/e/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'p', '_', 'e']
				version split: ['s', 'ch', '_', 'e', '_', 'p', 'e']
				{'string': 's/ch/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'e', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				{'string': 'sc/h/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				{'string': 'sc/h/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', '_', 'p', 'e']
				version split: ['sch', 'e', '_', 'p', '_', 'e']
				{'string': 'sch/e/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'p', '_', 'e']
				version split: ['sc', 'h', '_', 'e', '_', 'p', 'e']
				{'string': 'sc/h/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'e', '_', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'e', 'p', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				version split: ['sch', '_', '_', 'e', '_', 'p', 'e']
				{'string': 'sch/_/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'e', '_', 'p', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'e', 'p', 'e']
				{'string': 's/_/_/ch/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				version split: ['sch', '_', '_', 'e', '_', 'p', 'e']
				{'string': 'sch/_/_/e/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'e', '_', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				{'string': 'sc/_/_/h/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'e', 'p', 'e']
				ANALYSING: schipe
					resolving (64)
					> version: s/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: s/_/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/c/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					TRYING: e
					> version: s/_/ch/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/ch/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/e
					TRYING: e
					> version: sch/_/i/p/e
					TRYING: e
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/c/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/e
					TRYING: e
					> version: sch/i/_/p/e
					TRYING: e
					> version: s/ch/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/e
					TRYING: e
					> version: sch/i/_/p/e
					TRYING: e
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: s/_/_/c/h/i/p/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sch/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/ch/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sch/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/_/c/h/i/p/e(CACCACV)
s/_/c/h/i/p/e(CACCACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
s/_/ch/i/p/e(CACACV)
s/_/ch/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
sch/_/i/p/e(CAACV)
sch/_/i/p/e(CAACV)
sc/_/h/i/p/e(CACACV)
sc/_/h/i/p/e(CACACV)
s/c/_/h/i/p/e(CCACACV)
s/c/_/h/i/p/e(CCACACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sch/i/_/p/e(CAACV)
sch/i/_/p/e(CAACV)
s/ch/_/i/p/e(CCAACV)
s/ch/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
sch/i/_/p/e(CAACV)
sch/i/_/p/e(CAACV)
sc/h/_/i/p/e(CCAACV)
sc/h/_/i/p/e(CCAACV)
s/_/_/c/h/i/p/e(CAACCACV)
s/_/_/c/h/i/p/e(CAACCACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sch/_/_/i/p/e(CAAACV)
sch/_/_/i/p/e(CAAACV)
s/_/_/ch/i/p/e(CAACACV)
s/_/_/ch/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
sch/_/_/i/p/e(CAAACV)
sch/_/_/i/p/e(CAAACV)
sc/_/_/h/i/p/e(CAACACV)
sc/_/_/h/i/p/e(CAACACV)
s/c/h/i/_/p/e(CCCAACV)
s/c/h/i/_/p/e(CCCAACV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/_/e(CCACAV)
s/ch/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/_/e(CCACAV)
sc/h/i/p/_/e(CCACAV)
s/_/c/h/_/i/p/e(CACCAACV)
s/_/c/h/_/i/p/e(CACCAACV)
sc/_/h/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
sch/_/i/p/_/e(CAACAV)
sch/_/i/p/_/e(CAACAV)
s/_/ch/i/_/p/e(CACAACV)
s/_/ch/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
sch/_/i/p/_/e(CAACAV)
sch/_/i/p/_/e(CAACAV)
sc/_/h/i/_/p/e(CACAACV)
sc/_/h/i/_/p/e(CACAACV)
s/c/_/h/_/i/p/e(CCACAACV)
s/c/_/h/_/i/p/e(CCACAACV)
sc/h/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
sch/i/_/p/_/e(CAACAV)
sch/i/_/p/_/e(CAACAV)
s/ch/_/i/_/p/e(CCAAACV)
s/ch/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
sch/i/_/p/_/e(CAACAV)
sch/i/_/p/_/e(CAACAV)
sc/h/_/i/_/p/e(CCAAACV)
sc/h/_/i/_/p/e(CCAAACV)
s/_/_/c/_/h/i/p/e(CAACACACV)
s/_/_/c/_/h/i/p/e(CAACACACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sch/_/_/i/_/p/e(CAAAACV)
sch/_/_/i/_/p/e(CAAAACV)
s/_/_/ch/_/i/p/e(CAACAACV)
s/_/_/ch/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sch/_/_/i/_/p/e(CAAAACV)
sch/_/_/i/_/p/e(CAAAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
sc/_/_/h/_/i/p/e(CAACAACV)
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'e']
				{'string': 'sch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'p', 'e']
				{'string': 's/c/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'p', 'e']
				{'string': 's/c/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'e']
				{'string': 'sch/i/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'e']
				{'string': 'sch/i/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', 'p', 'e']
				{'string': 's/ch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', 'p', 'e']
				{'string': 's/ch/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'e']
				{'string': 'sch/i/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'e']
				{'string': 'sch/i/_/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/h/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'e']
				{'string': 'sch/_/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'e']
				{'string': 'sch/_/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'p', 'e']
				{'string': 's/_/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'e']
				{'string': 'sch/_/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'e']
				{'string': 'sch/_/_/i/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'e']
				{'string': 's/ch/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'e']
				{'string': 'sc/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'e']
				{'string': 'sch/_/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'e']
				{'string': 'sch/_/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'p', 'e']
				{'string': 's/_/ch/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'p', 'e']
				{'string': 's/_/ch/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'e']
				{'string': 'sch/_/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'e']
				{'string': 'sch/_/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'e']
				{'string': 'sch/i/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'e']
				{'string': 'sch/i/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'p', 'e']
				{'string': 's/ch/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'p', 'e']
				{'string': 's/ch/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'e']
				{'string': 'sch/i/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'e']
				{'string': 'sch/i/_/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'e']
				ANALYSING: schippe
					resolving (128)
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: s/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/p/p/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: s/ch/i/pp/e
					TRYING: e
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sch/i/pp/e
					> version: sch/i/pp/e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: sc/h/i/pp/e
					TRYING: e
					> version: s/_/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/c/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/ch/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/c/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/pp/e
					TRYING: e
					> version: sch/_/i/pp/e
					TRYING: e
					> version: s/_/ch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/ch/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/i/pp/e
					TRYING: e
					> version: sch/_/i/pp/e
					TRYING: e
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/h/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/c/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/c/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/c/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/pp/e
					TRYING: e
					> version: sch/i/_/pp/e
					TRYING: e
					> version: s/ch/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/_/pp/e
					TRYING: e
					> version: sch/i/_/pp/e
					TRYING: e
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: s/_/_/c/h/i/p/p/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sch/_/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/ch/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: s/_/_/c/h/i/pp/e
					TRYING: h
					adding blocked set: C = C >> p, pp, n, _, h
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sch/_/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/p/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/ch/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/p/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sch/_/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/_/_/i/pp/e
					TRYING: pp
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: sc/_/_/h/i/pp/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'pp', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', '_', 'ch', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sch', '_', 'i', 'pp', '_', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', '_', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', 'ch', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', '_', 'e']
				adding dashed alternative: ['sch', 'i', '_', 'pp', '_', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				adding dashed alternative: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				s/c/h/i/p/p/e(CCCCCCV)
s/c/h/i/p/p/e(CCCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
s/ch/i/p/p/e(CCCCCV)
s/ch/i/p/p/e(CCVCCV)
s/c/h/i/pp/e(CCCCCV)
s/c/h/i/pp/e(CCCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/p/p/e(CCCCV)
sch/i/p/p/e(CVCCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
s/ch/i/pp/e(CCCCV)
s/ch/i/pp/e(CCVCV)
sc/h/i/p/p/e(CCCCCV)
sc/h/i/p/p/e(CCVCCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
sch/i/pp/e(CCCV)
sch/i/pp/e(CVCV)
sc/h/i/pp/e(CCCCV)
sc/h/i/pp/e(CCVCV)
s/_/c/h/i/p/p/e(CACCACCV)
s/_/c/h/i/p/p/e(CACCACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/ch/i/p/p/e(CACACCV)
s/_/c/h/i/pp/e(CACCACV)
s/_/c/h/i/pp/e(CACCACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/p/p/e(CAACCV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
s/_/ch/i/pp/e(CACACV)
s/_/ch/i/pp/e(CACACV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/p/p/e(CACACCV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
sch/_/i/pp/e(CAACV)
sch/_/i/pp/e(CAACV)
sc/_/h/i/pp/e(CACACV)
sc/_/h/i/pp/e(CACACV)
s/c/_/h/i/p/p/e(CCACACCV)
s/c/_/h/i/p/p/e(CCACACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/p/p/e(CAACCV)
s/ch/_/i/p/p/e(CCAACCV)
s/ch/_/i/p/p/e(CCAACCV)
s/c/_/h/i/pp/e(CCACACV)
s/c/_/h/i/pp/e(CCACACV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/p/p/e(CAACCV)
sch/i/_/pp/e(CAACV)
sch/i/_/pp/e(CAACV)
s/ch/_/i/pp/e(CCAACV)
s/ch/_/i/pp/e(CCAACV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/p/p/e(CCAACCV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
sch/i/_/pp/e(CAACV)
sch/i/_/pp/e(CAACV)
sc/h/_/i/pp/e(CCAACV)
sc/h/_/i/pp/e(CCAACV)
s/_/_/c/h/i/p/p/e(CAACCACCV)
s/_/_/c/h/i/p/p/e(CAACCACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/p/p/e(CAAACCV)
s/_/_/ch/i/p/p/e(CAACACCV)
s/_/_/ch/i/p/p/e(CAACACCV)
s/_/_/c/h/i/pp/e(CAACCACV)
s/_/_/c/h/i/pp/e(CAACCACV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/p/p/e(CAAACCV)
sch/_/_/i/pp/e(CAAACV)
sch/_/_/i/pp/e(CAAACV)
s/_/_/ch/i/pp/e(CAACACV)
s/_/_/ch/i/pp/e(CAACACV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/p/p/e(CAACACCV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
sch/_/_/i/pp/e(CAAACV)
sch/_/_/i/pp/e(CAAACV)
sc/_/_/h/i/pp/e(CAACACV)
sc/_/_/h/i/pp/e(CAACACV)
s/c/h/i/_/p/p/e(CCCAACCV)
s/c/h/i/_/p/p/e(CCCAACCV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sch/i/p/p/_/e(CACCAV)
sch/i/p/p/_/e(CACCAV)
s/ch/i/p/_/p/e(CCACACV)
s/ch/i/p/_/p/e(CCACACV)
s/c/h/i/_/pp/e(CCCAACV)
s/c/h/i/_/pp/e(CCCAACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sch/i/p/p/_/e(CACCAV)
sch/i/p/p/_/e(CACCAV)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
s/ch/i/pp/_/e(CCACAV)
s/ch/i/pp/_/e(CCACAV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/p/_/p/e(CCACACV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
sch/i/pp/e/_(CACVA)
sch/i/pp/e/_(CACVA)
sc/h/i/pp/_/e(CCACAV)
sc/h/i/pp/_/e(CCACAV)
s/_/c/h/_/i/p/p/e(CACCAACCV)
s/_/c/h/_/i/p/p/e(CACCAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sch/_/i/p/_/p/e(CAACACV)
sch/_/i/p/_/p/e(CAACACV)
s/_/ch/i/_/p/p/e(CACAACCV)
s/_/ch/i/_/p/p/e(CACAACCV)
s/_/c/h/_/i/pp/e(CACCAACV)
s/_/c/h/_/i/pp/e(CACCAACV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/pp/e(CACAACV)
sc/_/h/i/_/pp/e(CACAACV)
sch/_/i/p/_/p/e(CAACACV)
sch/_/i/p/_/p/e(CAACACV)
sch/_/i/pp/_/e(CAACAV)
sch/_/i/pp/_/e(CAACAV)
s/_/ch/i/_/pp/e(CACAACV)
s/_/ch/i/_/pp/e(CACAACV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/p/p/e(CACAACCV)
sc/_/h/i/_/pp/e(CACAACV)
sc/_/h/i/_/pp/e(CACAACV)
sc/_/h/i/_/pp/e(CACAACV)
sc/_/h/i/_/pp/e(CACAACV)
sch/_/i/pp/_/e(CAACAV)
sch/_/i/pp/_/e(CAACAV)
sc/_/h/i/_/pp/e(CACAACV)
sc/_/h/i/_/pp/e(CACAACV)
s/c/_/h/_/i/p/p/e(CCACAACCV)
s/c/_/h/_/i/p/p/e(CCACAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sch/i/_/p/_/p/e(CAACACV)
sch/i/_/p/_/p/e(CAACACV)
s/ch/_/i/_/p/p/e(CCAAACCV)
s/ch/_/i/_/p/p/e(CCAAACCV)
s/c/_/h/_/i/pp/e(CCACAACV)
s/c/_/h/_/i/pp/e(CCACAACV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/pp/e(CCAAACV)
sch/i/_/p/_/p/e(CAACACV)
sch/i/_/p/_/p/e(CAACACV)
sch/i/_/pp/_/e(CAACAV)
sch/i/_/pp/_/e(CAACAV)
s/ch/_/i/_/pp/e(CCAAACV)
s/ch/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/p/p/e(CCAAACCV)
sc/h/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/pp/e(CCAAACV)
sch/i/_/pp/_/e(CAACAV)
sch/i/_/pp/_/e(CAACAV)
sc/h/_/i/_/pp/e(CCAAACV)
sc/h/_/i/_/pp/e(CCAAACV)
s/_/_/c/_/h/i/p/p/e(CAACACACCV)
s/_/_/c/_/h/i/p/p/e(CAACACACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sch/_/_/i/_/p/p/e(CAAAACCV)
sch/_/_/i/_/p/p/e(CAAAACCV)
s/_/_/ch/_/i/p/p/e(CAACAACCV)
s/_/_/ch/_/i/p/p/e(CAACAACCV)
s/_/_/c/_/h/i/pp/e(CAACACACV)
s/_/_/c/_/h/i/pp/e(CAACACACV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sch/_/_/i/_/p/p/e(CAAAACCV)
sch/_/_/i/_/p/p/e(CAAAACCV)
sch/_/_/i/_/pp/e(CAAAACV)
sch/_/_/i/_/pp/e(CAAAACV)
s/_/_/ch/_/i/pp/e(CAACAACV)
s/_/_/ch/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/p/p/e(CAACAACCV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sch/_/_/i/_/pp/e(CAAAACV)
sch/_/_/i/_/pp/e(CAAAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
sc/_/_/h/_/i/pp/e(CAACAACV)
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/ch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/c/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', 'e']
				{'string': 'sch/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['s', 'ch', 'i', 'pp', 'e']
				{'string': 's/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sch', 'i', 'pp', 'e']
				{'string': 'sch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'pp', 'e']
				{'string': 'sc/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/i/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['s', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', 'e']
				version split: ['s', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/ch/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/h/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/c/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/i/_/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/i/_/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', 'p', 'p', 'e']
				{'string': 's/ch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', 'p', 'p', 'e']
				{'string': 's/ch/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'pp', 'e']
				{'string': 's/c/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', '_', 'h', 'i', 'pp', 'e']
				{'string': 's/c/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sch', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/i/_/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/i/_/p/p/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', 'i', '_', 'pp', 'e']
				{'string': 'sch/i/_/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', 'e']
				version split: ['sch', 'i', '_', 'pp', 'e']
				{'string': 'sch/i/_/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', 'e']
				version split: ['s', 'ch', '_', 'i', 'pp', 'e']
				{'string': 's/ch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'pp', 'e']
				version split: ['s', 'ch', '_', 'i', 'pp', 'e']
				{'string': 's/ch/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sch', 'i', '_', 'pp', 'e']
				{'string': 'sch/i/_/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', 'e']
				version split: ['sch', 'i', '_', 'pp', 'e']
				{'string': 'sch/i/_/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/h/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				{'string': 's/_/_/c/h/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/p/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'ch', 'i', 'pp', 'e']
				{'string': 's/_/_/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/i/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', 'pp', 'e']
				{'string': 'sch/_/_/i/pp/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'i', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 's/c/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', '_', 'p', 'e']
				{'string': 's/ch/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['s', 'c', 'h', 'i', '_', 'pp', 'e']
				{'string': 's/c/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'p', 'p', '_', 'e']
				{'string': 'sch/i/p/p/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_', 'e']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['s', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', 'e']
				version split: ['s', 'ch', 'i', 'pp', '_', 'e']
				{'string': 's/ch/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', '_', 'p', 'e']
				{'string': 'sc/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', 'p', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sch', 'i', 'pp', 'e', '_']
				{'string': 'sch/i/pp/e/_', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', 'e', '_']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['sc', 'h', 'i', 'pp', '_', 'e']
				{'string': 'sc/h/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				{'string': 'sch/_/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				{'string': 'sch/_/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				{'string': 's/_/ch/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				{'string': 's/_/ch/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'p', 'p', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				version split: ['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				{'string': 's/_/c/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				{'string': 'sch/_/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'p', '_', 'p', 'e']
				{'string': 'sch/_/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'p', '_', 'p', 'e']
				version split: ['sch', '_', 'i', 'pp', '_', 'e']
				{'string': 'sch/_/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_', 'e']
				version split: ['sch', '_', 'i', 'pp', '_', 'e']
				{'string': 'sch/_/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'pp', 'e']
				{'string': 's/_/ch/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'pp', 'e']
				version split: ['s', '_', 'ch', 'i', '_', 'pp', 'e']
				{'string': 's/_/ch/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/_/h/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sch', '_', 'i', 'pp', '_', 'e']
				{'string': 'sch/_/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_', 'e']
				version split: ['sch', '_', 'i', 'pp', '_', 'e']
				{'string': 'sch/_/i/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', 'i', 'pp', '_', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', 'h', 'i', '_', 'pp', 'e']
				{'string': 'sc/_/h/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'i', '_', 'pp', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				{'string': 'sch/i/_/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				{'string': 'sch/i/_/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 's/ch/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 's/ch/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 's/c/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				{'string': 'sch/i/_/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'p', '_', 'p', 'e']
				{'string': 'sch/i/_/p/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'p', '_', 'p', 'e']
				version split: ['sch', 'i', '_', 'pp', '_', 'e']
				{'string': 'sch/i/_/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', '_', 'e']
				version split: ['sch', 'i', '_', 'pp', '_', 'e']
				{'string': 'sch/i/_/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', '_', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'pp', 'e']
				{'string': 's/ch/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'pp', 'e']
				version split: ['s', 'ch', '_', 'i', '_', 'pp', 'e']
				{'string': 's/ch/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'ch', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sc/h/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sch', 'i', '_', 'pp', '_', 'e']
				{'string': 'sch/i/_/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', '_', 'e']
				version split: ['sch', 'i', '_', 'pp', '_', 'e']
				{'string': 'sch/i/_/pp/_/e', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', 'i', '_', 'pp', '_', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', 'h', '_', 'i', '_', 'pp', 'e']
				{'string': 'sc/h/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', 'h', '_', 'i', '_', 'pp', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'p', 'p', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				{'string': 's/_/_/c/_/h', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', '_', 'h', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				{'string': 'sch/_/_/i/_/p', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'p', 'p', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				{'string': 'sch/_/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				{'string': 'sch/_/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'pp', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				version split: ['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				{'string': 's/_/_/ch/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'p', 'p', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				{'string': 'sch/_/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'pp', 'e']
				version split: ['sch', '_', '_', 'i', '_', 'pp', 'e']
				{'string': 'sch/_/_/i/_/pp', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sch', '_', '_', 'i', '_', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				version split: ['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				{'string': 'sc/_/_/h/_/i', 'rgx': '((sch)|(sc)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', '_', 'i', 'pp', 'e']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/_/i
					> version: s/_/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'i', '_']
				adding dashed alternative: ['s', '_', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/_/i(CAAA)
s/_/_/i(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/_/i/_(CAAAA)
s/_/_/i/_(CAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', '_', 'i']
				{'string': 's/_/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i']
				version split: ['s', '_', '_', 'i']
				{'string': 's/_/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', '_', 'i', '_']
				{'string': 's/_/_/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				version split: ['s', '_', '_', 'i', '_']
				{'string': 's/_/_/i/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/_/p
					> version: s/i/_/p
					> version: s/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', '_', 'i', '_', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/_/p(CAAC)
s/i/_/p(CAAC)
s/_/_/i/p(CAAAC)
s/_/_/i/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/_/p/_(CAACA)
s/i/_/p/_(CAACA)
s/_/_/i/_/p(CAAAAC)
s/_/_/i/_/p(CAAAAC)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', '_', 'p']
				{'string': 's/i/_/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p']
				version split: ['s', 'i', '_', 'p']
				{'string': 's/i/_/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p']
				version split: ['s', '_', '_', 'i', 'p']
				{'string': 's/_/_/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', 'p']
				version split: ['s', '_', '_', 'i', 'p']
				{'string': 's/_/_/i/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', '_', 'p', '_']
				{'string': 's/i/_/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', '_']
				version split: ['s', 'i', '_', 'p', '_']
				{'string': 's/i/_/p/_', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', '_']
				version split: ['s', '_', '_', 'i', '_', 'p']
				{'string': 's/_/_/i/_/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', '_', 'p']
				version split: ['s', '_', '_', 'i', '_', 'p']
				{'string': 's/_/_/i/_/p', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', '_', 'p']
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/i/_/p/e
					TRYING: e
					> version: s/i/_/p/e
					TRYING: e
					> version: s/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 'i', '_', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/_/p/e(CAACV)
s/i/_/p/e(CAACV)
s/_/_/i/p/e(CAAACV)
s/_/_/i/p/e(CAAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
s/i/_/p/_/e(CAACAV)
s/i/_/p/_/e(CAACAV)
s/_/_/i/_/p/e(CAAAACV)
s/_/_/i/_/p/e(CAAAACV)
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', '_', 'p', 'e']
				{'string': 's/i/_/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', 'e']
				version split: ['s', 'i', '_', 'p', 'e']
				{'string': 's/i/_/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'i', 'p', 'e']
				{'string': 's/_/_/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 'i', 'p', 'e']
				{'string': 's/_/_/i/p/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'i', '_', 'p', '_', 'e']
				{'string': 's/i/_/p/_/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', '_', 'e']
				version split: ['s', 'i', '_', 'p', '_', 'e']
				{'string': 's/i/_/p/_/e', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 'i', '_', 'p', '_', 'e']
				version split: ['s', '_', '_', 'i', '_', 'p', 'e']
				{'string': 's/_/_/i/_/p', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 'i', '_', 'p', 'e']
				{'string': 's/_/_/i/_/p', 'rgx': '((s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'i', '_', 'p', 'e']
				ANALYSING: ssip
					resolving (16)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/_/s/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/s/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/i/p
					> version: ss/_/i/p
					> version: s/s/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/s/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/i/_/p
					> version: ss/i/_/p
					> version: s/_/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/s/i/p
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: ss/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/_/i/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', '_', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'i', 'p']
				adding dashed alternative: ['ss', '_', '_', 'i', '_', 'p']
				adding dashed alternative: ['ss', '_', '_', 'i', '_', 'p']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/_/s/i/p(CACAC)
s/_/s/i/p(CACAC)
ss/_/i/p(CAAC)
ss/_/i/p(CAAC)
s/s/_/i/p(CCAAC)
s/s/_/i/p(CCAAC)
ss/i/_/p(CAAC)
ss/i/_/p(CAAC)
s/_/_/s/i/p(CAACAC)
s/_/_/s/i/p(CAACAC)
ss/_/_/i/p(CAAAC)
ss/_/_/i/p(CAAAC)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/_/s/i/_/p(CACAAC)
s/_/s/i/_/p(CACAAC)
ss/_/i/p/_(CAACA)
ss/_/i/p/_(CAACA)
s/s/_/i/_/p(CCAAAC)
s/s/_/i/_/p(CCAAAC)
ss/i/_/p/_(CAACA)
ss/i/_/p/_(CAACA)
s/_/_/s/_/i/p(CAACAAC)
s/_/_/s/_/i/p(CAACAAC)
ss/_/_/i/_/p(CAAAAC)
ss/_/_/i/_/p(CAAAAC)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['s', '_', 's', 'i', 'p']
				{'string': 's/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['ss', '_', 'i', 'p']
				{'string': 'ss/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p']
				version split: ['s', 's', '_', 'i', 'p']
				{'string': 's/s/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', 'p']
				version split: ['s', 's', '_', 'i', 'p']
				{'string': 's/s/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', 'p']
				version split: ['ss', 'i', '_', 'p']
				{'string': 'ss/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p']
				version split: ['ss', 'i', '_', 'p']
				{'string': 'ss/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p']
				version split: ['s', '_', '_', 's', 'i', 'p']
				{'string': 's/_/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'p']
				version split: ['s', '_', '_', 's', 'i', 'p']
				{'string': 's/_/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'p']
				version split: ['ss', '_', '_', 'i', 'p']
				{'string': 'ss/_/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'p']
				version split: ['ss', '_', '_', 'i', 'p']
				{'string': 'ss/_/_/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'p']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', '_', 's', 'i', '_', 'p']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p']
				version split: ['s', '_', 's', 'i', '_', 'p']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['ss', '_', 'i', 'p', '_']
				{'string': 'ss/_/i/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_']
				version split: ['s', 's', '_', 'i', '_', 'p']
				{'string': 's/s/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', '_', 'p']
				version split: ['s', 's', '_', 'i', '_', 'p']
				{'string': 's/s/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', '_', 'p']
				version split: ['ss', 'i', '_', 'p', '_']
				{'string': 'ss/i/_/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', '_']
				version split: ['ss', 'i', '_', 'p', '_']
				{'string': 'ss/i/_/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', '_']
				version split: ['s', '_', '_', 's', '_', 'i', 'p']
				{'string': 's/_/_/s/_/i', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'i', 'p']
				version split: ['s', '_', '_', 's', '_', 'i', 'p']
				{'string': 's/_/_/s/_/i', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'i', 'p']
				version split: ['ss', '_', '_', 'i', '_', 'p']
				{'string': 'ss/_/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', '_', 'p']
				version split: ['ss', '_', '_', 'i', '_', 'p']
				{'string': 'ss/_/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', '_', 'p']
				ANALYSING: ssipe
					resolving (16)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/_/s/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/s/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/i/p/e
					TRYING: e
					> version: ss/_/i/p/e
					TRYING: e
					> version: s/s/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/s/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/i/_/p/e
					TRYING: e
					> version: ss/i/_/p/e
					TRYING: e
					> version: s/_/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: s/_/_/s/i/p/e
					TRYING: i
					adding blocked set: C = C >> p, pp, n, i, _
					> version: ss/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/_/i/p/e
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', '_', 's', 'i', '_', 'p', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['s', 's', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['ss', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', '_', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'i', 'p', 'e']
				adding dashed alternative: ['ss', '_', '_', 'i', '_', 'p', 'e']
				adding dashed alternative: ['ss', '_', '_', 'i', '_', 'p', 'e']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/_/s/i/p/e(CACACV)
s/_/s/i/p/e(CACACV)
ss/_/i/p/e(CAACV)
ss/_/i/p/e(CAACV)
s/s/_/i/p/e(CCAACV)
s/s/_/i/p/e(CCAACV)
ss/i/_/p/e(CAACV)
ss/i/_/p/e(CAACV)
s/_/_/s/i/p/e(CAACACV)
s/_/_/s/i/p/e(CAACACV)
ss/_/_/i/p/e(CAAACV)
ss/_/_/i/p/e(CAAACV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/_/s/i/_/p/e(CACAACV)
s/_/s/i/_/p/e(CACAACV)
ss/_/i/p/_/e(CAACAV)
ss/_/i/p/_/e(CAACAV)
s/s/_/i/_/p/e(CCAAACV)
s/s/_/i/_/p/e(CCAAACV)
ss/i/_/p/_/e(CAACAV)
ss/i/_/p/_/e(CAACAV)
s/_/_/s/_/i/p/e(CAACAACV)
s/_/_/s/_/i/p/e(CAACAACV)
ss/_/_/i/_/p/e(CAAAACV)
ss/_/_/i/_/p/e(CAAAACV)
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['s', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/s/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', 'e']
				{'string': 'ss/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', 'e']
				version split: ['s', 's', '_', 'i', 'p', 'e']
				{'string': 's/s/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', 'p', 'e']
				version split: ['s', 's', '_', 'i', 'p', 'e']
				{'string': 's/s/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', 'p', 'e']
				version split: ['ss', 'i', '_', 'p', 'e']
				{'string': 'ss/i/_/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', 'e']
				version split: ['ss', 'i', '_', 'p', 'e']
				{'string': 'ss/i/_/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', 'e']
				version split: ['s', '_', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'p', 'e']
				version split: ['s', '_', '_', 's', 'i', 'p', 'e']
				{'string': 's/_/_/s/i/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'i', 'p', 'e']
				version split: ['ss', '_', '_', 'i', 'p', 'e']
				{'string': 'ss/_/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'p', 'e']
				version split: ['ss', '_', '_', 'i', 'p', 'e']
				{'string': 'ss/_/_/i/p/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', '_', 's', 'i', '_', 'p', 'e']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p', 'e']
				version split: ['s', '_', 's', 'i', '_', 'p', 'e']
				{'string': 's/_/s/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', 's', 'i', '_', 'p', 'e']
				version split: ['ss', '_', 'i', 'p', '_', 'e']
				{'string': 'ss/_/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_', 'e']
				version split: ['ss', '_', 'i', 'p', '_', 'e']
				{'string': 'ss/_/i/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', 'i', 'p', '_', 'e']
				version split: ['s', 's', '_', 'i', '_', 'p', 'e']
				{'string': 's/s/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', '_', 'p', 'e']
				version split: ['s', 's', '_', 'i', '_', 'p', 'e']
				{'string': 's/s/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', 's', '_', 'i', '_', 'p', 'e']
				version split: ['ss', 'i', '_', 'p', '_', 'e']
				{'string': 'ss/i/_/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', '_', 'e']
				version split: ['ss', 'i', '_', 'p', '_', 'e']
				{'string': 'ss/i/_/p/_/e', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', 'i', '_', 'p', '_', 'e']
				version split: ['s', '_', '_', 's', '_', 'i', 'p', 'e']
				{'string': 's/_/_/s/_/i', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'i', 'p', 'e']
				version split: ['s', '_', '_', 's', '_', 'i', 'p', 'e']
				{'string': 's/_/_/s/_/i', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'i', 'p', 'e']
				version split: ['ss', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'ss/_/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', '_', 'p', 'e']
				version split: ['ss', '_', '_', 'i', '_', 'p', 'e']
				{'string': 'ss/_/_/i/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((i)|(e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'i', '_', 'p', 'e']
				ANALYSING: ssyp
					resolving (16)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/_/s/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/_/s/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/y/p
					> version: ss/_/y/p
					> version: s/s/_/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: s/s/_/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/y/_/p
					> version: ss/y/_/p
					> version: s/_/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, pp, n, y, _
					> version: s/_/_/s/y/p
					TRYING: y
					adding blocked set: C = C >> p, pp, n, y, _
					> version: ss/_/_/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					> version: ss/_/_/y/p
					TRYING: p
					adding blocked set: C = C >> p, _, n, pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', '_', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', '_', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['ss', '_', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', '_', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', '_', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'y', 'p']
				adding dashed alternative: ['s', '_', '_', 's', '_', 'y', 'p']
				adding dashed alternative: ['ss', '_', '_', 'y', '_', 'p']
				adding dashed alternative: ['ss', '_', '_', 'y', '_', 'p']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/_/s/y/p(CACAC)
s/_/s/y/p(CACAC)
ss/_/y/p(CAAC)
ss/_/y/p(CAAC)
s/s/_/y/p(CCAAC)
s/s/_/y/p(CCAAC)
ss/y/_/p(CAAC)
ss/y/_/p(CAAC)
s/_/_/s/y/p(CAACAC)
s/_/_/s/y/p(CAACAC)
ss/_/_/y/p(CAAAC)
ss/_/_/y/p(CAAAC)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/_/s/y/_/p(CACAAC)
s/_/s/y/_/p(CACAAC)
ss/_/y/p/_(CAACA)
ss/_/y/p/_(CAACA)
s/s/_/y/_/p(CCAAAC)
s/s/_/y/_/p(CCAAAC)
ss/y/_/p/_(CAACA)
ss/y/_/p/_(CAACA)
s/_/_/s/_/y/p(CAACAAC)
s/_/_/s/_/y/p(CAACAAC)
ss/_/_/y/_/p(CAAAAC)
ss/_/_/y/_/p(CAAAAC)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['s', '_', 's', 'y', 'p']
				{'string': 's/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['ss', '_', 'y', 'p']
				{'string': 'ss/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p']
				version split: ['s', 's', '_', 'y', 'p']
				{'string': 's/s/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', '_', 'y', 'p']
				version split: ['s', 's', '_', 'y', 'p']
				{'string': 's/s/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', '_', 'y', 'p']
				version split: ['ss', 'y', '_', 'p']
				{'string': 'ss/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', '_', 'p']
				version split: ['ss', 'y', '_', 'p']
				{'string': 'ss/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', '_', 'p']
				version split: ['s', '_', '_', 's', 'y', 'p']
				{'string': 's/_/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'y', 'p']
				version split: ['s', '_', '_', 's', 'y', 'p']
				{'string': 's/_/_/s/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'y', 'p']
				version split: ['ss', '_', '_', 'y', 'p']
				{'string': 'ss/_/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'y', 'p']
				version split: ['ss', '_', '_', 'y', 'p']
				{'string': 'ss/_/_/y/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'y', 'p']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', '_', 's', 'y', '_', 'p']
				{'string': 's/_/s/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', 'p']
				version split: ['s', '_', 's', 'y', '_', 'p']
				{'string': 's/_/s/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', 's', 'y', '_', 'p']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['ss', '_', 'y', 'p', '_']
				{'string': 'ss/_/y/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', 'y', 'p', '_']
				version split: ['s', 's', '_', 'y', '_', 'p']
				{'string': 's/s/_/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', '_', 'y', '_', 'p']
				version split: ['s', 's', '_', 'y', '_', 'p']
				{'string': 's/s/_/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', 's', '_', 'y', '_', 'p']
				version split: ['ss', 'y', '_', 'p', '_']
				{'string': 'ss/y/_/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', '_', 'p', '_']
				version split: ['ss', 'y', '_', 'p', '_']
				{'string': 'ss/y/_/p/_', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', 'y', '_', 'p', '_']
				version split: ['s', '_', '_', 's', '_', 'y', 'p']
				{'string': 's/_/_/s/_/y', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'y', 'p']
				version split: ['s', '_', '_', 's', '_', 'y', 'p']
				{'string': 's/_/_/s/_/y', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', '_', 'y', 'p']
				version split: ['ss', '_', '_', 'y', '_', 'p']
				{'string': 'ss/_/_/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'y', '_', 'p']
				version split: ['ss', '_', '_', 'y', '_', 'p']
				{'string': 'ss/_/_/y/_/p', 'rgx': '((ss)|(s))/((_))/((_))/((y))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'y', '_', 'p']
		only one version left: ['sc', '_', '_', 'i', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', '_', 'i', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'c', 'h', 'i', 'p']
		SPLIT: ['sch', 'i', 'p', 'e', 'n']
		SPLIT: ['s', 'c', 'h', 'i', 'pp']
		SPLIT: ['sc', '_', '_', 'i', '_']
		['sc', '_', '_', 'i', '_']
		['sc', '_', '_', 'i', '_']
		SPLIT: ['sc.s', '_', '_', 'i', '_', '----!']
		SPLIT: ['sc.s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['sc.s', '_', '_', 'i', '_', '----!']
		SPLIT: ['sc.s', '_', '_', 'u', '_', '----!']
		SPLIT: ['sh.s', '_', '_', 'i', '_', '----!']
		SPLIT: ['sh.s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['sh.s', '_', '_', 'i', '_', '----!']
		SPLIT: ['sch.sc.s', '_', '_', 'e', '_', '----!']
		SPLIT: ['sch.sc.s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['sch.sc.s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['s', '_', '_', 'i', '_']
		['s', '_', '_', 'i', '_']
		['s', '_', '_', 'i', '_']
		SPLIT: ['s', '_', '_', 'i', '_', '----!']
		SPLIT: ['s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['ss.s', '_', '_', 'i', '_', '----!']
		SPLIT: ['ss.s', '_', '_', 'i.e', '_', '----!']
		SPLIT: ['ss.s', '_', '_', 'y', '_', '----!']
		version for pattern CCCVC is INVALID
		[{'i', '_', 'c'}, {'h', '_', 'p'}, {'p', '_', 'n', 'pp'}]
		15
		OVERVIEW: version for pattern CCCVC
{'i', '_', 'c'}, {'h', '_', 'p'}, {'p', '_', 'n', 'pp'}
faulty splits: 15
sc.si----! <-! scip
sc.si.e----! <-! scipe
sc.si----! <-! scipp
sc.su----! <-! scup
sh.si----! <-! ship
sh.si.e----! <-! shipe
sh.si----! <-! shipp
sch.sc.se----! <-! schepe
sch.sc.si.e----! <-! schipe
sch.sc.si.e----! <-! schippe
si----! <-! sip
si.e----! <-! sipe
ss.si----! <-! ssip
ss.si.e----! <-! ssipe
ss.sy----! <-! ssyp
s | c | h | i | p
sch | i | p | e | n
s | c | h | i | pp
sc | _ | _ | i | _
sc.s | _ | _ | i | _ | ----!
sc.s | _ | _ | i.e | _ | ----!
sc.s | _ | _ | i | _ | ----!
sc.s | _ | _ | u | _ | ----!
sh.s | _ | _ | i | _ | ----!
sh.s | _ | _ | i.e | _ | ----!
sh.s | _ | _ | i | _ | ----!
sch.sc.s | _ | _ | e | _ | ----!
sch.sc.s | _ | _ | i.e | _ | ----!
sch.sc.s | _ | _ | i.e | _ | ----!
s | _ | _ | i | _
s | _ | _ | i | _ | ----!
s | _ | _ | i.e | _ | ----!
ss.s | _ | _ | i | _ | ----!
ss.s | _ | _ | i.e | _ | ----!
ss.s | _ | _ | y | _ | ----!
1 : {'i', '_', 'u', 'c'},{'i', '_', 'c', 's'},{'i', 'c'},{'i', '_', 'c', 'ch'},{'i', '_', 'y', 'c'},{'i', '_', 'h', 'c'},{'i', '_', 'cu', 'c'},{'i', '_', 'c'}
2 : {'h', '_', 'p', 'y'},{'h', '_', 'p', 's'},{'h', '_', 'p', 'pp'},{'h', '_', 'i', 'p'},{'h', '_', 'p', 'ch'},{'h', '_', 'p', 'c'},{'h', '_', 'cu', 'p'},{'h', 'i', 'p'},{'h', '_', 'p'},{'h', '_', 'p', 'u'},{'h', 'p', 'c'}
4 : {'p', 'pp', 'n', '_', 'h'},{'p', '_', 'n', 'pp'},{'p', 'i', 'n', 'pp'},{'p', 'pp', 'n', 'u', '_'},{'p', 'pp', 'n', 'y', '_'},{'p', 'pp', 'n', 'i', '_'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCVCCV
	Selection for pattern: CCCVCCV completed
	Making a version for pattern: CCCVCCV
			___CCCVCCV : 0___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: s
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/e/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/e/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/e/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: s
					> version: s/c/h/i/p/e
					TRYING: s
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCVCCV : 1___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: c
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/e/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/e/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/e/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: c
					> version: s/c/h/i/p/e
					TRYING: c
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCCVCCV : 2___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/cu/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', 'cu', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					RESULT:  ['i']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: h
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: h
					> version: s/c/h/i/p/e
					TRYING: h
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['y']
			___CCCVCCV : 3___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: u
					> version: s/c/_/u/p
					TRYING: u
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/cu/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: s/ch/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: p
					> version: sch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: i
					> version: s/c/h/i/p/e
					TRYING: i
					> version: sc/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: p
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
			___CCCVCCV : 4___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					TRYING: p
					> version: s/c/i/_/p
					TRYING: p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: p
					> version: s/c/_/u/p
					TRYING: p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					TRYING: p
					> version: s/h/i/_/p
					TRYING: p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: p
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					TRYING: e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['p']
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: p
					> version: s/c/h/i/p/e
					TRYING: p
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					TRYING: e
					> version: s/ch/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					TRYING: p
					> version: s/_/i/_/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					TRYING: p
					> version: s/s/i/_/p
					TRYING: p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					TRYING: p
					> version: s/s/y/_/p
					TRYING: p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['p']
			___CCCVCCV : 5___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/e/_(CCACVA)
s/c/i/p/e/_(CCACVA)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
s/c/i/p/_/_/e(CCACAAV)
s/c/i/p/_/_/e(CCACAAV)
sc/i/p/e/_/_(CACVAA)
sc/i/p/e/_/_(CACVAA)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['p']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/e/_(CCACVA)
s/h/i/p/e/_(CCACVA)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
s/h/i/p/_/_/e(CCACAAV)
s/h/i/p/_/_/e(CCACAAV)
sh/i/p/e/_/_(CACVAA)
sh/i/p/e/_/_(CACVAA)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['p']
				ANALYSING: schepe
					resolving (8)
					> version: s/c/h/e/p/e
					TRYING: e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'e', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'e', 'p', 'e', '_']
				s/c/h/e/p/e(CCCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
s/ch/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sc/h/e/p/e(CCVCV)
sch/e/p/e(CVCV)
sc/h/e/p/e(CCVCV)
s/c/h/e/p/_/e(CCCVCAV)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
s/ch/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sc/h/e/p/e/_(CCVCVA)
sch/e/p/e/_(CVCVA)
sc/h/e/p/e/_(CCVCVA)
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				ANALYSING: schipe
					resolving (16)
					> version: s/c/h/i/p/e
					TRYING: e
					> version: s/c/h/i/p/e
					TRYING: e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_']
				s/c/h/i/p/e(CCCCCV)
s/c/h/i/p/e(CCCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
s/ch/i/p/e(CCCCV)
s/ch/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
sch/i/p/e(CCCV)
sch/i/p/e(CVCV)
sc/h/i/p/e(CCCCV)
sc/h/i/p/e(CCVCV)
s/c/h/i/p/_/e(CCCACAV)
s/c/h/i/p/_/e(CCCACAV)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
s/ch/i/p/e/_(CCACVA)
s/ch/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
sch/i/p/e/_(CACVA)
sch/i/p/e/_(CACVA)
sc/h/i/p/e/_(CCACVA)
sc/h/i/p/e/_(CCACVA)
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: s/ch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: s/ch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					> version: sc/h/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'e', 'n', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				s/c/h/i/p/e/n(CCCCCVC)
s/c/h/i/p/e/n(CCCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
s/ch/i/p/e/n(CCCCVC)
s/ch/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
sch/i/p/e/n(CCCVC)
sch/i/p/e/n(CVCVC)
sc/h/i/p/e/n(CCCCVC)
sc/h/i/p/e/n(CCVCVC)
s/c/h/i/p/_/e/n(CCCACAVC)
s/c/h/i/p/_/e/n(CCCACAVC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sch/i/p/e/n/_(CACVCA)
sch/i/p/e/n/_(CACVCA)
s/ch/i/p/e/_/n(CCACVAC)
s/ch/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
sch/i/p/e/n/_(CACVCA)
sch/i/p/e/n/_(CACVCA)
sc/h/i/p/e/_/n(CCACVAC)
sc/h/i/p/e/_/n(CCACVAC)
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['p']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					TRYING: e
					> version: s/_/i/p/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/e/_(CAACVA)
s/_/i/p/e/_(CAACVA)
s/i/p/e/_/_(CACVAA)
s/i/p/e/_/_(CACVAA)
s/_/i/p/_/_/e(CAACAAV)
s/_/i/p/_/_/e(CAACAAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/e/_(CCACVA)
s/s/i/p/e/_(CCACVA)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
s/s/i/p/_/_/e(CCACAAV)
s/s/i/p/_/_/e(CCACAAV)
ss/i/p/e/_/_(CACVAA)
ss/i/p/e/_/_(CACVAA)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
			___CCCVCCV : 6___
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (32)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					> version: s/c/i/_/_/_
					> version: s/c/i/_/_/_
					> version: sc/i/_/_/_
					> version: sc/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
s/c/i/_/_/_/_(CCAAAAA)
s/c/i/_/_/_/_(CCAAAAA)
sc/i/_/_/_/_(CAAAAA)
sc/i/_/_/_/_(CAAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_', '_']
				{'string': 's/c/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_', '_']
				{'string': 's/c/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_', '_']
				{'string': 'sc/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_', '_']
				{'string': 'sc/i/_/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_', '_']
				ANALYSING: scip
					resolving (16)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					> version: s/c/i/p/_
					> version: s/c/i/p/_
					> version: sc/i/p/_
					> version: sc/i/p/_
					> version: s/c/i/_/p/_
					> version: s/c/i/_/p/_
					> version: sc/i/p/_/_
					> version: sc/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/p/_/_(CCACAA)
s/c/i/p/_/_(CCACAA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
s/c/i/_/p/_/_(CCAACAA)
s/c/i/_/p/_/_(CCAACAA)
sc/i/p/_/_/_(CACAAA)
sc/i/p/_/_/_(CACAAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_']
				{'string': 's/c/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_', '_']
				{'string': 's/c/i/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'p', '_', '_']
				{'string': 's/c/i/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['sc', 'i', 'p', '_', '_', '_']
				{'string': 'sc/i/p/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_', '_']
				{'string': 'sc/i/p/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_', '_']
				ANALYSING: scipe
					resolving (16)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					> version: s/c/i/p/_/e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					> version: s/c/i/p/e/_
					> version: s/c/i/p/e/_
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					> version: s/c/i/p/_/_/e
					TRYING: e
					> version: s/c/i/p/_/_/e
					TRYING: e
					> version: sc/i/p/e/_/_
					> version: sc/i/p/e/_/_
					RESULT:  ['e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', 'e', '_']
				{'string': 's/c/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'e']
				{'string': 's/c/i/p/_/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', '_', 'e']
				{'string': 's/c/i/p/_/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				version split: ['sc', 'i', 'p', 'e', '_', '_']
				{'string': 'sc/i/p/e/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_', '_']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					> version: s/c/i/_/p/p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/p/p/_(CCAACCA)
s/c/i/_/p/p/_(CCAACCA)
sc/i/p/_/p/_(CACACA)
sc/i/p/_/p/_(CACACA)
s/c/i/_/pp/_(CCAACA)
s/c/i/_/pp/_(CCAACA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'p', 'p', '_']
				{'string': 's/c/i/_/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'p', 'p', '_']
				{'string': 's/c/i/_/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				ANALYSING: scup
					resolving (28)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/c/u/p/_
					> version: s/c/u/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/cu/p/_
					> version: sc/u/p/_
					> version: sc/u/p/_
					> version: s/c/_/u/p/_
					> version: s/c/_/u/p/_
					> version: sc/u/_/p/_
					> version: sc/u/_/p/_
					> version: s/cu/_/p/_
					> version: sc/u/_/p/_
					> version: sc/u/_/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/c/u/p/_/_(CCACAA)
s/c/u/p/_/_(CCACAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/cu/p/_/_(CCCAA)
sc/u/p/_/_(CACAA)
sc/u/p/_/_(CACAA)
s/c/_/u/p/_/_(CCAACAA)
s/c/_/u/p/_/_(CCAACAA)
sc/u/_/p/_/_(CAACAA)
sc/u/_/p/_/_(CAACAA)
s/cu/_/p/_/_(CCACAA)
sc/u/_/p/_/_(CAACAA)
sc/u/_/p/_/_(CAACAA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'cu', '_', 'p']
				{'string': 's/cu/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['s', 'c', 'u', 'p', '_', '_']
				{'string': 's/c/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', 'cu', 'p', '_', '_']
				{'string': 's/cu/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['sc', 'u', 'p', '_', '_']
				{'string': 'sc/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_', '_']
				{'string': 's/c/_/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['s', 'c', '_', 'u', 'p', '_', '_']
				{'string': 's/c/_/u/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['s', 'cu', '_', 'p', '_', '_']
				{'string': 's/cu/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				version split: ['sc', 'u', '_', 'p', '_', '_']
				{'string': 'sc/u/_/p/_/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_', '_']
				ANALYSING: ship
					resolving (16)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					> version: s/h/i/p/_
					> version: s/h/i/p/_
					> version: sh/i/p/_
					> version: sh/i/p/_
					> version: s/h/i/_/p/_
					> version: s/h/i/_/p/_
					> version: sh/i/p/_/_
					> version: sh/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/p/_/_(CCACAA)
s/h/i/p/_/_(CCACAA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
s/h/i/_/p/_/_(CCAACAA)
s/h/i/_/p/_/_(CCAACAA)
sh/i/p/_/_/_(CACAAA)
sh/i/p/_/_/_(CACAAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_']
				{'string': 's/h/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_', '_']
				{'string': 's/h/i/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'p', '_', '_']
				{'string': 's/h/i/_/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['sh', 'i', 'p', '_', '_', '_']
				{'string': 'sh/i/p/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_', '_']
				{'string': 'sh/i/p/_/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_', '_']
				ANALYSING: shipe
					resolving (16)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					> version: s/h/i/p/_/e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					> version: s/h/i/p/e/_
					> version: s/h/i/p/e/_
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					> version: s/h/i/p/_/_/e
					TRYING: e
					> version: s/h/i/p/_/_/e
					TRYING: e
					> version: sh/i/p/e/_/_
					> version: sh/i/p/e/_/_
					RESULT:  ['e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', 'e', '_']
				{'string': 's/h/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'e']
				{'string': 's/h/i/p/_/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', '_', 'e']
				{'string': 's/h/i/p/_/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				version split: ['sh', 'i', 'p', 'e', '_', '_']
				{'string': 'sh/i/p/e/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_', '_']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					> version: s/h/i/_/p/p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/p/p/_(CCAACCA)
s/h/i/_/p/p/_(CCAACCA)
sh/i/p/_/p/_(CACACA)
sh/i/p/_/p/_(CACACA)
s/h/i/_/pp/_(CCAACA)
s/h/i/_/pp/_(CCAACA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'p', 'p', '_']
				{'string': 's/h/i/_/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'p', 'p', '_']
				{'string': 's/h/i/_/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				ANALYSING: schepe
					resolving (16)
					> version: s/c/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: s/ch/e/p/e
					> version: sc/h/e/p/e
					> version: sc/h/e/p/e
					> version: sch/e/p/e
					> version: sc/h/e/p/e
					> version: s/c/h/e/p/_/e
					TRYING: e
					> version: sc/h/e/p/e/_
					> version: sch/e/p/e/_
					> version: s/ch/e/p/e/_
					> version: sc/h/e/p/e/_
					> version: sc/h/e/p/e/_
					> version: sch/e/p/e/_
					> version: sc/h/e/p/e/_
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'p', 'e']
				{'string': 's/c/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['s', 'ch', 'e', 'p', 'e']
				{'string': 's/ch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['sch', 'e', 'p', 'e']
				{'string': 'sch/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e']
				version split: ['sc', 'h', 'e', 'p', 'e']
				{'string': 'sc/h/e/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e']
				version split: ['s', 'c', 'h', 'e', 'p', '_', 'e']
				{'string': 's/c/h/e/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['s', 'ch', 'e', 'p', 'e', '_']
				{'string': 's/ch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				version split: ['sch', 'e', 'p', 'e', '_']
				{'string': 'sch/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'e', 'p', 'e', '_']
				version split: ['sc', 'h', 'e', 'p', 'e', '_']
				{'string': 'sc/h/e/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h))/((e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'p', 'e', '_']
				ANALYSING: schip
					resolving (32)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: s/c/h/i/p/_
					> version: s/c/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sch/i/p/_
					> version: sch/i/p/_
					> version: s/ch/i/p/_
					> version: s/ch/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					> version: sch/i/p/_
					> version: sch/i/p/_
					> version: sc/h/i/p/_
					> version: sc/h/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
s/c/h/i/p/_/_(CCCACAA)
s/c/h/i/p/_/_(CCCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sch/i/p/_/_(CACAA)
sch/i/p/_/_(CACAA)
s/ch/i/p/_/_(CCACAA)
s/ch/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
sch/i/p/_/_(CACAA)
sch/i/p/_/_(CACAA)
sc/h/i/p/_/_(CCACAA)
sc/h/i/p/_/_(CCACAA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_']
				{'string': 's/c/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', '_', '_']
				{'string': 's/c/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', '_', '_']
				{'string': 's/ch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', '_']
				version split: ['s', 'ch', 'i', 'p', '_', '_']
				{'string': 's/ch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sch', 'i', 'p', '_', '_']
				{'string': 'sch/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				version split: ['sc', 'h', 'i', 'p', '_', '_']
				{'string': 'sc/h/i/p/_/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_', '_']
				ANALYSING: schipe
					resolving (32)
					> version: s/c/h/i/p/e
					> version: s/c/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: s/ch/i/p/e
					> version: s/ch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: sch/i/p/e
					> version: sch/i/p/e
					> version: sc/h/i/p/e
					> version: sc/h/i/p/e
					> version: s/c/h/i/p/_/e
					TRYING: e
					> version: s/c/h/i/p/_/e
					TRYING: e
					> version: sc/h/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sch/i/p/e/_
					> version: sch/i/p/e/_
					> version: s/ch/i/p/e/_
					> version: s/ch/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sch/i/p/e/_
					> version: sch/i/p/e/_
					> version: sc/h/i/p/e/_
					> version: sc/h/i/p/e/_
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e']
				{'string': 's/c/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['s', 'ch', 'i', 'p', 'e']
				{'string': 's/ch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sch', 'i', 'p', 'e']
				{'string': 'sch/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['sc', 'h', 'i', 'p', 'e']
				{'string': 'sc/h/i/p/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e']
				{'string': 's/c/h/i/p/_/e', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_']
				{'string': 's/ch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sch', 'i', 'p', 'e', '_']
				{'string': 'sch/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_']
				{'string': 'sc/h/i/p/e/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_']
				ANALYSING: schipen
					resolving (32)
					> version: s/c/h/i/p/e/n
					TRYING: n
					> version: s/c/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: s/ch/i/p/e/n
					> version: s/ch/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: sc/h/i/p/e/n
					> version: s/c/h/i/p/_/e/n
					TRYING: e
					> version: s/c/h/i/p/_/e/n
					TRYING: e
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sch/i/p/e/n/_
					> version: sch/i/p/e/n/_
					> version: s/ch/i/p/e/_/n
					TRYING: n
					> version: s/ch/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sch/i/p/e/n/_
					> version: sch/i/p/e/n/_
					> version: sc/h/i/p/e/_/n
					TRYING: n
					> version: sc/h/i/p/e/_/n
					TRYING: n
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				{'string': 's/c/h/i/p/_/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				{'string': 's/c/h/i/p/_/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				{'string': 's/ch/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', '_', 'n']
				{'string': 's/ch/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sch', 'i', 'p', 'e', 'n', '_']
				{'string': 'sch/i/p/e/n/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n', '_']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', '_', 'n']
				{'string': 'sc/h/i/p/e/_/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((_))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', '_', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					> version: s/c/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/p/p/_(CCCACCA)
s/c/h/i/p/p/_(CCCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				{'string': 's/c/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', 'p', '_']
				{'string': 's/c/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				ANALYSING: si
					resolving (32)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					> version: s/i/_/_/_
					> version: s/i/_/_/_
					> version: s/_/i/_/_/_
					> version: s/_/i/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
s/i/_/_/_/_(CAAAAA)
s/i/_/_/_/_(CAAAAA)
s/_/i/_/_/_/_(CAAAAAA)
s/_/i/_/_/_/_(CAAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_', '_']
				{'string': 's/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_', '_']
				{'string': 's/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_', '_']
				{'string': 's/_/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_', '_']
				{'string': 's/_/i/_/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (16)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/p/_
					> version: s/_/i/p/_
					> version: s/i/p/_/_
					> version: s/i/p/_/_
					> version: s/_/i/_/p/_
					> version: s/_/i/_/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/p/_/_(CAACAA)
s/_/i/p/_/_(CAACAA)
s/i/p/_/_/_(CACAAA)
s/i/p/_/_/_(CACAAA)
s/_/i/_/p/_/_(CAAACAA)
s/_/i/_/p/_/_(CAAACAA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_']
				{'string': 's/_/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_', '_']
				{'string': 's/i/p/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_', '_']
				version split: ['s', 'i', 'p', '_', '_', '_']
				{'string': 's/i/p/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_', '_']
				{'string': 's/_/i/_/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', 'p', '_', '_']
				{'string': 's/_/i/_/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))/((_))$'}
				ANALYSING: sipe
					resolving (16)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					> version: s/_/i/p/_/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/e/_
					> version: s/_/i/p/e/_
					> version: s/i/p/e/_/_
					> version: s/i/p/e/_/_
					> version: s/_/i/p/_/_/e
					TRYING: e
					> version: s/_/i/p/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', 'e', '_']
				{'string': 's/_/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', 'i', 'p', 'e', '_', '_']
				{'string': 's/i/p/e/_/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_', '_']
				version split: ['s', '_', 'i', 'p', '_', '_', 'e']
				{'string': 's/_/i/p/_/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', '_', 'e']
				{'string': 's/_/i/p/_/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', '_', 'e']
				ANALYSING: ssip
					resolving (16)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					> version: s/s/i/p/_
					> version: s/s/i/p/_
					> version: ss/i/p/_
					> version: ss/i/p/_
					> version: s/s/i/_/p/_
					> version: s/s/i/_/p/_
					> version: ss/i/p/_/_
					> version: ss/i/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/p/_/_(CCACAA)
s/s/i/p/_/_(CCACAA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
s/s/i/_/p/_/_(CCAACAA)
s/s/i/_/p/_/_(CCAACAA)
ss/i/p/_/_/_(CACAAA)
ss/i/p/_/_/_(CACAAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', 'p', '_', '_']
				{'string': 's/s/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['s', 's', 'i', '_', 'p', '_', '_']
				{'string': 's/s/i/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 's', 'i', '_', 'p', '_', '_']
				{'string': 's/s/i/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				version split: ['ss', 'i', 'p', '_', '_', '_']
				{'string': 'ss/i/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_', '_']
				{'string': 'ss/i/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_', '_']
				ANALYSING: ssipe
					resolving (16)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					> version: s/s/i/p/_/e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					> version: s/s/i/p/e/_
					> version: s/s/i/p/e/_
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					> version: s/s/i/p/_/_/e
					TRYING: e
					> version: s/s/i/p/_/_/e
					TRYING: e
					> version: ss/i/p/e/_/_
					> version: ss/i/p/e/_/_
					RESULT:  ['e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', 'e', '_']
				{'string': 's/s/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['s', 's', 'i', 'p', '_', '_', 'e']
				{'string': 's/s/i/p/_/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', '_', 'e']
				{'string': 's/s/i/p/_/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				version split: ['ss', 'i', 'p', 'e', '_', '_']
				{'string': 'ss/i/p/e/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_', '_']
				ANALYSING: ssyp
					resolving (16)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					> version: s/s/y/p/_
					> version: s/s/y/p/_
					> version: ss/y/p/_
					> version: ss/y/p/_
					> version: s/s/y/_/p/_
					> version: s/s/y/_/p/_
					> version: ss/y/p/_/_
					> version: ss/y/p/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/p/_/_(CCACAA)
s/s/y/p/_/_(CCACAA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
s/s/y/_/p/_/_(CCAACAA)
s/s/y/_/p/_/_(CCAACAA)
ss/y/p/_/_/_(CACAAA)
ss/y/p/_/_/_(CACAAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', 'p', '_', '_']
				{'string': 's/s/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['s', 's', 'y', '_', 'p', '_', '_']
				{'string': 's/s/y/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				version split: ['s', 's', 'y', '_', 'p', '_', '_']
				{'string': 's/s/y/_/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				version split: ['ss', 'y', 'p', '_', '_', '_']
				{'string': 'ss/y/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_', '_']
				{'string': 'ss/y/p/_/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 'c', 'i', '_', 'p', 'p', '_']
		only one version left: ['s', 'c', '_', 'u', 'p', '_', '_']
		only one version left: ['s', 'h', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 'h', 'i', '_', 'p', 'p', '_']
		only one version left: ['s', 'c', 'h', 'e', 'p', '_', 'e']
		only one version left: ['s', 'c', 'h', 'i', 'p', '_', '_']
		only one version left: ['s', 'c', 'h', 'i', 'p', '_', 'e']
		FAIL: 
		only one version left: ['s', 'c', 'h', 'i', 'p', 'p', '_']
		only one version left: ['s', '_', 'i', '_', '_', '_', '_']
		only one version left: ['s', '_', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 's', 'i', '_', 'p', '_', '_']
		FAIL: 
		only one version left: ['s', 's', 'y', '_', 'p', '_', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'p', 'e']
		SPLIT: ['s', 'c', 'i', '_', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_', '_']
		SPLIT: ['s', 'c', 'i', '_', 'p', '_', '_']
		['s', 'c', 'i', '_', 'p', '_', '_']
		['s', 'c', 'i', '_', 'p', '_', '_']
		SPLIT: ['sc.s', 'c', 'i', 'e', '_', '_', 'e', '----!']
		SPLIT: ['s', 'c', 'i', '_', 'p', 'p', '_']
		['s', 'c', 'i', '_', 'p', 'p', '_']
		['s', 'c', 'i', '_', 'p', 'p', '_']
		SPLIT: ['s', 'c', '_', 'u', 'p', '_', '_']
		['s', 'c', '_', 'u', 'p', '_', '_']
		['s', 'c', '_', 'u', 'p', '_', '_']
		SPLIT: ['s', 'h', 'i', '_', 'p', '_', '_']
		['s', 'h', 'i', '_', 'p', '_', '_']
		['s', 'h', 'i', '_', 'p', '_', '_']
		SPLIT: ['sh.s', 'h', 'i', 'e', '_', '_', 'e', '----!']
		SPLIT: ['s', 'h', 'i', '_', 'p', 'p', '_']
		['s', 'h', 'i', '_', 'p', 'p', '_']
		['s', 'h', 'i', '_', 'p', 'p', '_']
		SPLIT: ['s', 'c', 'h', 'e', 'p', '_', 'e']
		['s', 'c', 'h', 'e', 'p', '_', 'e']
		SPLIT: ['s', 'c', 'h', 'i', 'p', '_', '_']
		['s', 'c', 'h', 'i', 'p', '_', '_']
		['s', 'c', 'h', 'i', 'p', '_', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', '_', 'e']
		['s', 'c', 'h', 'i', 'p', '_', 'e']
		['s', 'c', 'h', 'i', 'p', '_', 'e']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h.i', 'i.e', 'p', '_', 'e', '----!']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'p', '_']
		['s', 'c', 'h', 'i', 'p', 'p', '_']
		['s', 'c', 'h', 'i', 'p', 'p', '_']
		SPLIT: ['s', '_', 'i', '_', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_', '_']
		SPLIT: ['s', '_', 'i', '_', 'p', '_', '_']
		['s', '_', 'i', '_', 'p', '_', '_']
		['s', '_', 'i', '_', 'p', '_', '_']
		SPLIT: ['s', '_', 'i', 'e', '_', '_', 'e', '----!']
		SPLIT: ['s', 's', 'i', '_', 'p', '_', '_']
		['s', 's', 'i', '_', 'p', '_', '_']
		['s', 's', 'i', '_', 'p', '_', '_']
		SPLIT: ['ss.s', 's', 'i', 'e', '_', '_', 'e', '----!']
		SPLIT: ['s', 's', 'y', '_', 'p', '_', '_']
		['s', 's', 'y', '_', 'p', '_', '_']
		['s', 's', 'y', '_', 'p', '_', '_']
		version for pattern CCCVCCV is INVALID
		[]
		5
		OVERVIEW: version for pattern CCCVCCV

faulty splits: 5
sc.sciee----! <-! scipe
sh.shiee----! <-! shipe
sch.sc.sh.c.chh.ii.epe----! <-! schipen
siee----! <-! sipe
ss.ssiee----! <-! ssipe
s | c | h | i | p | p | e
s | c | i | _ | _ | _ | _
s | c | i | _ | p | _ | _
sc.s | c | i | e | _ | _ | e | ----!
s | c | i | _ | p | p | _
s | c | _ | u | p | _ | _
s | h | i | _ | p | _ | _
sh.s | h | i | e | _ | _ | e | ----!
s | h | i | _ | p | p | _
s | c | h | e | p | _ | e
s | c | h | i | p | _ | _
s | c | h | i | p | _ | e
sch.sc.s | h.c.ch | h.i | i.e | p | _ | e | ----!
s | c | h | i | p | p | _
s | _ | i | _ | _ | _ | _
s | _ | i | _ | p | _ | _
s | _ | i | e | _ | _ | e | ----!
s | s | i | _ | p | _ | _
ss.s | s | i | e | _ | _ | e | ----!
s | s | y | _ | p | _ | _
1 : {'h', 'i', 'c', 'ch'},{'i', '_', 'ch', 'c', 'h'}
2 : {'h', 'i', 'p'},{'h', 'i', 'u'}
5 : {'p', '_', 'n'}
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'cu', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'cu', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'pp', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'pp', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=4
	Pattern CCCCCVC is invalid
	Pattern CVCVC is valid
	Pattern CCCCCV is invalid
	Pattern CVCV is valid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCCVC is invalid
	Pattern CCCVCC is valid
	Pattern CCVC is valid
	Pattern CCVCCV is valid
	Pattern CCCCV is invalid
	Pattern CCCVCVC is valid
	Pattern CCCCCC is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCVCV is valid
	Pattern CV is invalid
	Pattern CVCC is valid
	Pattern CCCCC is invalid
	Pattern CCCV is valid
	Pattern CCVCVC is valid
	Pattern CCC is invalid
	Pattern CCCVC is valid
	Pattern CCCVCCV is valid
	Pattern CC is invalid
	Pattern CCCCCCV is invalid
	Pattern CCCVCV is valid
	Pattern CCV is invalid
	Making the selection for pattern: CCCVCV
	Selection for pattern: CCCVCV completed
	Making a version for pattern: CCCVCV
			___CCCVCV : 0___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: s
					> version: s/c/i
					TRYING: s
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: s
					> version: s/c/i/p
					TRYING: s
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: s
					> version: s/c/i/p/e
					TRYING: s
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/e
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: s
					> version: s/c/i/p/p
					TRYING: s
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/c/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: s
					> version: s/c/u/p
					TRYING: s
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: s/cu/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/u/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					RESULT:  ['sc', 's']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: s
					> version: s/h/i/p
					TRYING: s
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: s
					> version: s/h/i/p/e
					TRYING: s
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/e
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: s
					> version: s/h/i/p/p
					TRYING: s
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/p/p
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: s/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					> version: sh/i/pp
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'sh', 's'}
					RESULT:  ['sh', 's']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: s
					> version: s/c/h/i/p
					TRYING: s
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: s/c/h/i/p/e/n
					TRYING: s
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/e/n
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/e/n
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/e/n
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: s
					> version: s/c/h/i/p/p
					TRYING: s
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/p/p
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/c/h/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/p/p
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: s/ch/i/pp
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/p/p
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sch/i/pp
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					> version: sc/h/i/pp
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'sch', 'sc', 's'}
					RESULT:  ['sch', 'sc', 's']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: s
					> version: s/i
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: s
					> version: s/i/p
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: s
					> version: s/i/p/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/i/p/e
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					> version: ss/y/p
					TRYING: ss
					>>> MULTIPLE RESOLVE OPTIONS: {'ss', 's'}
					RESULT:  ['ss', 's']
			___CCCVCV : 1___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: c
					> version: s/c/i
					TRYING: c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: c
					> version: s/c/i/p
					TRYING: c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: c
					> version: s/c/i/p/e
					TRYING: c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: c
					> version: s/c/i/p/p
					TRYING: c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/p/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: s/c/i/pp
					TRYING: c
					> version: s/c/i/pp
					TRYING: c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sc/i/pp
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['c']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: c
					> version: s/c/u/p
					TRYING: c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: s/cu/p
					TRYING: cu
					adding blocked set: C = C >> cu, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					> version: sc/u/p
					TRYING: u
					adding blocked set: C = C >> u, c
					RESULT:  ['c']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: h
					> version: s/h/i/p
					TRYING: h
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					> version: sh/i/p
					TRYING: i
					adding blocked set: C = C >> i, c
					RESULT:  ['h']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: h
					> version: s/h/i/p/e
					TRYING: h
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/e
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: h
					> version: s/h/i/p/p
					TRYING: h
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: s/h/i/pp
					TRYING: h
					> version: s/h/i/pp
					TRYING: h
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					> version: sh/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c
					RESULT:  ['h']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: c
					> version: s/c/h/i/p
					TRYING: c
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p
					TRYING: i
					adding blocked set: C = C >> h, i, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: s/c/h/i/p/e/n
					TRYING: c
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/e/n
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/e/n
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/e/n
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: c
					> version: s/c/h/i/p/p
					TRYING: c
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/p/p
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/c/h/i/pp
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/p/p
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ch/i/pp
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/p/p
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sch/i/pp
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: sc/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: si
					resolving (2)
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					> version: s/i
					TRYING: i
					adding blocked set: C = C >> h, i, c, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i']
				adding dashed alternative: ['s', '_', 'i']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
				ANALYSING: sip
					resolving (2)
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p']
				adding dashed alternative: ['s', '_', 'i', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
				ANALYSING: sipe
					resolving (2)
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: s/i/p/e
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: s
					> version: s/s/i/p
					TRYING: s
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					> version: ss/i/p
					TRYING: i
					adding blocked set: C = C >> i, _, ch, c, h
					RESULT:  ['s']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: s
					> version: s/s/i/p/e
					TRYING: s
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					> version: ss/i/p/e
					TRYING: i
					adding blocked set: C = C >> ch, _, i, c, s, h
					RESULT:  ['s']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: s
					> version: s/s/y/p
					TRYING: s
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					> version: ss/y/p
					TRYING: y
					adding blocked set: C = C >> y, ch, _, c, s, h
					RESULT:  ['s']
			___CCCVCV : 2___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					TRYING: i
					> version: s/c/i
					TRYING: i
					> version: sc/i
					> version: sc/i
					RESULT:  ['i']
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: i
					> version: s/c/i/p
					TRYING: i
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: i
					> version: s/c/i/p/e
					TRYING: i
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['i']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: i
					> version: s/c/i/p/p
					TRYING: i
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/c/i/pp
					TRYING: i
					> version: s/c/i/pp
					TRYING: i
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					> version: sc/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, pp
					RESULT:  ['i']
				ANALYSING: scup
					resolving (7)
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: s/c/u/p
					TRYING: u
					adding blocked set: C = C >> h, i, u
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: s/cu/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					> version: sc/u/p
					TRYING: p
					adding blocked set: C = C >> h, i, p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['s', 'cu', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				adding dashed alternative: ['sc', 'u', '_', 'p']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: i
					> version: s/h/i/p
					TRYING: i
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: i
					> version: s/h/i/p/e
					TRYING: i
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: i
					> version: s/h/i/p/p
					TRYING: i
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: sh/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/h/i/pp
					TRYING: i
					> version: s/h/i/pp
					TRYING: i
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					> version: sh/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					RESULT:  ['i']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: h
					> version: s/c/h/i/p
					TRYING: h
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: s/c/h/i/p/e/n
					TRYING: h
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/e/n
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/e/n
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: h
					> version: s/c/h/i/p/p
					TRYING: h
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/c/h/i/pp
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/p/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: s/ch/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/p/p
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sch/i/pp
					TRYING: pp
					adding blocked set: C = C >> h, i, _, pp
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					> version: sc/h/i/pp
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'i'}
					RESULT:  ['h', 'i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					TRYING: i
					> version: s/_/i
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p
					TRYING: i
					> version: s/_/i/p
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: s/_/i/p/e
					TRYING: i
					> version: s/_/i/p/e
					TRYING: i
					RESULT:  ['i']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: i
					> version: s/s/i/p
					TRYING: i
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: i
					> version: s/s/i/p/e
					TRYING: i
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/i/p/e
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['i']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: y
					> version: s/s/y/p
					TRYING: y
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					> version: ss/y/p
					TRYING: p
					adding blocked set: C = C >> h, i, _, p
					RESULT:  ['y']
			___CCCVCV : 3___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (4)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
				ANALYSING: scip
					resolving (4)
					> version: s/c/i/p
					TRYING: p
					> version: s/c/i/p
					TRYING: p
					> version: sc/i/p
					> version: sc/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: p
					> version: s/c/i/p/e
					TRYING: p
					> version: sc/i/p/e
					TRYING: e
					> version: sc/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: scipp
					resolving (8)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: sc/i/p/p
					TRYING: p
					> version: s/c/i/pp
					TRYING: pp
					> version: s/c/i/pp
					TRYING: pp
					> version: sc/i/pp
					> version: sc/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					TRYING: p
					> version: s/c/u/p
					TRYING: p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: u
					> version: s/c/_/u/p
					TRYING: u
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: s/cu/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					> version: sc/u/_/p
					TRYING: p
					RESULT:  ['u']
				ANALYSING: ship
					resolving (4)
					> version: s/h/i/p
					TRYING: p
					> version: s/h/i/p
					TRYING: p
					> version: sh/i/p
					> version: sh/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: p
					> version: s/h/i/p/e
					TRYING: p
					> version: sh/i/p/e
					TRYING: e
					> version: sh/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: shipp
					resolving (8)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: sh/i/p/p
					TRYING: p
					> version: s/h/i/pp
					TRYING: pp
					> version: s/h/i/pp
					TRYING: pp
					> version: sh/i/pp
					> version: sh/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: i
					> version: s/c/h/i/p
					TRYING: i
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					TRYING: p
					> version: s/ch/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					TRYING: p
					> version: sc/h/i/p
					TRYING: p
					RESULT:  ['i']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: s/c/h/i/p/e/n
					TRYING: i
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: p
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: s/ch/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sch/i/p/e/n
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					> version: sc/h/i/p/e/n
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'i', 'e'}
					RESULT:  ['i', 'e']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: i
					> version: s/c/h/i/p/p
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: i
					> version: s/c/h/i/pp
					TRYING: i
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/p/p
					TRYING: p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: s/ch/i/pp
					TRYING: pp
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					TRYING: pp
					> version: sc/h/i/pp
					TRYING: pp
					RESULT:  ['i']
				ANALYSING: si
					resolving (4)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
				ANALYSING: sip
					resolving (4)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					TRYING: p
					> version: s/_/i/p
					TRYING: p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				adding dashed alternative: ['s', '_', 'i', '_', 'p']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					TRYING: e
					> version: s/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: p
					> version: s/_/i/p/e
					TRYING: p
					RESULT:  ['e']
				ANALYSING: ssip
					resolving (4)
					> version: s/s/i/p
					TRYING: p
					> version: s/s/i/p
					TRYING: p
					> version: ss/i/p
					> version: ss/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['s', 's', 'i', '_', 'p']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: p
					> version: s/s/i/p/e
					TRYING: p
					> version: ss/i/p/e
					TRYING: e
					> version: ss/i/p/e
					TRYING: e
					RESULT:  ['e']
				ANALYSING: ssyp
					resolving (4)
					> version: s/s/y/p
					TRYING: p
					> version: s/s/y/p
					TRYING: p
					> version: ss/y/p
					> version: ss/y/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['s', 's', 'y', '_', 'p']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
			___CCCVCV : 4___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (8)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					TRYING: p
					> version: s/c/i/_/p
					TRYING: p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['p']
				ANALYSING: scipe
					resolving (4)
					> version: s/c/i/p/e
					TRYING: e
					> version: s/c/i/p/e
					TRYING: e
					> version: sc/i/p/e
					> version: sc/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'e', '_']
				s/c/i/p/e(CCCCV)
s/c/i/p/e(CCVCV)
sc/i/p/e(CCCV)
sc/i/p/e(CVCV)
s/c/i/p/_/e(CCACAV)
s/c/i/p/_/e(CCACAV)
sc/i/p/e/_(CACVA)
sc/i/p/e/_(CACVA)
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					TRYING: p
					> version: s/c/i/p/p
					TRYING: p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: sc/i/p/_/p
					TRYING: p
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					TRYING: p
					> version: s/c/_/u/p
					TRYING: p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['p']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					TRYING: p
					> version: s/h/i/_/p
					TRYING: p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['p']
				ANALYSING: shipe
					resolving (4)
					> version: s/h/i/p/e
					TRYING: e
					> version: s/h/i/p/e
					TRYING: e
					> version: sh/i/p/e
					> version: sh/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_', 'e']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'e', '_']
				s/h/i/p/e(CCCCV)
s/h/i/p/e(CCVCV)
sh/i/p/e(CCCV)
sh/i/p/e(CVCV)
s/h/i/p/_/e(CCACAV)
s/h/i/p/_/e(CCACAV)
sh/i/p/e/_(CACVA)
sh/i/p/e/_(CACVA)
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					TRYING: p
					> version: s/h/i/p/p
					TRYING: p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: sh/i/p/_/p
					TRYING: p
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/h/i/_/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sh/i/pp/_
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					TRYING: p
					> version: s/c/h/i/p
					TRYING: p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['p']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: s/c/h/i/p/e/n
					TRYING: p
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: s/ch/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sch/i/p/e/n
					TRYING: n
					adding blocked set: C = C >> p, _, n, pp
					> version: sc/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: e
					RESULT:  ['p']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					TRYING: p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/ch/i/p/p
					TRYING: p
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/c/h/i/pp
					TRYING: pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/p/p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: s/ch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/p/p
					TRYING: p
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sch/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					> version: sc/h/i/pp
					>>> MULTIPLE RESOLVE OPTIONS: {'p', 'pp'}
					RESULT:  ['p', 'pp']
				ANALYSING: si
					resolving (8)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					TRYING: p
					> version: s/_/i/_/p
					TRYING: p
					RESULT:  ['p']
				ANALYSING: sipe
					resolving (4)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					TRYING: e
					> version: s/_/i/p/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', 'i', 'p', 'e', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', '_', 'i', 'p', '_', 'e']
				s/i/p/e(CCCV)
s/i/p/e(CVCV)
s/_/i/p/e(CAACV)
s/_/i/p/e(CAACV)
s/i/p/e/_(CACVA)
s/i/p/e/_(CACVA)
s/_/i/p/_/e(CAACAV)
s/_/i/p/_/e(CAACAV)
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					TRYING: p
					> version: s/s/i/_/p
					TRYING: p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['p']
				ANALYSING: ssipe
					resolving (4)
					> version: s/s/i/p/e
					TRYING: e
					> version: s/s/i/p/e
					TRYING: e
					> version: ss/i/p/e
					> version: ss/i/p/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['s', 's', 'i', 'p', '_', 'e']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				adding dashed alternative: ['ss', 'i', 'p', 'e', '_']
				s/s/i/p/e(CCCCV)
s/s/i/p/e(CCVCV)
ss/i/p/e(CCCV)
ss/i/p/e(CVCV)
s/s/i/p/_/e(CCACAV)
s/s/i/p/_/e(CCACAV)
ss/i/p/e/_(CACVA)
ss/i/p/e/_(CACVA)
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					TRYING: p
					> version: s/s/y/_/p
					TRYING: p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['p']
			___CCCVCV : 5___
				ANALYSING: schepe
				adding littera based on matching pattern
				ANALYSING: schipe
				adding littera based on matching pattern
				ANALYSING: schippe
				adding littera based on matching pattern
				ANALYSING: sci
					resolving (16)
					> version: s/c/i
					> version: s/c/i
					> version: sc/i
					> version: sc/i
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_
					> version: s/c/i/_
					> version: sc/i/_
					> version: sc/i/_
					> version: s/c/i/_/_
					> version: s/c/i/_/_
					> version: sc/i/_/_
					> version: sc/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['sc', 'i', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				adding dashed alternative: ['sc', 'i', '_', '_', '_']
				s/c/i(CCC)
s/c/i(CCV)
sc/i(CC)
sc/i(CV)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_(CCAA)
s/c/i/_(CCAA)
sc/i/_(CAA)
sc/i/_(CAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_(CCAAA)
s/c/i/_/_(CCAAA)
sc/i/_/_(CAAA)
sc/i/_/_(CAAA)
s/c/i/_/_/_(CCAAAA)
s/c/i/_/_/_(CCAAAA)
sc/i/_/_/_(CAAAA)
sc/i/_/_/_(CAAAA)
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['s', 'c', 'i']
				{'string': 's/c/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['sc', 'i']
				{'string': 'sc/i', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['s', 'c', 'i', '_']
				{'string': 's/c/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['sc', 'i', '_']
				{'string': 'sc/i/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_']
				{'string': 's/c/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['sc', 'i', '_', '_']
				{'string': 'sc/i/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_']
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				version split: ['s', 'c', 'i', '_', '_', '_']
				{'string': 's/c/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				version split: ['sc', 'i', '_', '_', '_']
				{'string': 'sc/i/_/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', 'i', '_', '_', '_']
				ANALYSING: scip
					resolving (8)
					> version: s/c/i/p
					> version: s/c/i/p
					> version: sc/i/p
					> version: sc/i/p
					> version: s/c/i/_/p
					> version: s/c/i/_/p
					> version: sc/i/p/_
					> version: sc/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', '_']
				s/c/i/p(CCCC)
s/c/i/p(CCVC)
sc/i/p(CCC)
sc/i/p(CVC)
s/c/i/_/p(CCAAC)
s/c/i/_/p(CCAAC)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/p/_(CCACA)
s/c/i/p/_(CCACA)
sc/i/p/_(CACA)
sc/i/p/_(CACA)
s/c/i/_/p/_(CCAACA)
s/c/i/_/p/_(CCAACA)
sc/i/p/_/_(CACAA)
sc/i/p/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['s', 'c', 'i', 'p']
				{'string': 's/c/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['sc', 'i', 'p']
				{'string': 'sc/i/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p']
				{'string': 's/c/i/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['s', 'c', 'i', 'p', '_']
				{'string': 's/c/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['sc', 'i', 'p', '_']
				{'string': 'sc/i/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'p', '_']
				{'string': 's/c/i/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				version split: ['sc', 'i', 'p', '_', '_']
				{'string': 'sc/i/p/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', '_']
				ANALYSING: scipe
					resolving (8)
					> version: s/c/i/p/e
					> version: s/c/i/p/e
					> version: sc/i/p/e
					> version: sc/i/p/e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: s/c/i/p/_/e
					TRYING: e
					> version: sc/i/p/e/_
					> version: sc/i/p/e/_
					RESULT:  ['e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', 'e']
				{'string': 's/c/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['sc', 'i', 'p', 'e']
				{'string': 'sc/i/p/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['s', 'c', 'i', 'p', '_', 'e']
				{'string': 's/c/i/p/_/e', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'c', 'i', 'p', '_', 'e']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				version split: ['sc', 'i', 'p', 'e', '_']
				{'string': 'sc/i/p/e/_', 'rgx': '((sc)|(s))/((c))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sc', 'i', 'p', 'e', '_']
				ANALYSING: scipp
					resolving (16)
					> version: s/c/i/p/p
					> version: s/c/i/p/p
					> version: sc/i/p/p
					> version: sc/i/p/p
					> version: s/c/i/pp
					> version: s/c/i/pp
					> version: sc/i/pp
					> version: sc/i/pp
					> version: s/c/i/_/p/p
					TRYING: p
					> version: s/c/i/_/p/p
					TRYING: p
					> version: sc/i/p/_/p
					> version: sc/i/p/_/p
					> version: s/c/i/_/pp
					> version: s/c/i/_/pp
					> version: sc/i/pp/_
					> version: sc/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sc', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sc', 'i', 'pp', '_', '_']
				s/c/i/p/p(CCCCC)
s/c/i/p/p(CCVCC)
sc/i/p/p(CCCC)
sc/i/p/p(CVCC)
s/c/i/pp(CCCC)
s/c/i/pp(CCVC)
sc/i/pp(CCC)
sc/i/pp(CVC)
s/c/i/_/p/p(CCAACC)
s/c/i/_/p/p(CCAACC)
sc/i/p/_/p(CACAC)
sc/i/p/_/p(CACAC)
s/c/i/_/pp(CCAAC)
s/c/i/_/pp(CCAAC)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/p/p/_(CCACCA)
s/c/i/p/p/_(CCACCA)
sc/i/p/p/_(CACCA)
sc/i/p/p/_(CACCA)
s/c/i/pp/_(CCACA)
s/c/i/pp/_(CCACA)
sc/i/pp/_(CACA)
sc/i/pp/_(CACA)
s/c/i/_/p/_/p(CCAACAC)
s/c/i/_/p/_/p(CCAACAC)
sc/i/p/_/p/_(CACACA)
sc/i/p/_/p/_(CACACA)
s/c/i/_/pp/_(CCAACA)
s/c/i/_/pp/_(CCAACA)
sc/i/pp/_/_(CACAA)
sc/i/pp/_/_(CACAA)
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'p', 'p']
				{'string': 's/c/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['sc', 'i', 'p', 'p']
				{'string': 'sc/i/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['s', 'c', 'i', 'pp']
				{'string': 's/c/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['sc', 'i', 'pp']
				{'string': 'sc/i/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['s', 'c', 'i', '_', 'p', 'p']
				{'string': 's/c/i/_/p/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p']
				{'string': 'sc/i/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['s', 'c', 'i', '_', 'pp']
				{'string': 's/c/i/_/pp', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'pp']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'p', 'p', '_']
				{'string': 's/c/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['sc', 'i', 'p', 'p', '_']
				{'string': 'sc/i/p/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', 'pp', '_']
				{'string': 's/c/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['sc', 'i', 'pp', '_']
				{'string': 'sc/i/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_']
				version split: ['s', 'c', 'i', '_', 'p', '_', 'p']
				{'string': 's/c/i/_/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'c', 'i', '_', 'p', '_', 'p']
				{'string': 's/c/i/_/p/_/p', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'i', '_', 'p', '_', 'p']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['sc', 'i', 'p', '_', 'p', '_']
				{'string': 'sc/i/p/_/p/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				version split: ['s', 'c', 'i', '_', 'pp', '_']
				{'string': 's/c/i/_/pp/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				version split: ['sc', 'i', 'pp', '_', '_']
				{'string': 'sc/i/pp/_/_', 'rgx': '((sc)|(s))/((c))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'i', 'pp', '_', '_']
				ANALYSING: scup
					resolving (14)
					> version: s/c/u/p
					> version: s/c/u/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/cu/p
					> version: sc/u/p
					> version: sc/u/p
					> version: s/c/_/u/p
					> version: s/c/_/u/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					> version: s/cu/_/p
					> version: sc/u/_/p
					> version: sc/u/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'cu', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['s', 'c', '_', 'u', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['s', 'cu', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				adding dashed alternative: ['sc', 'u', '_', 'p', '_']
				s/c/u/p(CCCC)
s/c/u/p(CCVC)
sc/u/p(CCC)
sc/u/p(CVC)
s/cu/p(CCC)
sc/u/p(CCC)
sc/u/p(CVC)
s/c/_/u/p(CCAAC)
s/c/_/u/p(CCAAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/cu/_/p(CCAC)
sc/u/_/p(CAAC)
sc/u/_/p(CAAC)
s/c/u/p/_(CCACA)
s/c/u/p/_(CCACA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/cu/p/_(CCCA)
sc/u/p/_(CACA)
sc/u/p/_(CACA)
s/c/_/u/p/_(CCAACA)
s/c/_/u/p/_(CCAACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
s/cu/_/p/_(CCACA)
sc/u/_/p/_(CAACA)
sc/u/_/p/_(CAACA)
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['s', 'c', 'u', 'p']
				{'string': 's/c/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'cu', 'p']
				{'string': 's/cu/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['sc', 'u', 'p']
				{'string': 'sc/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['s', 'c', '_', 'u', 'p']
				{'string': 's/c/_/u/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'u', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'cu', '_', 'p']
				{'string': 's/cu/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['sc', 'u', '_', 'p']
				{'string': 'sc/u/_/p', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['s', 'c', 'u', 'p', '_']
				{'string': 's/c/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'cu', 'p', '_']
				{'string': 's/cu/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['sc', 'u', 'p', '_']
				{'string': 'sc/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', 'p', '_']
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				version split: ['s', 'c', '_', 'u', 'p', '_']
				{'string': 's/c/_/u/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['s', 'cu', '_', 'p', '_']
				{'string': 's/cu/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['s', 'cu', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				version split: ['sc', 'u', '_', 'p', '_']
				{'string': 'sc/u/_/p/_', 'rgx': '((sc)|(s))/((c))/((_))/((u))/((p))/((_))$'}
				_____REMOVING________['sc', 'u', '_', 'p', '_']
				ANALYSING: ship
					resolving (8)
					> version: s/h/i/p
					> version: s/h/i/p
					> version: sh/i/p
					> version: sh/i/p
					> version: s/h/i/_/p
					> version: s/h/i/_/p
					> version: sh/i/p/_
					> version: sh/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', '_']
				s/h/i/p(CCCC)
s/h/i/p(CCVC)
sh/i/p(CCC)
sh/i/p(CVC)
s/h/i/_/p(CCAAC)
s/h/i/_/p(CCAAC)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/p/_(CCACA)
s/h/i/p/_(CCACA)
sh/i/p/_(CACA)
sh/i/p/_(CACA)
s/h/i/_/p/_(CCAACA)
s/h/i/_/p/_(CCAACA)
sh/i/p/_/_(CACAA)
sh/i/p/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['s', 'h', 'i', 'p']
				{'string': 's/h/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['sh', 'i', 'p']
				{'string': 'sh/i/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p']
				{'string': 's/h/i/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['s', 'h', 'i', 'p', '_']
				{'string': 's/h/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['sh', 'i', 'p', '_']
				{'string': 'sh/i/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'p', '_']
				{'string': 's/h/i/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				version split: ['sh', 'i', 'p', '_', '_']
				{'string': 'sh/i/p/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', '_']
				ANALYSING: shipe
					resolving (8)
					> version: s/h/i/p/e
					> version: s/h/i/p/e
					> version: sh/i/p/e
					> version: sh/i/p/e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: s/h/i/p/_/e
					TRYING: e
					> version: sh/i/p/e/_
					> version: sh/i/p/e/_
					RESULT:  ['e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', 'e']
				{'string': 's/h/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['sh', 'i', 'p', 'e']
				{'string': 'sh/i/p/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['s', 'h', 'i', 'p', '_', 'e']
				{'string': 's/h/i/p/_/e', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'h', 'i', 'p', '_', 'e']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				version split: ['sh', 'i', 'p', 'e', '_']
				{'string': 'sh/i/p/e/_', 'rgx': '((sh)|(s))/((h))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['sh', 'i', 'p', 'e', '_']
				ANALYSING: shipp
					resolving (16)
					> version: s/h/i/p/p
					> version: s/h/i/p/p
					> version: sh/i/p/p
					> version: sh/i/p/p
					> version: s/h/i/pp
					> version: s/h/i/pp
					> version: sh/i/pp
					> version: sh/i/pp
					> version: s/h/i/_/p/p
					TRYING: p
					> version: s/h/i/_/p/p
					TRYING: p
					> version: sh/i/p/_/p
					> version: sh/i/p/_/p
					> version: s/h/i/_/pp
					> version: s/h/i/_/pp
					> version: sh/i/pp/_
					> version: sh/i/pp/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['s', 'h', 'i', '_', 'p', '_', 'p']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['sh', 'i', 'p', '_', 'p', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['s', 'h', 'i', '_', 'pp', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				adding dashed alternative: ['sh', 'i', 'pp', '_', '_']
				s/h/i/p/p(CCCCC)
s/h/i/p/p(CCVCC)
sh/i/p/p(CCCC)
sh/i/p/p(CVCC)
s/h/i/pp(CCCC)
s/h/i/pp(CCVC)
sh/i/pp(CCC)
sh/i/pp(CVC)
s/h/i/_/p/p(CCAACC)
s/h/i/_/p/p(CCAACC)
sh/i/p/_/p(CACAC)
sh/i/p/_/p(CACAC)
s/h/i/_/pp(CCAAC)
s/h/i/_/pp(CCAAC)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/p/p/_(CCACCA)
s/h/i/p/p/_(CCACCA)
sh/i/p/p/_(CACCA)
sh/i/p/p/_(CACCA)
s/h/i/pp/_(CCACA)
s/h/i/pp/_(CCACA)
sh/i/pp/_(CACA)
sh/i/pp/_(CACA)
s/h/i/_/p/_/p(CCAACAC)
s/h/i/_/p/_/p(CCAACAC)
sh/i/p/_/p/_(CACACA)
sh/i/p/_/p/_(CACACA)
s/h/i/_/pp/_(CCAACA)
s/h/i/_/pp/_(CCAACA)
sh/i/pp/_/_(CACAA)
sh/i/pp/_/_(CACAA)
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'p', 'p']
				{'string': 's/h/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['sh', 'i', 'p', 'p']
				{'string': 'sh/i/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['s', 'h', 'i', 'pp']
				{'string': 's/h/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['sh', 'i', 'pp']
				{'string': 'sh/i/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['s', 'h', 'i', '_', 'p', 'p']
				{'string': 's/h/i/_/p/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p']
				{'string': 'sh/i/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['s', 'h', 'i', '_', 'pp']
				{'string': 's/h/i/_/pp', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'pp']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'p', 'p', '_']
				{'string': 's/h/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['sh', 'i', 'p', 'p', '_']
				{'string': 'sh/i/p/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', 'p', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', 'pp', '_']
				{'string': 's/h/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['sh', 'i', 'pp', '_']
				{'string': 'sh/i/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_']
				version split: ['s', 'h', 'i', '_', 'p', '_', 'p']
				{'string': 's/h/i/_/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', 'p']
				version split: ['s', 'h', 'i', '_', 'p', '_', 'p']
				{'string': 's/h/i/_/p/_/p', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'h', 'i', '_', 'p', '_', 'p']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['sh', 'i', 'p', '_', 'p', '_']
				{'string': 'sh/i/p/_/p/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'p', '_', 'p', '_']
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				version split: ['s', 'h', 'i', '_', 'pp', '_']
				{'string': 's/h/i/_/pp/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				version split: ['sh', 'i', 'pp', '_', '_']
				{'string': 'sh/i/pp/_/_', 'rgx': '((sh)|(s))/((h))/((i))/((_))/((p)|(pp))/((_))$'}
				_____REMOVING________['sh', 'i', 'pp', '_', '_']
				ANALYSING: schip
					resolving (16)
					> version: s/c/h/i/p
					> version: s/c/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: s/ch/i/p
					> version: s/ch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					> version: sch/i/p
					> version: sch/i/p
					> version: sc/h/i/p
					> version: sc/h/i/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', '_']
				s/c/h/i/p(CCCCC)
s/c/h/i/p(CCCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
s/ch/i/p(CCCC)
s/ch/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
sch/i/p(CCC)
sch/i/p(CVC)
sc/h/i/p(CCCC)
sc/h/i/p(CCVC)
s/c/h/i/p/_(CCCACA)
s/c/h/i/p/_(CCCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
s/ch/i/p/_(CCACA)
s/ch/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
sch/i/p/_(CACA)
sch/i/p/_(CACA)
sc/h/i/p/_(CCACA)
sc/h/i/p/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p']
				{'string': 's/c/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['s', 'ch', 'i', 'p']
				{'string': 's/ch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sch', 'i', 'p']
				{'string': 'sch/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['sc', 'h', 'i', 'p']
				{'string': 'sc/h/i/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'p', '_']
				{'string': 's/c/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', '_']
				{'string': 's/ch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sch', 'i', 'p', '_']
				{'string': 'sch/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', '_']
				{'string': 'sc/h/i/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', '_']
				ANALYSING: schipen
					resolving (16)
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: s/c/h/i/p/e/n
					TRYING: e
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: s/ch/i/p/e/n
					TRYING: n
					> version: s/ch/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sch/i/p/e/n
					> version: sch/i/p/e/n
					> version: sc/h/i/p/e/n
					TRYING: n
					> version: sc/h/i/p/e/n
					TRYING: n
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['s', 'c', 'h', 'i', 'p', 'e', 'n']
				{'string': 's/c/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['s', 'ch', 'i', 'p', 'e', 'n']
				{'string': 's/ch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sch', 'i', 'p', 'e', 'n']
				{'string': 'sch/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sch', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				version split: ['sc', 'h', 'i', 'p', 'e', 'n']
				{'string': 'sc/h/i/p/e/n', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i)|(e))/((p))/((e))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'e', 'n']
				ANALYSING: schipp
					resolving (32)
					> version: s/c/h/i/p/p
					TRYING: p
					> version: s/c/h/i/p/p
					TRYING: p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: s/ch/i/p/p
					> version: s/ch/i/p/p
					> version: s/c/h/i/pp
					> version: s/c/h/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/p/p
					> version: sch/i/p/p
					> version: sch/i/pp
					> version: sch/i/pp
					> version: s/ch/i/pp
					> version: s/ch/i/pp
					> version: sc/h/i/p/p
					> version: sc/h/i/p/p
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					> version: sch/i/pp
					> version: sch/i/pp
					> version: sc/h/i/pp
					> version: sc/h/i/pp
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'c', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['s', 'ch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'p', 'p', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sch', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				adding dashed alternative: ['sc', 'h', 'i', 'pp', '_']
				s/c/h/i/p/p(CCCCCC)
s/c/h/i/p/p(CCCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
s/ch/i/p/p(CCCCC)
s/ch/i/p/p(CCVCC)
s/c/h/i/pp(CCCCC)
s/c/h/i/pp(CCCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/p/p(CCCC)
sch/i/p/p(CVCC)
sch/i/pp(CCC)
sch/i/pp(CVC)
s/ch/i/pp(CCCC)
s/ch/i/pp(CCVC)
sc/h/i/p/p(CCCCC)
sc/h/i/p/p(CCVCC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
sch/i/pp(CCC)
sch/i/pp(CVC)
sc/h/i/pp(CCCC)
sc/h/i/pp(CCVC)
s/c/h/i/p/_/p(CCCACAC)
s/c/h/i/p/_/p(CCCACAC)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
s/ch/i/p/p/_(CCACCA)
s/ch/i/p/p/_(CCACCA)
s/c/h/i/pp/_(CCCACA)
s/c/h/i/pp/_(CCCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/p/p/_(CACCA)
sch/i/p/p/_(CACCA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
s/ch/i/pp/_(CCACA)
s/ch/i/pp/_(CCACA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/p/p/_(CCACCA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
sch/i/pp/_(CACA)
sch/i/pp/_(CACA)
sc/h/i/pp/_(CCACA)
sc/h/i/pp/_(CCACA)
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', 'p']
				{'string': 's/c/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'ch', 'i', 'p', 'p']
				{'string': 's/ch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'pp']
				{'string': 's/c/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'p', 'p']
				{'string': 'sch/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['s', 'ch', 'i', 'pp']
				{'string': 's/ch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p']
				{'string': 'sc/h/i/p/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sch', 'i', 'pp']
				{'string': 'sch/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['sc', 'h', 'i', 'pp']
				{'string': 'sc/h/i/pp', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['s', 'c', 'h', 'i', 'p', '_', 'p']
				{'string': 's/c/h/i/p/_/p', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'i', 'p', '_', 'p']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'ch', 'i', 'p', 'p', '_']
				{'string': 's/ch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'p', 'p', '_']
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				version split: ['s', 'c', 'h', 'i', 'pp', '_']
				{'string': 's/c/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'p', 'p', '_']
				{'string': 'sch/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'p', 'p', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['s', 'ch', 'i', 'pp', '_']
				{'string': 's/ch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['s', 'ch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'p', 'p', '_']
				{'string': 'sc/h/i/p/p/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'p', 'p', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sch', 'i', 'pp', '_']
				{'string': 'sch/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sch', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				version split: ['sc', 'h', 'i', 'pp', '_']
				{'string': 'sc/h/i/pp/_', 'rgx': '((sch)|(sc)|(s))/((h)|(c)|(ch))/((h)|(i))/((i))/((p)|(pp))/((_))$'}
				_____REMOVING________['sc', 'h', 'i', 'pp', '_']
				ANALYSING: si
					resolving (16)
					> version: s/i
					> version: s/i
					> version: s/_/i
					> version: s/_/i
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_
					> version: s/i/_
					> version: s/_/i/_
					> version: s/_/i/_
					> version: s/i/_/_
					> version: s/i/_/_
					> version: s/_/i/_/_
					> version: s/_/i/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', '_', 'i', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', '_', '_']
				s/i(CC)
s/i(CV)
s/_/i(CAA)
s/_/i(CAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_(CAA)
s/i/_(CAA)
s/_/i/_(CAAA)
s/_/i/_(CAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_(CAAA)
s/i/_/_(CAAA)
s/_/i/_/_(CAAAA)
s/_/i/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/i/_/_/_(CAAAA)
s/_/i/_/_/_(CAAAAA)
s/_/i/_/_/_(CAAAAA)
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', 'i']
				{'string': 's/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', '_', 'i']
				{'string': 's/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', 'i', '_']
				{'string': 's/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', '_', 'i', '_']
				{'string': 's/_/i/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', 'i', '_', '_']
				{'string': 's/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', '_', 'i', '_', '_']
				{'string': 's/_/i/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', 'i', '_', '_', '_']
				{'string': 's/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'i', '_', '_', '_']
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'i', '_', '_', '_']
				{'string': 's/_/i/_/_/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				ANALYSING: sip
					resolving (8)
					> version: s/i/p
					> version: s/i/p
					> version: s/_/i/p
					> version: s/_/i/p
					> version: s/i/p/_
					> version: s/i/p/_
					> version: s/_/i/_/p
					> version: s/_/i/_/p
					RESULT:  ['_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', 'p', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', 'i', 'p', '_', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', '_', 'i', '_', 'p', '_']
				s/i/p(CCC)
s/i/p(CVC)
s/_/i/p(CAAC)
s/_/i/p(CAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/_/p(CAAAC)
s/_/i/_/p(CAAAC)
s/i/p/_(CACA)
s/i/p/_(CACA)
s/_/i/p/_(CAACA)
s/_/i/p/_(CAACA)
s/i/p/_/_(CACAA)
s/i/p/_/_(CACAA)
s/_/i/_/p/_(CAAACA)
s/_/i/_/p/_(CAAACA)
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', 'i', 'p']
				{'string': 's/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', '_', 'i', 'p']
				{'string': 's/_/i/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', '_', 'i', '_', 'p']
				{'string': 's/_/i/_/p', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', '_', 'p']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_']
				{'string': 's/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', '_', 'i', 'p', '_']
				{'string': 's/_/i/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', 'i', 'p', '_', '_']
				{'string': 's/i/p/_/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 'i', 'p', '_', '_']
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				version split: ['s', '_', 'i', '_', 'p', '_']
				{'string': 's/_/i/_/p/_', 'rgx': '((s))/((_))/((i))/((_))/((p))/((_))$'}
				ANALYSING: sipe
					resolving (8)
					> version: s/i/p/e
					> version: s/i/p/e
					> version: s/_/i/p/e
					> version: s/_/i/p/e
					> version: s/i/p/e/_
					> version: s/i/p/e/_
					> version: s/_/i/p/_/e
					TRYING: e
					> version: s/_/i/p/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e']
				{'string': 's/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', '_', 'i', 'p', 'e']
				{'string': 's/_/i/p/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', 'e']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', 'i', 'p', 'e', '_']
				{'string': 's/i/p/e/_', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'i', 'p', 'e', '_']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				version split: ['s', '_', 'i', 'p', '_', 'e']
				{'string': 's/_/i/p/_/e', 'rgx': '((s))/((_))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'i', 'p', '_', 'e']
				ANALYSING: ssip
					resolving (8)
					> version: s/s/i/p
					> version: s/s/i/p
					> version: ss/i/p
					> version: ss/i/p
					> version: s/s/i/_/p
					> version: s/s/i/_/p
					> version: ss/i/p/_
					> version: ss/i/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'i', '_', 'p', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				adding dashed alternative: ['ss', 'i', 'p', '_', '_']
				s/s/i/p(CCCC)
s/s/i/p(CCVC)
ss/i/p(CCC)
ss/i/p(CVC)
s/s/i/_/p(CCAAC)
s/s/i/_/p(CCAAC)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/p/_(CCACA)
s/s/i/p/_(CCACA)
ss/i/p/_(CACA)
ss/i/p/_(CACA)
s/s/i/_/p/_(CCAACA)
s/s/i/_/p/_(CCAACA)
ss/i/p/_/_(CACAA)
ss/i/p/_/_(CACAA)
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['s', 's', 'i', 'p']
				{'string': 's/s/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['ss', 'i', 'p']
				{'string': 'ss/i/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['s', 's', 'i', '_', 'p']
				{'string': 's/s/i/_/p', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', '_', 'p']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['s', 's', 'i', 'p', '_']
				{'string': 's/s/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['ss', 'i', 'p', '_']
				{'string': 'ss/i/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_']
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				version split: ['s', 's', 'i', '_', 'p', '_']
				{'string': 's/s/i/_/p/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				version split: ['ss', 'i', 'p', '_', '_']
				{'string': 'ss/i/p/_/_', 'rgx': '((ss)|(s))/((s))/((i))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'i', 'p', '_', '_']
				ANALYSING: ssipe
					resolving (8)
					> version: s/s/i/p/e
					> version: s/s/i/p/e
					> version: ss/i/p/e
					> version: ss/i/p/e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: s/s/i/p/_/e
					TRYING: e
					> version: ss/i/p/e/_
					> version: ss/i/p/e/_
					RESULT:  ['e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', 'e']
				{'string': 's/s/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['ss', 'i', 'p', 'e']
				{'string': 'ss/i/p/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['s', 's', 'i', 'p', '_', 'e']
				{'string': 's/s/i/p/_/e', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 's', 'i', 'p', '_', 'e']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				version split: ['ss', 'i', 'p', 'e', '_']
				{'string': 'ss/i/p/e/_', 'rgx': '((ss)|(s))/((s))/((i))/((e))/((_))/((e))$'}
				_____REMOVING________['ss', 'i', 'p', 'e', '_']
				ANALYSING: ssyp
					resolving (8)
					> version: s/s/y/p
					> version: s/s/y/p
					> version: ss/y/p
					> version: ss/y/p
					> version: s/s/y/_/p
					> version: s/s/y/_/p
					> version: ss/y/p/_
					> version: ss/y/p/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['s', 's', 'y', '_', 'p', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				adding dashed alternative: ['ss', 'y', 'p', '_', '_']
				s/s/y/p(CCCC)
s/s/y/p(CCVC)
ss/y/p(CCC)
ss/y/p(CVC)
s/s/y/_/p(CCAAC)
s/s/y/_/p(CCAAC)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/p/_(CCACA)
s/s/y/p/_(CCACA)
ss/y/p/_(CACA)
ss/y/p/_(CACA)
s/s/y/_/p/_(CCAACA)
s/s/y/_/p/_(CCAACA)
ss/y/p/_/_(CACAA)
ss/y/p/_/_(CACAA)
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['s', 's', 'y', 'p']
				{'string': 's/s/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['ss', 'y', 'p']
				{'string': 'ss/y/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['s', 's', 'y', '_', 'p']
				{'string': 's/s/y/_/p', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', '_', 'p']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['s', 's', 'y', 'p', '_']
				{'string': 's/s/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['s', 's', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['ss', 'y', 'p', '_']
				{'string': 'ss/y/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_']
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				version split: ['s', 's', 'y', '_', 'p', '_']
				{'string': 's/s/y/_/p/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
				version split: ['ss', 'y', 'p', '_', '_']
				{'string': 'ss/y/p/_/_', 'rgx': '((ss)|(s))/((s))/((y))/((_))/((p))/((_))$'}
				_____REMOVING________['ss', 'y', 'p', '_', '_']
		only one version left: ['s', 'c', 'i', '_', '_', '_']
		only one version left: ['s', 'c', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 'c', 'i', '_', 'pp', '_']
		only one version left: ['s', 'c', '_', 'u', 'p', '_']
		only one version left: ['s', 'h', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 'h', 'i', '_', 'pp', '_']
		only one version left: ['s', 'c', 'h', 'i', 'p', '_']
		FAIL: 
		only one version left: ['s', 'c', 'h', 'i', 'pp', '_']
		only one version left: ['s', '_', 'i', '_', '_', '_']
		only one version left: ['s', '_', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'i', '_', 'p', '_']
		FAIL: 
		only one version left: ['s', 's', 'y', '_', 'p', '_']
		SPLIT: ['s', 'c', 'h', 'e', 'p', 'e']
		SPLIT: ['s', 'c', 'h', 'i', 'p', 'e']
		SPLIT: ['s', 'c', 'h', 'i', 'pp', 'e']
		SPLIT: ['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		['s', 'c', 'i', '_', '_', '_']
		SPLIT: ['s', 'c', 'i', '_', 'p', '_']
		['s', 'c', 'i', '_', 'p', '_']
		['s', 'c', 'i', '_', 'p', '_']
		SPLIT: ['sc.s', 'c', 'i', 'e', '_', 'e', '----!']
		SPLIT: ['s', 'c', 'i', '_', 'pp', '_']
		['s', 'c', 'i', '_', 'pp', '_']
		['s', 'c', 'i', '_', 'pp', '_']
		SPLIT: ['s', 'c', '_', 'u', 'p', '_']
		['s', 'c', '_', 'u', 'p', '_']
		['s', 'c', '_', 'u', 'p', '_']
		SPLIT: ['s', 'h', 'i', '_', 'p', '_']
		['s', 'h', 'i', '_', 'p', '_']
		['s', 'h', 'i', '_', 'p', '_']
		SPLIT: ['sh.s', 'h', 'i', 'e', '_', 'e', '----!']
		SPLIT: ['s', 'h', 'i', '_', 'pp', '_']
		['s', 'h', 'i', '_', 'pp', '_']
		['s', 'h', 'i', '_', 'pp', '_']
		SPLIT: ['s', 'c', 'h', 'i', 'p', '_']
		['s', 'c', 'h', 'i', 'p', '_']
		['s', 'c', 'h', 'i', 'p', '_']
		SPLIT: ['sch.sc.s', 'h.c.ch', 'h.i', 'i.e', 'p', 'e', '----!']
		SPLIT: ['s', 'c', 'h', 'i', 'pp', '_']
		['s', 'c', 'h', 'i', 'pp', '_']
		['s', 'c', 'h', 'i', 'pp', '_']
		SPLIT: ['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		['s', '_', 'i', '_', '_', '_']
		SPLIT: ['s', '_', 'i', '_', 'p', '_']
		['s', '_', 'i', '_', 'p', '_']
		['s', '_', 'i', '_', 'p', '_']
		SPLIT: ['s', '_', 'i', 'e', '_', 'e', '----!']
		SPLIT: ['s', 's', 'i', '_', 'p', '_']
		['s', 's', 'i', '_', 'p', '_']
		['s', 's', 'i', '_', 'p', '_']
		SPLIT: ['ss.s', 's', 'i', 'e', '_', 'e', '----!']
		SPLIT: ['s', 's', 'y', '_', 'p', '_']
		['s', 's', 'y', '_', 'p', '_']
		['s', 's', 'y', '_', 'p', '_']
		version for pattern CCCVCV is INVALID
		[]
		5
		OVERVIEW: version for pattern CCCVCV

faulty splits: 5
sc.sciee----! <-! scipe
sh.shiee----! <-! shipe
sch.sc.sh.c.chh.ii.epe----! <-! schipen
siee----! <-! sipe
ss.ssiee----! <-! ssipe
s | c | h | e | p | e
s | c | h | i | p | e
s | c | h | i | pp | e
s | c | i | _ | _ | _
s | c | i | _ | p | _
sc.s | c | i | e | _ | e | ----!
s | c | i | _ | pp | _
s | c | _ | u | p | _
s | h | i | _ | p | _
sh.s | h | i | e | _ | e | ----!
s | h | i | _ | pp | _
s | c | h | i | p | _
sch.sc.s | h.c.ch | h.i | i.e | p | e | ----!
s | c | h | i | pp | _
s | _ | i | _ | _ | _
s | _ | i | _ | p | _
s | _ | i | e | _ | e | ----!
s | s | i | _ | p | _
ss.s | s | i | e | _ | e | ----!
s | s | y | _ | p | _
1 : {'h', 'i', 'c', 'ch'},{'i', '_', 'ch', 'c', 'h'}
2 : {'h', 'i', 'p'},{'h', 'i', 'u'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCVCVC
{'h', 'i', '_', 'c'}
faulty splits: 2
sch.sc.sipi----! <-! schip
sch.sc.sip.ppi----! <-! schipp
sc | h | i | p | e | n
s | c | i | _ | _ | _
sc | _ | i | p | _ | _
sc | _ | i | p | e | _
sc | _ | i | pp | _ | _
sc | _ | u | p | _ | _
sh | _ | i | p | _ | _
sh | _ | i | p | e | _
sh | _ | i | pp | _ | _
sch | _ | e | p | e | _
sch.sc.s | _ | i | p | i | _ | ----!
sch | _ | i | p | e | _
sch.sc.s | _ | i | p.pp | i | _ | ----!
sch | _ | i | pp | e | _
s | _ | i | _ | _ | _
s | _ | i | p | _ | _
s | _ | i | p | e | _
ss | _ | i | p | _ | _
ss | _ | i | p | e | _
ss | _ | y | p | _ | _
1 : {'y', 'i', '_', 'c', 'h'},{'h', 'i', '_', 'c'},{'u', 'i', '_', 'c', 'h'},{'h', 'i', 'c'},{'i', '_', 'ch', 'c', 'h'},{'i', '_', 'c', 's', 'h'},{'i', '_', 'cu', 'c', 'h'}
5 : {'pp', '_', 'n'},{'p', '_', 'n'}
	set()
