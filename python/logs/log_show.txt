Analysis object initialized
{'chaw': 2, 'scau': 1, 'scaw': 4, 'sceaƿ': 8, 'sceu': 3, 'scew': 1, 'scw': 1, 'seƿ': 1, 'shæ': 2, 'shæƿ': 13, 'shauw': 1, 'shaƿ': 2, 'shaw': 1, 'sheaƿ': 1, 'sheu': 1, 'sheƿ': 6, 'shew': 4, 'show': 2, 'schau': 9, 'schaƿ': 13, 'schaw': 23, 'scheaƿ': 7, 'scheu': 7, 'scheƿ': 1, 'schew': 16, 'schow': 1, 'sseaw': 3, 'ssew': 8, 'sswe': 1}
Lexel initialized
[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
MIN pattern length=3
Pattern CVV is valid
Pattern CCVVC is valid
Pattern CVC is valid
Pattern CCV is valid
Pattern CCVC is valid
Pattern CVCC is valid
Pattern CC is invalid
Pattern CV is invalid
Pattern CCVV is valid
Pattern CCC is valid
Pattern CCCV is valid
Pattern CCCVV is valid
Pattern CCVCC is valid
Pattern CCCVVC is valid
Pattern CVVC is valid
Pattern CCCVC is valid
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVV
	Selection for pattern: CVV completed
	Making a version for pattern: CVV
			___CVV : 0___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					adding blocked set: C = C >> sc, sh, ss, c, sch
					> version: ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, sc, sh, ss, sch
					> version: c/h/aw
					TRYING: c
					adding blocked set: C = C >> sc, sh, ss, c, sch
					> version: ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', 'ch', 'aw']
				c/h/a/w(CCVC)
ch/a/w(CVC)
c/h/aw(CCV)
ch/aw(CV)
_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'aw']
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', 's', 'c', 'aw']
				adding dashed alternative: ['_', 'sc', 'aw']
				s/c/a/w(CCVC)
sc/a/w(CVC)
s/c/aw(CCV)
sc/aw(CV)
_/s/c/a/w(ACCVC)
_/sc/a/w(ACVC)
_/s/c/aw(ACCV)
_/sc/aw(ACV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'aw']
				version split: ['_', 's', 'c', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', 's', 'c', 'ew']
				adding dashed alternative: ['_', 'sc', 'ew']
				s/c/e/w(CCVC)
sc/e/w(CVC)
s/c/ew(CCV)
sc/ew(CV)
_/s/c/e/w(ACCVC)
_/sc/e/w(ACVC)
_/s/c/ew(ACCV)
_/sc/ew(ACV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'ew']
				version split: ['_', 's', 'c', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'w']
				adding dashed alternative: ['_', 'sc', 'w']
				s/c/w(CCC)
sc/w(CC)
_/s/c/w(ACCC)
_/sc/w(ACC)
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['_', 's', 'c', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'w']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'e', 'ƿ']
				s/e/ƿ(CVC)
_/s/e/ƿ(ACVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ']
				adding dashed alternative: ['_', 'sh', 'æ']
				s/h/æ(CCV)
sh/æ(CV)
_/s/h/æ(ACCV)
_/sh/æ(ACV)
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ']
				version split: ['_', 's', 'h', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
sh/æ/ƿ(CVC)
_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/h/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
sh/a/ƿ(CVC)
sh/aƿ(CV)
_/s/h/a/ƿ(ACCVC)
_/s/h/aƿ(ACCV)
_/sh/a/ƿ(ACVC)
_/sh/aƿ(ACV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'aƿ']
				version split: ['_', 's', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', 's', 'h', 'aw']
				adding dashed alternative: ['_', 'sh', 'aw']
				s/h/a/w(CCVC)
sh/a/w(CVC)
s/h/aw(CCV)
sh/aw(CV)
_/s/h/a/w(ACCVC)
_/sh/a/w(ACVC)
_/s/h/aw(ACCV)
_/sh/aw(ACV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'aw']
				version split: ['_', 's', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
sh/e/ƿ(CVC)
_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', 's', 'h', 'ew']
				adding dashed alternative: ['_', 'sh', 'ew']
				s/h/e/w(CCVC)
sh/e/w(CVC)
s/h/ew(CCV)
sh/ew(CV)
_/s/h/e/w(ACCVC)
_/sh/e/w(ACVC)
_/s/h/ew(ACCV)
_/sh/ew(ACV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ew']
				version split: ['_', 's', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', 's', 'h', 'ow']
				adding dashed alternative: ['_', 'sh', 'ow']
				s/h/o/w(CCVC)
sh/o/w(CVC)
s/h/ow(CCV)
sh/ow(CV)
_/s/h/o/w(ACCVC)
_/sh/o/w(ACVC)
_/s/h/ow(ACCV)
_/sh/ow(ACV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ow']
				version split: ['_', 's', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'aƿ']
				adding dashed alternative: ['_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/aƿ(CCCV)
sc/h/a/ƿ(CCVC)
sch/a/ƿ(CVC)
s/ch/a/ƿ(CCVC)
sc/h/aƿ(CCV)
sch/aƿ(CV)
s/ch/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/a/ƿ(CCVC)
sch/a/ƿ(CVC)
sc/h/aƿ(CCV)
sc/h/aƿ(CCV)
sch/aƿ(CV)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
_/s/c/h/a/ƿ(ACCCVC)
_/s/c/h/aƿ(ACCCV)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/s/ch/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/s/ch/aƿ(ACCV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/sc/h/aƿ(ACCV)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', 'sch', 'aw']
				adding dashed alternative: ['_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sch', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				s/c/h/a/w(CCCVC)
sc/h/a/w(CCVC)
sch/a/w(CVC)
s/ch/a/w(CCVC)
s/c/h/aw(CCCV)
sc/h/a/w(CCVC)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sch/a/w(CVC)
sch/aw(CV)
s/ch/aw(CCV)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sc/h/aw(CCV)
sch/aw(CV)
sc/h/aw(CCV)
_/s/c/h/a/w(ACCCVC)
_/sc/h/a/w(ACCVC)
_/sch/a/w(ACVC)
_/s/ch/a/w(ACCVC)
_/s/c/h/aw(ACCCV)
_/sc/h/a/w(ACCVC)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sch/a/w(ACVC)
_/sch/aw(ACV)
_/s/ch/aw(ACCV)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sc/h/aw(ACCV)
_/sch/aw(ACV)
_/sc/h/aw(ACCV)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['_', 's', 'c', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
s/ch/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
sc/h/e/ƿ(CCVC)
_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', 'sch', 'ew']
				adding dashed alternative: ['_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sch', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				s/c/h/e/w(CCCVC)
sc/h/e/w(CCVC)
sch/e/w(CVC)
s/ch/e/w(CCVC)
s/c/h/ew(CCCV)
sc/h/e/w(CCVC)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sch/e/w(CVC)
sch/ew(CV)
s/ch/ew(CCV)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sc/h/ew(CCV)
sch/ew(CV)
sc/h/ew(CCV)
_/s/c/h/e/w(ACCCVC)
_/sc/h/e/w(ACCVC)
_/sch/e/w(ACVC)
_/s/ch/e/w(ACCVC)
_/s/c/h/ew(ACCCV)
_/sc/h/e/w(ACCVC)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sch/e/w(ACVC)
_/sch/ew(ACV)
_/s/ch/ew(ACCV)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sc/h/ew(ACCV)
_/sch/ew(ACV)
_/sc/h/ew(ACCV)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['_', 's', 'c', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', 'sch', 'ow']
				adding dashed alternative: ['_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sch', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				s/c/h/o/w(CCCVC)
sc/h/o/w(CCVC)
sch/o/w(CVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
sc/h/o/w(CCVC)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sch/o/w(CVC)
sch/ow(CV)
s/ch/ow(CCV)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sc/h/ow(CCV)
sch/ow(CV)
sc/h/ow(CCV)
_/s/c/h/o/w(ACCCVC)
_/sc/h/o/w(ACCVC)
_/sch/o/w(ACVC)
_/s/ch/o/w(ACCVC)
_/s/c/h/ow(ACCCV)
_/sc/h/o/w(ACCVC)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sch/o/w(ACVC)
_/sch/ow(ACV)
_/s/ch/ow(ACCV)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sc/h/ow(ACCV)
_/sch/ow(ACV)
_/sc/h/ow(ACCV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['_', 's', 'c', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', 's', 's', 'ew']
				adding dashed alternative: ['_', 'ss', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
_/s/s/e/w(ACCVC)
_/ss/e/w(ACVC)
_/s/s/ew(ACCV)
_/ss/ew(ACV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['_', 's', 's', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 's', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', 'ss', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVV : 1___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/c/h/a/w
					TRYING: c
					> version: _/ch/a/w
					TRYING: ch
					> version: _/c/h/aw
					TRYING: c
					> version: _/ch/aw
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'ch', 'aw']
				_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'a', 'w']
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'a', 'w']
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'aw']
				version split: ['_', 'ch', 'aw']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'aw']
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: _/s/c/a/w
					TRYING: s
					> version: _/sc/a/w
					TRYING: sc
					> version: _/s/c/aw
					TRYING: s
					> version: _/sc/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'aw']
				_/s/c/a/w(ACCVC)
_/sc/a/w(ACVC)
_/s/c/aw(ACCV)
_/sc/aw(ACV)
_/_/s/c/a/w(AACCVC)
_/_/sc/a/w(AACVC)
_/_/s/c/aw(AACCV)
_/_/sc/aw(AACV)
				version split: ['_', 's', 'c', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'a', 'w']
				version split: ['_', 'sc', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'a', 'w']
				version split: ['_', 's', 'c', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'aw']
				version split: ['_', 'sc', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'aw']
				version split: ['_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: _/s/c/e/w
					TRYING: s
					> version: _/sc/e/w
					TRYING: sc
					> version: _/s/c/ew
					TRYING: s
					> version: _/sc/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'ew']
				_/s/c/e/w(ACCVC)
_/sc/e/w(ACVC)
_/s/c/ew(ACCV)
_/sc/ew(ACV)
_/_/s/c/e/w(AACCVC)
_/_/sc/e/w(AACVC)
_/_/s/c/ew(AACCV)
_/_/sc/ew(AACV)
				version split: ['_', 's', 'c', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'w']
				version split: ['_', 'sc', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'w']
				version split: ['_', 's', 'c', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'ew']
				version split: ['_', 'sc', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'ew']
				version split: ['_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: _/s/c/w
					TRYING: s
					> version: _/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'w']
				_/s/c/w(ACCC)
_/sc/w(ACC)
_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
				version split: ['_', 's', 'c', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'w']
				version split: ['_', 'sc', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'w']
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: _/s/e/ƿ
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'e', 'ƿ']
				_/s/e/ƿ(ACVC)
_/_/s/e/ƿ(AACVC)
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'e', 'ƿ']
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: _/s/h/æ
					TRYING: s
					> version: _/sh/æ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', 'sh', 'æ']
				_/s/h/æ(ACCV)
_/sh/æ(ACV)
_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
				version split: ['_', 's', 'h', 'æ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ']
				version split: ['_', 'sh', 'æ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ']
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: _/s/h/æ/ƿ
					TRYING: s
					> version: _/sh/æ/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'æ', 'ƿ']
				_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: _/s/h/a/ƿ
					TRYING: s
					> version: _/s/h/aƿ
					TRYING: s
					> version: _/sh/a/ƿ
					TRYING: sh
					> version: _/sh/aƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'aƿ']
				_/s/h/a/ƿ(ACCVC)
_/s/h/aƿ(ACCV)
_/sh/a/ƿ(ACVC)
_/sh/aƿ(ACV)
_/_/s/h/a/ƿ(AACCVC)
_/_/s/h/aƿ(AACCV)
_/_/sh/a/ƿ(AACVC)
_/_/sh/aƿ(AACV)
				version split: ['_', 's', 'h', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'ƿ']
				version split: ['_', 's', 'h', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'aƿ']
				version split: ['_', 'sh', 'a', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'ƿ']
				version split: ['_', 'sh', 'aƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'aƿ']
				version split: ['_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shaw
					resolving (4)
					> version: _/s/h/a/w
					TRYING: s
					> version: _/sh/a/w
					TRYING: sh
					> version: _/s/h/aw
					TRYING: s
					> version: _/sh/aw
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sh', 'aw']
				_/s/h/a/w(ACCVC)
_/sh/a/w(ACVC)
_/s/h/aw(ACCV)
_/sh/aw(ACV)
_/_/s/h/a/w(AACCVC)
_/_/sh/a/w(AACVC)
_/_/s/h/aw(AACCV)
_/_/sh/aw(AACV)
				version split: ['_', 's', 'h', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'w']
				version split: ['_', 'sh', 'a', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'w']
				version split: ['_', 's', 'h', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'aw']
				version split: ['_', 'sh', 'aw']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'aw']
				version split: ['_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: _/s/h/e/ƿ
					TRYING: s
					> version: _/sh/e/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'ƿ']
				_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'ƿ']
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shew
					resolving (4)
					> version: _/s/h/e/w
					TRYING: s
					> version: _/sh/e/w
					TRYING: sh
					> version: _/s/h/ew
					TRYING: s
					> version: _/sh/ew
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sh', 'ew']
				_/s/h/e/w(ACCVC)
_/sh/e/w(ACVC)
_/s/h/ew(ACCV)
_/sh/ew(ACV)
_/_/s/h/e/w(AACCVC)
_/_/sh/e/w(AACVC)
_/_/s/h/ew(AACCV)
_/_/sh/ew(AACV)
				version split: ['_', 's', 'h', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'w']
				version split: ['_', 'sh', 'e', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'w']
				version split: ['_', 's', 'h', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ew']
				version split: ['_', 'sh', 'ew']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ew']
				version split: ['_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: show
					resolving (4)
					> version: _/s/h/o/w
					TRYING: s
					> version: _/sh/o/w
					TRYING: sh
					> version: _/s/h/ow
					TRYING: s
					> version: _/sh/ow
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sh', 'ow']
				_/s/h/o/w(ACCVC)
_/sh/o/w(ACVC)
_/s/h/ow(ACCV)
_/sh/ow(ACV)
_/_/s/h/o/w(AACCVC)
_/_/sh/o/w(AACVC)
_/_/s/h/ow(AACCV)
_/_/sh/ow(AACV)
				version split: ['_', 's', 'h', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'o', 'w']
				version split: ['_', 'sh', 'o', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'o', 'w']
				version split: ['_', 's', 'h', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ow']
				version split: ['_', 'sh', 'ow']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ow']
				version split: ['_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: _/s/c/h/a/ƿ
					TRYING: s
					> version: _/s/c/h/aƿ
					TRYING: s
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sch/a/ƿ
					TRYING: sch
					> version: _/s/ch/a/ƿ
					TRYING: s
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sch/aƿ
					TRYING: sch
					> version: _/s/ch/aƿ
					TRYING: s
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sch/a/ƿ
					TRYING: sch
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sch/aƿ
					TRYING: sch
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sc/h/aƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				_/s/c/h/a/ƿ(ACCCVC)
_/s/c/h/aƿ(ACCCV)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/s/ch/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/s/ch/aƿ(ACCV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/sc/h/aƿ(ACCV)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/_/s/c/h/a/ƿ(AACCCVC)
_/_/s/c/h/aƿ(AACCCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/s/ch/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/s/ch/aƿ(AACCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/sc/h/aƿ(AACCV)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
				version split: ['_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'ƿ']
				version split: ['_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sch', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aƿ']
				version split: ['_', 's', 'ch', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sch', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schaw
					resolving (16)
					> version: _/s/c/h/a/w
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sch/a/w
					TRYING: sch
					> version: _/s/ch/a/w
					TRYING: s
					> version: _/s/c/h/aw
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sch/a/w
					TRYING: sch
					> version: _/sch/aw
					TRYING: sch
					> version: _/s/ch/aw
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sch/aw
					TRYING: sch
					> version: _/sc/h/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				_/s/c/h/a/w(ACCCVC)
_/sc/h/a/w(ACCVC)
_/sch/a/w(ACVC)
_/s/ch/a/w(ACCVC)
_/s/c/h/aw(ACCCV)
_/sc/h/a/w(ACCVC)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sch/a/w(ACVC)
_/sch/aw(ACV)
_/s/ch/aw(ACCV)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sc/h/aw(ACCV)
_/sch/aw(ACV)
_/sc/h/aw(ACCV)
_/_/s/c/h/a/w(AACCCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sch/a/w(AACVC)
_/_/s/ch/a/w(AACCVC)
_/_/s/c/h/aw(AACCCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sch/a/w(AACVC)
_/_/sch/aw(AACV)
_/_/s/ch/aw(AACCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sc/h/aw(AACCV)
_/_/sch/aw(AACV)
_/_/sc/h/aw(AACCV)
				version split: ['_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'w']
				version split: ['_', 's', 'ch', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'w']
				version split: ['_', 's', 'c', 'h', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'aw']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'w']
				version split: ['_', 'sch', 'aw']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aw']
				version split: ['_', 's', 'ch', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'aw']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sch', 'aw']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aw']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: _/s/c/h/e/ƿ
					TRYING: s
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sch/e/ƿ
					TRYING: sch
					> version: _/s/ch/e/ƿ
					TRYING: s
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sch/e/ƿ
					TRYING: sch
					> version: _/sc/h/e/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schew
					resolving (16)
					> version: _/s/c/h/e/w
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sch/e/w
					TRYING: sch
					> version: _/s/ch/e/w
					TRYING: s
					> version: _/s/c/h/ew
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sch/e/w
					TRYING: sch
					> version: _/sch/ew
					TRYING: sch
					> version: _/s/ch/ew
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sch/ew
					TRYING: sch
					> version: _/sc/h/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				_/s/c/h/e/w(ACCCVC)
_/sc/h/e/w(ACCVC)
_/sch/e/w(ACVC)
_/s/ch/e/w(ACCVC)
_/s/c/h/ew(ACCCV)
_/sc/h/e/w(ACCVC)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sch/e/w(ACVC)
_/sch/ew(ACV)
_/s/ch/ew(ACCV)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sc/h/ew(ACCV)
_/sch/ew(ACV)
_/sc/h/ew(ACCV)
_/_/s/c/h/e/w(AACCCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sch/e/w(AACVC)
_/_/s/ch/e/w(AACCVC)
_/_/s/c/h/ew(AACCCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sch/e/w(AACVC)
_/_/sch/ew(AACV)
_/_/s/ch/ew(AACCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sc/h/ew(AACCV)
_/_/sch/ew(AACV)
_/_/sc/h/ew(AACCV)
				version split: ['_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'w']
				version split: ['_', 's', 'ch', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'w']
				version split: ['_', 's', 'c', 'h', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ew']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'w']
				version split: ['_', 'sch', 'ew']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ew']
				version split: ['_', 's', 'ch', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ew']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sch', 'ew']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ew']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schow
					resolving (16)
					> version: _/s/c/h/o/w
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sch/o/w
					TRYING: sch
					> version: _/s/ch/o/w
					TRYING: s
					> version: _/s/c/h/ow
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sch/o/w
					TRYING: sch
					> version: _/sch/ow
					TRYING: sch
					> version: _/s/ch/ow
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sch/ow
					TRYING: sch
					> version: _/sc/h/ow
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				_/s/c/h/o/w(ACCCVC)
_/sc/h/o/w(ACCVC)
_/sch/o/w(ACVC)
_/s/ch/o/w(ACCVC)
_/s/c/h/ow(ACCCV)
_/sc/h/o/w(ACCVC)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sch/o/w(ACVC)
_/sch/ow(ACV)
_/s/ch/ow(ACCV)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sc/h/ow(ACCV)
_/sch/ow(ACV)
_/sc/h/ow(ACCV)
_/_/s/c/h/o/w(AACCCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sch/o/w(AACVC)
_/_/s/ch/o/w(AACCVC)
_/_/s/c/h/ow(AACCCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sch/o/w(AACVC)
_/_/sch/ow(AACV)
_/_/s/ch/ow(AACCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sc/h/ow(AACCV)
_/_/sch/ow(AACV)
_/_/sc/h/ow(AACCV)
				version split: ['_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'o', 'w']
				version split: ['_', 's', 'ch', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'o', 'w']
				version split: ['_', 's', 'c', 'h', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ow']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'o', 'w']
				version split: ['_', 'sch', 'ow']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ow']
				version split: ['_', 's', 'ch', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ow']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sch', 'ow']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ow']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: _/s/s/e/w
					TRYING: s
					> version: _/ss/e/w
					TRYING: ss
					> version: _/s/s/ew
					TRYING: s
					> version: _/ss/ew
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', '_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 's', 'ew']
				adding dashed alternative: ['_', '_', 'ss', 'ew']
				_/s/s/e/w(ACCVC)
_/ss/e/w(ACVC)
_/s/s/ew(ACCV)
_/ss/ew(ACV)
_/_/s/s/e/w(AACCVC)
_/_/ss/e/w(AACVC)
_/_/s/s/ew(AACCV)
_/_/ss/ew(AACV)
				version split: ['_', 's', 's', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'e', 'w']
				version split: ['_', 'ss', 'e', 'w']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'e', 'w']
				version split: ['_', 's', 's', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'ew']
				version split: ['_', 'ss', 'ew']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'ew']
				version split: ['_', '_', 's', 's', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 's', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: _/s/s/w/e
					TRYING: s
					> version: _/ss/w/e
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', 'ss', 'w', 'e']
				_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'w', 'e']
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'w', 'e']
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVV : 2___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/_/c/h/a/w
					TRYING: c
					> version: _/_/ch/a/w
					TRYING: ch
					> version: _/_/c/h/aw
					TRYING: c
					> version: _/_/ch/aw
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'ch', 'aw']
				_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
_/_/_/c/h/a/w(AAACCVC)
_/_/_/ch/a/w(AAACVC)
_/_/_/c/h/aw(AAACCV)
_/_/_/ch/aw(AAACV)
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/c/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_/ch/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_/c/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_/ch/aw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'aw']
				version split: ['_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'aw']
				ANALYSING: scaw
					resolving (4)
					> version: _/_/s/c/a/w
					TRYING: s
					> version: _/_/sc/a/w
					TRYING: sc
					> version: _/_/s/c/aw
					TRYING: s
					> version: _/_/sc/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'aw']
				_/_/s/c/a/w(AACCVC)
_/_/sc/a/w(AACVC)
_/_/s/c/aw(AACCV)
_/_/sc/aw(AACV)
_/_/_/s/c/a/w(AAACCVC)
_/_/_/sc/a/w(AAACVC)
_/_/_/s/c/aw(AAACCV)
_/_/_/sc/aw(AAACV)
				version split: ['_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'a', 'w']
				version split: ['_', '_', 'sc', 'a', 'w']
				{'string': '_/_/sc/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'a', 'w']
				version split: ['_', '_', 's', 'c', 'aw']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'aw']
				version split: ['_', '_', 'sc', 'aw']
				{'string': '_/_/sc/aw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'aw']
				version split: ['_', '_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'a', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'a', 'w']
				version split: ['_', '_', '_', 's', 'c', 'aw']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'aw']
				version split: ['_', '_', '_', 'sc', 'aw']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'aw']
				ANALYSING: scew
					resolving (4)
					> version: _/_/s/c/e/w
					TRYING: s
					> version: _/_/sc/e/w
					TRYING: sc
					> version: _/_/s/c/ew
					TRYING: s
					> version: _/_/sc/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'ew']
				_/_/s/c/e/w(AACCVC)
_/_/sc/e/w(AACVC)
_/_/s/c/ew(AACCV)
_/_/sc/ew(AACV)
_/_/_/s/c/e/w(AAACCVC)
_/_/_/sc/e/w(AAACVC)
_/_/_/s/c/ew(AAACCV)
_/_/_/sc/ew(AAACV)
				version split: ['_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'w']
				version split: ['_', '_', 'sc', 'e', 'w']
				{'string': '_/_/sc/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'w']
				version split: ['_', '_', 's', 'c', 'ew']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'ew']
				version split: ['_', '_', 'sc', 'ew']
				{'string': '_/_/sc/ew', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'ew']
				version split: ['_', '_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'e', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'w']
				version split: ['_', '_', '_', 's', 'c', 'ew']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'ew']
				version split: ['_', '_', '_', 'sc', 'ew']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: _/_/s/c/w
					TRYING: s
					> version: _/_/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'w']
				_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
_/_/_/s/c/w(AAACCC)
_/_/_/sc/w(AAACC)
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'w']
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_/sc/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'w']
				version split: ['_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'w']
				version split: ['_', '_', '_', 'sc', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: _/_/s/e/ƿ
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'e', 'ƿ']
				_/_/s/e/ƿ(AACVC)
_/_/_/s/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/s/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'e', 'ƿ']
				ANALYSING: shæ
					resolving (2)
					> version: _/_/s/h/æ
					TRYING: s
					> version: _/_/sh/æ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ']
				_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
_/_/_/s/h/æ(AAACCV)
_/_/_/sh/æ(AAACV)
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ']
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_/sh/æ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ']
				version split: ['_', '_', '_', 's', 'h', 'æ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ']
				version split: ['_', '_', '_', 'sh', 'æ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: _/_/s/h/æ/ƿ
					TRYING: s
					> version: _/_/sh/æ/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
_/_/_/s/h/æ/ƿ(AAACCVC)
_/_/_/sh/æ/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/sh/æ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (4)
					> version: _/_/s/h/a/ƿ
					TRYING: s
					> version: _/_/s/h/aƿ
					TRYING: s
					> version: _/_/sh/a/ƿ
					TRYING: sh
					> version: _/_/sh/aƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'aƿ']
				_/_/s/h/a/ƿ(AACCVC)
_/_/s/h/aƿ(AACCV)
_/_/sh/a/ƿ(AACVC)
_/_/sh/aƿ(AACV)
_/_/_/s/h/a/ƿ(AAACCVC)
_/_/_/s/h/aƿ(AAACCV)
_/_/_/sh/a/ƿ(AAACVC)
_/_/_/sh/aƿ(AAACV)
				version split: ['_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'ƿ']
				version split: ['_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'aƿ']
				version split: ['_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/sh/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'ƿ']
				version split: ['_', '_', 'sh', 'aƿ']
				{'string': '_/_/sh/aƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'aƿ']
				version split: ['_', '_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'aƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: _/_/s/h/a/w
					TRYING: s
					> version: _/_/sh/a/w
					TRYING: sh
					> version: _/_/s/h/aw
					TRYING: s
					> version: _/_/sh/aw
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sh', 'aw']
				_/_/s/h/a/w(AACCVC)
_/_/sh/a/w(AACVC)
_/_/s/h/aw(AACCV)
_/_/sh/aw(AACV)
_/_/_/s/h/a/w(AAACCVC)
_/_/_/sh/a/w(AAACVC)
_/_/_/s/h/aw(AAACCV)
_/_/_/sh/aw(AAACV)
				version split: ['_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'w']
				version split: ['_', '_', 'sh', 'a', 'w']
				{'string': '_/_/sh/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'w']
				version split: ['_', '_', 's', 'h', 'aw']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'aw']
				version split: ['_', '_', 'sh', 'aw']
				{'string': '_/_/sh/aw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'aw']
				version split: ['_', '_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sh', 'a', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'w']
				version split: ['_', '_', '_', 's', 'h', 'aw']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'aw']
				version split: ['_', '_', '_', 'sh', 'aw']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'aw']
				ANALYSING: sheƿ
					resolving (2)
					> version: _/_/s/h/e/ƿ
					TRYING: s
					> version: _/_/sh/e/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'ƿ']
				_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
_/_/_/s/h/e/ƿ(AAACCVC)
_/_/_/sh/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/sh/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: _/_/s/h/e/w
					TRYING: s
					> version: _/_/sh/e/w
					TRYING: sh
					> version: _/_/s/h/ew
					TRYING: s
					> version: _/_/sh/ew
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ew']
				_/_/s/h/e/w(AACCVC)
_/_/sh/e/w(AACVC)
_/_/s/h/ew(AACCV)
_/_/sh/ew(AACV)
_/_/_/s/h/e/w(AAACCVC)
_/_/_/sh/e/w(AAACVC)
_/_/_/s/h/ew(AAACCV)
_/_/_/sh/ew(AAACV)
				version split: ['_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'w']
				version split: ['_', '_', 'sh', 'e', 'w']
				{'string': '_/_/sh/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'w']
				version split: ['_', '_', 's', 'h', 'ew']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ew']
				version split: ['_', '_', 'sh', 'ew']
				{'string': '_/_/sh/ew', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ew']
				version split: ['_', '_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sh', 'e', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'w']
				version split: ['_', '_', '_', 's', 'h', 'ew']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ew']
				version split: ['_', '_', '_', 'sh', 'ew']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: _/_/s/h/o/w
					TRYING: s
					> version: _/_/sh/o/w
					TRYING: sh
					> version: _/_/s/h/ow
					TRYING: s
					> version: _/_/sh/ow
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ow']
				_/_/s/h/o/w(AACCVC)
_/_/sh/o/w(AACVC)
_/_/s/h/ow(AACCV)
_/_/sh/ow(AACV)
_/_/_/s/h/o/w(AAACCVC)
_/_/_/sh/o/w(AAACVC)
_/_/_/s/h/ow(AAACCV)
_/_/_/sh/ow(AAACV)
				version split: ['_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'o', 'w']
				version split: ['_', '_', 'sh', 'o', 'w']
				{'string': '_/_/sh/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'o', 'w']
				version split: ['_', '_', 's', 'h', 'ow']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ow']
				version split: ['_', '_', 'sh', 'ow']
				{'string': '_/_/sh/ow', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ow']
				version split: ['_', '_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sh', 'o', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'o', 'w']
				version split: ['_', '_', '_', 's', 'h', 'ow']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ow']
				version split: ['_', '_', '_', 'sh', 'ow']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ow']
				ANALYSING: schaƿ
					resolving (16)
					> version: _/_/s/c/h/a/ƿ
					TRYING: s
					> version: _/_/s/c/h/aƿ
					TRYING: s
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sch/a/ƿ
					TRYING: sch
					> version: _/_/s/ch/a/ƿ
					TRYING: s
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sch/aƿ
					TRYING: sch
					> version: _/_/s/ch/aƿ
					TRYING: s
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sch/a/ƿ
					TRYING: sch
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sch/aƿ
					TRYING: sch
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/aƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				_/_/s/c/h/a/ƿ(AACCCVC)
_/_/s/c/h/aƿ(AACCCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/s/ch/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/s/ch/aƿ(AACCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/sc/h/aƿ(AACCV)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/_/s/c/h/a/ƿ(AAACCCVC)
_/_/_/s/c/h/aƿ(AAACCCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/s/ch/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/s/ch/aƿ(AAACCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/sch/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_/sch/aƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aƿ']
				version split: ['_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/sch/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_/sch/aƿ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: _/_/s/c/h/a/w
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sch/a/w
					TRYING: sch
					> version: _/_/s/ch/a/w
					TRYING: s
					> version: _/_/s/c/h/aw
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sch/a/w
					TRYING: sch
					> version: _/_/sch/aw
					TRYING: sch
					> version: _/_/s/ch/aw
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sch/aw
					TRYING: sch
					> version: _/_/sc/h/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				_/_/s/c/h/a/w(AACCCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sch/a/w(AACVC)
_/_/s/ch/a/w(AACCVC)
_/_/s/c/h/aw(AACCCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sch/a/w(AACVC)
_/_/sch/aw(AACV)
_/_/s/ch/aw(AACCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sc/h/aw(AACCV)
_/_/sch/aw(AACV)
_/_/sc/h/aw(AACCV)
_/_/_/s/c/h/a/w(AAACCCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sch/a/w(AAACVC)
_/_/_/s/ch/a/w(AAACCVC)
_/_/_/s/c/h/aw(AAACCCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/a/w(AAACVC)
_/_/_/sch/aw(AAACV)
_/_/_/s/ch/aw(AAACCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/aw(AAACV)
_/_/_/sc/h/aw(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_/sch/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'aw']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_/sch/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_/sch/aw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aw']
				version split: ['_', '_', 's', 'ch', 'aw']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'aw']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_/sch/aw', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aw']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', 's', 'ch', 'aw']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				ANALYSING: scheƿ
					resolving (8)
					> version: _/_/s/c/h/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/s/ch/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/_/s/c/h/e/ƿ(AAACCCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/s/ch/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: _/_/s/c/h/e/w
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sch/e/w
					TRYING: sch
					> version: _/_/s/ch/e/w
					TRYING: s
					> version: _/_/s/c/h/ew
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sch/e/w
					TRYING: sch
					> version: _/_/sch/ew
					TRYING: sch
					> version: _/_/s/ch/ew
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sch/ew
					TRYING: sch
					> version: _/_/sc/h/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				_/_/s/c/h/e/w(AACCCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sch/e/w(AACVC)
_/_/s/ch/e/w(AACCVC)
_/_/s/c/h/ew(AACCCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sch/e/w(AACVC)
_/_/sch/ew(AACV)
_/_/s/ch/ew(AACCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sc/h/ew(AACCV)
_/_/sch/ew(AACV)
_/_/sc/h/ew(AACCV)
_/_/_/s/c/h/e/w(AAACCCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sch/e/w(AAACVC)
_/_/_/s/ch/e/w(AAACCVC)
_/_/_/s/c/h/ew(AAACCCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/e/w(AAACVC)
_/_/_/sch/ew(AAACV)
_/_/_/s/ch/ew(AAACCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/ew(AAACV)
_/_/_/sc/h/ew(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ew']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_/sch/ew', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ew']
				version split: ['_', '_', 's', 'ch', 'ew']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ew']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_/sch/ew', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ew']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', 's', 'ch', 'ew']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: _/_/s/c/h/o/w
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sch/o/w
					TRYING: sch
					> version: _/_/s/ch/o/w
					TRYING: s
					> version: _/_/s/c/h/ow
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sch/o/w
					TRYING: sch
					> version: _/_/sch/ow
					TRYING: sch
					> version: _/_/s/ch/ow
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sch/ow
					TRYING: sch
					> version: _/_/sc/h/ow
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				_/_/s/c/h/o/w(AACCCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sch/o/w(AACVC)
_/_/s/ch/o/w(AACCVC)
_/_/s/c/h/ow(AACCCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sch/o/w(AACVC)
_/_/sch/ow(AACV)
_/_/s/ch/ow(AACCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sc/h/ow(AACCV)
_/_/sch/ow(AACV)
_/_/sc/h/ow(AACCV)
_/_/_/s/c/h/o/w(AAACCCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sch/o/w(AAACVC)
_/_/_/s/ch/o/w(AAACCVC)
_/_/_/s/c/h/ow(AAACCCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/o/w(AAACVC)
_/_/_/sch/ow(AAACV)
_/_/_/s/ch/ow(AAACCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/ow(AAACV)
_/_/_/sc/h/ow(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_/sch/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'o', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ow']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_/sch/o', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_/sch/ow', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ow']
				version split: ['_', '_', 's', 'ch', 'ow']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ow']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_/sch/ow', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ow']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'o', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', 's', 'ch', 'ow']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				ANALYSING: ssew
					resolving (4)
					> version: _/_/s/s/e/w
					TRYING: s
					> version: _/_/ss/e/w
					TRYING: ss
					> version: _/_/s/s/ew
					TRYING: s
					> version: _/_/ss/ew
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'ew']
				adding dashed alternative: ['_', '_', '_', 'ss', 'ew']
				_/_/s/s/e/w(AACCVC)
_/_/ss/e/w(AACVC)
_/_/s/s/ew(AACCV)
_/_/ss/ew(AACV)
_/_/_/s/s/e/w(AAACCVC)
_/_/_/ss/e/w(AAACVC)
_/_/_/s/s/ew(AAACCV)
_/_/_/ss/ew(AAACV)
				version split: ['_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/s/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'e', 'w']
				version split: ['_', '_', 'ss', 'e', 'w']
				{'string': '_/_/ss/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'e', 'w']
				version split: ['_', '_', 's', 's', 'ew']
				{'string': '_/_/s/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'ew']
				version split: ['_', '_', 'ss', 'ew']
				{'string': '_/_/ss/ew', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'ew']
				version split: ['_', '_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'e', 'w']
				version split: ['_', '_', '_', 'ss', 'e', 'w']
				{'string': '_/_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'e', 'w']
				version split: ['_', '_', '_', 's', 's', 'ew']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'ew']
				version split: ['_', '_', '_', 'ss', 'ew']
				{'string': '_/_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: _/_/s/s/w/e
					TRYING: s
					> version: _/_/ss/w/e
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', '_', 'ss', 'w', 'e']
				_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
_/_/_/s/s/w/e(AAACCCV)
_/_/_/ss/w/e(AAACCV)
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/s/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_/ss/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'w', 'e']
				version split: ['_', '_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', '_', 'ss', 'w', 'e']
				{'string': '_/_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'a', 'u']
		SPLIT: ['sc', 'e', 'aƿ']
		SPLIT: ['sc', 'e', 'u']
		SPLIT: ['sh', 'a', 'uw']
		SPLIT: ['sh', 'e', 'aƿ']
		SPLIT: ['sh', 'e', 'u']
		SPLIT: ['sch', 'a', 'u']
		SPLIT: ['sch', 'e', 'aƿ']
		SPLIT: ['sch', 'e', 'u']
		SPLIT: ['ss', 'e', 'aw']
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		version for pattern CVV is INVALID
		[{'_', 'sc', 'sh', 'ss', 'sch'}, {'_', 'aƿ', 'aw', 'u', 'uw'}]
		19
		OVERVIEW: version for pattern CVV
{'_', 'sc', 'sh', 'ss', 'sch'}, {'_', 'aƿ', 'aw', 'u', 'uw'}
faulty splits: 19
[''][''][''] <-! chaw
[''][''][''] <-! scaw
[''][''][''] <-! scew
[''][''][''] <-! scw
[''][''][''] <-! seƿ
[''][''][''] <-! shæ
[''][''][''] <-! shæƿ
[''][''][''] <-! shaƿ
[''][''][''] <-! shaw
[''][''][''] <-! sheƿ
[''][''][''] <-! shew
[''][''][''] <-! show
[''][''][''] <-! schaƿ
[''][''][''] <-! schaw
[''][''][''] <-! scheƿ
[''][''][''] <-! schew
[''][''][''] <-! schow
[''][''][''] <-! ssew
[''][''][''] <-! sswe
sc | a | u
sc | e | aƿ
sc | e | u
sh | a | uw
sh | e | aƿ
sh | e | u
sch | a | u
sch | e | aƿ
sch | e | u
ss | e | aw
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
0 : {'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'ch', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'sc', 'sh', 'ss', 'c', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'ch', 'sc', 'sh', 'ss', 'sch'},{'sc', 'sh', 'ss', 'c', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCVVC
	Selection for pattern: CCVVC completed
	Making a version for pattern: CCVVC
			___CCVVC : 0___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					adding blocked set: C = C >> s, ch, sc
					> version: c/h/aw
					TRYING: c
					> version: ch/aw
					TRYING: ch
					adding blocked set: C = C >> s, ch, sc
					RESULT:  ['c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((c))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((c))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					> version: s/c/h/a/u
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/aƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					> version: s/c/h/e/u
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/o/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCVVC : 1___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, h, c
					> version: c/h/aw
					TRYING: h
					adding blocked set: C = C >> s, h, c
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', 'h', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/_/h/a/w(CACVC)
c/_/h/aw(CACV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((c))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((c))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_', 'rgx': '((c))/((_))$'}
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_', 'rgx': '((c))/((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/a/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/a/u
					TRYING: a
					> version: sc/a/u
					TRYING: a
					> version: s/c/au
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'a', 'u']
				adding dashed alternative: ['s', '_', 'c', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'a', 'u']
				adding dashed alternative: ['s', '_', 'c', 'au']
				adding dashed alternative: ['sc', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
sc/a/u(CVC)
sc/a/u(CVV)
s/c/au(CCV)
sc/au(CV)
s/_/c/a/u(CACVA)
s/_/c/a/u(CACVA)
sc/_/a/u(CAVA)
sc/_/a/u(CAVA)
s/_/c/au(CACV)
sc/_/au(CAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['sc', 'au']
				{'string': 'sc/au', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'au']
				version split: ['s', '_', 'c', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'au']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'au']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'a', 'w']
				adding dashed alternative: ['s', '_', 'c', 'aw']
				adding dashed alternative: ['sc', '_', 'aw']
				s/c/a/w(CCVC)
sc/a/w(CVC)
s/c/aw(CCV)
sc/aw(CV)
s/_/c/a/w(CACVC)
sc/_/a/w(CAVC)
s/_/c/aw(CACV)
sc/_/aw(CAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['sc', 'aw']
				{'string': 'sc/aw', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'aw']
				version split: ['s', '_', 'c', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/e/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/e/u
					TRYING: e
					> version: sc/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'e', 'u']
				adding dashed alternative: ['s', '_', 'c', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'e', 'u']
				adding dashed alternative: ['s', '_', 'c', 'eu']
				adding dashed alternative: ['sc', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
sc/e/u(CVC)
sc/e/u(CVV)
s/c/eu(CCV)
sc/eu(CV)
s/_/c/e/u(CACVA)
s/_/c/e/u(CACVA)
sc/_/e/u(CAVA)
sc/_/e/u(CAVA)
s/_/c/eu(CACV)
sc/_/eu(CAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['sc', 'eu']
				{'string': 'sc/eu', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'eu']
				version split: ['s', '_', 'c', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'eu']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'eu']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 'c', 'ew']
				adding dashed alternative: ['sc', '_', 'ew']
				s/c/e/w(CCVC)
sc/e/w(CVC)
s/c/ew(CCV)
sc/ew(CV)
s/_/c/e/w(CACVC)
sc/_/e/w(CAVC)
s/_/c/ew(CACV)
sc/_/ew(CAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['sc', 'ew']
				{'string': 'sc/ew', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'ew']
				version split: ['s', '_', 'c', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/w
					TRYING: w
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', 'w']
				s/c/w(CCC)
sc/w(CC)
s/_/c/w(CACC)
sc/_/w(CAC)
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc/w', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ']
				s/h/æ(CCV)
s/_/h/æ(CACV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/_/h/æ/ƿ(CACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', 'h', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/eu
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/_/h/e/u(CACVA)
s/_/h/e/u(CACVA)
s/_/h/eu(CACV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'eu']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/_/h/e/ƿ(CACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: schau
					resolving (18)
					> version: s/c/h/a/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/h/a/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/a/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/ch/a/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/au
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/au
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/au
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/au
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/au
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/au
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', 'c', 'h', 'au']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'au']
				adding dashed alternative: ['s', '_', 'ch', 'au']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', 'h', 'au']
				s/c/h/a/u(CCCVC)
s/c/h/a/u(CCCVV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
s/ch/a/u(CCVC)
s/ch/a/u(CCVV)
s/c/h/au(CCCV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/au(CCV)
s/ch/au(CCV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/au(CCV)
sc/h/au(CCV)
sc/h/au(CCV)
s/_/c/h/a/u(CACCVA)
s/_/c/h/a/u(CACCVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
s/_/ch/a/u(CACVA)
s/_/ch/a/u(CACVA)
s/_/c/h/au(CACCV)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/au(CACV)
s/_/ch/au(CACV)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/au(CACV)
sc/_/h/au(CACV)
sc/_/h/au(CACV)
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['s', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'au']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'au']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schaƿ
					resolving (12)
					> version: s/c/h/a/ƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/h/aƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/a/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/aƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/aƿ(CCCV)
sc/h/a/ƿ(CCVC)
s/ch/a/ƿ(CCVC)
sc/h/aƿ(CCV)
s/ch/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
sc/h/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
s/_/c/h/a/ƿ(CACCVC)
s/_/c/h/aƿ(CACCV)
sc/_/h/a/ƿ(CACVC)
s/_/ch/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/ch/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
sc/_/h/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['s', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'aƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'aƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schaw
					resolving (12)
					> version: s/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/aw
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				s/c/h/a/w(CCCVC)
sc/h/a/w(CCVC)
s/ch/a/w(CCVC)
s/c/h/aw(CCCV)
sc/h/a/w(CCVC)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
s/ch/aw(CCV)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sc/h/aw(CCV)
sc/h/aw(CCV)
s/_/c/h/a/w(CACCVC)
sc/_/h/a/w(CACVC)
s/_/ch/a/w(CACVC)
s/_/c/h/aw(CACCV)
sc/_/h/a/w(CACVC)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
s/_/ch/aw(CACV)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['s', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scheu
					resolving (18)
					> version: s/c/h/e/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/h/e/u
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/e/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/ch/e/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/eu
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/eu
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/eu
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/eu
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/eu
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/eu
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', 'c', 'h', 'eu']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'eu']
				adding dashed alternative: ['s', '_', 'ch', 'eu']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', 'h', 'eu']
				s/c/h/e/u(CCCVC)
s/c/h/e/u(CCCVV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
s/ch/e/u(CCVC)
s/ch/e/u(CCVV)
s/c/h/eu(CCCV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/eu(CCV)
s/ch/eu(CCV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/eu(CCV)
sc/h/eu(CCV)
sc/h/eu(CCV)
s/_/c/h/e/u(CACCVA)
s/_/c/h/e/u(CACCVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
s/_/ch/e/u(CACVA)
s/_/ch/e/u(CACVA)
s/_/c/h/eu(CACCV)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/eu(CACV)
s/_/ch/eu(CACV)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/eu(CACV)
sc/_/h/eu(CACV)
sc/_/h/eu(CACV)
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['s', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'u']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'eu']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'eu']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scheƿ
					resolving (6)
					> version: s/c/h/e/ƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/e/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
sc/h/e/ƿ(CCVC)
s/ch/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
s/_/c/h/e/ƿ(CACCVC)
sc/_/h/e/ƿ(CACVC)
s/_/ch/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schew
					resolving (12)
					> version: s/c/h/e/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/e/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/ew
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/ew
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				s/c/h/e/w(CCCVC)
sc/h/e/w(CCVC)
s/ch/e/w(CCVC)
s/c/h/ew(CCCV)
sc/h/e/w(CCVC)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
s/ch/ew(CCV)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sc/h/ew(CCV)
sc/h/ew(CCV)
s/_/c/h/e/w(CACCVC)
sc/_/h/e/w(CACVC)
s/_/ch/e/w(CACVC)
s/_/c/h/ew(CACCV)
sc/_/h/e/w(CACVC)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
s/_/ch/ew(CACV)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['s', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schow
					resolving (12)
					> version: s/c/h/o/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/o/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/ow
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/ow
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				s/c/h/o/w(CCCVC)
sc/h/o/w(CCVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
sc/h/o/w(CCVC)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
s/ch/ow(CCV)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sc/h/ow(CCV)
sc/h/ow(CCV)
s/_/c/h/o/w(CACCVC)
sc/_/h/o/w(CACVC)
s/_/ch/o/w(CACVC)
s/_/c/h/ow(CACCV)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
s/_/ch/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCVVC : 2___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/h/a/w
					TRYING: h
					> version: c/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', '_', 'h', 'aw']
				c/_/h/a/w(CACVC)
c/_/h/aw(CACV)
c/_/_/h/a/w(CAACVC)
c/_/_/h/aw(CAACV)
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_/h', 'rgx': '((c))/((_))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'a', 'w']
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_/h', 'rgx': '((c))/((_))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'aw']
				version split: ['c', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_', 'rgx': '((c))/((_))/((_))$'}
				version split: ['c', '_', '_', 'h', 'aw']
				{'string': 'c/_/_', 'rgx': '((c))/((_))/((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/_/c/a/u
					TRYING: c
					> version: s/_/c/a/u
					TRYING: c
					> version: sc/_/a/u
					TRYING: a
					> version: sc/_/a/u
					TRYING: a
					> version: s/_/c/au
					TRYING: c
					> version: sc/_/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', '_', 'c', 'a', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				_____REMOVING________['s', '_', 'c', 'a', 'u']
				version split: ['s', '_', 'c', 'a', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				_____REMOVING________['s', '_', 'c', 'a', 'u']
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				version split: ['s', '_', 'c', 'au']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				_____REMOVING________['s', '_', 'c', 'au']
				version split: ['sc', '_', 'au']
				{'string': 'sc/_/au', 'rgx': '((s)|(sc))/((_))/((au)|(a))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/_/c/a/w
					TRYING: c
					> version: sc/_/a/w
					TRYING: a
					> version: s/_/c/aw
					TRYING: c
					> version: sc/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', '_', 'c', 'a', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['s', '_', 'c', 'a', 'w']
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_/a', 'rgx': '((s)|(sc))/((_))/((a))$'}
				version split: ['s', '_', 'c', 'aw']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['s', '_', 'c', 'aw']
				version split: ['sc', '_', 'aw']
				{'string': 'sc/_/aw', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['sc', '_', 'aw']
				ANALYSING: sceu
					resolving (6)
					> version: s/_/c/e/u
					TRYING: c
					> version: s/_/c/e/u
					TRYING: c
					> version: sc/_/e/u
					TRYING: e
					> version: sc/_/e/u
					TRYING: e
					> version: s/_/c/eu
					TRYING: c
					> version: sc/_/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', '_', 'c', 'e', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'e', 'u']
				version split: ['s', '_', 'c', 'e', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'e', 'u']
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e', 'rgx': '((s)|(sc))/((_))/((e))$'}
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e', 'rgx': '((s)|(sc))/((_))/((e))$'}
				version split: ['s', '_', 'c', 'eu']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'eu']
				version split: ['sc', '_', 'eu']
				{'string': 'sc/_/eu', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['sc', '_', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/_/c/e/w
					TRYING: c
					> version: sc/_/e/w
					TRYING: e
					> version: s/_/c/ew
					TRYING: c
					> version: sc/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', '_', 'c', 'e', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'e', 'w']
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_/e', 'rgx': '((s)|(sc))/((_))/((e))$'}
				version split: ['s', '_', 'c', 'ew']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'ew']
				version split: ['sc', '_', 'ew']
				{'string': 'sc/_/ew', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['sc', '_', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/_/c/w
					TRYING: c
					> version: sc/_/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', '_', 'w']
				s/_/c/w(CACC)
sc/_/w(CAC)
s/_/_/c/w(CAACC)
sc/_/_/w(CAAC)
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'w']
				version split: ['sc', '_', 'w']
				{'string': 'sc/_/w', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'w']
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'æ']
				s/_/h/æ(CACV)
s/_/_/h/æ(CAACV)
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ']
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'æ', 'ƿ']
				s/_/h/æ/ƿ(CACVC)
s/_/_/h/æ/ƿ(CAACVC)
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/h/a/ƿ
					TRYING: h
					> version: s/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'h', 'aƿ']
				s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
s/_/_/h/a/ƿ(CAACVC)
s/_/_/h/aƿ(CAACV)
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/_/h/a/w
					TRYING: h
					> version: s/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'aw']
				s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
s/_/_/h/a/w(CAACVC)
s/_/_/h/aw(CAACV)
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'w']
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'aw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/_/h/e/u
					TRYING: h
					> version: s/_/h/e/u
					TRYING: h
					> version: s/_/h/eu
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'h', 'eu']
				s/_/h/e/u(CACVA)
s/_/h/e/u(CACVA)
s/_/h/eu(CACV)
s/_/_/h/e/u(CAACVA)
s/_/_/h/e/u(CAACVA)
s/_/_/h/eu(CAACV)
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'u']
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'u']
				version split: ['s', '_', 'h', 'eu']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'eu']
				version split: ['s', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'eu']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'ƿ']
				s/_/h/e/ƿ(CACVC)
s/_/_/h/e/ƿ(CAACVC)
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/_/h/e/w
					TRYING: h
					> version: s/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'ew']
				s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
s/_/_/h/e/w(CAACVC)
s/_/_/h/ew(CAACV)
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'w']
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'ew']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/_/h/o/w
					TRYING: h
					> version: s/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'ow']
				s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
s/_/_/h/o/w(CAACVC)
s/_/_/h/ow(CAACV)
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'ow']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: schau
					resolving (18)
					> version: s/_/c/h/a/u
					TRYING: c
					> version: s/_/c/h/a/u
					TRYING: c
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/a/u
					TRYING: h
					> version: s/_/ch/a/u
					TRYING: ch
					> version: s/_/ch/a/u
					TRYING: ch
					> version: s/_/c/h/au
					TRYING: c
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/au
					TRYING: h
					> version: s/_/ch/au
					TRYING: ch
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/a/u
					TRYING: h
					> version: sc/_/h/au
					TRYING: h
					> version: sc/_/h/au
					TRYING: h
					> version: sc/_/h/au
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'au']
				adding dashed alternative: ['s', '_', '_', 'ch', 'au']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', 'h', 'au']
				s/_/c/h/a/u(CACCVA)
s/_/c/h/a/u(CACCVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
s/_/ch/a/u(CACVA)
s/_/ch/a/u(CACVA)
s/_/c/h/au(CACCV)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/au(CACV)
s/_/ch/au(CACV)
sc/_/h/a/u(CACVA)
sc/_/h/a/u(CACVA)
sc/_/h/au(CACV)
sc/_/h/au(CACV)
sc/_/h/au(CACV)
s/_/_/c/h/a/u(CAACCVA)
s/_/_/c/h/a/u(CAACCVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
s/_/_/ch/a/u(CAACVA)
s/_/_/ch/a/u(CAACVA)
s/_/_/c/h/au(CAACCV)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/au(CAACV)
s/_/_/ch/au(CAACV)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/au(CAACV)
sc/_/_/h/au(CAACV)
sc/_/_/h/au(CAACV)
				version split: ['s', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'u']
				version split: ['s', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['s', '_', 'ch', 'a', 'u']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'u']
				version split: ['s', '_', 'ch', 'a', 'u']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'u']
				version split: ['s', '_', 'c', 'h', 'au']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'au']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'au']
				version split: ['s', '_', 'ch', 'au']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'au']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'a', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'u']
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'au']
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'au']
				version split: ['sc', '_', 'h', 'au']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'au']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'au']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'au']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (12)
					> version: s/_/c/h/a/ƿ
					TRYING: c
					> version: s/_/c/h/aƿ
					TRYING: c
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: s/_/ch/a/ƿ
					TRYING: ch
					> version: sc/_/h/aƿ
					TRYING: h
					> version: s/_/ch/aƿ
					TRYING: ch
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				s/_/c/h/a/ƿ(CACCVC)
s/_/c/h/aƿ(CACCV)
sc/_/h/a/ƿ(CACVC)
s/_/ch/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/ch/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
sc/_/h/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/_/c/h/a/ƿ(CAACCVC)
s/_/_/c/h/aƿ(CAACCV)
sc/_/_/h/a/ƿ(CAACVC)
s/_/_/ch/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/ch/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
				version split: ['s', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['s', '_', 'ch', 'aƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schaw
					resolving (12)
					> version: s/_/c/h/a/w
					TRYING: c
					> version: sc/_/h/a/w
					TRYING: h
					> version: s/_/ch/a/w
					TRYING: ch
					> version: s/_/c/h/aw
					TRYING: c
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: s/_/ch/aw
					TRYING: ch
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				s/_/c/h/a/w(CACCVC)
sc/_/h/a/w(CACVC)
s/_/ch/a/w(CACVC)
s/_/c/h/aw(CACCV)
sc/_/h/a/w(CACVC)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
s/_/ch/aw(CACV)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
s/_/_/c/h/a/w(CAACCVC)
sc/_/_/h/a/w(CAACVC)
s/_/_/ch/a/w(CAACVC)
s/_/_/c/h/aw(CAACCV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
s/_/_/ch/aw(CAACV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
				version split: ['s', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['s', '_', 'ch', 'a', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'w']
				version split: ['s', '_', 'c', 'h', 'aw']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['s', '_', 'ch', 'aw']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'aw']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'aw']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: scheu
					resolving (18)
					> version: s/_/c/h/e/u
					TRYING: c
					> version: s/_/c/h/e/u
					TRYING: c
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/e/u
					TRYING: h
					> version: s/_/ch/e/u
					TRYING: ch
					> version: s/_/ch/e/u
					TRYING: ch
					> version: s/_/c/h/eu
					TRYING: c
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/eu
					TRYING: h
					> version: s/_/ch/eu
					TRYING: ch
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/e/u
					TRYING: h
					> version: sc/_/h/eu
					TRYING: h
					> version: sc/_/h/eu
					TRYING: h
					> version: sc/_/h/eu
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'eu']
				adding dashed alternative: ['s', '_', '_', 'ch', 'eu']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', 'h', 'eu']
				s/_/c/h/e/u(CACCVA)
s/_/c/h/e/u(CACCVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
s/_/ch/e/u(CACVA)
s/_/ch/e/u(CACVA)
s/_/c/h/eu(CACCV)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/eu(CACV)
s/_/ch/eu(CACV)
sc/_/h/e/u(CACVA)
sc/_/h/e/u(CACVA)
sc/_/h/eu(CACV)
sc/_/h/eu(CACV)
sc/_/h/eu(CACV)
s/_/_/c/h/e/u(CAACCVA)
s/_/_/c/h/e/u(CAACCVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
s/_/_/ch/e/u(CAACVA)
s/_/_/ch/e/u(CAACVA)
s/_/_/c/h/eu(CAACCV)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/eu(CAACV)
s/_/_/ch/eu(CAACV)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/eu(CAACV)
sc/_/_/h/eu(CAACV)
sc/_/_/h/eu(CAACV)
				version split: ['s', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'u']
				version split: ['s', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['s', '_', 'ch', 'e', 'u']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'u']
				version split: ['s', '_', 'ch', 'e', 'u']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'u']
				version split: ['s', '_', 'c', 'h', 'eu']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'eu']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'eu']
				version split: ['s', '_', 'ch', 'eu']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'eu']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'e', 'u']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'u']
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'eu']
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'eu']
				version split: ['sc', '_', 'h', 'eu']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'eu']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'eu']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'eu']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (6)
					> version: s/_/c/h/e/ƿ
					TRYING: c
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: s/_/ch/e/ƿ
					TRYING: ch
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: sc/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				s/_/c/h/e/ƿ(CACCVC)
sc/_/h/e/ƿ(CACVC)
s/_/ch/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
s/_/_/c/h/e/ƿ(CAACCVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/ch/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
				version split: ['s', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schew
					resolving (12)
					> version: s/_/c/h/e/w
					TRYING: c
					> version: sc/_/h/e/w
					TRYING: h
					> version: s/_/ch/e/w
					TRYING: ch
					> version: s/_/c/h/ew
					TRYING: c
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: s/_/ch/ew
					TRYING: ch
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				s/_/c/h/e/w(CACCVC)
sc/_/h/e/w(CACVC)
s/_/ch/e/w(CACVC)
s/_/c/h/ew(CACCV)
sc/_/h/e/w(CACVC)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
s/_/ch/ew(CACV)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
s/_/_/c/h/e/w(CAACCVC)
sc/_/_/h/e/w(CAACVC)
s/_/_/ch/e/w(CAACVC)
s/_/_/c/h/ew(CAACCV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
s/_/_/ch/ew(CAACV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
				version split: ['s', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['s', '_', 'ch', 'e', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'w']
				version split: ['s', '_', 'c', 'h', 'ew']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['s', '_', 'ch', 'ew']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'ew']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'ew']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schow
					resolving (12)
					> version: s/_/c/h/o/w
					TRYING: c
					> version: sc/_/h/o/w
					TRYING: h
					> version: s/_/ch/o/w
					TRYING: ch
					> version: s/_/c/h/ow
					TRYING: c
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: s/_/ch/ow
					TRYING: ch
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				s/_/c/h/o/w(CACCVC)
sc/_/h/o/w(CACVC)
s/_/ch/o/w(CACVC)
s/_/c/h/ow(CACCV)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
s/_/ch/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
s/_/_/c/h/o/w(CAACCVC)
sc/_/_/h/o/w(CAACVC)
s/_/_/ch/o/w(CAACVC)
s/_/_/c/h/ow(CAACCV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
s/_/_/ch/ow(CAACV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'o', 'w']
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'ow']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					> version: ss/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((e))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', 'w', 'e']
				s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
			___CCVVC : 3___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/_/h/a/w
					TRYING: h
					> version: c/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', '_', '_', 'h', 'aw']
				c/_/_/h/a/w(CAACVC)
c/_/_/h/aw(CAACV)
c/_/_/_/h/a/w(CAAACVC)
c/_/_/_/h/aw(CAAACV)
				version split: ['c', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_/h', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', 'h', 'a', 'w']
				version split: ['c', '_', '_', 'h', 'aw']
				{'string': 'c/_/_/h', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', 'h', 'aw']
				version split: ['c', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_/_', 'rgx': '((c))/((_))/((_))/((_))$'}
				version split: ['c', '_', '_', '_', 'h', 'aw']
				{'string': 'c/_/_/_', 'rgx': '((c))/((_))/((_))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: sc/_/a/u
					TRYING: u
					> version: sc/_/a/u
					TRYING: u
					> version: sc/_/au
					RESULT:  ['u']
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a/u', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))$'}
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a/u', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))$'}
				version split: ['sc', '_', 'au']
				{'string': 'sc/_/au', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))$'}
				_____REMOVING________['sc', '_', 'au']
				ANALYSING: scaw
					resolving (1)
					> version: sc/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'a', '_', 'w']
				sc/_/a/w(CAVC)
sc/_/a/_/w(CAVAC)
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_/a/w', 'rgx': '((s)|(sc))/((_))/((a))/((_))$'}
				_____REMOVING________['sc', '_', 'a', 'w']
				version split: ['sc', '_', 'a', '_', 'w']
				{'string': 'sc/_/a/_', 'rgx': '((s)|(sc))/((_))/((a))/((_))$'}
				ANALYSING: sceu
					resolving (2)
					> version: sc/_/e/u
					TRYING: u
					> version: sc/_/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e/u', 'rgx': '((s)|(sc))/((_))/((e))/((u))$'}
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e/u', 'rgx': '((s)|(sc))/((_))/((e))/((u))$'}
				ANALYSING: scew
					resolving (1)
					> version: sc/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'e', '_', 'w']
				sc/_/e/w(CAVC)
sc/_/e/_/w(CAVAC)
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_/e/w', 'rgx': '((s)|(sc))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'e', 'w']
				version split: ['sc', '_', 'e', '_', 'w']
				{'string': 'sc/_/e/_', 'rgx': '((s)|(sc))/((_))/((e))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/_/_/c/w
					TRYING: c
					> version: sc/_/_/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'w']
				s/_/_/c/w(CAACC)
sc/_/_/w(CAAC)
s/_/_/_/c/w(CAAACC)
sc/_/_/_/w(CAAAC)
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'w']
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'w']
				version split: ['s', '_', '_', '_', 'c', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', '_', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/e/_/ƿ(CAVAC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e/ƿ', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', 'e', '_', 'ƿ']
				{'string': 's/_/e/_', 'rgx': '((s))/((_))/((e))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/_/h/æ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'æ']
				s/_/_/h/æ(CAACV)
s/_/_/_/h/æ(CAAACV)
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'æ']
				version split: ['s', '_', '_', '_', 'h', 'æ']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				s/_/_/h/æ/ƿ(CAACVC)
s/_/_/_/h/æ/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'aƿ']
				s/_/_/h/a/ƿ(CAACVC)
s/_/_/h/aƿ(CAACV)
s/_/_/_/h/a/ƿ(CAAACVC)
s/_/_/_/h/aƿ(CAAACV)
				version split: ['s', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/_/_/h/a/w
					TRYING: h
					> version: s/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'aw']
				s/_/_/h/a/w(CAACVC)
s/_/_/h/aw(CAACV)
s/_/_/_/h/a/w(CAAACVC)
s/_/_/_/h/aw(CAAACV)
				version split: ['s', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', 'h', 'aw']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'aw']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/_/_/h/e/u
					TRYING: h
					> version: s/_/_/h/e/u
					TRYING: h
					> version: s/_/_/h/eu
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'eu']
				s/_/_/h/e/u(CAACVA)
s/_/_/h/e/u(CAACVA)
s/_/_/h/eu(CAACV)
s/_/_/_/h/e/u(CAAACVA)
s/_/_/_/h/e/u(CAAACVA)
s/_/_/_/h/eu(CAAACV)
				version split: ['s', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', 'h', 'eu']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'eu']
				version split: ['s', '_', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'eu']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'ƿ']
				s/_/_/h/e/ƿ(CAACVC)
s/_/_/_/h/e/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/_/_/h/e/w
					TRYING: h
					> version: s/_/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'ew']
				s/_/_/h/e/w(CAACVC)
s/_/_/h/ew(CAACV)
s/_/_/_/h/e/w(CAAACVC)
s/_/_/_/h/ew(CAAACV)
				version split: ['s', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', 'h', 'ew']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'ew']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/_/_/h/o/w
					TRYING: h
					> version: s/_/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'ow']
				s/_/_/h/o/w(CAACVC)
s/_/_/h/ow(CAACV)
s/_/_/_/h/o/w(CAAACVC)
s/_/_/_/h/ow(CAAACV)
				version split: ['s', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', 'h', 'ow']
				{'string': 's/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'h', 'ow']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				ANALYSING: schau
					resolving (18)
					> version: s/_/_/c/h/a/u
					TRYING: c
					> version: s/_/_/c/h/a/u
					TRYING: c
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: s/_/_/ch/a/u
					TRYING: ch
					> version: s/_/_/ch/a/u
					TRYING: ch
					> version: s/_/_/c/h/au
					TRYING: c
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/au
					TRYING: h
					> version: s/_/_/ch/au
					TRYING: ch
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/h/au
					TRYING: h
					> version: sc/_/_/h/au
					TRYING: h
					> version: sc/_/_/h/au
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'au']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'au']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'au']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'au']
				s/_/_/c/h/a/u(CAACCVA)
s/_/_/c/h/a/u(CAACCVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
s/_/_/ch/a/u(CAACVA)
s/_/_/ch/a/u(CAACVA)
s/_/_/c/h/au(CAACCV)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/au(CAACV)
s/_/_/ch/au(CAACV)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/a/u(CAACVA)
sc/_/_/h/au(CAACV)
sc/_/_/h/au(CAACV)
sc/_/_/h/au(CAACV)
s/_/_/_/c/h/a/u(CAAACCVA)
s/_/_/_/c/h/a/u(CAAACCVA)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/a/u(CAAACVA)
s/_/_/_/ch/a/u(CAAACVA)
s/_/_/_/ch/a/u(CAAACVA)
s/_/_/_/c/h/au(CAAACCV)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/au(CAAACV)
s/_/_/_/ch/au(CAAACV)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/a/u(CAAACVA)
sc/_/_/_/h/au(CAAACV)
sc/_/_/_/h/au(CAAACV)
sc/_/_/_/h/au(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'u']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['s', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'u']
				version split: ['s', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'u']
				version split: ['s', '_', '_', 'c', 'h', 'au']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'au']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'au']
				version split: ['s', '_', '_', 'ch', 'au']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'au']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'au']
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'au']
				version split: ['sc', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'au']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'au']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'au']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (12)
					> version: s/_/_/c/h/a/ƿ
					TRYING: c
					> version: s/_/_/c/h/aƿ
					TRYING: c
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/ch/a/ƿ
					TRYING: ch
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: s/_/_/ch/aƿ
					TRYING: ch
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				s/_/_/c/h/a/ƿ(CAACCVC)
s/_/_/c/h/aƿ(CAACCV)
sc/_/_/h/a/ƿ(CAACVC)
s/_/_/ch/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/ch/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/_/c/h/a/ƿ(CAAACCVC)
s/_/_/_/c/h/aƿ(CAAACCV)
sc/_/_/_/h/a/ƿ(CAAACVC)
s/_/_/_/ch/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
s/_/_/_/ch/aƿ(CAAACV)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
sc/_/_/_/h/aƿ(CAAACV)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: schaw
					resolving (12)
					> version: s/_/_/c/h/a/w
					TRYING: c
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: s/_/_/ch/a/w
					TRYING: ch
					> version: s/_/_/c/h/aw
					TRYING: c
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: s/_/_/ch/aw
					TRYING: ch
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				s/_/_/c/h/a/w(CAACCVC)
sc/_/_/h/a/w(CAACVC)
s/_/_/ch/a/w(CAACVC)
s/_/_/c/h/aw(CAACCV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
s/_/_/ch/aw(CAACV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
s/_/_/_/c/h/a/w(CAAACCVC)
sc/_/_/_/h/a/w(CAAACVC)
s/_/_/_/ch/a/w(CAAACVC)
s/_/_/_/c/h/aw(CAAACCV)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/aw(CAAACV)
s/_/_/_/ch/aw(CAAACV)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/aw(CAAACV)
sc/_/_/_/h/aw(CAAACV)
sc/_/_/_/h/aw(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'ch', 'aw']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'aw']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'aw']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: scheu
					resolving (18)
					> version: s/_/_/c/h/e/u
					TRYING: c
					> version: s/_/_/c/h/e/u
					TRYING: c
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: s/_/_/ch/e/u
					TRYING: ch
					> version: s/_/_/ch/e/u
					TRYING: ch
					> version: s/_/_/c/h/eu
					TRYING: c
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/eu
					TRYING: h
					> version: s/_/_/ch/eu
					TRYING: ch
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/h/eu
					TRYING: h
					> version: sc/_/_/h/eu
					TRYING: h
					> version: sc/_/_/h/eu
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'u']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'eu']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'eu']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'u']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'eu']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'eu']
				s/_/_/c/h/e/u(CAACCVA)
s/_/_/c/h/e/u(CAACCVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
s/_/_/ch/e/u(CAACVA)
s/_/_/ch/e/u(CAACVA)
s/_/_/c/h/eu(CAACCV)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/eu(CAACV)
s/_/_/ch/eu(CAACV)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/e/u(CAACVA)
sc/_/_/h/eu(CAACV)
sc/_/_/h/eu(CAACV)
sc/_/_/h/eu(CAACV)
s/_/_/_/c/h/e/u(CAAACCVA)
s/_/_/_/c/h/e/u(CAAACCVA)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/e/u(CAAACVA)
s/_/_/_/ch/e/u(CAAACVA)
s/_/_/_/ch/e/u(CAAACVA)
s/_/_/_/c/h/eu(CAAACCV)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/eu(CAAACV)
s/_/_/_/ch/eu(CAAACV)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/e/u(CAAACVA)
sc/_/_/_/h/eu(CAAACV)
sc/_/_/_/h/eu(CAAACV)
sc/_/_/_/h/eu(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'u']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'u']
				version split: ['s', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'u']
				version split: ['s', '_', '_', 'c', 'h', 'eu']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'eu']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'eu']
				version split: ['s', '_', '_', 'ch', 'eu']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'eu']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'eu']
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'eu']
				version split: ['sc', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'eu']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'eu']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'eu']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (6)
					> version: s/_/_/c/h/e/ƿ
					TRYING: c
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: s/_/_/ch/e/ƿ
					TRYING: ch
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				s/_/_/c/h/e/ƿ(CAACCVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/ch/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/_/c/h/e/ƿ(CAAACCVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
s/_/_/_/ch/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: schew
					resolving (12)
					> version: s/_/_/c/h/e/w
					TRYING: c
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: s/_/_/ch/e/w
					TRYING: ch
					> version: s/_/_/c/h/ew
					TRYING: c
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: s/_/_/ch/ew
					TRYING: ch
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				s/_/_/c/h/e/w(CAACCVC)
sc/_/_/h/e/w(CAACVC)
s/_/_/ch/e/w(CAACVC)
s/_/_/c/h/ew(CAACCV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
s/_/_/ch/ew(CAACV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
s/_/_/_/c/h/e/w(CAAACCVC)
sc/_/_/_/h/e/w(CAAACVC)
s/_/_/_/ch/e/w(CAAACVC)
s/_/_/_/c/h/ew(CAAACCV)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/ew(CAAACV)
s/_/_/_/ch/ew(CAAACV)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/ew(CAAACV)
sc/_/_/_/h/ew(CAAACV)
sc/_/_/_/h/ew(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'ch', 'ew']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'ew']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'ew']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: schow
					resolving (12)
					> version: s/_/_/c/h/o/w
					TRYING: c
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: s/_/_/ch/o/w
					TRYING: ch
					> version: s/_/_/c/h/ow
					TRYING: c
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: s/_/_/ch/ow
					TRYING: ch
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				s/_/_/c/h/o/w(CAACCVC)
sc/_/_/h/o/w(CAACVC)
s/_/_/ch/o/w(CAACVC)
s/_/_/c/h/ow(CAACCV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
s/_/_/ch/ow(CAACV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
s/_/_/_/c/h/o/w(CAAACCVC)
sc/_/_/_/h/o/w(CAAACVC)
s/_/_/_/ch/o/w(CAAACVC)
s/_/_/_/c/h/ow(CAAACCV)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/ow(CAAACV)
s/_/_/_/ch/ow(CAAACV)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/ow(CAAACV)
sc/_/_/_/h/ow(CAAACV)
sc/_/_/_/h/ow(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'o', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'ch', 'ow']
				{'string': 's/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'ow']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['s', '_', '_', '_', 'ch', 'ow']
				{'string': 's/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'e', '_', 'w']
				ss/_/e/w(CAVC)
ss/_/e/_/w(CAVAC)
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e/w', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['ss', '_', 'e', '_', 'w']
				{'string': 'ss/_/e/_', 'rgx': '((s))/((_))/((e))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/_/s/w/e
					TRYING: s
					> version: ss/_/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', '_', 'w', 'e']
				s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
s/_/_/_/s/w/e(CAAACCV)
ss/_/_/_/w/e(CAAACV)
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/w', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'w', 'e']
				version split: ['s', '_', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
				version split: ['ss', '_', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/_', 'rgx': '((s))/((_))/((_))/((_))$'}
			___CCVVC : 4___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/_/_/h/a/w
					TRYING: h
					> version: c/_/_/_/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['c', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_/_/h/a', 'rgx': '((c))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['c', '_', '_', '_', 'h', 'a', 'w']
				version split: ['c', '_', '_', '_', 'h', 'aw']
				{'string': 'c/_/_/_/h/aw', 'rgx': '((c))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['c', '_', '_', '_', 'h', 'aw']
				ANALYSING: scau
					resolving (2)
					> version: sc/_/a/u
					> version: sc/_/a/u
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'a', 'u', '_']
				adding dashed alternative: ['sc', '_', 'a', 'u', '_']
				sc/_/a/u(CAVA)
sc/_/a/u(CAVA)
sc/_/a/u/_(CAVAA)
sc/_/a/u/_(CAVAA)
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a/u', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'a', 'u']
				version split: ['sc', '_', 'a', 'u']
				{'string': 'sc/_/a/u', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'a', 'u']
				version split: ['sc', '_', 'a', 'u', '_']
				{'string': 'sc/_/a/u/_', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))/((_))$'}
				version split: ['sc', '_', 'a', 'u', '_']
				{'string': 'sc/_/a/u/_', 'rgx': '((s)|(sc))/((_))/((au)|(a))/((u))/((_))$'}
				ANALYSING: scaw
					resolving (1)
					> version: sc/_/a/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sc', '_', 'a', '_', 'w']
				{'string': 'sc/_/a/_/w', 'rgx': '((s)|(sc))/((_))/((a))/((_))/((w))$'}
				ANALYSING: sceu
					resolving (2)
					> version: sc/_/e/u
					> version: sc/_/e/u
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'e', 'u', '_']
				adding dashed alternative: ['sc', '_', 'e', 'u', '_']
				sc/_/e/u(CAVA)
sc/_/e/u(CAVA)
sc/_/e/u/_(CAVAA)
sc/_/e/u/_(CAVAA)
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e/u', 'rgx': '((s)|(sc))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'e', 'u']
				version split: ['sc', '_', 'e', 'u']
				{'string': 'sc/_/e/u', 'rgx': '((s)|(sc))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['sc', '_', 'e', 'u']
				version split: ['sc', '_', 'e', 'u', '_']
				{'string': 'sc/_/e/u/_', 'rgx': '((s)|(sc))/((_))/((e))/((u))/((_))$'}
				version split: ['sc', '_', 'e', 'u', '_']
				{'string': 'sc/_/e/u/_', 'rgx': '((s)|(sc))/((_))/((e))/((u))/((_))$'}
				ANALYSING: scew
					resolving (1)
					> version: sc/_/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sc', '_', 'e', '_', 'w']
				{'string': 'sc/_/e/_/w', 'rgx': '((s)|(sc))/((_))/((e))/((_))/((w))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/_/_/_/c/w
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', '_', '_', 'c', 'w']
				{'string': 's/_/_/_/c/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((w))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'w']
				version split: ['sc', '_', '_', '_', 'w']
				{'string': 'sc/_/_/_/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', '_', 'e', '_', 'ƿ']
				{'string': 's/_/e/_/ƿ', 'rgx': '((s))/((_))/((e))/((_))/((ƿ))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/_/_/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'æ']
				{'string': 's/_/_/_/h/æ', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/_/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_/_/h/æ', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/_/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_/h/a', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_/_/h/aƿ', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/_/_/_/h/a/w
					TRYING: h
					> version: s/_/_/_/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_/_/h/a', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', '_', 'h', 'aw']
				{'string': 's/_/_/_/h/aw', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'aw']
				ANALYSING: sheu
					resolving (3)
					> version: s/_/_/_/h/e/u
					TRYING: h
					> version: s/_/_/_/h/e/u
					TRYING: h
					> version: s/_/_/_/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', '_', 'h', 'e', 'u']
				{'string': 's/_/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', '_', 'h', 'eu']
				{'string': 's/_/_/_/h/eu', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'ƿ']
				ANALYSING: shew
					resolving (2)
					> version: s/_/_/_/h/e/w
					TRYING: h
					> version: s/_/_/_/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', '_', 'h', 'ew']
				{'string': 's/_/_/_/h/ew', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/_/_/_/h/o/w
					TRYING: h
					> version: s/_/_/_/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_/_/h/o', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', '_', 'h', 'ow']
				{'string': 's/_/_/_/h/ow', 'rgx': '((s))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'ow']
				ANALYSING: schau
					resolving (18)
					> version: s/_/_/_/c/h/a/u
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: s/_/_/_/c/h/a/u
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: s/_/_/_/ch/a/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/ch/a/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/c/h/au
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/au
					TRYING: h
					> version: s/_/_/_/ch/au
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/a/u
					TRYING: h
					> version: sc/_/_/_/h/au
					TRYING: h
					> version: sc/_/_/_/h/au
					TRYING: h
					> version: sc/_/_/_/h/au
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'u']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'u']
				{'string': 's/_/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'u']
				version split: ['s', '_', '_', '_', 'c', 'h', 'au']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'au']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_/h/au', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'au']
				version split: ['s', '_', '_', '_', 'ch', 'au']
				{'string': 's/_/_/_/ch/au', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'au']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'u']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_/h/au', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'au']
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_/h/au', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'au']
				version split: ['sc', '_', '_', '_', 'h', 'au']
				{'string': 'sc/_/_/_/h/au', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'au']
				ANALYSING: schaƿ
					resolving (12)
					> version: s/_/_/_/c/h/a/ƿ
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: s/_/_/_/c/h/aƿ
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/_/ch/a/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/aƿ
					TRYING: h
					> version: s/_/_/_/ch/aƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/_/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_/_/ch/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (12)
					> version: s/_/_/_/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/a/w
					TRYING: h
					> version: s/_/_/_/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/c/h/aw
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/_/h/aw
					TRYING: h
					> version: s/_/_/_/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/_/h/aw
					TRYING: h
					> version: sc/_/_/_/h/aw
					TRYING: h
					> version: sc/_/_/_/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'ch', 'aw']
				{'string': 's/_/_/_/ch/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				ANALYSING: scheu
					resolving (18)
					> version: s/_/_/_/c/h/e/u
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: s/_/_/_/c/h/e/u
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: s/_/_/_/ch/e/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/ch/e/u
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/c/h/eu
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/eu
					TRYING: h
					> version: s/_/_/_/ch/eu
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/e/u
					TRYING: h
					> version: sc/_/_/_/h/eu
					TRYING: h
					> version: sc/_/_/_/h/eu
					TRYING: h
					> version: sc/_/_/_/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'u']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'u']
				{'string': 's/_/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'u']
				version split: ['s', '_', '_', '_', 'c', 'h', 'eu']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'eu']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_/h/eu', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'eu']
				version split: ['s', '_', '_', '_', 'ch', 'eu']
				{'string': 's/_/_/_/ch/eu', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'eu']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'u']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'u']
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_/h/eu', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'eu']
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_/h/eu', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'eu']
				version split: ['sc', '_', '_', '_', 'h', 'eu']
				{'string': 'sc/_/_/_/h/eu', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (6)
					> version: s/_/_/_/c/h/e/ƿ
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/e/ƿ
					TRYING: h
					> version: s/_/_/_/ch/e/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (12)
					> version: s/_/_/_/c/h/e/w
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/e/w
					TRYING: h
					> version: s/_/_/_/ch/e/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/c/h/ew
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/_/h/ew
					TRYING: h
					> version: s/_/_/_/ch/ew
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/_/h/ew
					TRYING: h
					> version: sc/_/_/_/h/ew
					TRYING: h
					> version: sc/_/_/_/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'ch', 'ew']
				{'string': 's/_/_/_/ch/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				ANALYSING: schow
					resolving (12)
					> version: s/_/_/_/c/h/o/w
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/o/w
					TRYING: h
					> version: s/_/_/_/ch/o/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: s/_/_/_/c/h/ow
					TRYING: c
					adding blocked set: C = C >> _, w, h, c, ƿ
					> version: sc/_/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/_/h/ow
					TRYING: h
					> version: s/_/_/_/ch/ow
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, h, ƿ
					> version: sc/_/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/_/h/ow
					TRYING: h
					> version: sc/_/_/_/h/ow
					TRYING: h
					> version: sc/_/_/_/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_/_/ch/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'o', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'ch', 'ow']
				{'string': 's/_/_/_/ch/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))/((h))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', 'e', '_', 'w']
				{'string': 'ss/_/e/_/w', 'rgx': '((s))/((_))/((e))/((_))/((w))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/_/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, ƿ
					> version: ss/_/_/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/_/s/w', 'rgx': '((s))/((_))/((_))/((_))/((w))$'}
				_____REMOVING________['s', '_', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/_/w/e', 'rgx': '((s))/((_))/((_))/((_))/((w))$'}
				_____REMOVING________['ss', '_', '_', '_', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sc', '_', 'a', 'u', '_']
		only one version left: ['sc', '_', 'a', '_', 'w']
		only one version left: ['sc', '_', 'e', 'u', '_']
		only one version left: ['sc', '_', 'e', '_', 'w']
		only one version left: ['sc', '_', '_', '_', 'w']
		only one version left: ['s', '_', 'e', '_', 'ƿ']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ss', '_', 'e', '_', 'w']
		FAIL: 
		SPLIT: ['s', 'c', 'e', 'a', 'ƿ']
		SPLIT: ['s', 'h', 'a', 'u', 'w']
		SPLIT: ['s', 'h', 'e', 'a', 'ƿ']
		SPLIT: ['sc', 'h', 'e', 'a', 'ƿ']
		SPLIT: ['s', 's', 'e', 'a', 'w']
		SPLIT: ["['c']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ['sc', '_', 'a', 'u', '_']
		['sc', '_', 'a', 'u', '_']
		['sc', '_', 'a', 'u', '_']
		SPLIT: ['sc', '_', 'a', '_', 'w']
		['sc', '_', 'a', '_', 'w']
		SPLIT: ['sc', '_', 'e', 'u', '_']
		['sc', '_', 'e', 'u', '_']
		['sc', '_', 'e', 'u', '_']
		SPLIT: ['sc', '_', 'e', '_', 'w']
		['sc', '_', 'e', '_', 'w']
		SPLIT: ['sc', '_', '_', '_', 'w']
		['sc', '_', '_', '_', 'w']
		SPLIT: ['s', '_', 'e', '_', 'ƿ']
		['s', '_', 'e', '_', 'ƿ']
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']", "['h']"]
		SPLIT: ['ss', '_', 'e', '_', 'w']
		['ss', '_', 'e', '_', 'w']
		SPLIT: ["['s']", "['_']", "['_']", "['_']", "['w']"]
		version for pattern CCVVC is INVALID
		[{'s', '_', 'h', 'c'}]
		17
		OVERVIEW: version for pattern CCVVC
{'s', '_', 'h', 'c'}
faulty splits: 17
['c']['']['']['']['h'] <-! chaw
['s']['']['']['']['h'] <-! shæ
['s']['']['']['']['h'] <-! shæƿ
['s']['']['']['']['h'] <-! shaƿ
['s']['']['']['']['h'] <-! shaw
['s']['']['']['']['h'] <-! sheu
['s']['']['']['']['h'] <-! sheƿ
['s']['']['']['']['h'] <-! shew
['s']['']['']['']['h'] <-! show
['s', 'sc']['']['']['']['h'] <-! schau
['s', 'sc']['']['']['']['h'] <-! schaƿ
['s', 'sc']['']['']['']['h'] <-! schaw
['s', 'sc']['']['']['']['h'] <-! scheu
['s', 'sc']['']['']['']['h'] <-! scheƿ
['s', 'sc']['']['']['']['h'] <-! schew
['s', 'sc']['']['']['']['h'] <-! schow
['s']['']['']['']['w'] <-! sswe
s | c | e | a | ƿ
s | h | a | u | w
s | h | e | a | ƿ
sc | h | e | a | ƿ
s | s | e | a | w
['c'] | ['_'] | ['_'] | ['_'] | ['h']
sc | _ | a | u | _
sc | _ | a | _ | w
sc | _ | e | u | _
sc | _ | e | _ | w
sc | _ | _ | _ | w
s | _ | e | _ | ƿ
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
['s', 'sc'] | ['_'] | ['_'] | ['_'] | ['h']
ss | _ | e | _ | w
['s'] | ['_'] | ['_'] | ['_'] | ['w']
1 : {'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVC
	Selection for pattern: CVC completed
	Making a version for pattern: CVC
			___CVC : 0___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: seƿ
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					adding blocked set: C = C >> ch, s, sc, sh, ss, sch
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> ch, s, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'w']
				adding dashed alternative: ['_', 'sc', 'w']
				s/c/w(CCC)
sc/w(CC)
_/s/c/w(ACCC)
_/sc/w(ACC)
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['_', 's', 'c', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'w']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					adding blocked set: C = C >> ch, _, s, sc, sh, ss, sch
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> ch, _, s, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ']
				adding dashed alternative: ['_', 'sh', 'æ']
				s/h/æ(CCV)
sh/æ(CV)
_/s/h/æ(ACCV)
_/sh/æ(ACV)
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ']
				version split: ['_', 's', 'h', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> ch, _, s, sc, sh, ss, sch
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> ch, _, s, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', 'ss', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVC : 1___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: seƿ
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: _/s/c/w
					TRYING: s
					> version: _/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'w']
				_/s/c/w(ACCC)
_/sc/w(ACC)
_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
				version split: ['_', 's', 'c', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'w']
				version split: ['_', 'sc', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'w']
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: _/s/h/æ
					TRYING: s
					> version: _/sh/æ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', 'sh', 'æ']
				_/s/h/æ(ACCV)
_/sh/æ(ACV)
_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
				version split: ['_', 's', 'h', 'æ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ']
				version split: ['_', 'sh', 'æ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ']
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: _/s/s/w/e
					TRYING: s
					> version: _/ss/w/e
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', 'ss', 'w', 'e']
				_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'w', 'e']
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'w', 'e']
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVC : 2___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: seƿ
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: _/_/s/c/w
					TRYING: s
					adding blocked set: C = C >> s, u, w, ƿ
					> version: _/_/sc/w
					TRYING: sc
					adding blocked set: C = C >> u, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'w']
				_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
_/_/_/s/c/w(AAACCC)
_/_/_/sc/w(AAACC)
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'w']
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_/sc/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'w']
				version split: ['_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'w']
				version split: ['_', '_', '_', 'sc', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'w']
				ANALYSING: shæ
					resolving (2)
					> version: _/_/s/h/æ
					TRYING: s
					adding blocked set: C = C >> _, s, w, u, ƿ
					> version: _/_/sh/æ
					TRYING: sh
					adding blocked set: C = C >> _, sh, w, u, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ']
				_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
_/_/_/s/h/æ(AAACCV)
_/_/_/sh/æ(AAACV)
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ']
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_/sh/æ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ']
				version split: ['_', '_', '_', 's', 'h', 'æ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ']
				version split: ['_', '_', '_', 'sh', 'æ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ']
				ANALYSING: sswe
					resolving (2)
					> version: _/_/s/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, w, u, ƿ
					> version: _/_/ss/w/e
					TRYING: ss
					adding blocked set: C = C >> _, ss, w, u, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', '_', 'ss', 'w', 'e']
				_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
_/_/_/s/s/w/e(AAACCCV)
_/_/_/ss/w/e(AAACCV)
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/s/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_/ss/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'w', 'e']
				version split: ['_', '_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', '_', 'ss', 'w', 'e']
				{'string': '_/_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['ch', 'a', 'w']
		SPLIT: ['sc', 'a', 'u']
		SPLIT: ['sc', 'a', 'w']
		SPLIT: ['sc', 'ea', 'ƿ']
		SPLIT: ['sc', 'e', 'u']
		SPLIT: ['sc', 'e', 'w']
		SPLIT: ['s', 'e', 'ƿ']
		SPLIT: ['sh', 'æ', 'ƿ']
		SPLIT: ['sh', 'au', 'w']
		SPLIT: ['sh', 'a', 'ƿ']
		SPLIT: ['sh', 'a', 'w']
		SPLIT: ['sh', 'ea', 'ƿ']
		SPLIT: ['sh', 'e', 'u']
		SPLIT: ['sh', 'e', 'ƿ']
		SPLIT: ['sh', 'e', 'w']
		SPLIT: ['sh', 'o', 'w']
		SPLIT: ['sch', 'a', 'u']
		SPLIT: ['sch', 'a', 'ƿ']
		SPLIT: ['sch', 'a', 'w']
		SPLIT: ['sch', 'ea', 'ƿ']
		SPLIT: ['sch', 'e', 'u']
		SPLIT: ['sch', 'e', 'ƿ']
		SPLIT: ['sch', 'e', 'w']
		SPLIT: ['sch', 'o', 'w']
		SPLIT: ['ss', 'ea', 'w']
		SPLIT: ['ss', 'e', 'w']
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		version for pattern CVC is INVALID
		[{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'}, {'æ', 'e', '_', 'o', 'a', 'au', 'ea'}]
		3
		OVERVIEW: version for pattern CVC
{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'}, {'æ', 'e', '_', 'o', 'a', 'au', 'ea'}
faulty splits: 3
[''][''][''] <-! scw
[''][''][''] <-! shæ
[''][''][''] <-! sswe
ch | a | w
sc | a | u
sc | a | w
sc | ea | ƿ
sc | e | u
sc | e | w
s | e | ƿ
sh | æ | ƿ
sh | au | w
sh | a | ƿ
sh | a | w
sh | ea | ƿ
sh | e | u
sh | e | ƿ
sh | e | w
sh | o | w
sch | a | u
sch | a | ƿ
sch | a | w
sch | ea | ƿ
sch | e | u
sch | e | ƿ
sch | e | w
sch | o | w
ss | ea | w
ss | e | w
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
0 : {'ch', 's', 'sc', 'sh', 'ss', 'sch'},{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'},{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'},{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'},{'ch', 's', 'sc', 'sh', 'ss', 'sch'},{'ch', '_', 's', 'sc', 'sh', 'ss', 'sch'}
2 : {'_', 's', 'w', 'u', 'ƿ'},{'_', 'sh', 'w', 'u', 'ƿ'},{'u', 'sc', 'w', 'ƿ'},{'_', 's', 'w', 'u', 'ƿ'},{'s', 'u', 'w', 'ƿ'},{'_', 'ss', 'w', 'u', 'ƿ'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCV
	Selection for pattern: CCV completed
	Making a version for pattern: CCV
			___CCV : 0___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæ
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> s, sc, ss, c
					> version: s/c/e/aƿ
					TRYING: s
					adding blocked set: C = C >> s, sc, ss, c
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, ss, c
					> version: s/c/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> s, sc, ss, c
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, ss, c
					> version: s/c/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> s, sc, ss, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, ss, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'e', 'aƿ']
				adding dashed alternative: ['_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
sc/e/a/ƿ(CVVC)
s/c/ea/ƿ(CCVC)
sc/e/aƿ(CVV)
s/c/ea/ƿ(CCVC)
sc/ea/ƿ(CVC)
sc/ea/ƿ(CVC)
_/s/c/e/a/ƿ(ACCVVC)
_/s/c/e/aƿ(ACCVV)
_/sc/e/a/ƿ(ACVVC)
_/s/c/ea/ƿ(ACCVC)
_/sc/e/aƿ(ACVV)
_/s/c/ea/ƿ(ACCVC)
_/sc/ea/ƿ(ACVC)
_/sc/ea/ƿ(ACVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['_', 's', 'c', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'w']
				adding dashed alternative: ['_', 'sc', 'w']
				s/c/w(CCC)
sc/w(CC)
_/s/c/w(ACCC)
_/sc/w(ACC)
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['_', 's', 'c', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'w']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'e', 'ƿ']
				s/e/ƿ(CVC)
_/s/e/ƿ(ACVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
sh/æ/ƿ(CVC)
_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/h/a/u/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: s/h/au/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/h/a/uw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: s/h/au/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', 's', 'h', 'a', 'uw']
				adding dashed alternative: ['_', 'sh', 'au', 'w']
				adding dashed alternative: ['_', 'sh', 'a', 'uw']
				adding dashed alternative: ['_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', 'sh', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
sh/a/u/w(CVCC)
sh/a/u/w(CVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
sh/au/w(CVC)
sh/a/uw(CVV)
s/h/au/w(CCVC)
sh/au/w(CVC)
_/s/h/a/u/w(ACCVAC)
_/s/h/a/u/w(ACCVAC)
_/sh/a/u/w(ACVAC)
_/sh/a/u/w(ACVAC)
_/s/h/au/w(ACCVC)
_/s/h/a/uw(ACCVV)
_/sh/au/w(ACVC)
_/sh/a/uw(ACVV)
_/s/h/au/w(ACCVC)
_/sh/au/w(ACVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['_', 's', 'h', 'a', 'u', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'a', 'u', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'u', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'u', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'au', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'a', 'uw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'au', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'uw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'au', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'au', 'w']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/h/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: s/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: s/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sh', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'e', 'aƿ']
				adding dashed alternative: ['_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
sh/e/a/ƿ(CVVC)
s/h/ea/ƿ(CCVC)
sh/e/aƿ(CVV)
s/h/ea/ƿ(CCVC)
sh/ea/ƿ(CVC)
sh/ea/ƿ(CVC)
_/s/h/e/a/ƿ(ACCVVC)
_/s/h/e/aƿ(ACCVV)
_/sh/e/a/ƿ(ACVVC)
_/s/h/ea/ƿ(ACCVC)
_/sh/e/aƿ(ACVV)
_/s/h/ea/ƿ(ACCVC)
_/sh/ea/ƿ(ACVC)
_/sh/ea/ƿ(ACVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['_', 's', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sc, sh, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
sh/e/ƿ(CVC)
_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/c/h/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: s/ch/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/c/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: s/ch/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: s/c/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: s/ch/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: s/ch/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'aƿ']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'ea', 'ƿ']
				s/c/h/e/a/ƿ(CCCVVC)
s/c/h/e/aƿ(CCCVV)
sc/h/e/a/ƿ(CCVVC)
sch/e/a/ƿ(CVVC)
s/ch/e/a/ƿ(CCVVC)
s/c/h/ea/ƿ(CCCVC)
sc/h/e/aƿ(CCVV)
sch/e/aƿ(CVV)
s/ch/e/aƿ(CCVV)
s/c/h/ea/ƿ(CCCVC)
sc/h/e/a/ƿ(CCVVC)
sc/h/e/a/ƿ(CCVVC)
sc/h/ea/ƿ(CCVC)
sch/e/a/ƿ(CVVC)
sch/ea/ƿ(CVC)
s/ch/ea/ƿ(CCVC)
sc/h/e/aƿ(CCVV)
sc/h/e/aƿ(CCVV)
sc/h/ea/ƿ(CCVC)
sch/e/aƿ(CVV)
sch/ea/ƿ(CVC)
s/ch/ea/ƿ(CCVC)
sc/h/e/a/ƿ(CCVVC)
sc/h/ea/ƿ(CCVC)
sc/h/ea/ƿ(CCVC)
sch/ea/ƿ(CVC)
sc/h/e/aƿ(CCVV)
sc/h/ea/ƿ(CCVC)
sc/h/ea/ƿ(CCVC)
sch/ea/ƿ(CVC)
sc/h/ea/ƿ(CCVC)
sc/h/ea/ƿ(CCVC)
_/s/c/h/e/a/ƿ(ACCCVVC)
_/s/c/h/e/aƿ(ACCCVV)
_/sc/h/e/a/ƿ(ACCVVC)
_/sch/e/a/ƿ(ACVVC)
_/s/ch/e/a/ƿ(ACCVVC)
_/s/c/h/ea/ƿ(ACCCVC)
_/sc/h/e/aƿ(ACCVV)
_/sch/e/aƿ(ACVV)
_/s/ch/e/aƿ(ACCVV)
_/s/c/h/ea/ƿ(ACCCVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/e/a/ƿ(ACVVC)
_/sch/ea/ƿ(ACVC)
_/s/ch/ea/ƿ(ACCVC)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/ea/ƿ(ACCVC)
_/sch/e/aƿ(ACVV)
_/sch/ea/ƿ(ACVC)
_/s/ch/ea/ƿ(ACCVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/ea/ƿ(ACVC)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/ea/ƿ(ACVC)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'aƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: s/ch/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, sc, ss, c, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, ss, c
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
s/ch/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
sc/h/e/ƿ(CCVC)
_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
			___CCV : 1___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæ
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: sceaƿ
					resolving (8)
					> version: _/s/c/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> s, h, w, c
					> version: _/s/c/e/aƿ
					TRYING: s
					adding blocked set: C = C >> s, h, w, c
					> version: _/sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, w, h, c
					> version: _/s/c/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> s, h, w, c
					> version: _/sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, w, h, c
					> version: _/s/c/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> s, h, w, c
					> version: _/sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, w, h, c
					> version: _/sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, sc, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'ea', 'ƿ']
				_/s/c/e/a/ƿ(ACCVVC)
_/s/c/e/aƿ(ACCVV)
_/sc/e/a/ƿ(ACVVC)
_/s/c/ea/ƿ(ACCVC)
_/sc/e/aƿ(ACVV)
_/s/c/ea/ƿ(ACCVC)
_/sc/ea/ƿ(ACVC)
_/sc/ea/ƿ(ACVC)
_/_/s/c/e/a/ƿ(AACCVVC)
_/_/s/c/e/aƿ(AACCVV)
_/_/sc/e/a/ƿ(AACVVC)
_/_/s/c/ea/ƿ(AACCVC)
_/_/sc/e/aƿ(AACVV)
_/_/s/c/ea/ƿ(AACCVC)
_/_/sc/ea/ƿ(AACVC)
_/_/sc/ea/ƿ(AACVC)
				version split: ['_', 's', 'c', 'e', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'e', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'aƿ']
				version split: ['_', 'sc', 'e', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', 'sc', 'e', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'aƿ']
				version split: ['_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', 'sc', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'ea', 'ƿ']
				version split: ['_', 'sc', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'ea', 'ƿ']
				version split: ['_', '_', 's', 'c', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: _/s/c/w
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/w
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'w']
				_/s/c/w(ACCC)
_/sc/w(ACC)
_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
				version split: ['_', 's', 'c', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'w']
				version split: ['_', 'sc', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'w']
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: _/s/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'e', 'ƿ']
				_/s/e/ƿ(ACVC)
_/_/s/e/ƿ(AACVC)
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'e', 'ƿ']
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: _/s/h/æ/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'æ', 'ƿ']
				_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shauw
					resolving (10)
					> version: _/s/h/a/u/w
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/h/a/u/w
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/s/h/au/w
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/h/a/uw
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/au/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/s/h/au/w
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/au/w
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'uw']
				adding dashed alternative: ['_', '_', 'sh', 'au', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'uw']
				adding dashed alternative: ['_', '_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'au', 'w']
				_/s/h/a/u/w(ACCVAC)
_/s/h/a/u/w(ACCVAC)
_/sh/a/u/w(ACVAC)
_/sh/a/u/w(ACVAC)
_/s/h/au/w(ACCVC)
_/s/h/a/uw(ACCVV)
_/sh/au/w(ACVC)
_/sh/a/uw(ACVV)
_/s/h/au/w(ACCVC)
_/sh/au/w(ACVC)
_/_/s/h/a/u/w(AACCVAC)
_/_/s/h/a/u/w(AACCVAC)
_/_/sh/a/u/w(AACVAC)
_/_/sh/a/u/w(AACVAC)
_/_/s/h/au/w(AACCVC)
_/_/s/h/a/uw(AACCVV)
_/_/sh/au/w(AACVC)
_/_/sh/a/uw(AACVV)
_/_/s/h/au/w(AACCVC)
_/_/sh/au/w(AACVC)
				version split: ['_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', 'sh', 'a', 'u', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'u', 'w']
				version split: ['_', 'sh', 'a', 'u', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'u', 'w']
				version split: ['_', 's', 'h', 'au', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'au', 'w']
				version split: ['_', 's', 'h', 'a', 'uw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'uw']
				version split: ['_', 'sh', 'au', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'au', 'w']
				version split: ['_', 'sh', 'a', 'uw']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'uw']
				version split: ['_', 's', 'h', 'au', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'au', 'w']
				version split: ['_', 'sh', 'au', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'au', 'w']
				version split: ['_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'a', 'uw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'au', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'uw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'au', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sheaƿ
					resolving (8)
					> version: _/s/h/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/h/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/s/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/s/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					> version: _/sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'ea', 'ƿ']
				_/s/h/e/a/ƿ(ACCVVC)
_/s/h/e/aƿ(ACCVV)
_/sh/e/a/ƿ(ACVVC)
_/s/h/ea/ƿ(ACCVC)
_/sh/e/aƿ(ACVV)
_/s/h/ea/ƿ(ACCVC)
_/sh/ea/ƿ(ACVC)
_/sh/ea/ƿ(ACVC)
_/_/s/h/e/a/ƿ(AACCVVC)
_/_/s/h/e/aƿ(AACCVV)
_/_/sh/e/a/ƿ(AACVVC)
_/_/s/h/ea/ƿ(AACCVC)
_/_/sh/e/aƿ(AACVV)
_/_/s/h/ea/ƿ(AACCVC)
_/_/sh/ea/ƿ(AACVC)
_/_/sh/ea/ƿ(AACVC)
				version split: ['_', 's', 'h', 'e', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'h', 'e', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'aƿ']
				version split: ['_', 'sh', 'e', 'a', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', 'sh', 'e', 'aƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'aƿ']
				version split: ['_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', 'sh', 'ea', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ea', 'ƿ']
				version split: ['_', 'sh', 'ea', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ea', 'ƿ']
				version split: ['_', '_', 's', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: _/s/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, s, sh, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'ƿ']
				_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'ƿ']
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scheaƿ
					resolving (32)
					> version: _/s/c/h/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/c/h/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/s/ch/e/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/c/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/s/ch/e/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/s/c/h/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/s/ch/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/s/ch/ea/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				_/s/c/h/e/a/ƿ(ACCCVVC)
_/s/c/h/e/aƿ(ACCCVV)
_/sc/h/e/a/ƿ(ACCVVC)
_/sch/e/a/ƿ(ACVVC)
_/s/ch/e/a/ƿ(ACCVVC)
_/s/c/h/ea/ƿ(ACCCVC)
_/sc/h/e/aƿ(ACCVV)
_/sch/e/aƿ(ACVV)
_/s/ch/e/aƿ(ACCVV)
_/s/c/h/ea/ƿ(ACCCVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/e/a/ƿ(ACVVC)
_/sch/ea/ƿ(ACVC)
_/s/ch/ea/ƿ(ACCVC)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/ea/ƿ(ACCVC)
_/sch/e/aƿ(ACVV)
_/sch/ea/ƿ(ACVC)
_/s/ch/ea/ƿ(ACCVC)
_/sc/h/e/a/ƿ(ACCVVC)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/ea/ƿ(ACVC)
_/sc/h/e/aƿ(ACCVV)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
_/sch/ea/ƿ(ACVC)
_/sc/h/ea/ƿ(ACCVC)
_/sc/h/ea/ƿ(ACCVC)
_/_/s/c/h/e/a/ƿ(AACCCVVC)
_/_/s/c/h/e/aƿ(AACCCVV)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sch/e/a/ƿ(AACVVC)
_/_/s/ch/e/a/ƿ(AACCVVC)
_/_/s/c/h/ea/ƿ(AACCCVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sch/e/aƿ(AACVV)
_/_/s/ch/e/aƿ(AACCVV)
_/_/s/c/h/ea/ƿ(AACCCVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/e/a/ƿ(AACVVC)
_/_/sch/ea/ƿ(AACVC)
_/_/s/ch/ea/ƿ(AACCVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/e/aƿ(AACVV)
_/_/sch/ea/ƿ(AACVC)
_/_/s/ch/ea/ƿ(AACCVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/ea/ƿ(AACVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/ea/ƿ(AACVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
				version split: ['_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'e', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'aƿ']
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'ch', 'e', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', 'sch', 'e', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'aƿ']
				version split: ['_', 's', 'ch', 'e', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'aƿ']
				version split: ['_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ea', 'ƿ']
				version split: ['_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sch', 'e', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'aƿ']
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ea', 'ƿ']
				version split: ['_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sch', 'ea', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: _/s/c/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/s/ch/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, c
					> version: _/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					> version: _/sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, s, w, h, c, sch
					> version: _/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, s, sc, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CCV : 2___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæ
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: sceaƿ
					resolving (8)
					> version: _/_/s/c/e/a/ƿ
					TRYING: s
					> version: _/_/s/c/e/aƿ
					TRYING: s
					> version: _/_/sc/e/a/ƿ
					TRYING: sc
					> version: _/_/s/c/ea/ƿ
					TRYING: s
					> version: _/_/sc/e/aƿ
					TRYING: sc
					> version: _/_/s/c/ea/ƿ
					TRYING: s
					> version: _/_/sc/ea/ƿ
					TRYING: sc
					> version: _/_/sc/ea/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'ea', 'ƿ']
				_/_/s/c/e/a/ƿ(AACCVVC)
_/_/s/c/e/aƿ(AACCVV)
_/_/sc/e/a/ƿ(AACVVC)
_/_/s/c/ea/ƿ(AACCVC)
_/_/sc/e/aƿ(AACVV)
_/_/s/c/ea/ƿ(AACCVC)
_/_/sc/ea/ƿ(AACVC)
_/_/sc/ea/ƿ(AACVC)
_/_/_/s/c/e/a/ƿ(AAACCVVC)
_/_/_/s/c/e/aƿ(AAACCVV)
_/_/_/sc/e/a/ƿ(AAACVVC)
_/_/_/s/c/ea/ƿ(AAACCVC)
_/_/_/sc/e/aƿ(AAACVV)
_/_/_/s/c/ea/ƿ(AAACCVC)
_/_/_/sc/ea/ƿ(AAACVC)
_/_/_/sc/ea/ƿ(AAACVC)
				version split: ['_', '_', 's', 'c', 'e', 'a', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'e', 'aƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'aƿ']
				version split: ['_', '_', 'sc', 'e', 'a', 'ƿ']
				{'string': '_/_/sc/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'e', 'aƿ']
				{'string': '_/_/sc/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'aƿ']
				version split: ['_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_/sc/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_/sc/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'ea', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'e', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'e', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'e', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'aƿ']
				version split: ['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'ea', 'ƿ']
				ANALYSING: scw
					resolving (2)
					> version: _/_/s/c/w
					TRYING: s
					> version: _/_/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'w']
				_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
_/_/_/s/c/w(AAACCC)
_/_/_/sc/w(AAACC)
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'w']
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_/sc/w', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'w']
				version split: ['_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'w']
				version split: ['_', '_', '_', 'sc', 'w']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: _/_/s/e/ƿ
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'e', 'ƿ']
				_/_/s/e/ƿ(AACVC)
_/_/_/s/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/s/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'e', 'ƿ']
				ANALYSING: shæƿ
					resolving (2)
					> version: _/_/s/h/æ/ƿ
					TRYING: s
					> version: _/_/sh/æ/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
_/_/_/s/h/æ/ƿ(AAACCVC)
_/_/_/sh/æ/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/sh/æ', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: _/_/s/h/a/u/w
					TRYING: s
					> version: _/_/s/h/a/u/w
					TRYING: s
					> version: _/_/sh/a/u/w
					TRYING: sh
					> version: _/_/sh/a/u/w
					TRYING: sh
					> version: _/_/s/h/au/w
					TRYING: s
					> version: _/_/s/h/a/uw
					TRYING: s
					> version: _/_/sh/au/w
					TRYING: sh
					> version: _/_/sh/a/uw
					TRYING: sh
					> version: _/_/s/h/au/w
					TRYING: s
					> version: _/_/sh/au/w
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'u', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'uw']
				adding dashed alternative: ['_', '_', '_', 'sh', 'au', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'uw']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'au', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'au', 'w']
				_/_/s/h/a/u/w(AACCVAC)
_/_/s/h/a/u/w(AACCVAC)
_/_/sh/a/u/w(AACVAC)
_/_/sh/a/u/w(AACVAC)
_/_/s/h/au/w(AACCVC)
_/_/s/h/a/uw(AACCVV)
_/_/sh/au/w(AACVC)
_/_/sh/a/uw(AACVV)
_/_/s/h/au/w(AACCVC)
_/_/sh/au/w(AACVC)
_/_/_/s/h/a/u/w(AAACCVAC)
_/_/_/s/h/a/u/w(AAACCVAC)
_/_/_/sh/a/u/w(AAACVAC)
_/_/_/sh/a/u/w(AAACVAC)
_/_/_/s/h/au/w(AAACCVC)
_/_/_/s/h/a/uw(AAACCVV)
_/_/_/sh/au/w(AAACVC)
_/_/_/sh/a/uw(AAACVV)
_/_/_/s/h/au/w(AAACCVC)
_/_/_/sh/au/w(AAACVC)
				version split: ['_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_/sh/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'u', 'w']
				version split: ['_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_/sh/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'u', 'w']
				version split: ['_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'au', 'w']
				version split: ['_', '_', 's', 'h', 'a', 'uw']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'uw']
				version split: ['_', '_', 'sh', 'au', 'w']
				{'string': '_/_/sh/au', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'au', 'w']
				version split: ['_', '_', 'sh', 'a', 'uw']
				{'string': '_/_/sh/a', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'uw']
				version split: ['_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'au', 'w']
				version split: ['_', '_', 'sh', 'au', 'w']
				{'string': '_/_/sh/au', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'au', 'w']
				version split: ['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'u', 'w']
				version split: ['_', '_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'u', 'w']
				version split: ['_', '_', '_', 'sh', 'a', 'u', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'u', 'w']
				version split: ['_', '_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'au', 'w']
				version split: ['_', '_', '_', 's', 'h', 'a', 'uw']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'uw']
				version split: ['_', '_', '_', 'sh', 'au', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'au', 'w']
				version split: ['_', '_', '_', 'sh', 'a', 'uw']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'uw']
				version split: ['_', '_', '_', 's', 'h', 'au', 'w']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'au', 'w']
				version split: ['_', '_', '_', 'sh', 'au', 'w']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'au', 'w']
				ANALYSING: sheaƿ
					resolving (8)
					> version: _/_/s/h/e/a/ƿ
					TRYING: s
					> version: _/_/s/h/e/aƿ
					TRYING: s
					> version: _/_/sh/e/a/ƿ
					TRYING: sh
					> version: _/_/s/h/ea/ƿ
					TRYING: s
					> version: _/_/sh/e/aƿ
					TRYING: sh
					> version: _/_/s/h/ea/ƿ
					TRYING: s
					> version: _/_/sh/ea/ƿ
					TRYING: sh
					> version: _/_/sh/ea/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ea', 'ƿ']
				_/_/s/h/e/a/ƿ(AACCVVC)
_/_/s/h/e/aƿ(AACCVV)
_/_/sh/e/a/ƿ(AACVVC)
_/_/s/h/ea/ƿ(AACCVC)
_/_/sh/e/aƿ(AACVV)
_/_/s/h/ea/ƿ(AACCVC)
_/_/sh/ea/ƿ(AACVC)
_/_/sh/ea/ƿ(AACVC)
_/_/_/s/h/e/a/ƿ(AAACCVVC)
_/_/_/s/h/e/aƿ(AAACCVV)
_/_/_/sh/e/a/ƿ(AAACVVC)
_/_/_/s/h/ea/ƿ(AAACCVC)
_/_/_/sh/e/aƿ(AAACVV)
_/_/_/s/h/ea/ƿ(AAACCVC)
_/_/_/sh/ea/ƿ(AAACVC)
_/_/_/sh/ea/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'h', 'e', 'aƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sh', 'e', 'a', 'ƿ']
				{'string': '_/_/sh/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sh', 'e', 'aƿ']
				{'string': '_/_/sh/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'aƿ']
				version split: ['_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_/sh/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ea', 'ƿ']
				version split: ['_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_/sh/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ea', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'e', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sh', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'e', 'aƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'aƿ']
				version split: ['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'ea', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ea', 'ƿ']
				ANALYSING: sheƿ
					resolving (2)
					> version: _/_/s/h/e/ƿ
					TRYING: s
					> version: _/_/sh/e/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'ƿ']
				_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
_/_/_/s/h/e/ƿ(AAACCVC)
_/_/_/sh/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/s/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/sh/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'ƿ']
				ANALYSING: scheaƿ
					resolving (32)
					> version: _/_/s/c/h/e/a/ƿ
					TRYING: s
					> version: _/_/s/c/h/e/aƿ
					TRYING: s
					> version: _/_/sc/h/e/a/ƿ
					TRYING: sc
					> version: _/_/sch/e/a/ƿ
					TRYING: sch
					> version: _/_/s/ch/e/a/ƿ
					TRYING: s
					> version: _/_/s/c/h/ea/ƿ
					TRYING: s
					> version: _/_/sc/h/e/aƿ
					TRYING: sc
					> version: _/_/sch/e/aƿ
					TRYING: sch
					> version: _/_/s/ch/e/aƿ
					TRYING: s
					> version: _/_/s/c/h/ea/ƿ
					TRYING: s
					> version: _/_/sc/h/e/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/e/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sch/e/a/ƿ
					TRYING: sch
					> version: _/_/sch/ea/ƿ
					TRYING: sch
					> version: _/_/s/ch/ea/ƿ
					TRYING: s
					> version: _/_/sc/h/e/aƿ
					TRYING: sc
					> version: _/_/sc/h/e/aƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sch/e/aƿ
					TRYING: sch
					> version: _/_/sch/ea/ƿ
					TRYING: sch
					> version: _/_/s/ch/ea/ƿ
					TRYING: s
					> version: _/_/sc/h/e/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sch/ea/ƿ
					TRYING: sch
					> version: _/_/sc/h/e/aƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sch/ea/ƿ
					TRYING: sch
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					> version: _/_/sc/h/ea/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				_/_/s/c/h/e/a/ƿ(AACCCVVC)
_/_/s/c/h/e/aƿ(AACCCVV)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sch/e/a/ƿ(AACVVC)
_/_/s/ch/e/a/ƿ(AACCVVC)
_/_/s/c/h/ea/ƿ(AACCCVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sch/e/aƿ(AACVV)
_/_/s/ch/e/aƿ(AACCVV)
_/_/s/c/h/ea/ƿ(AACCCVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/e/a/ƿ(AACVVC)
_/_/sch/ea/ƿ(AACVC)
_/_/s/ch/ea/ƿ(AACCVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/e/aƿ(AACVV)
_/_/sch/ea/ƿ(AACVC)
_/_/s/ch/ea/ƿ(AACCVC)
_/_/sc/h/e/a/ƿ(AACCVVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/ea/ƿ(AACVC)
_/_/sc/h/e/aƿ(AACCVV)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sch/ea/ƿ(AACVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/sc/h/ea/ƿ(AACCVC)
_/_/_/s/c/h/e/a/ƿ(AAACCCVVC)
_/_/_/s/c/h/e/aƿ(AAACCCVV)
_/_/_/sc/h/e/a/ƿ(AAACCVVC)
_/_/_/sch/e/a/ƿ(AAACVVC)
_/_/_/s/ch/e/a/ƿ(AAACCVVC)
_/_/_/s/c/h/ea/ƿ(AAACCCVC)
_/_/_/sc/h/e/aƿ(AAACCVV)
_/_/_/sch/e/aƿ(AAACVV)
_/_/_/s/ch/e/aƿ(AAACCVV)
_/_/_/s/c/h/ea/ƿ(AAACCCVC)
_/_/_/sc/h/e/a/ƿ(AAACCVVC)
_/_/_/sc/h/e/a/ƿ(AAACCVVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sch/e/a/ƿ(AAACVVC)
_/_/_/sch/ea/ƿ(AAACVC)
_/_/_/s/ch/ea/ƿ(AAACCVC)
_/_/_/sc/h/e/aƿ(AAACCVV)
_/_/_/sc/h/e/aƿ(AAACCVV)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sch/e/aƿ(AAACVV)
_/_/_/sch/ea/ƿ(AAACVC)
_/_/_/s/ch/ea/ƿ(AAACCVC)
_/_/_/sc/h/e/a/ƿ(AAACCVVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sch/ea/ƿ(AAACVC)
_/_/_/sc/h/e/aƿ(AAACCVV)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sch/ea/ƿ(AAACVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
_/_/_/sc/h/ea/ƿ(AAACCVC)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'aƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'aƿ']
				version split: ['_', '_', 's', 'ch', 'e', 'aƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'aƿ']
				version split: ['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/sch/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'aƿ']
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/sch/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/sch/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/sch/ea', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'aƿ']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'aƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'aƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'aƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'ea', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ea', 'ƿ']
				ANALYSING: scheƿ
					resolving (8)
					> version: _/_/s/c/h/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/s/ch/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/_/s/c/h/e/ƿ(AAACCCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/s/ch/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/s/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/s/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch/e', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc/h', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['c', 'h', 'aw']
		SPLIT: ['s', 'c', 'au']
		SPLIT: ['s', 'c', 'aw']
		SPLIT: ['s', 'c', 'eu']
		SPLIT: ['s', 'c', 'ew']
		SPLIT: ['s', 'h', 'æ']
		SPLIT: ['s', 'h', 'aƿ']
		SPLIT: ['s', 'h', 'aw']
		SPLIT: ['s', 'h', 'eu']
		SPLIT: ['s', 'h', 'ew']
		SPLIT: ['s', 'h', 'ow']
		SPLIT: ['sc', 'h', 'au']
		SPLIT: ['sc', 'h', 'aƿ']
		SPLIT: ['sc', 'h', 'aw']
		SPLIT: ['sc', 'h', 'eu']
		SPLIT: ['sc', 'h', 'ew']
		SPLIT: ['sc', 'h', 'ow']
		SPLIT: ['s', 's', 'eaw']
		SPLIT: ['s', 's', 'ew']
		SPLIT: ['ss', 'w', 'e']
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']"]
		version for pattern CCV is INVALID
		[{'_', 's', 'sc', 'ss', 'c'}, {'_', 's', 'w', 'h', 'c'}, {'ew', 'æ', 'e', '_', 'eu', 'aw', 'au', 'aƿ', 'ow', 'eaw'}]
		9
		OVERVIEW: version for pattern CCV
{'_', 's', 'sc', 'ss', 'c'}, {'_', 's', 'w', 'h', 'c'}, {'ew', 'æ', 'e', '_', 'eu', 'aw', 'au', 'aƿ', 'ow', 'eaw'}
faulty splits: 9
[''][''][''] <-! sceaƿ
[''][''][''] <-! scw
[''][''][''] <-! seƿ
[''][''][''] <-! shæƿ
[''][''][''] <-! shauw
[''][''][''] <-! sheaƿ
[''][''][''] <-! sheƿ
[''][''][''] <-! scheaƿ
[''][''][''] <-! scheƿ
c | h | aw
s | c | au
s | c | aw
s | c | eu
s | c | ew
s | h | æ
s | h | aƿ
s | h | aw
s | h | eu
s | h | ew
s | h | ow
sc | h | au
sc | h | aƿ
sc | h | aw
sc | h | eu
sc | h | ew
sc | h | ow
s | s | eaw
s | s | ew
ss | w | e
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_']
0 : {'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c', 'sch'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'sh', 'ss', 'c'},{'s', 'sc', 'ss', 'c'},{'_', 's', 'sc', 'ss', 'c'}
1 : {'_', 's', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'s', 'h', 'w', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c', 'sch'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'s', 'h', 'w', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'s', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'s', 'h', 'w', 'c'},{'s', 'h', 'w', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'s', 'sc', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', 'sc', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'sh', 'w', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'},{'_', 's', 'sc', 'w', 'h', 'c'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCVC
	Selection for pattern: CCVC completed
	Making a version for pattern: CCVC
			___CCVC : 0___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCVC : 1___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: c
					adding blocked set: C = C >> s, c, h
					> version: sc/w
					TRYING: w
					adding blocked set: C = C >> s, w, c, h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', 'w']
				s/c/w(CCC)
sc/w(CC)
s/_/c/w(CACC)
sc/_/w(CAC)
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc/w', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ']
				s/h/æ(CCV)
s/_/h/æ(CACV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCVC : 2___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: s/_/c/w
					TRYING: c
					> version: sc/_/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', '_', 'w']
				s/_/c/w(CACC)
sc/_/w(CAC)
s/_/_/c/w(CAACC)
sc/_/_/w(CAAC)
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'w']
				version split: ['sc', '_', 'w']
				{'string': 'sc/_/w', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'w']
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					adding blocked set: V = V >> æ, e, _, a, o, au, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'æ']
				s/_/h/æ(CACV)
s/_/_/h/æ(CAACV)
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ']
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', 'w', 'e']
				s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
			___CCVC : 3___
				ANALYSING: chaw
				adding littera based on matching pattern
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: scaw
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: scew
				adding littera based on matching pattern
				ANALYSING: shæƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: shaƿ
				adding littera based on matching pattern
				ANALYSING: shaw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: sheƿ
				adding littera based on matching pattern
				ANALYSING: shew
				adding littera based on matching pattern
				ANALYSING: show
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: ssew
				adding littera based on matching pattern
				ANALYSING: scw
					resolving (2)
					> version: s/_/_/c/w
					TRYING: c
					adding blocked set: C = C >> ƿ, w, u, c
					> version: sc/_/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_/c/w', 'rgx': '((s)|(sc))/((_))/((_))/((w))$'}
				_____REMOVING________['s', '_', '_', 'c', 'w']
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_/w', 'rgx': '((s)|(sc))/((_))/((_))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'e', 'ƿ']
				s/_/_/e/ƿ(CAAVC)
s/_/_/_/e/ƿ(CAAAVC)
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e/ƿ', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/_/e', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'e', 'ƿ']
				ANALYSING: shæ
					resolving (1)
					> version: s/_/_/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_/h/æ', 'rgx': '((s))/((_))/((_))/((h))$'}
				_____REMOVING________['s', '_', '_', 'h', 'æ']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, w, u, h, ƿ
					> version: ss/_/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/s/w', 'rgx': '((s))/((_))/((_))/((w))$'}
				_____REMOVING________['s', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/w/e', 'rgx': '((s))/((_))/((_))/((w))$'}
				_____REMOVING________['ss', '_', '_', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['sc', '_', '_', 'w']
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['c', 'h', 'a', 'w']
		SPLIT: ['s', 'c', 'a', 'u']
		SPLIT: ['s', 'c', 'a', 'w']
		SPLIT: ['s', 'c', 'ea', 'ƿ']
		SPLIT: ['s', 'c', 'e', 'u']
		SPLIT: ['s', 'c', 'e', 'w']
		SPLIT: ['s', 'h', 'æ', 'ƿ']
		SPLIT: ['s', 'h', 'au', 'w']
		SPLIT: ['s', 'h', 'a', 'ƿ']
		SPLIT: ['s', 'h', 'a', 'w']
		SPLIT: ['s', 'h', 'ea', 'ƿ']
		SPLIT: ['s', 'h', 'e', 'u']
		SPLIT: ['s', 'h', 'e', 'ƿ']
		SPLIT: ['s', 'h', 'e', 'w']
		SPLIT: ['s', 'h', 'o', 'w']
		SPLIT: ['sc', 'h', 'a', 'u']
		SPLIT: ['sc', 'h', 'a', 'ƿ']
		SPLIT: ['sc', 'h', 'a', 'w']
		SPLIT: ['sc', 'h', 'ea', 'ƿ']
		SPLIT: ['sc', 'h', 'e', 'u']
		SPLIT: ['sc', 'h', 'e', 'ƿ']
		SPLIT: ['sc', 'h', 'e', 'w']
		SPLIT: ['sc', 'h', 'o', 'w']
		SPLIT: ['s', 's', 'ea', 'w']
		SPLIT: ['s', 's', 'e', 'w']
		SPLIT: ['sc', '_', '_', 'w']
		['sc', '_', '_', 'w']
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']", "['w']"]
		version for pattern CCVC is INVALID
		[{'s', '_', 'h', 'c'}, {'æ', 'e', '_', 'o', 'a', 'au', 'ea'}]
		3
		OVERVIEW: version for pattern CCVC
{'s', '_', 'h', 'c'}, {'æ', 'e', '_', 'o', 'a', 'au', 'ea'}
faulty splits: 3
['s'][''][''][''] <-! seƿ
['s']['']['']['h'] <-! shæ
['s']['']['']['w'] <-! sswe
c | h | a | w
s | c | a | u
s | c | a | w
s | c | ea | ƿ
s | c | e | u
s | c | e | w
s | h | æ | ƿ
s | h | au | w
s | h | a | ƿ
s | h | a | w
s | h | ea | ƿ
s | h | e | u
s | h | e | ƿ
s | h | e | w
s | h | o | w
sc | h | a | u
sc | h | a | ƿ
sc | h | a | w
sc | h | ea | ƿ
sc | h | e | u
sc | h | e | ƿ
sc | h | e | w
sc | h | o | w
s | s | ea | w
s | s | e | w
sc | _ | _ | w
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['h']
['s'] | ['_'] | ['_'] | ['w']
1 : {'s', 'c', 'h'},{'s', '_', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', 'w', 'c', 'h'},{'s', '_', 'h', 'c'}
2 : {'æ', 'e', '_', 'a', 'o', 'au', 'ea'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVCC
	Selection for pattern: CVCC completed
	Making a version for pattern: CVCC
			___CVCC : 0___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					adding blocked set: C = C >> sh, c
					> version: ch/a/w
					TRYING: ch
					adding blocked set: C = C >> sh, ch
					> version: c/h/aw
					TRYING: c
					adding blocked set: C = C >> sh, c
					> version: ch/aw
					TRYING: ch
					adding blocked set: C = C >> sh, ch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', 'ch', 'aw']
				c/h/a/w(CCVC)
ch/a/w(CVC)
c/h/aw(CCV)
ch/aw(CV)
_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'aw']
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/e/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/aƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/aw
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/e/aƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/ea/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/ea/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/e/u
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/eu
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/ew
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: s/h/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					> version: sh/ow
					TRYING: sh
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sh'}
					RESULT:  ['s', 'sh']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s)|(sh))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s)|(sh))$'}
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					> version: s/c/h/a/u
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/a/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/a/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/a/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/a/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/a/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/au
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/au
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/au
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/au
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/a/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/aƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/a/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/a/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/aw
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/aw
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: s
					> version: s/c/h/e/aƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/a/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/a/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/aƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/aƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/a/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ea/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/aƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ea/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/ea/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ea/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ea/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ea/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					> version: s/c/h/e/u
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/u
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/u
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/eu
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/eu
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/u
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/eu
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/eu
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/e/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/e/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ew
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ew
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/o/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/o/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/c/h/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/o/w
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ow
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: s/ch/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sch/ow
					TRYING: sch
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sch', 'sc'}
					RESULT:  ['s', 'sch', 'sc']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sch)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sch)|(sc))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CVCC : 1___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/c/h/a/w
					TRYING: c
					> version: _/ch/a/w
					TRYING: ch
					> version: _/c/h/aw
					TRYING: c
					> version: _/ch/aw
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'ch', 'aw']
				_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'a', 'w']
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'a', 'w']
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'aw']
				version split: ['_', 'ch', 'aw']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'aw']
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: sc/a/u
					TRYING: a
					> version: sc/a/u
					TRYING: a
					> version: s/c/au
					TRYING: c
					> version: sc/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((au)|(a))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((au)|(a))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['sc', 'au']
				{'string': 'sc/au', 'rgx': '((s)|(sc))/((au)|(a))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: c
					> version: sc/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: c
					> version: sc/aw
					TRYING: aw
					adding blocked set: V = V >> aw, au, _, a
					RESULT:  ['a']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((a))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['sc', 'aw']
				{'string': 'sc/aw', 'rgx': '((s)|(sc))/((a))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: sc/e/a/ƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: c
					> version: sc/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: c
					> version: sc/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, _, ea, a
					> version: sc/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, _, ea, a
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((e))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((e))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc/ea', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc/ea', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: sc/e/u
					TRYING: e
					> version: sc/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: c
					> version: sc/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((e))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((e))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['sc', 'eu']
				{'string': 'sc/eu', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: c
					> version: sc/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: c
					> version: sc/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((e))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['sc', 'ew']
				{'string': 'sc/ew', 'rgx': '((s)|(sc))/((e))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: c
					> version: sc/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', 'w']
				s/c/w(CCC)
sc/w(CC)
s/_/c/w(CACC)
sc/_/w(CAC)
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc/w', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((e))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: h
					> version: sh/æ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ']
				adding dashed alternative: ['sh', '_', 'æ']
				s/h/æ(CCV)
sh/æ(CV)
s/_/h/æ(CACV)
sh/_/æ(CAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['sh', 'æ']
				{'string': 'sh/æ', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['sh', 'æ']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_', 'rgx': '((s)|(sh))/((_))$'}
				version split: ['sh', '_', 'æ']
				{'string': 'sh/_', 'rgx': '((s)|(sh))/((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: h
					> version: sh/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['sh', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
sh/æ/ƿ(CVC)
s/_/h/æ/ƿ(CACVC)
sh/_/æ/ƿ(CAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh/æ', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sh))/((_))$'}
				version split: ['sh', '_', 'æ', 'ƿ']
				{'string': 'sh/_', 'rgx': '((s)|(sh))/((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					> version: sh/a/ƿ
					TRYING: a
					> version: sh/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh/a', 'rgx': '((s)|(sh))/((a))$'}
				version split: ['sh', 'aƿ']
				{'string': 'sh/aƿ', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: h
					> version: sh/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: h
					> version: sh/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['sh', 'a', 'w']
				{'string': 'sh/a', 'rgx': '((s)|(sh))/((a))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['sh', 'aw']
				{'string': 'sh/aw', 'rgx': '((s)|(sh))/((a))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: sh/e/a/ƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: h
					> version: sh/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: h
					> version: sh/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: sh/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh/ea', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh/ea', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: sh/e/u
					TRYING: e
					> version: sh/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: h
					> version: sh/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['sh', 'eu']
				{'string': 'sh/eu', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: h
					> version: sh/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: h
					> version: sh/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: h
					> version: sh/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['sh', 'e', 'w']
				{'string': 'sh/e', 'rgx': '((s)|(sh))/((e))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['sh', 'ew']
				{'string': 'sh/ew', 'rgx': '((s)|(sh))/((e))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: h
					> version: sh/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/h/ow
					TRYING: h
					> version: sh/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sh', '_', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ow']
				adding dashed alternative: ['sh', '_', 'ow']
				s/h/o/w(CCVC)
sh/o/w(CVC)
s/h/ow(CCV)
sh/ow(CV)
s/_/h/o/w(CACVC)
sh/_/o/w(CAVC)
s/_/h/ow(CACV)
sh/_/ow(CAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['sh', 'o', 'w']
				{'string': 'sh/o', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['sh', 'ow']
				{'string': 'sh/ow', 'rgx': '((s)|(sh))/((_))$'}
				_____REMOVING________['sh', 'ow']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sh))/((_))$'}
				version split: ['sh', '_', 'o', 'w']
				{'string': 'sh/_', 'rgx': '((s)|(sh))/((_))$'}
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sh))/((_))$'}
				version split: ['sh', '_', 'ow']
				{'string': 'sh/_', 'rgx': '((s)|(sh))/((_))$'}
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: c
					> version: s/c/h/a/u
					TRYING: c
					> version: sc/h/a/u
					TRYING: h
					> version: sc/h/a/u
					TRYING: h
					> version: sch/a/u
					TRYING: a
					> version: sch/a/u
					TRYING: a
					> version: s/ch/a/u
					TRYING: ch
					> version: s/ch/a/u
					TRYING: ch
					> version: s/c/h/au
					TRYING: c
					> version: sc/h/a/u
					TRYING: h
					> version: sc/h/a/u
					TRYING: h
					> version: sc/h/a/u
					TRYING: h
					> version: sc/h/a/u
					TRYING: h
					> version: sc/h/au
					TRYING: h
					> version: sch/a/u
					TRYING: a
					> version: sch/a/u
					TRYING: a
					> version: sch/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: s/ch/au
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sc/h/a/u
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sc/h/a/u
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sc/h/au
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sc/h/au
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sch/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: sc/h/au
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['sch', 'au']
				{'string': 'sch/au', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['s', 'ch', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'au']
				{'string': 'sch/au', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				version split: ['sc', 'h', 'au']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((au)|(a))$'}
				_____REMOVING________['sc', 'h', 'au']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: c
					> version: s/c/h/aƿ
					TRYING: c
					> version: sc/h/a/ƿ
					TRYING: h
					> version: sch/a/ƿ
					TRYING: a
					> version: s/ch/a/ƿ
					TRYING: ch
					> version: sc/h/aƿ
					TRYING: h
					> version: sch/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					> version: s/ch/aƿ
					TRYING: ch
					> version: sc/h/a/ƿ
					TRYING: h
					> version: sc/h/a/ƿ
					TRYING: h
					> version: sch/a/ƿ
					TRYING: a
					> version: sc/h/aƿ
					TRYING: h
					> version: sc/h/aƿ
					TRYING: h
					> version: sch/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					> version: sc/h/a/ƿ
					TRYING: h
					> version: sc/h/aƿ
					TRYING: h
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch/aƿ', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch/aƿ', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: c
					> version: sc/h/a/w
					TRYING: h
					> version: sch/a/w
					TRYING: a
					> version: s/ch/a/w
					TRYING: ch
					> version: s/c/h/aw
					TRYING: c
					> version: sc/h/a/w
					TRYING: h
					> version: sc/h/a/w
					TRYING: h
					> version: sc/h/aw
					TRYING: h
					> version: sch/a/w
					TRYING: a
					> version: sch/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					> version: s/ch/aw
					TRYING: ch
					> version: sc/h/a/w
					TRYING: h
					> version: sc/h/aw
					TRYING: h
					> version: sc/h/aw
					TRYING: h
					> version: sch/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					> version: sc/h/aw
					TRYING: h
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				version split: ['sch', 'aw']
				{'string': 'sch/aw', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['s', 'ch', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch/aw', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((a))$'}
				_____REMOVING________['sc', 'h', 'aw']
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: c
					> version: s/c/h/e/aƿ
					TRYING: c
					> version: sc/h/e/a/ƿ
					TRYING: h
					> version: sch/e/a/ƿ
					TRYING: e
					> version: s/ch/e/a/ƿ
					TRYING: ch
					> version: s/c/h/ea/ƿ
					TRYING: c
					> version: sc/h/e/aƿ
					TRYING: h
					> version: sch/e/aƿ
					TRYING: e
					> version: s/ch/e/aƿ
					TRYING: ch
					> version: s/c/h/ea/ƿ
					TRYING: c
					> version: sc/h/e/a/ƿ
					TRYING: h
					> version: sc/h/e/a/ƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sch/e/a/ƿ
					TRYING: e
					> version: sch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/ch/ea/ƿ
					TRYING: ch
					> version: sc/h/e/aƿ
					TRYING: h
					> version: sc/h/e/aƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sch/e/aƿ
					TRYING: e
					> version: sch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/ch/ea/ƿ
					TRYING: ch
					> version: sc/h/e/a/ƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: sc/h/e/aƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: sc/h/ea/ƿ
					TRYING: h
					> version: sc/h/ea/ƿ
					TRYING: h
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'aƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch/ea', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch/ea', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch/ea', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch/ea', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: c
					> version: s/c/h/e/u
					TRYING: c
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/e/u
					TRYING: h
					> version: sch/e/u
					TRYING: e
					> version: sch/e/u
					TRYING: e
					> version: s/ch/e/u
					TRYING: ch
					> version: s/ch/e/u
					TRYING: ch
					> version: s/c/h/eu
					TRYING: c
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/eu
					TRYING: h
					> version: sch/e/u
					TRYING: e
					> version: sch/e/u
					TRYING: e
					> version: sch/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					> version: s/ch/eu
					TRYING: ch
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/e/u
					TRYING: h
					> version: sc/h/eu
					TRYING: h
					> version: sc/h/eu
					TRYING: h
					> version: sch/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					> version: sc/h/eu
					TRYING: h
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'eu']
				{'string': 'sch/eu', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'eu']
				{'string': 'sch/eu', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: sc/h/e/ƿ
					TRYING: h
					> version: sch/e/ƿ
					TRYING: e
					> version: s/ch/e/ƿ
					TRYING: ch
					> version: sc/h/e/ƿ
					TRYING: h
					> version: sc/h/e/ƿ
					TRYING: h
					> version: sch/e/ƿ
					TRYING: e
					> version: sc/h/e/ƿ
					TRYING: h
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: c
					> version: sc/h/e/w
					TRYING: h
					> version: sch/e/w
					TRYING: e
					> version: s/ch/e/w
					TRYING: ch
					> version: s/c/h/ew
					TRYING: c
					> version: sc/h/e/w
					TRYING: h
					> version: sc/h/e/w
					TRYING: h
					> version: sc/h/ew
					TRYING: h
					> version: sch/e/w
					TRYING: e
					> version: sch/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					> version: s/ch/ew
					TRYING: ch
					> version: sc/h/e/w
					TRYING: h
					> version: sc/h/ew
					TRYING: h
					> version: sc/h/ew
					TRYING: h
					> version: sch/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					> version: sc/h/ew
					TRYING: h
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				version split: ['sch', 'ew']
				{'string': 'sch/ew', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['s', 'ch', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch/ew', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((e))$'}
				_____REMOVING________['sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: c
					> version: sc/h/o/w
					TRYING: h
					> version: sch/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/ch/o/w
					TRYING: ch
					> version: s/c/h/ow
					TRYING: c
					> version: sc/h/o/w
					TRYING: h
					> version: sc/h/o/w
					TRYING: h
					> version: sc/h/ow
					TRYING: h
					> version: sch/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: sch/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					> version: s/ch/ow
					TRYING: ch
					> version: sc/h/o/w
					TRYING: h
					> version: sc/h/ow
					TRYING: h
					> version: sc/h/ow
					TRYING: h
					> version: sch/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					> version: sc/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sch', '_', 'o', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sch', '_', 'o', 'w']
				adding dashed alternative: ['sch', '_', 'ow']
				adding dashed alternative: ['s', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sch', '_', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				s/c/h/o/w(CCCVC)
sc/h/o/w(CCVC)
sch/o/w(CVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
sc/h/o/w(CCVC)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sch/o/w(CVC)
sch/ow(CV)
s/ch/ow(CCV)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sc/h/ow(CCV)
sch/ow(CV)
sc/h/ow(CCV)
s/_/c/h/o/w(CACCVC)
sc/_/h/o/w(CACVC)
sch/_/o/w(CAVC)
s/_/ch/o/w(CACVC)
s/_/c/h/ow(CACCV)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sch/_/o/w(CAVC)
sch/_/ow(CAV)
s/_/ch/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sch/_/ow(CAV)
sc/_/h/ow(CACV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch/o', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch/o', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch/ow', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch/ow', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sch', '_', 'o', 'w']
				{'string': 'sch/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sch', '_', 'o', 'w']
				{'string': 'sch/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sch', '_', 'ow']
				{'string': 'sch/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sch', '_', 'ow']
				{'string': 'sch/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sch)|(sc))/((_))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					RESULT:  ['e']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((e))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((e))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((e))$'}
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((e))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((e))$'}
				_____REMOVING________['ss', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CVCC : 2___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/_/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> c, u
					> version: _/_/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, u
					> version: _/_/c/h/aw
					TRYING: c
					adding blocked set: C = C >> c, u
					> version: _/_/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, u
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'ch', 'aw']
				_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
_/_/_/c/h/a/w(AAACCVC)
_/_/_/ch/a/w(AAACVC)
_/_/_/c/h/aw(AAACCV)
_/_/_/ch/aw(AAACV)
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'aw']
				version split: ['_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: sc/a/u
					TRYING: u
					> version: sc/a/u
					TRYING: u
					> version: sc/au
					RESULT:  ['u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a/u', 'rgx': '((s)|(sc))/((au)|(a))/((u))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a/u', 'rgx': '((s)|(sc))/((au)|(a))/((u))$'}
				version split: ['sc', 'au']
				{'string': 'sc/au', 'rgx': '((s)|(sc))/((au)|(a))/((u))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (1)
					> version: sc/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc/a/w', 'rgx': '((s)|(sc))/((a))/((w))$'}
				ANALYSING: sceaƿ
					resolving (2)
					> version: sc/e/a/ƿ
					TRYING: a
					> version: sc/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['sc', 'e', '_', 'aƿ']
				sc/e/a/ƿ(CVVC)
sc/e/aƿ(CVV)
sc/e/_/a/ƿ(CVAVC)
sc/e/_/aƿ(CVAV)
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc/e/a', 'rgx': '((s)|(sc))/((e))/((_))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc/e/aƿ', 'rgx': '((s)|(sc))/((e))/((_))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['sc', 'e', '_', 'a', 'ƿ']
				{'string': 'sc/e/_', 'rgx': '((s)|(sc))/((e))/((_))$'}
				version split: ['sc', 'e', '_', 'aƿ']
				{'string': 'sc/e/_', 'rgx': '((s)|(sc))/((e))/((_))$'}
				ANALYSING: sceu
					resolving (2)
					> version: sc/e/u
					TRYING: u
					> version: sc/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e/u', 'rgx': '((s)|(sc))/((e))/((u))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e/u', 'rgx': '((s)|(sc))/((e))/((u))$'}
				ANALYSING: scew
					resolving (1)
					> version: sc/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc/e/w', 'rgx': '((s)|(sc))/((e))/((w))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/_/c/w
					TRYING: c
					adding blocked set: C = C >> w, _, u, c
					> version: sc/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((w))$'}
				_____REMOVING________['s', '_', 'c', 'w']
				version split: ['sc', '_', 'w']
				{'string': 'sc/_/w', 'rgx': '((s)|(sc))/((_))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e/ƿ', 'rgx': '((s))/((e))/((ƿ))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/_/h/æ
					TRYING: h
					> version: sh/_/æ
					TRYING: æ
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h', 'rgx': '((s)|(sh))/((_))/((h))$'}
				version split: ['sh', '_', 'æ']
				{'string': 'sh/_/æ', 'rgx': '((s)|(sh))/((_))/((h))$'}
				_____REMOVING________['sh', '_', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/_/h/æ/ƿ
					TRYING: h
					> version: sh/_/æ/ƿ
					TRYING: æ
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s)|(sh))/((_))/((h))$'}
				version split: ['sh', '_', 'æ', 'ƿ']
				{'string': 'sh/_/æ', 'rgx': '((s)|(sh))/((_))/((h))$'}
				_____REMOVING________['sh', '_', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (1)
					> version: sh/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh/a/ƿ', 'rgx': '((s)|(sh))/((a))/((ƿ))$'}
				ANALYSING: shaw
					resolving (1)
					> version: sh/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sh', 'a', 'w']
				{'string': 'sh/a/w', 'rgx': '((s)|(sh))/((a))/((w))$'}
				ANALYSING: sheaƿ
					resolving (2)
					> version: sh/e/a/ƿ
					TRYING: a
					> version: sh/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['sh', 'e', '_', 'aƿ']
				sh/e/a/ƿ(CVVC)
sh/e/aƿ(CVV)
sh/e/_/a/ƿ(CVAVC)
sh/e/_/aƿ(CVAV)
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh/e/a', 'rgx': '((s)|(sh))/((e))/((_))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh/e/aƿ', 'rgx': '((s)|(sh))/((e))/((_))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['sh', 'e', '_', 'a', 'ƿ']
				{'string': 'sh/e/_', 'rgx': '((s)|(sh))/((e))/((_))$'}
				version split: ['sh', 'e', '_', 'aƿ']
				{'string': 'sh/e/_', 'rgx': '((s)|(sh))/((e))/((_))$'}
				ANALYSING: sheu
					resolving (2)
					> version: sh/e/u
					TRYING: u
					> version: sh/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e/u', 'rgx': '((s)|(sh))/((e))/((u))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e/u', 'rgx': '((s)|(sh))/((e))/((u))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: sh/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh/e/ƿ', 'rgx': '((s)|(sh))/((e))/((ƿ))$'}
				ANALYSING: shew
					resolving (1)
					> version: sh/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sh', 'e', 'w']
				{'string': 'sh/e/w', 'rgx': '((s)|(sh))/((e))/((w))$'}
				ANALYSING: show
					resolving (4)
					> version: s/_/h/o/w
					TRYING: h
					> version: sh/_/o/w
					TRYING: o
					> version: s/_/h/ow
					TRYING: h
					> version: sh/_/ow
					TRYING: ow
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h', 'rgx': '((s)|(sh))/((_))/((h))$'}
				version split: ['sh', '_', 'o', 'w']
				{'string': 'sh/_/o', 'rgx': '((s)|(sh))/((_))/((h))$'}
				_____REMOVING________['sh', '_', 'o', 'w']
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h', 'rgx': '((s)|(sh))/((_))/((h))$'}
				version split: ['sh', '_', 'ow']
				{'string': 'sh/_/ow', 'rgx': '((s)|(sh))/((_))/((h))$'}
				_____REMOVING________['sh', '_', 'ow']
				ANALYSING: schau
					resolving (6)
					> version: sch/a/u
					TRYING: u
					> version: sch/a/u
					TRYING: u
					> version: sch/a/u
					TRYING: u
					> version: sch/a/u
					TRYING: u
					> version: sch/au
					> version: sch/au
					RESULT:  ['u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				version split: ['sch', 'au']
				{'string': 'sch/au', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sch', 'au']
				{'string': 'sch/au', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))$'}
				_____REMOVING________['sch', 'au']
				ANALYSING: schaƿ
					resolving (2)
					> version: sch/a/ƿ
					TRYING: ƿ
					> version: sch/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))$'}
				ANALYSING: schaw
					resolving (2)
					> version: sch/a/w
					TRYING: w
					> version: sch/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a/w', 'rgx': '((s)|(sch)|(sc))/((a))/((w))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a/w', 'rgx': '((s)|(sch)|(sc))/((a))/((w))$'}
				ANALYSING: scheaƿ
					resolving (4)
					> version: sch/e/a/ƿ
					TRYING: a
					> version: sch/e/aƿ
					TRYING: aƿ
					> version: sch/e/a/ƿ
					TRYING: a
					> version: sch/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['sch', 'e', '_', 'aƿ']
				adding dashed alternative: ['sch', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['sch', 'e', '_', 'aƿ']
				sch/e/a/ƿ(CVVC)
sch/e/aƿ(CVV)
sch/e/a/ƿ(CVVC)
sch/e/aƿ(CVV)
sch/e/_/a/ƿ(CVAVC)
sch/e/_/aƿ(CVAV)
sch/e/_/a/ƿ(CVAVC)
sch/e/_/aƿ(CVAV)
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch/e/a', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch/e/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch/e/a', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch/e/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'e', '_', 'a', 'ƿ']
				{'string': 'sch/e/_', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				version split: ['sch', 'e', '_', 'aƿ']
				{'string': 'sch/e/_', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				version split: ['sch', 'e', '_', 'a', 'ƿ']
				{'string': 'sch/e/_', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				version split: ['sch', 'e', '_', 'aƿ']
				{'string': 'sch/e/_', 'rgx': '((s)|(sch)|(sc))/((e))/((_))$'}
				ANALYSING: scheu
					resolving (4)
					> version: sch/e/u
					TRYING: u
					> version: sch/e/u
					TRYING: u
					> version: sch/e/u
					TRYING: u
					> version: sch/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))$'}
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: sch/e/ƿ
					TRYING: ƿ
					> version: sch/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))$'}
				ANALYSING: schew
					resolving (2)
					> version: sch/e/w
					TRYING: w
					> version: sch/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e/w', 'rgx': '((s)|(sch)|(sc))/((e))/((w))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e/w', 'rgx': '((s)|(sch)|(sc))/((e))/((w))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/_/c/h/o/w
					TRYING: c
					adding blocked set: C = C >> _, w, u, h, c, ƿ
					> version: sc/_/h/o/w
					TRYING: h
					> version: sch/_/o/w
					TRYING: o
					> version: s/_/ch/o/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, u, h, ƿ
					> version: s/_/c/h/ow
					TRYING: c
					adding blocked set: C = C >> _, w, u, h, c, ƿ
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sch/_/o/w
					TRYING: o
					> version: sch/_/ow
					TRYING: ow
					> version: s/_/ch/ow
					TRYING: ch
					adding blocked set: C = C >> ch, _, w, u, h, ƿ
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sch/_/ow
					TRYING: ow
					> version: sc/_/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sch', '_', 'o', 'w']
				{'string': 'sch/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['sch', '_', 'o', 'w']
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['s', '_', 'ch', 'o', 'w']
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_/c', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sch', '_', 'o', 'w']
				{'string': 'sch/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['sch', '_', 'o', 'w']
				version split: ['sch', '_', 'ow']
				{'string': 'sch/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['sch', '_', 'ow']
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_/ch', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['s', '_', 'ch', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				version split: ['sch', '_', 'ow']
				{'string': 'sch/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				_____REMOVING________['sch', '_', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sch)|(sc))/((_))/((h))$'}
				ANALYSING: sseaw
					resolving (2)
					> version: ss/e/a/w
					TRYING: a
					> version: ss/e/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['ss', 'e', '_', 'a', 'w']
				adding dashed alternative: ['ss', 'e', '_', 'aw']
				ss/e/a/w(CVVC)
ss/e/aw(CVV)
ss/e/_/a/w(CVAVC)
ss/e/_/aw(CVAV)
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e/a', 'rgx': '((s))/((e))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e/aw', 'rgx': '((s))/((e))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'e', '_', 'a', 'w']
				{'string': 'ss/e/_', 'rgx': '((s))/((e))/((_))$'}
				version split: ['ss', 'e', '_', 'aw']
				{'string': 'ss/e/_', 'rgx': '((s))/((e))/((_))$'}
				ANALYSING: ssew
					resolving (1)
					> version: ss/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e/w', 'rgx': '((s))/((e))/((w))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, u, ƿ
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((w))$'}
			___CVCC : 3___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/_/_/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> w, c
					> version: _/_/_/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, w
					> version: _/_/_/c/h/aw
					TRYING: c
					adding blocked set: C = C >> w, c
					> version: _/_/_/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, w
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'ch', 'aw']
				_/_/_/c/h/a/w(AAACCVC)
_/_/_/ch/a/w(AAACVC)
_/_/_/c/h/aw(AAACCV)
_/_/_/ch/aw(AAACV)
_/_/_/_/c/h/a/w(AAAACCVC)
_/_/_/_/ch/a/w(AAAACVC)
_/_/_/_/c/h/aw(AAAACCV)
_/_/_/_/ch/aw(AAAACV)
				version split: ['_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/c/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_/ch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_/c/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_/ch/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'aw']
				version split: ['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/_/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_/_/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_/_/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_/_/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ch', 'aw']
				ANALYSING: scau
					resolving (2)
					> version: sc/a/u
					> version: sc/a/u
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'a', 'u', '_']
				adding dashed alternative: ['sc', 'a', 'u', '_']
				sc/a/u(CVC)
sc/a/u(CVV)
sc/a/u/_(CVAA)
sc/a/u/_(CVAA)
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a/u', 'rgx': '((s)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc/a/u', 'rgx': '((s)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u', '_']
				{'string': 'sc/a/u/_', 'rgx': '((s)|(sc))/((au)|(a))/((u))/((_))$'}
				version split: ['sc', 'a', 'u', '_']
				{'string': 'sc/a/u/_', 'rgx': '((s)|(sc))/((au)|(a))/((u))/((_))$'}
				ANALYSING: scaw
					resolving (1)
					> version: sc/a/w
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'a', 'w', '_']
				sc/a/w(CVC)
sc/a/w/_(CVCA)
				version split: ['sc', 'a', 'w']
				{'string': 'sc/a/w', 'rgx': '((s)|(sc))/((a))/((w))/((_))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['sc', 'a', 'w', '_']
				{'string': 'sc/a/w/_', 'rgx': '((s)|(sc))/((a))/((w))/((_))$'}
				ANALYSING: sceaƿ
					resolving (2)
					> version: sc/e/_/a/ƿ
					TRYING: a
					> version: sc/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['sc', 'e', '_', '_', 'aƿ']
				sc/e/_/a/ƿ(CVAVC)
sc/e/_/aƿ(CVAV)
sc/e/_/_/a/ƿ(CVAAVC)
sc/e/_/_/aƿ(CVAAV)
				version split: ['sc', 'e', '_', 'a', 'ƿ']
				{'string': 'sc/e/_/a/ƿ', 'rgx': '((s)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'e', '_', 'a', 'ƿ']
				version split: ['sc', 'e', '_', 'aƿ']
				{'string': 'sc/e/_/aƿ', 'rgx': '((s)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'e', '_', 'aƿ']
				version split: ['sc', 'e', '_', '_', 'a', 'ƿ']
				{'string': 'sc/e/_/_/a', 'rgx': '((s)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'e', '_', '_', 'a', 'ƿ']
				version split: ['sc', 'e', '_', '_', 'aƿ']
				{'string': 'sc/e/_/_/aƿ', 'rgx': '((s)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sc', 'e', '_', '_', 'aƿ']
				ANALYSING: sceu
					resolving (2)
					> version: sc/e/u
					> version: sc/e/u
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'e', 'u', '_']
				adding dashed alternative: ['sc', 'e', 'u', '_']
				sc/e/u(CVC)
sc/e/u(CVV)
sc/e/u/_(CVAA)
sc/e/u/_(CVAA)
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e/u', 'rgx': '((s)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc/e/u', 'rgx': '((s)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u', '_']
				{'string': 'sc/e/u/_', 'rgx': '((s)|(sc))/((e))/((u))/((_))$'}
				version split: ['sc', 'e', 'u', '_']
				{'string': 'sc/e/u/_', 'rgx': '((s)|(sc))/((e))/((u))/((_))$'}
				ANALYSING: scew
					resolving (1)
					> version: sc/e/w
					RESULT:  ['_']
				adding dashed alternative: ['sc', 'e', 'w', '_']
				sc/e/w(CVC)
sc/e/w/_(CVCA)
				version split: ['sc', 'e', 'w']
				{'string': 'sc/e/w', 'rgx': '((s)|(sc))/((e))/((w))/((_))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['sc', 'e', 'w', '_']
				{'string': 'sc/e/w/_', 'rgx': '((s)|(sc))/((e))/((w))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: sc/_/w
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'w', '_']
				sc/_/w(CAC)
sc/_/w/_(CACA)
				version split: ['sc', '_', 'w']
				{'string': 'sc/_/w', 'rgx': '((s)|(sc))/((_))/((w))/((_))$'}
				_____REMOVING________['sc', '_', 'w']
				version split: ['sc', '_', 'w', '_']
				{'string': 'sc/_/w/_', 'rgx': '((s)|(sc))/((_))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'e', 'ƿ', '_']
				s/e/ƿ(CVC)
s/e/ƿ/_(CVCA)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e/ƿ', 'rgx': '((s))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', 'e', 'ƿ', '_']
				{'string': 's/e/ƿ/_', 'rgx': '((s))/((e))/((ƿ))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'æ']
				s/_/h/æ(CACV)
s/_/h/_/æ(CACAV)
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h/æ', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ']
				version split: ['s', '_', 'h', '_', 'æ']
				{'string': 's/_/h/_/æ', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/h/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'æ', 'ƿ']
				s/_/h/æ/ƿ(CACVC)
s/_/h/_/æ/ƿ(CACAVC)
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h/æ/ƿ', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', 'h', '_', 'æ', 'ƿ']
				{'string': 's/_/h/_/æ', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (1)
					> version: sh/a/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'a', 'ƿ', '_']
				sh/a/ƿ(CVC)
sh/a/ƿ/_(CVCA)
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh/a/ƿ', 'rgx': '((s)|(sh))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'a', 'ƿ', '_']
				{'string': 'sh/a/ƿ/_', 'rgx': '((s)|(sh))/((a))/((ƿ))/((_))$'}
				ANALYSING: shaw
					resolving (1)
					> version: sh/a/w
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'a', 'w', '_']
				sh/a/w(CVC)
sh/a/w/_(CVCA)
				version split: ['sh', 'a', 'w']
				{'string': 'sh/a/w', 'rgx': '((s)|(sh))/((a))/((w))/((_))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['sh', 'a', 'w', '_']
				{'string': 'sh/a/w/_', 'rgx': '((s)|(sh))/((a))/((w))/((_))$'}
				ANALYSING: sheaƿ
					resolving (2)
					> version: sh/e/_/a/ƿ
					TRYING: a
					> version: sh/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['sh', 'e', '_', '_', 'aƿ']
				sh/e/_/a/ƿ(CVAVC)
sh/e/_/aƿ(CVAV)
sh/e/_/_/a/ƿ(CVAAVC)
sh/e/_/_/aƿ(CVAAV)
				version split: ['sh', 'e', '_', 'a', 'ƿ']
				{'string': 'sh/e/_/a/ƿ', 'rgx': '((s)|(sh))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'e', '_', 'a', 'ƿ']
				version split: ['sh', 'e', '_', 'aƿ']
				{'string': 'sh/e/_/aƿ', 'rgx': '((s)|(sh))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'e', '_', 'aƿ']
				version split: ['sh', 'e', '_', '_', 'a', 'ƿ']
				{'string': 'sh/e/_/_/a', 'rgx': '((s)|(sh))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'e', '_', '_', 'a', 'ƿ']
				version split: ['sh', 'e', '_', '_', 'aƿ']
				{'string': 'sh/e/_/_/aƿ', 'rgx': '((s)|(sh))/((e))/((_))/((_))$'}
				_____REMOVING________['sh', 'e', '_', '_', 'aƿ']
				ANALYSING: sheu
					resolving (2)
					> version: sh/e/u
					> version: sh/e/u
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'e', 'u', '_']
				adding dashed alternative: ['sh', 'e', 'u', '_']
				sh/e/u(CVC)
sh/e/u(CVV)
sh/e/u/_(CVAA)
sh/e/u/_(CVAA)
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e/u', 'rgx': '((s)|(sh))/((e))/((u))/((_))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh/e/u', 'rgx': '((s)|(sh))/((e))/((u))/((_))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u', '_']
				{'string': 'sh/e/u/_', 'rgx': '((s)|(sh))/((e))/((u))/((_))$'}
				version split: ['sh', 'e', 'u', '_']
				{'string': 'sh/e/u/_', 'rgx': '((s)|(sh))/((e))/((u))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: sh/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'e', 'ƿ', '_']
				sh/e/ƿ(CVC)
sh/e/ƿ/_(CVCA)
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh/e/ƿ', 'rgx': '((s)|(sh))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				version split: ['sh', 'e', 'ƿ', '_']
				{'string': 'sh/e/ƿ/_', 'rgx': '((s)|(sh))/((e))/((ƿ))/((_))$'}
				ANALYSING: shew
					resolving (1)
					> version: sh/e/w
					RESULT:  ['_']
				adding dashed alternative: ['sh', 'e', 'w', '_']
				sh/e/w(CVC)
sh/e/w/_(CVCA)
				version split: ['sh', 'e', 'w']
				{'string': 'sh/e/w', 'rgx': '((s)|(sh))/((e))/((w))/((_))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['sh', 'e', 'w', '_']
				{'string': 'sh/e/w/_', 'rgx': '((s)|(sh))/((e))/((w))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/_/h/o/w
					TRYING: o
					> version: s/_/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'ow']
				s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
s/_/h/_/o/w(CACAVC)
s/_/h/_/ow(CACAV)
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h/o/w', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h/ow', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ow']
				version split: ['s', '_', 'h', '_', 'o', 'w']
				{'string': 's/_/h/_/o', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'o', 'w']
				version split: ['s', '_', 'h', '_', 'ow']
				{'string': 's/_/h/_/ow', 'rgx': '((s)|(sh))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'ow']
				ANALYSING: schau
					resolving (4)
					> version: sch/a/u
					> version: sch/a/u
					> version: sch/a/u
					> version: sch/a/u
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'a', 'u', '_']
				adding dashed alternative: ['sch', 'a', 'u', '_']
				adding dashed alternative: ['sch', 'a', 'u', '_']
				adding dashed alternative: ['sch', 'a', 'u', '_']
				sch/a/u(CVC)
sch/a/u(CVV)
sch/a/u(CVC)
sch/a/u(CVV)
sch/a/u/_(CVAA)
sch/a/u/_(CVAA)
sch/a/u/_(CVAA)
sch/a/u/_(CVAA)
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch/a/u', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u', '_']
				{'string': 'sch/a/u/_', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				version split: ['sch', 'a', 'u', '_']
				{'string': 'sch/a/u/_', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				version split: ['sch', 'a', 'u', '_']
				{'string': 'sch/a/u/_', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				version split: ['sch', 'a', 'u', '_']
				{'string': 'sch/a/u/_', 'rgx': '((s)|(sch)|(sc))/((au)|(a))/((u))/((_))$'}
				ANALYSING: schaƿ
					resolving (2)
					> version: sch/a/ƿ
					> version: sch/a/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'a', 'ƿ', '_']
				adding dashed alternative: ['sch', 'a', 'ƿ', '_']
				sch/a/ƿ(CVC)
sch/a/ƿ(CVC)
sch/a/ƿ/_(CVCA)
sch/a/ƿ/_(CVCA)
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ', '_']
				{'string': 'sch/a/ƿ/_', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))/((_))$'}
				version split: ['sch', 'a', 'ƿ', '_']
				{'string': 'sch/a/ƿ/_', 'rgx': '((s)|(sch)|(sc))/((a))/((ƿ))/((_))$'}
				ANALYSING: schaw
					resolving (2)
					> version: sch/a/w
					> version: sch/a/w
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'a', 'w', '_']
				adding dashed alternative: ['sch', 'a', 'w', '_']
				sch/a/w(CVC)
sch/a/w(CVC)
sch/a/w/_(CVCA)
sch/a/w/_(CVCA)
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a/w', 'rgx': '((s)|(sch)|(sc))/((a))/((w))/((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch/a/w', 'rgx': '((s)|(sch)|(sc))/((a))/((w))/((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'a', 'w', '_']
				{'string': 'sch/a/w/_', 'rgx': '((s)|(sch)|(sc))/((a))/((w))/((_))$'}
				version split: ['sch', 'a', 'w', '_']
				{'string': 'sch/a/w/_', 'rgx': '((s)|(sch)|(sc))/((a))/((w))/((_))$'}
				ANALYSING: scheaƿ
					resolving (4)
					> version: sch/e/_/a/ƿ
					TRYING: a
					> version: sch/e/_/aƿ
					TRYING: aƿ
					> version: sch/e/_/a/ƿ
					TRYING: a
					> version: sch/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['sch', 'e', '_', '_', 'aƿ']
				adding dashed alternative: ['sch', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['sch', 'e', '_', '_', 'aƿ']
				sch/e/_/a/ƿ(CVAVC)
sch/e/_/aƿ(CVAV)
sch/e/_/a/ƿ(CVAVC)
sch/e/_/aƿ(CVAV)
sch/e/_/_/a/ƿ(CVAAVC)
sch/e/_/_/aƿ(CVAAV)
sch/e/_/_/a/ƿ(CVAAVC)
sch/e/_/_/aƿ(CVAAV)
				version split: ['sch', 'e', '_', 'a', 'ƿ']
				{'string': 'sch/e/_/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'a', 'ƿ']
				version split: ['sch', 'e', '_', 'aƿ']
				{'string': 'sch/e/_/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'aƿ']
				version split: ['sch', 'e', '_', 'a', 'ƿ']
				{'string': 'sch/e/_/a/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'a', 'ƿ']
				version split: ['sch', 'e', '_', 'aƿ']
				{'string': 'sch/e/_/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', 'aƿ']
				version split: ['sch', 'e', '_', '_', 'a', 'ƿ']
				{'string': 'sch/e/_/_/a', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', '_', 'a', 'ƿ']
				version split: ['sch', 'e', '_', '_', 'aƿ']
				{'string': 'sch/e/_/_/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', '_', 'aƿ']
				version split: ['sch', 'e', '_', '_', 'a', 'ƿ']
				{'string': 'sch/e/_/_/a', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', '_', 'a', 'ƿ']
				version split: ['sch', 'e', '_', '_', 'aƿ']
				{'string': 'sch/e/_/_/aƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((_))/((_))$'}
				_____REMOVING________['sch', 'e', '_', '_', 'aƿ']
				ANALYSING: scheu
					resolving (4)
					> version: sch/e/u
					> version: sch/e/u
					> version: sch/e/u
					> version: sch/e/u
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'e', 'u', '_']
				adding dashed alternative: ['sch', 'e', 'u', '_']
				adding dashed alternative: ['sch', 'e', 'u', '_']
				adding dashed alternative: ['sch', 'e', 'u', '_']
				sch/e/u(CVC)
sch/e/u(CVV)
sch/e/u(CVC)
sch/e/u(CVV)
sch/e/u/_(CVAA)
sch/e/u/_(CVAA)
sch/e/u/_(CVAA)
sch/e/u/_(CVAA)
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch/e/u', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u', '_']
				{'string': 'sch/e/u/_', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				version split: ['sch', 'e', 'u', '_']
				{'string': 'sch/e/u/_', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				version split: ['sch', 'e', 'u', '_']
				{'string': 'sch/e/u/_', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				version split: ['sch', 'e', 'u', '_']
				{'string': 'sch/e/u/_', 'rgx': '((s)|(sch)|(sc))/((e))/((u))/((_))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: sch/e/ƿ
					> version: sch/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'e', 'ƿ', '_']
				adding dashed alternative: ['sch', 'e', 'ƿ', '_']
				sch/e/ƿ(CVC)
sch/e/ƿ(CVC)
sch/e/ƿ/_(CVCA)
sch/e/ƿ/_(CVCA)
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch/e/ƿ', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ', '_']
				{'string': 'sch/e/ƿ/_', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))/((_))$'}
				version split: ['sch', 'e', 'ƿ', '_']
				{'string': 'sch/e/ƿ/_', 'rgx': '((s)|(sch)|(sc))/((e))/((ƿ))/((_))$'}
				ANALYSING: schew
					resolving (2)
					> version: sch/e/w
					> version: sch/e/w
					RESULT:  ['_']
				adding dashed alternative: ['sch', 'e', 'w', '_']
				adding dashed alternative: ['sch', 'e', 'w', '_']
				sch/e/w(CVC)
sch/e/w(CVC)
sch/e/w/_(CVCA)
sch/e/w/_(CVCA)
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e/w', 'rgx': '((s)|(sch)|(sc))/((e))/((w))/((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch/e/w', 'rgx': '((s)|(sch)|(sc))/((e))/((w))/((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'e', 'w', '_']
				{'string': 'sch/e/w/_', 'rgx': '((s)|(sch)|(sc))/((e))/((w))/((_))$'}
				version split: ['sch', 'e', 'w', '_']
				{'string': 'sch/e/w/_', 'rgx': '((s)|(sch)|(sc))/((e))/((w))/((_))$'}
				ANALYSING: schow
					resolving (8)
					> version: sc/_/h/o/w
					TRYING: o
					> version: sc/_/h/o/w
					TRYING: o
					> version: sc/_/h/o/w
					TRYING: o
					> version: sc/_/h/ow
					TRYING: ow
					> version: sc/_/h/o/w
					TRYING: o
					> version: sc/_/h/ow
					TRYING: ow
					> version: sc/_/h/ow
					TRYING: ow
					> version: sc/_/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', '_', 'ow']
				adding dashed alternative: ['sc', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', '_', 'ow']
				adding dashed alternative: ['sc', '_', 'h', '_', 'ow']
				adding dashed alternative: ['sc', '_', 'h', '_', 'ow']
				sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/_/o/w(CACAVC)
sc/_/h/_/o/w(CACAVC)
sc/_/h/_/o/w(CACAVC)
sc/_/h/_/ow(CACAV)
sc/_/h/_/o/w(CACAVC)
sc/_/h/_/ow(CACAV)
sc/_/h/_/ow(CACAV)
sc/_/h/_/ow(CACAV)
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h/o/w', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h/o/w', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h/o/w', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h/o/w', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', '_', 'o', 'w']
				{'string': 'sc/_/h/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'o', 'w']
				version split: ['sc', '_', 'h', '_', 'o', 'w']
				{'string': 'sc/_/h/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'o', 'w']
				version split: ['sc', '_', 'h', '_', 'o', 'w']
				{'string': 'sc/_/h/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'o', 'w']
				version split: ['sc', '_', 'h', '_', 'ow']
				{'string': 'sc/_/h/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'ow']
				version split: ['sc', '_', 'h', '_', 'o', 'w']
				{'string': 'sc/_/h/_/o', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'o', 'w']
				version split: ['sc', '_', 'h', '_', 'ow']
				{'string': 'sc/_/h/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'ow']
				version split: ['sc', '_', 'h', '_', 'ow']
				{'string': 'sc/_/h/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'ow']
				version split: ['sc', '_', 'h', '_', 'ow']
				{'string': 'sc/_/h/_/ow', 'rgx': '((s)|(sch)|(sc))/((_))/((h))/((_))$'}
				_____REMOVING________['sc', '_', 'h', '_', 'ow']
				ANALYSING: sseaw
					resolving (2)
					> version: ss/e/_/a/w
					TRYING: a
					> version: ss/e/_/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['ss', 'e', '_', '_', 'a', 'w']
				adding dashed alternative: ['ss', 'e', '_', '_', 'aw']
				ss/e/_/a/w(CVAVC)
ss/e/_/aw(CVAV)
ss/e/_/_/a/w(CVAAVC)
ss/e/_/_/aw(CVAAV)
				version split: ['ss', 'e', '_', 'a', 'w']
				{'string': 'ss/e/_/a/w', 'rgx': '((s))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'e', '_', 'a', 'w']
				version split: ['ss', 'e', '_', 'aw']
				{'string': 'ss/e/_/aw', 'rgx': '((s))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'e', '_', 'aw']
				version split: ['ss', 'e', '_', '_', 'a', 'w']
				{'string': 'ss/e/_/_/a', 'rgx': '((s))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'e', '_', '_', 'a', 'w']
				version split: ['ss', 'e', '_', '_', 'aw']
				{'string': 'ss/e/_/_/aw', 'rgx': '((s))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', 'e', '_', '_', 'aw']
				ANALYSING: ssew
					resolving (1)
					> version: ss/e/w
					RESULT:  ['_']
				adding dashed alternative: ['ss', 'e', 'w', '_']
				ss/e/w(CVC)
ss/e/w/_(CVCA)
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e/w', 'rgx': '((s))/((e))/((w))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['ss', 'e', 'w', '_']
				{'string': 'ss/e/w/_', 'rgx': '((s))/((e))/((w))/((_))$'}
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'w', '_', 'e']
				ss/_/w/e(CACV)
ss/_/w/_/e(CACAV)
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['ss', '_', 'w', '_', 'e']
				{'string': 'ss/_/w/_/e', 'rgx': '((s))/((_))/((w))/((_))$'}
				_____REMOVING________['ss', '_', 'w', '_', 'e']
		FAIL: 
		FAIL: 
		only one version left: ['sc', 'a', 'u', '_']
		only one version left: ['sc', 'a', 'w', '_']
		FAIL: 
		only one version left: ['sc', 'e', 'u', '_']
		only one version left: ['sc', 'e', 'w', '_']
		only one version left: ['sc', '_', 'w', '_']
		only one version left: ['s', 'e', 'ƿ', '_']
		FAIL: 
		FAIL: 
		only one version left: ['sh', 'a', 'ƿ', '_']
		only one version left: ['sh', 'a', 'w', '_']
		FAIL: 
		only one version left: ['sh', 'e', 'u', '_']
		only one version left: ['sh', 'e', 'ƿ', '_']
		only one version left: ['sh', 'e', 'w', '_']
		FAIL: 
		only one version left: ['sch', 'a', 'u', '_']
		only one version left: ['sch', 'a', 'ƿ', '_']
		only one version left: ['sch', 'a', 'w', '_']
		FAIL: 
		only one version left: ['sch', 'e', 'u', '_']
		only one version left: ['sch', 'e', 'ƿ', '_']
		only one version left: ['sch', 'e', 'w', '_']
		FAIL: 
		FAIL: 
		only one version left: ['ss', 'e', 'w', '_']
		FAIL: 
		SPLIT: ['sh', 'a', 'u', 'w']
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['sc', 'a', 'u', '_']
		['sc', 'a', 'u', '_']
		['sc', 'a', 'u', '_']
		SPLIT: ['sc', 'a', 'w', '_']
		['sc', 'a', 'w', '_']
		SPLIT: ["['s', 'sc']", "['e']", "['_']", "['_']"]
		SPLIT: ['sc', 'e', 'u', '_']
		['sc', 'e', 'u', '_']
		['sc', 'e', 'u', '_']
		SPLIT: ['sc', 'e', 'w', '_']
		['sc', 'e', 'w', '_']
		SPLIT: ['sc', '_', 'w', '_']
		['sc', '_', 'w', '_']
		SPLIT: ['s', 'e', 'ƿ', '_']
		['s', 'e', 'ƿ', '_']
		SPLIT: ["['s', 'sh']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s', 'sh']", "['_']", "['h']", "['_']"]
		SPLIT: ['sh', 'a', 'ƿ', '_']
		['sh', 'a', 'ƿ', '_']
		SPLIT: ['sh', 'a', 'w', '_']
		['sh', 'a', 'w', '_']
		SPLIT: ["['s', 'sh']", "['e']", "['_']", "['_']"]
		SPLIT: ['sh', 'e', 'u', '_']
		['sh', 'e', 'u', '_']
		['sh', 'e', 'u', '_']
		SPLIT: ['sh', 'e', 'ƿ', '_']
		['sh', 'e', 'ƿ', '_']
		SPLIT: ['sh', 'e', 'w', '_']
		['sh', 'e', 'w', '_']
		SPLIT: ["['s', 'sh']", "['_']", "['h']", "['_']"]
		SPLIT: ['sch', 'a', 'u', '_']
		['sch', 'a', 'u', '_']
		['sch', 'a', 'u', '_']
		['sch', 'a', 'u', '_']
		['sch', 'a', 'u', '_']
		SPLIT: ['sch', 'a', 'ƿ', '_']
		['sch', 'a', 'ƿ', '_']
		['sch', 'a', 'ƿ', '_']
		SPLIT: ['sch', 'a', 'w', '_']
		['sch', 'a', 'w', '_']
		['sch', 'a', 'w', '_']
		SPLIT: ["['s', 'sch', 'sc']", "['e']", "['_']", "['_']"]
		SPLIT: ['sch', 'e', 'u', '_']
		['sch', 'e', 'u', '_']
		['sch', 'e', 'u', '_']
		['sch', 'e', 'u', '_']
		['sch', 'e', 'u', '_']
		SPLIT: ['sch', 'e', 'ƿ', '_']
		['sch', 'e', 'ƿ', '_']
		['sch', 'e', 'ƿ', '_']
		SPLIT: ['sch', 'e', 'w', '_']
		['sch', 'e', 'w', '_']
		['sch', 'e', 'w', '_']
		SPLIT: ["['s', 'sch', 'sc']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['e']", "['_']", "['_']"]
		SPLIT: ['ss', 'e', 'w', '_']
		['ss', 'e', 'w', '_']
		SPLIT: ["['s']", "['_']", "['w']", "['_']"]
		version for pattern CVCC is INVALID
		[]
		10
		OVERVIEW: version for pattern CVCC

faulty splits: 10
[''][''][''][''] <-! chaw
['s', 'sc']['e'][''][''] <-! sceaƿ
['s', 'sh']['']['h'][''] <-! shæ
['s', 'sh']['']['h'][''] <-! shæƿ
['s', 'sh']['e'][''][''] <-! sheaƿ
['s', 'sh']['']['h'][''] <-! show
['s', 'sch', 'sc']['e'][''][''] <-! scheaƿ
['s', 'sch', 'sc']['']['h'][''] <-! schow
['s']['e'][''][''] <-! sseaw
['s']['']['w'][''] <-! sswe
sh | a | u | w
['_'] | ['_'] | ['_'] | ['_']
sc | a | u | _
sc | a | w | _
['s', 'sc'] | ['e'] | ['_'] | ['_']
sc | e | u | _
sc | e | w | _
sc | _ | w | _
s | e | ƿ | _
['s', 'sh'] | ['_'] | ['h'] | ['_']
['s', 'sh'] | ['_'] | ['h'] | ['_']
sh | a | ƿ | _
sh | a | w | _
['s', 'sh'] | ['e'] | ['_'] | ['_']
sh | e | u | _
sh | e | ƿ | _
sh | e | w | _
['s', 'sh'] | ['_'] | ['h'] | ['_']
sch | a | u | _
sch | a | ƿ | _
sch | a | w | _
['s', 'sch', 'sc'] | ['e'] | ['_'] | ['_']
sch | e | u | _
sch | e | ƿ | _
sch | e | w | _
['s', 'sch', 'sc'] | ['_'] | ['h'] | ['_']
['s'] | ['e'] | ['_'] | ['_']
ss | e | w | _
['s'] | ['_'] | ['w'] | ['_']
0 : {'sh', 'ch'},{'sh', 'c'},{'sh', 'c'},{'sh', 'ch'}
1 : {'e', '_', 'o', 'a', 'au'},{'e', '_', 'o', 'a', 'au'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'e', '_', 'a', 'au', 'ow'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'o', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'}
2 : {'ch', 'u'},{'c', 'u'},{'ch', 'u'},{'c', 'u'}
3 : {'w', 'c'},{'ch', 'w'},{'ch', 'w'},{'w', 'c'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCVV
	Selection for pattern: CCVV completed
	Making a version for pattern: CCVV
			___CCVV : 0___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					adding blocked set: C = C >> s, ch, sc
					> version: c/h/aw
					TRYING: c
					> version: ch/aw
					TRYING: ch
					adding blocked set: C = C >> s, ch, sc
					RESULT:  ['c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((c))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((c))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, sc, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/aƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/a/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/aw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/a/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/aw
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/ƿ
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/ƿ
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/e/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/ew
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/e/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ew
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/o/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/c/h/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: s/ch/ow
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/o/w
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, sc, c
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					> version: sc/h/ow
					TRYING: sc
					>>> MULTIPLE RESOLVE OPTIONS: {'s', 'sc'}
					RESULT:  ['s', 'sc']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s)|(sc))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s)|(sc))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, sc, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCVV : 1___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, c, h
					> version: c/h/aw
					TRYING: h
					adding blocked set: C = C >> s, c, h
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', 'h', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/_/h/a/w(CACVC)
c/_/h/aw(CACV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((c))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((c))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_', 'rgx': '((c))/((_))$'}
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_', 'rgx': '((c))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: c
					adding blocked set: C = C >> s, h, _, c
					> version: sc/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: c
					adding blocked set: C = C >> s, h, _, c
					> version: sc/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'a', 'w']
				adding dashed alternative: ['s', '_', 'c', 'aw']
				adding dashed alternative: ['sc', '_', 'aw']
				s/c/a/w(CCVC)
sc/a/w(CVC)
s/c/aw(CCV)
sc/aw(CV)
s/_/c/a/w(CACVC)
sc/_/a/w(CAVC)
s/_/c/aw(CACV)
sc/_/aw(CAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc/a', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['sc', 'aw']
				{'string': 'sc/aw', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'aw']
				version split: ['s', '_', 'c', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 'c', 'ew']
				adding dashed alternative: ['sc', '_', 'ew']
				s/c/e/w(CCVC)
sc/e/w(CVC)
s/c/ew(CCV)
sc/ew(CV)
s/_/c/e/w(CACVC)
sc/_/e/w(CAVC)
s/_/c/ew(CACV)
sc/_/ew(CAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc/e', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['sc', 'ew']
				{'string': 'sc/ew', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'ew']
				version split: ['s', '_', 'c', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/w
					TRYING: w
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', 'w']
				s/c/w(CCC)
sc/w(CC)
s/_/c/w(CACC)
sc/_/w(CAC)
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc/w', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ']
				s/h/æ(CCV)
s/_/h/æ(CACV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/_/h/æ/ƿ(CACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', 'h', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/_/h/e/ƿ(CACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: schaƿ
					resolving (12)
					> version: s/c/h/a/ƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: s/c/h/aƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/a/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/aƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'aƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/aƿ(CCCV)
sc/h/a/ƿ(CCVC)
s/ch/a/ƿ(CCVC)
sc/h/aƿ(CCV)
s/ch/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
sc/h/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
s/_/c/h/a/ƿ(CACCVC)
s/_/c/h/aƿ(CACCV)
sc/_/h/a/ƿ(CACVC)
s/_/ch/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/ch/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
sc/_/h/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['s', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'aƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'aƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schaw
					resolving (12)
					> version: s/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/aw
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/aw
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', 'h', 'aw']
				s/c/h/a/w(CCCVC)
sc/h/a/w(CCVC)
s/ch/a/w(CCVC)
s/c/h/aw(CCCV)
sc/h/a/w(CCVC)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
s/ch/aw(CCV)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sc/h/aw(CCV)
sc/h/aw(CCV)
s/_/c/h/a/w(CACCVC)
sc/_/h/a/w(CACVC)
s/_/ch/a/w(CACVC)
s/_/c/h/aw(CACCV)
sc/_/h/a/w(CACVC)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
s/_/ch/aw(CACV)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['s', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'a', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'aw']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: scheƿ
					resolving (6)
					> version: s/c/h/e/ƿ
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/e/ƿ
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
sc/h/e/ƿ(CCVC)
s/ch/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
s/_/c/h/e/ƿ(CACCVC)
sc/_/h/e/ƿ(CACVC)
s/_/ch/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schew
					resolving (12)
					> version: s/c/h/e/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/e/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/ew
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/ew
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ew
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', 'h', 'ew']
				s/c/h/e/w(CCCVC)
sc/h/e/w(CCVC)
s/ch/e/w(CCVC)
s/c/h/ew(CCCV)
sc/h/e/w(CCVC)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
s/ch/ew(CCV)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sc/h/ew(CCV)
sc/h/ew(CCV)
s/_/c/h/e/w(CACCVC)
sc/_/h/e/w(CACVC)
s/_/ch/e/w(CACVC)
s/_/c/h/ew(CACCV)
sc/_/h/e/w(CACVC)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
s/_/ch/ew(CACV)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['s', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'e', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'ew']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: schow
					resolving (12)
					> version: s/c/h/o/w
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/o/w
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/c/h/ow
					TRYING: c
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: s/ch/ow
					TRYING: ch
					adding blocked set: C = C >> ch, _, s, h, c
					> version: sc/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					> version: sc/h/ow
					TRYING: h
					adding blocked set: C = C >> s, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', 'h', 'ow']
				s/c/h/o/w(CCCVC)
sc/h/o/w(CCVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
sc/h/o/w(CCVC)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
s/ch/ow(CCV)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sc/h/ow(CCV)
sc/h/ow(CCV)
s/_/c/h/o/w(CACCVC)
sc/_/h/o/w(CACVC)
s/_/ch/o/w(CACVC)
s/_/c/h/ow(CACCV)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
s/_/ch/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc/h', 'rgx': '((s)|(sc))/((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_', 'rgx': '((s)|(sc))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> _, s, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCVV : 2___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/h/a/w
					TRYING: h
					> version: c/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', '_', 'h', 'aw']
				c/_/h/a/w(CACVC)
c/_/h/aw(CACV)
c/_/_/h/a/w(CAACVC)
c/_/_/h/aw(CAACV)
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_/h', 'rgx': '((c))/((_))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'a', 'w']
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_/h', 'rgx': '((c))/((_))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'aw']
				version split: ['c', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_', 'rgx': '((c))/((_))/((_))$'}
				version split: ['c', '_', '_', 'h', 'aw']
				{'string': 'c/_/_', 'rgx': '((c))/((_))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/_/c/a/w
					TRYING: c
					> version: sc/_/a/w
					TRYING: a
					> version: s/_/c/aw
					TRYING: c
					> version: sc/_/aw
					TRYING: aw
					adding blocked set: V = V >> aw, e, _, a
					RESULT:  ['a']
				version split: ['s', '_', 'c', 'a', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['s', '_', 'c', 'a', 'w']
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_/a', 'rgx': '((s)|(sc))/((_))/((a))$'}
				version split: ['s', '_', 'c', 'aw']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['s', '_', 'c', 'aw']
				version split: ['sc', '_', 'aw']
				{'string': 'sc/_/aw', 'rgx': '((s)|(sc))/((_))/((a))$'}
				_____REMOVING________['sc', '_', 'aw']
				ANALYSING: scew
					resolving (4)
					> version: s/_/c/e/w
					TRYING: c
					> version: sc/_/e/w
					TRYING: e
					> version: s/_/c/ew
					TRYING: c
					> version: sc/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a
					RESULT:  ['e']
				version split: ['s', '_', 'c', 'e', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'e', 'w']
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_/e', 'rgx': '((s)|(sc))/((_))/((e))$'}
				version split: ['s', '_', 'c', 'ew']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'c', 'ew']
				version split: ['sc', '_', 'ew']
				{'string': 'sc/_/ew', 'rgx': '((s)|(sc))/((_))/((e))$'}
				_____REMOVING________['sc', '_', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/_/c/w
					TRYING: c
					> version: sc/_/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', '_', 'w']
				s/_/c/w(CACC)
sc/_/w(CAC)
s/_/_/c/w(CAACC)
sc/_/_/w(CAAC)
				version split: ['s', '_', 'c', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'w']
				version split: ['sc', '_', 'w']
				{'string': 'sc/_/w', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'w']
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'æ']
				s/_/h/æ(CACV)
s/_/_/h/æ(CAACV)
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ']
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'æ', 'ƿ']
				s/_/h/æ/ƿ(CACVC)
s/_/_/h/æ/ƿ(CAACVC)
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/h/a/ƿ
					TRYING: h
					> version: s/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'h', 'aƿ']
				s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
s/_/_/h/a/ƿ(CAACVC)
s/_/_/h/aƿ(CAACV)
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/_/h/a/w
					TRYING: h
					> version: s/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'aw']
				s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
s/_/_/h/a/w(CAACVC)
s/_/_/h/aw(CAACV)
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'w']
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'aw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'ƿ']
				s/_/h/e/ƿ(CACVC)
s/_/_/h/e/ƿ(CAACVC)
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/_/h/e/w
					TRYING: h
					> version: s/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'ew']
				s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
s/_/_/h/e/w(CAACVC)
s/_/_/h/ew(CAACV)
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'w']
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'ew']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/_/h/o/w
					TRYING: h
					> version: s/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'h', 'ow']
				s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
s/_/_/h/o/w(CAACVC)
s/_/_/h/ow(CAACV)
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 'h', 'ow']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (12)
					> version: s/_/c/h/a/ƿ
					TRYING: c
					> version: s/_/c/h/aƿ
					TRYING: c
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: s/_/ch/a/ƿ
					TRYING: ch
					> version: sc/_/h/aƿ
					TRYING: h
					> version: s/_/ch/aƿ
					TRYING: ch
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					> version: sc/_/h/a/ƿ
					TRYING: h
					> version: sc/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aƿ']
				s/_/c/h/a/ƿ(CACCVC)
s/_/c/h/aƿ(CACCV)
sc/_/h/a/ƿ(CACVC)
s/_/ch/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/ch/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
sc/_/h/aƿ(CACV)
sc/_/h/a/ƿ(CACVC)
sc/_/h/aƿ(CACV)
s/_/_/c/h/a/ƿ(CAACCVC)
s/_/_/c/h/aƿ(CAACCV)
sc/_/_/h/a/ƿ(CAACVC)
s/_/_/ch/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/ch/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
				version split: ['s', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['s', '_', 'ch', 'aƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['sc', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', 'h', 'aƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schaw
					resolving (12)
					> version: s/_/c/h/a/w
					TRYING: c
					> version: sc/_/h/a/w
					TRYING: h
					> version: s/_/ch/a/w
					TRYING: ch
					> version: s/_/c/h/aw
					TRYING: c
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: s/_/ch/aw
					TRYING: ch
					> version: sc/_/h/a/w
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					> version: sc/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', 'h', 'aw']
				s/_/c/h/a/w(CACCVC)
sc/_/h/a/w(CACVC)
s/_/ch/a/w(CACVC)
s/_/c/h/aw(CACCV)
sc/_/h/a/w(CACVC)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
s/_/ch/aw(CACV)
sc/_/h/a/w(CACVC)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
sc/_/h/aw(CACV)
s/_/_/c/h/a/w(CAACCVC)
sc/_/_/h/a/w(CAACVC)
s/_/_/ch/a/w(CAACVC)
s/_/_/c/h/aw(CAACCV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
s/_/_/ch/aw(CAACV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
				version split: ['s', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['s', '_', 'ch', 'a', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'a', 'w']
				version split: ['s', '_', 'c', 'h', 'aw']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['s', '_', 'ch', 'aw']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'aw']
				version split: ['sc', '_', 'h', 'a', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'a', 'w']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['sc', '_', 'h', 'aw']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'aw']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (6)
					> version: s/_/c/h/e/ƿ
					TRYING: c
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: s/_/ch/e/ƿ
					TRYING: ch
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: sc/_/h/e/ƿ
					TRYING: h
					> version: sc/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'ƿ']
				s/_/c/h/e/ƿ(CACCVC)
sc/_/h/e/ƿ(CACVC)
s/_/ch/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
sc/_/h/e/ƿ(CACVC)
s/_/_/c/h/e/ƿ(CAACCVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/ch/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
				version split: ['s', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schew
					resolving (12)
					> version: s/_/c/h/e/w
					TRYING: c
					> version: sc/_/h/e/w
					TRYING: h
					> version: s/_/ch/e/w
					TRYING: ch
					> version: s/_/c/h/ew
					TRYING: c
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: s/_/ch/ew
					TRYING: ch
					> version: sc/_/h/e/w
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					> version: sc/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ew']
				s/_/c/h/e/w(CACCVC)
sc/_/h/e/w(CACVC)
s/_/ch/e/w(CACVC)
s/_/c/h/ew(CACCV)
sc/_/h/e/w(CACVC)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
s/_/ch/ew(CACV)
sc/_/h/e/w(CACVC)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
sc/_/h/ew(CACV)
s/_/_/c/h/e/w(CAACCVC)
sc/_/_/h/e/w(CAACVC)
s/_/_/ch/e/w(CAACVC)
s/_/_/c/h/ew(CAACCV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
s/_/_/ch/ew(CAACV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
				version split: ['s', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['s', '_', 'ch', 'e', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'e', 'w']
				version split: ['s', '_', 'c', 'h', 'ew']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['s', '_', 'ch', 'ew']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'ew']
				version split: ['sc', '_', 'h', 'e', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'e', 'w']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['sc', '_', 'h', 'ew']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'ew']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: schow
					resolving (12)
					> version: s/_/c/h/o/w
					TRYING: c
					> version: sc/_/h/o/w
					TRYING: h
					> version: s/_/ch/o/w
					TRYING: ch
					> version: s/_/c/h/ow
					TRYING: c
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: s/_/ch/ow
					TRYING: ch
					> version: sc/_/h/o/w
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					> version: sc/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', 'h', 'ow']
				s/_/c/h/o/w(CACCVC)
sc/_/h/o/w(CACVC)
s/_/ch/o/w(CACVC)
s/_/c/h/ow(CACCV)
sc/_/h/o/w(CACVC)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
s/_/ch/ow(CACV)
sc/_/h/o/w(CACVC)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
sc/_/h/ow(CACV)
s/_/_/c/h/o/w(CAACCVC)
sc/_/_/h/o/w(CAACVC)
s/_/_/ch/o/w(CAACVC)
s/_/_/c/h/ow(CAACCV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
s/_/_/ch/ow(CAACV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
				version split: ['s', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'ch', 'o', 'w']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'o', 'w']
				version split: ['s', '_', 'c', 'h', 'ow']
				{'string': 's/_/c', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['s', '_', 'ch', 'ow']
				{'string': 's/_/ch', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ch', 'ow']
				version split: ['sc', '_', 'h', 'o', 'w']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'o', 'w']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['sc', '_', 'h', 'ow']
				{'string': 'sc/_/h', 'rgx': '((s)|(sc))/((_))/((_))$'}
				_____REMOVING________['sc', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['s', '_', '_', 'ch', 'ow']
				{'string': 's/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_', 'rgx': '((s)|(sc))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					> version: ss/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a
					RESULT:  ['e']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((e))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', 'w', 'e']
				s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
			___CCVV : 3___
				ANALYSING: scau
				adding littera based on matching pattern
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: sceu
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: sheu
				adding littera based on matching pattern
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/_/h/a/w
					TRYING: h
					> version: c/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['c', '_', '_', '_', 'h', 'aw']
				c/_/_/h/a/w(CAACVC)
c/_/_/h/aw(CAACV)
c/_/_/_/h/a/w(CAAACVC)
c/_/_/_/h/aw(CAAACV)
				version split: ['c', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_/h/a', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', 'h', 'a', 'w']
				version split: ['c', '_', '_', 'h', 'aw']
				{'string': 'c/_/_/h/aw', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', 'h', 'aw']
				version split: ['c', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'c/_/_/_/h', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', '_', 'h', 'a', 'w']
				version split: ['c', '_', '_', '_', 'h', 'aw']
				{'string': 'c/_/_/_/h', 'rgx': '((c))/((_))/((_))/((_))$'}
				_____REMOVING________['c', '_', '_', '_', 'h', 'aw']
				ANALYSING: scaw
					resolving (1)
					> version: sc/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'a', '_', 'w']
				sc/_/a/w(CAVC)
sc/_/a/_/w(CAVAC)
				version split: ['sc', '_', 'a', 'w']
				{'string': 'sc/_/a/w', 'rgx': '((s)|(sc))/((_))/((a))/((_))$'}
				_____REMOVING________['sc', '_', 'a', 'w']
				version split: ['sc', '_', 'a', '_', 'w']
				{'string': 'sc/_/a/_/w', 'rgx': '((s)|(sc))/((_))/((a))/((_))$'}
				_____REMOVING________['sc', '_', 'a', '_', 'w']
				ANALYSING: scew
					resolving (1)
					> version: sc/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['sc', '_', 'e', '_', 'w']
				sc/_/e/w(CAVC)
sc/_/e/_/w(CAVAC)
				version split: ['sc', '_', 'e', 'w']
				{'string': 'sc/_/e/w', 'rgx': '((s)|(sc))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'e', 'w']
				version split: ['sc', '_', 'e', '_', 'w']
				{'string': 'sc/_/e/_/w', 'rgx': '((s)|(sc))/((_))/((e))/((_))$'}
				_____REMOVING________['sc', '_', 'e', '_', 'w']
				ANALYSING: scw
					resolving (2)
					> version: s/_/_/c/w
					TRYING: c
					> version: sc/_/_/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'w']
				s/_/_/c/w(CAACC)
sc/_/_/w(CAAC)
s/_/_/_/c/w(CAAACC)
sc/_/_/_/w(CAAAC)
				version split: ['s', '_', '_', 'c', 'w']
				{'string': 's/_/_/c/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'w']
				version split: ['sc', '_', '_', 'w']
				{'string': 'sc/_/_/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'w']
				version split: ['s', '_', '_', '_', 'c', 'w']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'w']
				version split: ['sc', '_', '_', '_', 'w']
				{'string': 'sc/_/_/_/w', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', '_', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/e/_/ƿ(CAVAC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e/ƿ', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', 'e', '_', 'ƿ']
				{'string': 's/_/e/_/ƿ', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'e', '_', 'ƿ']
				ANALYSING: shæ
					resolving (1)
					> version: s/_/_/h/æ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'æ']
				s/_/_/h/æ(CAACV)
s/_/_/_/h/æ(CAAACV)
				version split: ['s', '_', '_', 'h', 'æ']
				{'string': 's/_/_/h/æ', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'æ']
				version split: ['s', '_', '_', '_', 'h', 'æ']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				s/_/_/h/æ/ƿ(CAACVC)
s/_/_/_/h/æ/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_/h/æ', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'aƿ']
				s/_/_/h/a/ƿ(CAACVC)
s/_/_/h/aƿ(CAACV)
s/_/_/_/h/a/ƿ(CAAACVC)
s/_/_/_/h/aƿ(CAAACV)
				version split: ['s', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_/h/a', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_/h/aƿ', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'aƿ']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/_/_/h/a/w
					TRYING: h
					> version: s/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'aw']
				s/_/_/h/a/w(CAACVC)
s/_/_/h/aw(CAACV)
s/_/_/_/h/a/w(CAAACVC)
s/_/_/_/h/aw(CAAACV)
				version split: ['s', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_/h/a', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', 'h', 'aw']
				{'string': 's/_/_/h/aw', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'h', 'a', 'w']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', '_', 'h', 'aw']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'aw']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'ƿ']
				s/_/_/h/e/ƿ(CAACVC)
s/_/_/_/h/e/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'ƿ']
				ANALYSING: shew
					resolving (2)
					> version: s/_/_/h/e/w
					TRYING: h
					> version: s/_/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'ew']
				s/_/_/h/e/w(CAACVC)
s/_/_/h/ew(CAACV)
s/_/_/_/h/e/w(CAAACVC)
s/_/_/_/h/ew(CAAACV)
				version split: ['s', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_/h/e', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', 'h', 'ew']
				{'string': 's/_/_/h/ew', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'h', 'e', 'w']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', '_', 'h', 'ew']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/_/_/h/o/w
					TRYING: h
					> version: s/_/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'h', 'ow']
				s/_/_/h/o/w(CAACVC)
s/_/_/h/ow(CAACV)
s/_/_/_/h/o/w(CAAACVC)
s/_/_/_/h/ow(CAAACV)
				version split: ['s', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_/h/o', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', 'h', 'ow']
				{'string': 's/_/_/h/ow', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'h', 'o', 'w']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', '_', 'h', 'ow']
				{'string': 's/_/_/_/h', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'h', 'ow']
				ANALYSING: schaƿ
					resolving (12)
					> version: s/_/_/c/h/a/ƿ
					TRYING: c
					> version: s/_/_/c/h/aƿ
					TRYING: c
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: s/_/_/ch/a/ƿ
					TRYING: ch
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: s/_/_/ch/aƿ
					TRYING: ch
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					> version: sc/_/_/h/a/ƿ
					TRYING: h
					> version: sc/_/_/h/aƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aƿ']
				s/_/_/c/h/a/ƿ(CAACCVC)
s/_/_/c/h/aƿ(CAACCV)
sc/_/_/h/a/ƿ(CAACVC)
s/_/_/ch/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/ch/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/aƿ(CAACV)
sc/_/_/h/a/ƿ(CAACVC)
sc/_/_/h/aƿ(CAACV)
s/_/_/_/c/h/a/ƿ(CAAACCVC)
s/_/_/_/c/h/aƿ(CAAACCV)
sc/_/_/_/h/a/ƿ(CAAACVC)
s/_/_/_/ch/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
s/_/_/_/ch/aƿ(CAAACV)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
sc/_/_/_/h/aƿ(CAAACV)
sc/_/_/_/h/a/ƿ(CAAACVC)
sc/_/_/_/h/aƿ(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_/ch/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/h/aƿ', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'aƿ']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['s', '_', '_', '_', 'ch', 'aƿ']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'aƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (12)
					> version: s/_/_/c/h/a/w
					TRYING: c
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: s/_/_/ch/a/w
					TRYING: ch
					> version: s/_/_/c/h/aw
					TRYING: c
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: s/_/_/ch/aw
					TRYING: ch
					> version: sc/_/_/h/a/w
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					> version: sc/_/_/h/aw
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'a', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'aw']
				s/_/_/c/h/a/w(CAACCVC)
sc/_/_/h/a/w(CAACVC)
s/_/_/ch/a/w(CAACVC)
s/_/_/c/h/aw(CAACCV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
s/_/_/ch/aw(CAACV)
sc/_/_/h/a/w(CAACVC)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
sc/_/_/h/aw(CAACV)
s/_/_/_/c/h/a/w(CAAACCVC)
sc/_/_/_/h/a/w(CAAACVC)
s/_/_/_/ch/a/w(CAAACVC)
s/_/_/_/c/h/aw(CAAACCV)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/aw(CAAACV)
s/_/_/_/ch/aw(CAAACV)
sc/_/_/_/h/a/w(CAAACVC)
sc/_/_/_/h/aw(CAAACV)
sc/_/_/_/h/aw(CAAACV)
sc/_/_/_/h/aw(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_/ch/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'a', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', 'ch', 'aw']
				{'string': 's/_/_/ch/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'aw']
				version split: ['sc', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/h/a', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/h/aw', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'a', 'w']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'a', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'aw']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['s', '_', '_', '_', 'ch', 'aw']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'a', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'a', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				version split: ['sc', '_', '_', '_', 'h', 'aw']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'aw']
				ANALYSING: scheƿ
					resolving (6)
					> version: s/_/_/c/h/e/ƿ
					TRYING: c
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: s/_/_/ch/e/ƿ
					TRYING: ch
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					> version: sc/_/_/h/e/ƿ
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				s/_/_/c/h/e/ƿ(CAACCVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/ch/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
sc/_/_/h/e/ƿ(CAACVC)
s/_/_/_/c/h/e/ƿ(CAAACCVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
s/_/_/_/ch/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
sc/_/_/_/h/e/ƿ(CAAACVC)
				version split: ['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (12)
					> version: s/_/_/c/h/e/w
					TRYING: c
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: s/_/_/ch/e/w
					TRYING: ch
					> version: s/_/_/c/h/ew
					TRYING: c
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: s/_/_/ch/ew
					TRYING: ch
					> version: sc/_/_/h/e/w
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					> version: sc/_/_/h/ew
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'e', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ew']
				s/_/_/c/h/e/w(CAACCVC)
sc/_/_/h/e/w(CAACVC)
s/_/_/ch/e/w(CAACVC)
s/_/_/c/h/ew(CAACCV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
s/_/_/ch/ew(CAACV)
sc/_/_/h/e/w(CAACVC)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
sc/_/_/h/ew(CAACV)
s/_/_/_/c/h/e/w(CAAACCVC)
sc/_/_/_/h/e/w(CAAACVC)
s/_/_/_/ch/e/w(CAAACVC)
s/_/_/_/c/h/ew(CAAACCV)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/ew(CAAACV)
s/_/_/_/ch/ew(CAAACV)
sc/_/_/_/h/e/w(CAAACVC)
sc/_/_/_/h/ew(CAAACV)
sc/_/_/_/h/ew(CAAACV)
sc/_/_/_/h/ew(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_/ch/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'e', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', 'ch', 'ew']
				{'string': 's/_/_/ch/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'ew']
				version split: ['sc', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/h/e', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/h/ew', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'e', 'w']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'e', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'ew']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['s', '_', '_', '_', 'ch', 'ew']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'e', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'e', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				version split: ['sc', '_', '_', '_', 'h', 'ew']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ew']
				ANALYSING: schow
					resolving (12)
					> version: s/_/_/c/h/o/w
					TRYING: c
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: s/_/_/ch/o/w
					TRYING: ch
					> version: s/_/_/c/h/ow
					TRYING: c
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: s/_/_/ch/ow
					TRYING: ch
					> version: sc/_/_/h/o/w
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					> version: sc/_/_/h/ow
					TRYING: h
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'o', 'w']
				adding dashed alternative: ['s', '_', '_', '_', 'c', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['s', '_', '_', '_', 'ch', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'o', 'w']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				adding dashed alternative: ['sc', '_', '_', '_', 'h', 'ow']
				s/_/_/c/h/o/w(CAACCVC)
sc/_/_/h/o/w(CAACVC)
s/_/_/ch/o/w(CAACVC)
s/_/_/c/h/ow(CAACCV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
s/_/_/ch/ow(CAACV)
sc/_/_/h/o/w(CAACVC)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
sc/_/_/h/ow(CAACV)
s/_/_/_/c/h/o/w(CAAACCVC)
sc/_/_/_/h/o/w(CAAACVC)
s/_/_/_/ch/o/w(CAAACVC)
s/_/_/_/c/h/ow(CAAACCV)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/ow(CAAACV)
s/_/_/_/ch/ow(CAAACV)
sc/_/_/_/h/o/w(CAAACVC)
sc/_/_/_/h/ow(CAAACV)
sc/_/_/_/h/ow(CAAACV)
sc/_/_/_/h/ow(CAAACV)
				version split: ['s', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_/ch/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'o', 'w']
				version split: ['s', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_/c/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', 'ch', 'ow']
				{'string': 's/_/_/ch/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ch', 'ow']
				version split: ['sc', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/h/o', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/h/ow', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['s', '_', '_', '_', 'ch', 'o', 'w']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'o', 'w']
				version split: ['s', '_', '_', '_', 'c', 'h', 'ow']
				{'string': 's/_/_/_/c', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'c', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['s', '_', '_', '_', 'ch', 'ow']
				{'string': 's/_/_/_/ch', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ch', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'o', 'w']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'o', 'w']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				version split: ['sc', '_', '_', '_', 'h', 'ow']
				{'string': 'sc/_/_/_/h', 'rgx': '((s)|(sc))/((_))/((_))/((_))$'}
				_____REMOVING________['sc', '_', '_', '_', 'h', 'ow']
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'e', '_', 'w']
				ss/_/e/w(CAVC)
ss/_/e/_/w(CAVAC)
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e/w', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['ss', '_', 'e', '_', 'w']
				{'string': 'ss/_/e/_/w', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'e', '_', 'w']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/_/s/w/e
					TRYING: s
					> version: ss/_/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', '_', 'w', 'e']
				s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
s/_/_/_/s/w/e(CAAACCV)
ss/_/_/_/w/e(CAAACV)
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/s/w', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/w/e', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'w', 'e']
				version split: ['s', '_', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/_/s', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/_/w', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', '_', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'c', 'a', 'u']
		SPLIT: ['s', 'c', 'e', 'aƿ']
		SPLIT: ['s', 'c', 'e', 'u']
		SPLIT: ['s', 'h', 'a', 'uw']
		SPLIT: ['s', 'h', 'e', 'aƿ']
		SPLIT: ['s', 'h', 'e', 'u']
		SPLIT: ['sc', 'h', 'a', 'u']
		SPLIT: ['sc', 'h', 'e', 'aƿ']
		SPLIT: ['sc', 'h', 'e', 'u']
		SPLIT: ['s', 's', 'e', 'aw']
		SPLIT: ["['c']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['a']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s', 'sc']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		version for pattern CCVV is INVALID
		[{'s', '_', 'h', 'c'}, {'_', 'aƿ', 'aw', 'u', 'uw'}]
		19
		OVERVIEW: version for pattern CCVV
{'s', '_', 'h', 'c'}, {'_', 'aƿ', 'aw', 'u', 'uw'}
faulty splits: 19
['c'][''][''][''] <-! chaw
['s', 'sc']['']['a'][''] <-! scaw
['s', 'sc']['']['e'][''] <-! scew
['s', 'sc'][''][''][''] <-! scw
['s']['']['e'][''] <-! seƿ
['s'][''][''][''] <-! shæ
['s'][''][''][''] <-! shæƿ
['s'][''][''][''] <-! shaƿ
['s'][''][''][''] <-! shaw
['s'][''][''][''] <-! sheƿ
['s'][''][''][''] <-! shew
['s'][''][''][''] <-! show
['s', 'sc'][''][''][''] <-! schaƿ
['s', 'sc'][''][''][''] <-! schaw
['s', 'sc'][''][''][''] <-! scheƿ
['s', 'sc'][''][''][''] <-! schew
['s', 'sc'][''][''][''] <-! schow
['s']['']['e'][''] <-! ssew
['s'][''][''][''] <-! sswe
s | c | a | u
s | c | e | aƿ
s | c | e | u
s | h | a | uw
s | h | e | aƿ
s | h | e | u
sc | h | a | u
sc | h | e | aƿ
sc | h | e | u
s | s | e | aw
['c'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['a'] | ['_']
['s', 'sc'] | ['_'] | ['e'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['e'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s', 'sc'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['e'] | ['_']
['s'] | ['_'] | ['_'] | ['_']
1 : {'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', 'c', 'h'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', 'c', 'h'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', 'h', '_', 'c'},{'s', '_', 'h', 'c'},{'s', 'h', '_', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'_', 's', 'w', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'s', '_', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCC
	Selection for pattern: CCC completed
	Making a version for pattern: CCC
			___CCC : 0___
				ANALYSING: scw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					> version: s/h/a/u/w
					TRYING: s
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: s/h/a/uw
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					> version: s/c/h/a/u
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/u
					TRYING: s
					> version: s/ch/a/u
					TRYING: s
					> version: s/c/h/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/ƿ
					TRYING: s
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/w
					TRYING: s
					> version: s/c/h/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: s
					> version: s/c/h/e/aƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/a/ƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/aƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					> version: s/c/h/e/u
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/u
					TRYING: s
					> version: s/ch/e/u
					TRYING: s
					> version: s/c/h/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/w
					TRYING: s
					> version: s/c/h/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/o/w
					TRYING: s
					> version: s/c/h/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCC : 1___
				ANALYSING: scw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					> version: ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					> version: s/h/a/uw
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					> version: s/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: s/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					> version: s/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					> version: s/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: c
					> version: s/c/h/a/u
					TRYING: c
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/au
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/au
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: c
					> version: s/c/h/aƿ
					TRYING: c
					> version: s/ch/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: c
					> version: s/ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: c
					> version: s/c/h/e/aƿ
					TRYING: c
					> version: s/ch/e/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: c
					> version: s/c/h/e/u
					TRYING: c
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/eu
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/eu
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: s/ch/e/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: c
					> version: s/ch/e/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ew
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ew
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: c
					> version: s/ch/o/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ow
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ow
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/e/aw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				s/s/e/a/w(CCVVC)
ss/e/a/w(CVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/e/aw(CVV)
ss/ea/w(CVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/eaw(CV)
ss/ea/w(CVC)
s/s/eaw(CCV)
ss/eaw(CV)
s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> ch, _, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCC : 2___
				ANALYSING: scw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', 'w']
				adding dashed alternative: ['c', 'h', '_', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/h/_/a/w(CCAVC)
c/h/_/aw(CCAV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a/w', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h/aw', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', '_', 'a', 'w']
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_/aw', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/au(CCV)
s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'au']
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', 'aw']
				s/c/a/w(CCVC)
s/c/aw(CCV)
s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a/w', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'w']
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					> version: s/c/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/ea/ƿ(CCVC)
s/c/ea/ƿ(CCVC)
s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e/aƿ', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea/ƿ', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea/ƿ', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'aƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/eu(CCV)
s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', 'ew']
				s/c/e/w(CCVC)
s/c/ew(CCV)
s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e/w', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'w']
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ew']
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e/ƿ', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', 'ƿ']
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ']
				s/h/æ(CCV)
s/h/_/æ(CCAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/h/_/æ/ƿ(CCAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h/æ/ƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					> version: s/h/a/uw
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'uw']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
s/h/au/w(CCVC)
s/h/_/a/u/w(CCAVAC)
s/h/_/a/u/w(CCAVAC)
s/h/_/au/w(CCAVC)
s/h/_/a/uw(CCAVV)
s/h/_/au/w(CCAVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a/u', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a/u', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au/w', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h/a/uw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au/w', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'uw']
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: a
					> version: s/h/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/h/_/a/ƿ(CCAVC)
s/h/_/aƿ(CCAV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a/ƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'w']
				adding dashed alternative: ['s', 'h', '_', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/h/_/a/w(CCAVC)
s/h/_/aw(CCAV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a/w', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h/aw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'w']
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_/aw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: e
					> version: s/h/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: ea
					> version: s/h/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/ea/ƿ(CCVC)
s/h/ea/ƿ(CCVC)
s/h/_/e/a/ƿ(CCAVVC)
s/h/_/e/aƿ(CCAVV)
s/h/_/ea/ƿ(CCAVC)
s/h/_/ea/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea/ƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea/ƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'aƿ']
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: e
					> version: s/h/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/eu(CCAV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h/eu', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_/eu', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/h/_/e/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e/ƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'ƿ']
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/h/_/e/w(CCAVC)
s/h/_/ew(CCAV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e/w', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h/ew', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'w']
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_/ew', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: o
					> version: s/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h/o/w', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'o', 'w']
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ow']
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: h
					> version: s/c/h/a/u
					TRYING: h
					> version: s/ch/a/u
					TRYING: a
					> version: s/ch/a/u
					TRYING: a
					> version: s/c/h/au
					TRYING: h
					> version: s/ch/au
					TRYING: au
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c/h/au', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's/ch/au', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'au']
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: h
					> version: s/c/h/aƿ
					TRYING: h
					> version: s/ch/a/ƿ
					TRYING: a
					> version: s/ch/aƿ
					TRYING: aƿ
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h/aƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a/ƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch/aƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: h
					> version: s/ch/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: h
					> version: s/ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a/w', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h/aw', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch/aw', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aw']
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: h
					> version: s/c/h/e/aƿ
					TRYING: h
					> version: s/ch/e/a/ƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/e/aƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/ea/ƿ
					TRYING: ea
					> version: s/ch/ea/ƿ
					TRYING: ea
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch/e/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h/ea', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch/e/aƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'aƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h/ea', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea/ƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea/ƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: h
					> version: s/c/h/e/u
					TRYING: h
					> version: s/ch/e/u
					TRYING: e
					> version: s/ch/e/u
					TRYING: e
					> version: s/c/h/eu
					TRYING: h
					> version: s/ch/eu
					TRYING: eu
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c/h/eu', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch/eu', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'eu']
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: h
					> version: s/ch/e/ƿ
					TRYING: e
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e/ƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: h
					> version: s/ch/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: h
					> version: s/ch/ew
					TRYING: ew
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e/w', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h/ew', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch/ew', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ew']
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: h
					> version: s/ch/o/w
					TRYING: o
					> version: s/c/h/ow
					TRYING: h
					> version: s/ch/ow
					TRYING: ow
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h/o', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch/o/w', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h/ow', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch/ow', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/e/a/w
					TRYING: e
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/e/aw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/e/aw
					TRYING: e
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
s/_/_/s/e/a/w(CAACVVC)
ss/_/_/e/a/w(CAAVVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/e/aw(CAACVV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/e/aw(CAAVV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/eaw(CAACV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/eaw(CAAV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
ss/_/_/eaw(CAAV)
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/s/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e/a', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'a', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_/s/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'aw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e/aw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'aw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'a', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'aw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'aw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', '_', 'ew']
				s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
s/_/_/s/e/w(CAACVC)
ss/_/_/e/w(CAAVC)
s/_/_/s/ew(CAACV)
ss/_/_/ew(CAAV)
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ew']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'w']
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'w']
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 's', 'ew']
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s/w', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'c', 'w']
		SPLIT: ["['ch', 'c']", "['h']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']"]
		SPLIT: ["['s']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['w']"]
		version for pattern CCC is INVALID
		[]
		28
		OVERVIEW: version for pattern CCC

faulty splits: 28
['ch', 'c']['h'][''] <-! chaw
['s']['c'][''] <-! scau
['s']['c'][''] <-! scaw
['s']['c'][''] <-! sceaƿ
['s']['c'][''] <-! sceu
['s']['c'][''] <-! scew
['s'][''][''] <-! seƿ
['s']['h'][''] <-! shæ
['s']['h'][''] <-! shæƿ
['s']['h'][''] <-! shauw
['s']['h'][''] <-! shaƿ
['s']['h'][''] <-! shaw
['s']['h'][''] <-! sheaƿ
['s']['h'][''] <-! sheu
['s']['h'][''] <-! sheƿ
['s']['h'][''] <-! shew
['s']['h'][''] <-! show
['s']['ch', 'c']['h'] <-! schau
['s']['ch', 'c']['h'] <-! schaƿ
['s']['ch', 'c']['h'] <-! schaw
['s']['ch', 'c']['h'] <-! scheaƿ
['s']['ch', 'c']['h'] <-! scheu
['s']['ch', 'c']['h'] <-! scheƿ
['s']['ch', 'c']['h'] <-! schew
['s']['ch', 'c']['h'] <-! schow
['s'][''][''] <-! sseaw
['s'][''][''] <-! ssew
['s']['']['w'] <-! sswe
s | c | w
['ch', 'c'] | ['h'] | ['_']
['s'] | ['c'] | ['_']
['s'] | ['c'] | ['_']
['s'] | ['c'] | ['_']
['s'] | ['c'] | ['_']
['s'] | ['c'] | ['_']
['s'] | ['_'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['h'] | ['_']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['ch', 'c'] | ['h']
['s'] | ['_'] | ['_']
['s'] | ['_'] | ['_']
['s'] | ['_'] | ['w']
1 : {'ch', '_', 's', 'h', 'c'},{'ch', '_', 'w', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
2 : {'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCV
	Selection for pattern: CCCV completed
	Making a version for pattern: CCCV
			___CCCV : 0___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					> version: s/h/a/u/w
					TRYING: s
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: s/h/a/uw
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: s
					> version: s/c/h/e/aƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/a/ƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/aƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCCV : 1___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, h, c
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					adding blocked set: C = C >> s, h, c
					> version: ch/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', 'h', 'a', 'w']
				adding dashed alternative: ['ch', '_', 'a', 'w']
				adding dashed alternative: ['c', '_', 'h', 'aw']
				adding dashed alternative: ['ch', '_', 'aw']
				c/h/a/w(CCVC)
ch/a/w(CVC)
c/h/aw(CCV)
ch/aw(CV)
c/_/h/a/w(CACVC)
ch/_/a/w(CAVC)
c/_/h/aw(CACV)
ch/_/aw(CAV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((_))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((_))$'}
				_____REMOVING________['ch', 'aw']
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_', 'rgx': '((ch)|(c))/((_))$'}
				version split: ['ch', '_', 'a', 'w']
				{'string': 'ch/_', 'rgx': '((ch)|(c))/((_))$'}
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_', 'rgx': '((ch)|(c))/((_))$'}
				version split: ['ch', '_', 'aw']
				{'string': 'ch/_', 'rgx': '((ch)|(c))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ']
				s/h/æ(CCV)
s/_/h/æ(CACV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/_/h/æ/ƿ(CACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/a/u/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/au/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/a/uw
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/au/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['s', '_', 'h', 'a', 'u', 'w']
				adding dashed alternative: ['s', '_', 'h', 'au', 'w']
				adding dashed alternative: ['s', '_', 'h', 'a', 'uw']
				adding dashed alternative: ['s', '_', 'h', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
s/h/au/w(CCVC)
s/_/h/a/u/w(CACVAC)
s/_/h/a/u/w(CACVAC)
s/_/h/au/w(CACVC)
s/_/h/a/uw(CACVV)
s/_/h/au/w(CACVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'a', 'uw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/aƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/aw
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'a', 'w']
				adding dashed alternative: ['s', '_', 'h', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/e/aƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/ea/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/ea/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', 'e', 'aƿ']
				adding dashed alternative: ['s', '_', 'h', 'ea', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/ea/ƿ(CCVC)
s/h/ea/ƿ(CCVC)
s/_/h/e/a/ƿ(CACVVC)
s/_/h/e/aƿ(CACVV)
s/_/h/ea/ƿ(CACVC)
s/_/h/ea/ƿ(CACVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', '_', 'h', 'e', 'a', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'e', 'aƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/e/u
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/eu
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/_/h/e/u(CACVA)
s/_/h/e/u(CACVA)
s/_/h/eu(CACV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'eu']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/_/h/e/ƿ(CACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/ew
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'e', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					> version: s/h/ow
					TRYING: h
					adding blocked set: C = C >> s, h, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: c
					> version: s/c/h/e/aƿ
					TRYING: c
					> version: s/ch/e/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: s/ch/e/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ew
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((s))$'}
				_____REMOVING________['ss', 'ew']
			___CCCV : 2___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/_/h/a/w
					TRYING: h
					> version: ch/_/a/w
					TRYING: a
					> version: c/_/h/aw
					TRYING: h
					> version: ch/_/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_/h', 'rgx': '((ch)|(c))/((_))/((h))$'}
				version split: ['ch', '_', 'a', 'w']
				{'string': 'ch/_/a', 'rgx': '((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['ch', '_', 'a', 'w']
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_/h', 'rgx': '((ch)|(c))/((_))/((h))$'}
				version split: ['ch', '_', 'aw']
				{'string': 'ch/_/aw', 'rgx': '((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['ch', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/au(CCV)
s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', 'aw']
				s/c/a/w(CCVC)
s/c/aw(CCV)
s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					> version: s/c/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/ea/ƿ(CCVC)
s/c/ea/ƿ(CCVC)
s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/eu(CCV)
s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', 'ew']
				s/c/e/w(CCVC)
s/c/ew(CCV)
s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/_/h/a/u/w
					TRYING: h
					> version: s/_/h/a/u/w
					TRYING: h
					> version: s/_/h/au/w
					TRYING: h
					> version: s/_/h/a/uw
					TRYING: h
					> version: s/_/h/au/w
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'a', 'uw']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/h/a/ƿ
					TRYING: h
					> version: s/_/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/_/h/a/w
					TRYING: h
					> version: s/_/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/_/h/e/a/ƿ
					TRYING: h
					> version: s/_/h/e/aƿ
					TRYING: h
					> version: s/_/h/ea/ƿ
					TRYING: h
					> version: s/_/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'e', 'a', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'e', 'aƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/_/h/e/u
					TRYING: h
					> version: s/_/h/e/u
					TRYING: h
					> version: s/_/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'eu']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/_/h/e/w
					TRYING: h
					> version: s/_/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/_/h/o/w
					TRYING: h
					> version: s/_/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h', 'rgx': '((s))/((_))/((h))$'}
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: h
					> version: s/c/h/e/aƿ
					TRYING: h
					> version: s/ch/e/a/ƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/e/aƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/ea/ƿ
					TRYING: ea
					> version: s/ch/ea/ƿ
					TRYING: ea
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'aƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: h
					> version: s/ch/e/ƿ
					TRYING: e
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				ANALYSING: sseaw
					resolving (8)
					> version: s/s/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: eaw
					> version: s/s/e/aw
					TRYING: e
					> version: s/s/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: eaw
					> version: s/s/eaw
					TRYING: eaw
					> version: s/s/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', 's', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', 'e', 'aw']
				adding dashed alternative: ['s', 's', '_', 'ea', 'w']
				adding dashed alternative: ['s', 's', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', 'ea', 'w']
				adding dashed alternative: ['s', 's', '_', 'eaw']
				s/s/e/a/w(CCVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
s/s/eaw(CCV)
s/s/_/e/a/w(CCAVVC)
s/s/_/eaw(CCAV)
s/s/_/e/aw(CCAVV)
s/s/_/ea/w(CCAVC)
s/s/_/eaw(CCAV)
s/s/_/eaw(CCAV)
s/s/_/ea/w(CCAVC)
s/s/_/eaw(CCAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s/e', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s/eaw', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s/e', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s/ea', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s/eaw', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s/eaw', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s/ea', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s/eaw', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', '_', 'e', 'a', 'w']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'e', 'aw']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'ea', 'w']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'ea', 'w']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				ANALYSING: ssew
					resolving (2)
					> version: s/s/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', 'e', 'w']
				adding dashed alternative: ['s', 's', '_', 'ew']
				s/s/e/w(CCVC)
s/s/ew(CCV)
s/s/_/e/w(CCAVC)
s/s/_/ew(CCAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s/e', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s/ew', 'rgx': '((s))/((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['s', 's', '_', 'e', 'w']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
				version split: ['s', 's', '_', 'ew']
				{'string': 's/s/_', 'rgx': '((s))/((s))/((_))$'}
			___CCCV : 3___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: sswe
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/_/h/a/w
					TRYING: a
					adding blocked set: V = V >> ew, e, a, eu, aƿ, au, aw, ow
					> version: c/_/h/aw
					TRYING: aw
					adding blocked set: V = V >> ew, e, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['c', '_', 'h', '_', 'a', 'w']
				adding dashed alternative: ['c', '_', 'h', '_', 'aw']
				c/_/h/a/w(CACVC)
c/_/h/aw(CACV)
c/_/h/_/a/w(CACAVC)
c/_/h/_/aw(CACAV)
				version split: ['c', '_', 'h', 'a', 'w']
				{'string': 'c/_/h/a/w', 'rgx': '((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'a', 'w']
				version split: ['c', '_', 'h', 'aw']
				{'string': 'c/_/h/aw', 'rgx': '((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['c', '_', 'h', 'aw']
				version split: ['c', '_', 'h', '_', 'a', 'w']
				{'string': 'c/_/h/_/a', 'rgx': '((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['c', '_', 'h', '_', 'a', 'w']
				version split: ['c', '_', 'h', '_', 'aw']
				{'string': 'c/_/h/_/aw', 'rgx': '((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['c', '_', 'h', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/c/_/a/u
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/c/_/au
					TRYING: au
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', '_', 'au']
				s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
s/c/_/_/a/u(CCAAVA)
s/c/_/_/a/u(CCAAVA)
s/c/_/_/au(CCAAV)
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'au']
				version split: ['s', 'c', '_', '_', 'a', 'u']
				{'string': 's/c/_/_/a', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'a', 'u']
				version split: ['s', 'c', '_', '_', 'a', 'u']
				{'string': 's/c/_/_/a', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'a', 'u']
				version split: ['s', 'c', '_', '_', 'au']
				{'string': 's/c/_/_/au', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'au']
				ANALYSING: scaw
					resolving (2)
					> version: s/c/_/a/w
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/c/_/aw
					TRYING: aw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', '_', 'aw']
				s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
s/c/_/_/a/w(CCAAVC)
s/c/_/_/aw(CCAAV)
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a/w', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'w']
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_/aw', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'aw']
				version split: ['s', 'c', '_', '_', 'a', 'w']
				{'string': 's/c/_/_/a', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'a', 'w']
				version split: ['s', 'c', '_', '_', 'aw']
				{'string': 's/c/_/_/aw', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/_/e/a/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/_/e/aƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', '_', 'ea', 'ƿ']
				s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
s/c/_/_/e/a/ƿ(CCAAVVC)
s/c/_/_/e/aƿ(CCAAVV)
s/c/_/_/ea/ƿ(CCAAVC)
s/c/_/_/ea/ƿ(CCAAVC)
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e/a', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e/aƿ', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'aƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea/ƿ', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea/ƿ', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/_/e', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', '_', '_', 'e', 'aƿ']
				{'string': 's/c/_/_/e', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'e', 'aƿ']
				version split: ['s', 'c', '_', '_', 'ea', 'ƿ']
				{'string': 's/c/_/_/ea', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', '_', 'ea', 'ƿ']
				{'string': 's/c/_/_/ea', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (3)
					> version: s/c/_/e/u
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/_/e/u
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/_/eu
					TRYING: eu
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', '_', 'eu']
				s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
s/c/_/_/e/u(CCAAVA)
s/c/_/_/e/u(CCAAVA)
s/c/_/_/eu(CCAAV)
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_/eu', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'eu']
				version split: ['s', 'c', '_', '_', 'e', 'u']
				{'string': 's/c/_/_/e', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'e', 'u']
				version split: ['s', 'c', '_', '_', 'e', 'u']
				{'string': 's/c/_/_/e', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'e', 'u']
				version split: ['s', 'c', '_', '_', 'eu']
				{'string': 's/c/_/_/eu', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/_/e/w
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', '_', 'ew']
				s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
s/c/_/_/e/w(CCAAVC)
s/c/_/_/ew(CCAAV)
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e/w', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'w']
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_/ew', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'ew']
				version split: ['s', 'c', '_', '_', 'e', 'w']
				{'string': 's/c/_/_/e', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'e', 'w']
				version split: ['s', 'c', '_', '_', 'ew']
				{'string': 's/c/_/_/ew', 'rgx': '((s))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'c', '_', '_', 'ew']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_']
				s/c/w(CCC)
s/c/w/_(CCCA)
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', '_', 'e', 'ƿ']
				s/_/_/e/ƿ(CAAVC)
s/_/_/_/e/ƿ(CAAAVC)
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e/ƿ', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/_/e', 'rgx': '((s))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'e', 'ƿ']
				ANALYSING: shæ
					resolving (1)
					> version: s/_/h/æ
					TRYING: æ
					adding blocked set: V = V >> ew, æ, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'æ']
				s/_/h/æ(CACV)
s/_/h/_/æ(CACAV)
				version split: ['s', '_', 'h', 'æ']
				{'string': 's/_/h/æ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ']
				version split: ['s', '_', 'h', '_', 'æ']
				{'string': 's/_/h/_/æ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/_/h/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> ew, æ, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'æ', 'ƿ']
				s/_/h/æ/ƿ(CACVC)
s/_/h/_/æ/ƿ(CACAVC)
				version split: ['s', '_', 'h', 'æ', 'ƿ']
				{'string': 's/_/h/æ/ƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'æ', 'ƿ']
				version split: ['s', '_', 'h', '_', 'æ', 'ƿ']
				{'string': 's/_/h/_/æ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (5)
					> version: s/_/h/a/u/w
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/_/h/a/u/w
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/_/h/au/w
					TRYING: au
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/a/uw
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/_/h/au/w
					TRYING: au
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'au', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'a', 'uw']
				adding dashed alternative: ['s', '_', 'h', '_', 'au', 'w']
				s/_/h/a/u/w(CACVAC)
s/_/h/a/u/w(CACVAC)
s/_/h/au/w(CACVC)
s/_/h/a/uw(CACVV)
s/_/h/au/w(CACVC)
s/_/h/_/a/u/w(CACAVAC)
s/_/h/_/a/u/w(CACAVAC)
s/_/h/_/au/w(CACAVC)
s/_/h/_/a/uw(CACAVV)
s/_/h/_/au/w(CACAVC)
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_/h/a/u', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'u', 'w']
				version split: ['s', '_', 'h', 'a', 'u', 'w']
				{'string': 's/_/h/a/u', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'u', 'w']
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_/h/au/w', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'au', 'w']
				version split: ['s', '_', 'h', 'a', 'uw']
				{'string': 's/_/h/a/uw', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'uw']
				version split: ['s', '_', 'h', 'au', 'w']
				{'string': 's/_/h/au/w', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'au', 'w']
				version split: ['s', '_', 'h', '_', 'a', 'u', 'w']
				{'string': 's/_/h/_/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'a', 'u', 'w']
				version split: ['s', '_', 'h', '_', 'a', 'u', 'w']
				{'string': 's/_/h/_/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'a', 'u', 'w']
				version split: ['s', '_', 'h', '_', 'au', 'w']
				{'string': 's/_/h/_/au', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'au', 'w']
				version split: ['s', '_', 'h', '_', 'a', 'uw']
				{'string': 's/_/h/_/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'a', 'uw']
				version split: ['s', '_', 'h', '_', 'au', 'w']
				{'string': 's/_/h/_/au', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'au', 'w']
				ANALYSING: shaƿ
					resolving (2)
					> version: s/_/h/a/ƿ
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/_/h/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', '_', 'aƿ']
				s/_/h/a/ƿ(CACVC)
s/_/h/aƿ(CACV)
s/_/h/_/a/ƿ(CACAVC)
s/_/h/_/aƿ(CACAV)
				version split: ['s', '_', 'h', 'a', 'ƿ']
				{'string': 's/_/h/a/ƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'ƿ']
				version split: ['s', '_', 'h', 'aƿ']
				{'string': 's/_/h/aƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aƿ']
				version split: ['s', '_', 'h', '_', 'a', 'ƿ']
				{'string': 's/_/h/_/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'a', 'ƿ']
				version split: ['s', '_', 'h', '_', 'aƿ']
				{'string': 's/_/h/_/aƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/_/h/a/w
					TRYING: a
					adding blocked set: V = V >> ew, e, _, a, eu, aƿ, au, aw, ow
					> version: s/_/h/aw
					TRYING: aw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'a', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'aw']
				s/_/h/a/w(CACVC)
s/_/h/aw(CACV)
s/_/h/_/a/w(CACAVC)
s/_/h/_/aw(CACAV)
				version split: ['s', '_', 'h', 'a', 'w']
				{'string': 's/_/h/a/w', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'a', 'w']
				version split: ['s', '_', 'h', 'aw']
				{'string': 's/_/h/aw', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'aw']
				version split: ['s', '_', 'h', '_', 'a', 'w']
				{'string': 's/_/h/_/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'a', 'w']
				version split: ['s', '_', 'h', '_', 'aw']
				{'string': 's/_/h/_/aw', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/_/h/e/a/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/e/aƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					> version: s/_/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', '_', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', '_', 'h', '_', 'ea', 'ƿ']
				s/_/h/e/a/ƿ(CACVVC)
s/_/h/e/aƿ(CACVV)
s/_/h/ea/ƿ(CACVC)
s/_/h/ea/ƿ(CACVC)
s/_/h/_/e/a/ƿ(CACAVVC)
s/_/h/_/e/aƿ(CACAVV)
s/_/h/_/ea/ƿ(CACAVC)
s/_/h/_/ea/ƿ(CACAVC)
				version split: ['s', '_', 'h', 'e', 'a', 'ƿ']
				{'string': 's/_/h/e/a', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'a', 'ƿ']
				version split: ['s', '_', 'h', 'e', 'aƿ']
				{'string': 's/_/h/e/aƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'aƿ']
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_/h/ea/ƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ea', 'ƿ']
				version split: ['s', '_', 'h', 'ea', 'ƿ']
				{'string': 's/_/h/ea/ƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ea', 'ƿ']
				version split: ['s', '_', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'a', 'ƿ']
				version split: ['s', '_', 'h', '_', 'e', 'aƿ']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'aƿ']
				version split: ['s', '_', 'h', '_', 'ea', 'ƿ']
				{'string': 's/_/h/_/ea', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'ea', 'ƿ']
				version split: ['s', '_', 'h', '_', 'ea', 'ƿ']
				{'string': 's/_/h/_/ea', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (3)
					> version: s/_/h/e/u
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/e/u
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/eu
					TRYING: eu
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', '_', 'h', '_', 'eu']
				s/_/h/e/u(CACVA)
s/_/h/e/u(CACVA)
s/_/h/eu(CACV)
s/_/h/_/e/u(CACAVA)
s/_/h/_/e/u(CACAVA)
s/_/h/_/eu(CACAV)
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h/e/u', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'u']
				version split: ['s', '_', 'h', 'e', 'u']
				{'string': 's/_/h/e/u', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'u']
				version split: ['s', '_', 'h', 'eu']
				{'string': 's/_/h/eu', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'eu']
				version split: ['s', '_', 'h', '_', 'e', 'u']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'u']
				version split: ['s', '_', 'h', '_', 'e', 'u']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'u']
				version split: ['s', '_', 'h', '_', 'eu']
				{'string': 's/_/h/_/eu', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/_/h/e/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'ƿ']
				s/_/h/e/ƿ(CACVC)
s/_/h/_/e/ƿ(CACAVC)
				version split: ['s', '_', 'h', 'e', 'ƿ']
				{'string': 's/_/h/e/ƿ', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'ƿ']
				version split: ['s', '_', 'h', '_', 'e', 'ƿ']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'ƿ']
				ANALYSING: shew
					resolving (2)
					> version: s/_/h/e/w
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/_/h/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'ew']
				s/_/h/e/w(CACVC)
s/_/h/ew(CACV)
s/_/h/_/e/w(CACAVC)
s/_/h/_/ew(CACAV)
				version split: ['s', '_', 'h', 'e', 'w']
				{'string': 's/_/h/e/w', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'e', 'w']
				version split: ['s', '_', 'h', 'ew']
				{'string': 's/_/h/ew', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ew']
				version split: ['s', '_', 'h', '_', 'e', 'w']
				{'string': 's/_/h/_/e', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'e', 'w']
				version split: ['s', '_', 'h', '_', 'ew']
				{'string': 's/_/h/_/ew', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/_/h/o/w
					TRYING: o
					adding blocked set: V = V >> ew, e, _, o, eu, aƿ, au, aw, ow
					> version: s/_/h/ow
					TRYING: ow
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', '_', 'h', '_', 'ow']
				s/_/h/o/w(CACVC)
s/_/h/ow(CACV)
s/_/h/_/o/w(CACAVC)
s/_/h/_/ow(CACAV)
				version split: ['s', '_', 'h', 'o', 'w']
				{'string': 's/_/h/o/w', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'o', 'w']
				version split: ['s', '_', 'h', 'ow']
				{'string': 's/_/h/ow', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', 'ow']
				version split: ['s', '_', 'h', '_', 'o', 'w']
				{'string': 's/_/h/_/o', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'o', 'w']
				version split: ['s', '_', 'h', '_', 'ow']
				{'string': 's/_/h/_/ow', 'rgx': '((s))/((_))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'h', '_', 'ow']
				ANALYSING: scheaƿ
					resolving (4)
					> version: s/c/h/e/a/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/h/e/aƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/c/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					> version: s/c/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', 'h', '_', 'ea', 'ƿ']
				s/c/h/e/a/ƿ(CCCVVC)
s/c/h/e/aƿ(CCCVV)
s/c/h/ea/ƿ(CCCVC)
s/c/h/ea/ƿ(CCCVC)
s/c/h/_/e/a/ƿ(CCCAVVC)
s/c/h/_/e/aƿ(CCCAVV)
s/c/h/_/ea/ƿ(CCCAVC)
s/c/h/_/ea/ƿ(CCCAVC)
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c/h/e/a', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c/h/e/aƿ', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'aƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h/ea/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h/ea/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'c', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/h/_/e', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', '_', 'e', 'aƿ']
				{'string': 's/c/h/_/e', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'e', 'aƿ']
				version split: ['s', 'c', 'h', '_', 'ea', 'ƿ']
				{'string': 's/c/h/_/ea', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'ea', 'ƿ']
				version split: ['s', 'c', 'h', '_', 'ea', 'ƿ']
				{'string': 's/c/h/_/ea', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'ea', 'ƿ']
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/ƿ
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
s/c/h/_/e/ƿ(CCCAVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['s', 'c', 'h', '_', 'e', 'ƿ']
				{'string': 's/c/h/_/e', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'e', 'ƿ']
				ANALYSING: sseaw
					resolving (8)
					> version: s/s/_/e/a/w
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/s/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, eaw
					> version: s/s/_/e/aw
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/s/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					> version: s/s/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, eaw
					> version: s/s/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, eaw
					> version: s/s/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, ea
					> version: s/s/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow, eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', 's', '_', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', '_', 'e', 'aw']
				adding dashed alternative: ['s', 's', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', 's', '_', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', '_', 'eaw']
				adding dashed alternative: ['s', 's', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', 's', '_', '_', 'eaw']
				s/s/_/e/a/w(CCAVVC)
s/s/_/eaw(CCAV)
s/s/_/e/aw(CCAVV)
s/s/_/ea/w(CCAVC)
s/s/_/eaw(CCAV)
s/s/_/eaw(CCAV)
s/s/_/ea/w(CCAVC)
s/s/_/eaw(CCAV)
s/s/_/_/e/a/w(CCAAVVC)
s/s/_/_/eaw(CCAAV)
s/s/_/_/e/aw(CCAAVV)
s/s/_/_/ea/w(CCAAVC)
s/s/_/_/eaw(CCAAV)
s/s/_/_/eaw(CCAAV)
s/s/_/_/ea/w(CCAAVC)
s/s/_/_/eaw(CCAAV)
				version split: ['s', 's', '_', 'e', 'a', 'w']
				{'string': 's/s/_/e/a', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'e', 'a', 'w']
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'eaw']
				version split: ['s', 's', '_', 'e', 'aw']
				{'string': 's/s/_/e/aw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'e', 'aw']
				version split: ['s', 's', '_', 'ea', 'w']
				{'string': 's/s/_/ea/w', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'ea', 'w']
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'eaw']
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'eaw']
				version split: ['s', 's', '_', 'ea', 'w']
				{'string': 's/s/_/ea/w', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'ea', 'w']
				version split: ['s', 's', '_', 'eaw']
				{'string': 's/s/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'eaw']
				version split: ['s', 's', '_', '_', 'e', 'a', 'w']
				{'string': 's/s/_/_/e', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'e', 'a', 'w']
				version split: ['s', 's', '_', '_', 'eaw']
				{'string': 's/s/_/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'eaw']
				version split: ['s', 's', '_', '_', 'e', 'aw']
				{'string': 's/s/_/_/e', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'e', 'aw']
				version split: ['s', 's', '_', '_', 'ea', 'w']
				{'string': 's/s/_/_/ea', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'ea', 'w']
				version split: ['s', 's', '_', '_', 'eaw']
				{'string': 's/s/_/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'eaw']
				version split: ['s', 's', '_', '_', 'eaw']
				{'string': 's/s/_/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'eaw']
				version split: ['s', 's', '_', '_', 'ea', 'w']
				{'string': 's/s/_/_/ea', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'ea', 'w']
				version split: ['s', 's', '_', '_', 'eaw']
				{'string': 's/s/_/_/eaw', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'eaw']
				ANALYSING: ssew
					resolving (2)
					> version: s/s/_/e/w
					TRYING: e
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					> version: s/s/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, eu, aƿ, au, aw, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 's', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', 's', '_', '_', 'ew']
				s/s/_/e/w(CCAVC)
s/s/_/ew(CCAV)
s/s/_/_/e/w(CCAAVC)
s/s/_/_/ew(CCAAV)
				version split: ['s', 's', '_', 'e', 'w']
				{'string': 's/s/_/e/w', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'e', 'w']
				version split: ['s', 's', '_', 'ew']
				{'string': 's/s/_/ew', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', 'ew']
				version split: ['s', 's', '_', '_', 'e', 'w']
				{'string': 's/s/_/_/e', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'e', 'w']
				version split: ['s', 's', '_', '_', 'ew']
				{'string': 's/s/_/_/ew', 'rgx': '((s))/((s))/((_))/((_))$'}
				_____REMOVING________['s', 's', '_', '_', 'ew']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'c', 'w', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'c', 'h', 'au']
		SPLIT: ['s', 'c', 'h', 'aƿ']
		SPLIT: ['s', 'c', 'h', 'aw']
		SPLIT: ['s', 'c', 'h', 'eu']
		SPLIT: ['s', 'c', 'h', 'ew']
		SPLIT: ['s', 'c', 'h', 'ow']
		SPLIT: ['s', 's', 'w', 'e']
		SPLIT: ["['ch', 'c']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['_']"]
		SPLIT: ['s', 'c', 'w', '_']
		['s', 'c', 'w', '_']
		SPLIT: ["['s']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['_']"]
		SPLIT: ["['s']", "['s']", "['_']", "['_']"]
		SPLIT: ["['s']", "['s']", "['_']", "['_']"]
		version for pattern CCCV is INVALID
		[{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'}]
		21
		OVERVIEW: version for pattern CCCV
{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'}
faulty splits: 21
['ch', 'c']['']['h'][''] <-! chaw
['s']['c'][''][''] <-! scau
['s']['c'][''][''] <-! scaw
['s']['c'][''][''] <-! sceaƿ
['s']['c'][''][''] <-! sceu
['s']['c'][''][''] <-! scew
['s'][''][''][''] <-! seƿ
['s']['']['h'][''] <-! shæ
['s']['']['h'][''] <-! shæƿ
['s']['']['h'][''] <-! shauw
['s']['']['h'][''] <-! shaƿ
['s']['']['h'][''] <-! shaw
['s']['']['h'][''] <-! sheaƿ
['s']['']['h'][''] <-! sheu
['s']['']['h'][''] <-! sheƿ
['s']['']['h'][''] <-! shew
['s']['']['h'][''] <-! show
['s']['ch', 'c']['h'][''] <-! scheaƿ
['s']['ch', 'c']['h'][''] <-! scheƿ
['s']['s'][''][''] <-! sseaw
['s']['s'][''][''] <-! ssew
s | c | h | au
s | c | h | aƿ
s | c | h | aw
s | c | h | eu
s | c | h | ew
s | c | h | ow
s | s | w | e
['ch', 'c'] | ['_'] | ['h'] | ['_']
['s'] | ['c'] | ['_'] | ['_']
['s'] | ['c'] | ['_'] | ['_']
['s'] | ['c'] | ['_'] | ['_']
['s'] | ['c'] | ['_'] | ['_']
['s'] | ['c'] | ['_'] | ['_']
s | c | w | _
['s'] | ['_'] | ['_'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['h'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['_']
['s'] | ['s'] | ['_'] | ['_']
['s'] | ['s'] | ['_'] | ['_']
1 : {'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', 'c'},{'s', 'h', '_', 'c'},{'s', 'h', '_', 'c'}
3 : {'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'o', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'eaw'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'eaw'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'eaw'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'æ', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'a', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'ea'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'æ', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow', 'eaw'},{'ew', 'e', '_', 'eu', 'aƿ', 'au', 'aw', 'ow'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCVV
	Selection for pattern: CCCVV completed
	Making a version for pattern: CCCVV
			___CCCVV : 0___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					> version: s/h/a/u/w
					TRYING: s
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: s/h/a/uw
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/ƿ
					TRYING: s
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/w
					TRYING: s
					> version: s/c/h/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/w
					TRYING: s
					> version: s/c/h/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/o/w
					TRYING: s
					> version: s/c/h/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCCVV : 1___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					> version: ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					> version: s/h/a/uw
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					> version: s/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: s/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					> version: s/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					> version: s/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: c
					> version: s/c/h/aƿ
					TRYING: c
					> version: s/ch/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: c
					> version: s/ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: s/ch/e/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: c
					> version: s/ch/e/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ew
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ew
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: c
					> version: s/ch/o/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ow
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ow
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/e/aw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				s/s/e/a/w(CCVVC)
ss/e/a/w(CVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/e/aw(CVV)
ss/ea/w(CVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/eaw(CV)
ss/ea/w(CVC)
s/s/eaw(CCV)
ss/eaw(CV)
s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> ch, _, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCCVV : 2___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', 'w']
				adding dashed alternative: ['c', 'h', '_', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/h/_/a/w(CCAVC)
c/h/_/aw(CCAV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h/aw', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/au(CCV)
s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', 'aw']
				s/c/a/w(CCVC)
s/c/aw(CCV)
s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					> version: s/c/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/ea/ƿ(CCVC)
s/c/ea/ƿ(CCVC)
s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/eu(CCV)
s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', 'ew']
				s/c/e/w(CCVC)
s/c/ew(CCV)
s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ']
				s/h/æ(CCV)
s/h/_/æ(CCAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/h/_/æ/ƿ(CCAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					> version: s/h/a/uw
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'uw']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
s/h/au/w(CCVC)
s/h/_/a/u/w(CCAVAC)
s/h/_/a/u/w(CCAVAC)
s/h/_/au/w(CCAVC)
s/h/_/a/uw(CCAVV)
s/h/_/au/w(CCAVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: a
					> version: s/h/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/h/_/a/ƿ(CCAVC)
s/h/_/aƿ(CCAV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'w']
				adding dashed alternative: ['s', 'h', '_', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/h/_/a/w(CCAVC)
s/h/_/aw(CCAV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h/aw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: e
					> version: s/h/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: ea
					> version: s/h/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/ea/ƿ(CCVC)
s/h/ea/ƿ(CCVC)
s/h/_/e/a/ƿ(CCAVVC)
s/h/_/e/aƿ(CCAVV)
s/h/_/ea/ƿ(CCAVC)
s/h/_/ea/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: e
					> version: s/h/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/eu(CCAV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h/eu', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/h/_/e/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/h/_/e/w(CCAVC)
s/h/_/ew(CCAV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h/ew', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: o
					> version: s/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h/o', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: h
					> version: s/c/h/aƿ
					TRYING: h
					> version: s/ch/a/ƿ
					TRYING: a
					> version: s/ch/aƿ
					TRYING: aƿ
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch/aƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: h
					> version: s/ch/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: h
					> version: s/ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch/aw', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aw']
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: h
					> version: s/ch/e/ƿ
					TRYING: e
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: h
					> version: s/ch/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: h
					> version: s/ch/ew
					TRYING: ew
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch/ew', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ew']
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: h
					> version: s/ch/o/w
					TRYING: o
					> version: s/c/h/ow
					TRYING: h
					> version: s/ch/ow
					TRYING: ow
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch/o', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch/ow', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/e/a/w
					TRYING: e
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/e/aw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/e/aw
					TRYING: e
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
s/_/_/s/e/a/w(CAACVVC)
ss/_/_/e/a/w(CAAVVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/e/aw(CAACVV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/e/aw(CAAVV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/eaw(CAACV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/eaw(CAAV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
ss/_/_/eaw(CAAV)
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'a', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'aw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'aw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', '_', 'ew']
				s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
s/_/_/s/e/w(CAACVC)
ss/_/_/e/w(CAAVC)
s/_/_/s/ew(CAACV)
ss/_/_/ew(CAAV)
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ew']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((w))$'}
			___CCCVV : 3___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/_/a/w
					TRYING: a
					> version: c/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> aw, e, a
					RESULT:  ['a']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_/aw', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				_____REMOVING________['c', 'h', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/_/a/w
					TRYING: a
					> version: s/c/_/aw
					TRYING: aw
					adding blocked set: V = V >> aw, au, e, a
					RESULT:  ['a']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((a))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_/aw', 'rgx': '((s))/((c))/((_))/((a))$'}
				_____REMOVING________['s', 'c', '_', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/_/e/a/ƿ
					TRYING: e
					> version: s/c/_/e/aƿ
					TRYING: e
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, e, a, ea
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, e, a, ea
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (3)
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/eu
					TRYING: eu
					adding blocked set: V = V >> au, e, a, eu
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_/eu', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/_/e/w
					TRYING: e
					> version: s/c/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, au, e, a
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_/ew', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ew']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_']
				s/c/w(CCC)
s/c/w/_(CCCA)
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/æ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ']
				s/h/_/æ(CCAV)
s/h/_/_/æ(CCAAV)
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ']
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ', 'ƿ']
				s/h/_/æ/ƿ(CCAVC)
s/h/_/_/æ/ƿ(CCAAVC)
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/au/w
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: s/h/_/a/uw
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: s/h/_/au/w
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/_/a/ƿ
					TRYING: a
					> version: s/h/_/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_/aƿ', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/h/_/a/w
					TRYING: a
					> version: s/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_/aw', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/_/e/a/ƿ
					TRYING: e
					> version: s/h/_/e/aƿ
					TRYING: e
					> version: s/h/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/h/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (3)
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_/eu', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/_/e/w
					TRYING: e
					> version: s/h/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_/ew', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/h/_/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/h/_/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', '_', 'ow']
				s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
s/h/_/_/o/w(CCAAVC)
s/h/_/_/ow(CCAAV)
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'o', 'w']
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_/ow', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ow']
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (2)
					> version: s/c/h/a/ƿ
					TRYING: a
					> version: s/c/h/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h/aƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (2)
					> version: s/c/h/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h/aw', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: schew
					resolving (2)
					> version: s/c/h/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h/ew', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				ANALYSING: schow
					resolving (2)
					> version: s/c/h/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/c/h/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'c', 'h', '_', 'ow']
				s/c/h/o/w(CCCVC)
s/c/h/ow(CCCV)
s/c/h/_/o/w(CCCAVC)
s/c/h/_/ow(CCCAV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h/o', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h/ow', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['s', 'c', 'h', '_', 'o', 'w']
				{'string': 's/c/h/_', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				version split: ['s', 'c', 'h', '_', 'ow']
				{'string': 's/c/h/_', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/_/s/e/a/w
					TRYING: s
					> version: ss/_/_/e/a/w
					TRYING: e
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/e/aw
					TRYING: s
					> version: s/_/_/s/ea/w
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/e/aw
					TRYING: e
					> version: ss/_/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/ea/w
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/_/s/eaw
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					RESULT:  ['e']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'aw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/_/_/s/e/w
					TRYING: s
					> version: ss/_/_/e/w
					TRYING: e
					> version: s/_/_/s/ew
					TRYING: s
					> version: ss/_/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'w']
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ew']
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_/ew', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ew']
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))$'}
			___CCCVV : 4___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', '_', 'w']
				c/h/_/a/w(CCAVC)
c/h/_/a/_/w(CCAVAC)
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a/w', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['c', 'h', '_', 'a', 'w']
				version split: ['c', 'h', '_', 'a', '_', 'w']
				{'string': 'c/h/_/a/_/w', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['c', 'h', '_', 'a', '_', 'w']
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/c/_/a/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/c/_/au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', '_', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', '_', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au', '_']
				s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
s/c/_/a/_/u(CCAVAA)
s/c/_/a/_/u(CCAVAA)
s/c/_/au/_(CCAVA)
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'au']
				version split: ['s', 'c', '_', 'a', '_', 'u']
				{'string': 's/c/_/a/_/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', '_', 'u']
				version split: ['s', 'c', '_', 'a', '_', 'u']
				{'string': 's/c/_/a/_/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', '_', 'u']
				version split: ['s', 'c', '_', 'au', '_']
				{'string': 's/c/_/au/_', 'rgx': '((s))/((c))/((_))/((au)|(a))/((_))$'}
				ANALYSING: scaw
					resolving (1)
					> version: s/c/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', '_', 'w']
				s/c/_/a/w(CCAVC)
s/c/_/a/_/w(CCAVAC)
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a/w', 'rgx': '((s))/((c))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'w']
				version split: ['s', 'c', '_', 'a', '_', 'w']
				{'string': 's/c/_/a/_/w', 'rgx': '((s))/((c))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', '_', 'w']
				ANALYSING: sceaƿ
					resolving (2)
					> version: s/c/_/e/a/ƿ
					TRYING: a
					adding blocked set: V = V >> aƿ, _, u, a
					> version: s/c/_/e/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> aƿ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'aƿ']
				s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/e/_/a/ƿ(CCAVAVC)
s/c/_/e/_/aƿ(CCAVAV)
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e/a/ƿ', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e/aƿ', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'aƿ']
				version split: ['s', 'c', '_', 'e', '_', 'a', 'ƿ']
				{'string': 's/c/_/e/_/a', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', '_', 'a', 'ƿ']
				version split: ['s', 'c', '_', 'e', '_', 'aƿ']
				{'string': 's/c/_/e/_/aƿ', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', '_', 'aƿ']
				ANALYSING: sceu
					resolving (2)
					> version: s/c/_/e/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/c/_/e/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'u']
				s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/e/_/u(CCAVAA)
s/c/_/e/_/u(CCAVAA)
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', '_', 'u']
				{'string': 's/c/_/e/_/u', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', '_', 'u']
				version split: ['s', 'c', '_', 'e', '_', 'u']
				{'string': 's/c/_/e/_/u', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', '_', 'u']
				ANALYSING: scew
					resolving (1)
					> version: s/c/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'w']
				s/c/_/e/w(CCAVC)
s/c/_/e/_/w(CCAVAC)
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e/w', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'w']
				version split: ['s', 'c', '_', 'e', '_', 'w']
				{'string': 's/c/_/e/_/w', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', '_', 'w']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_', '_']
				s/c/w/_(CCCA)
s/c/w/_/_(CCCAA)
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'w', '_']
				version split: ['s', 'c', 'w', '_', '_']
				{'string': 's/c/w/_/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', '_', 'ƿ']
				s/_/_/e/ƿ(CAAVC)
s/_/_/e/_/ƿ(CAAVAC)
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e/ƿ', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', '_', 'ƿ']
				{'string': 's/_/_/e/_/ƿ', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', '_', 'ƿ']
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/_/æ
					TRYING: æ
					adding blocked set: V = V >> aƿ, æ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ']
				s/h/_/_/æ(CCAAV)
s/h/_/_/_/æ(CCAAAV)
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ']
				version split: ['s', 'h', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/_/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> aƿ, æ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				s/h/_/_/æ/ƿ(CCAAVC)
s/h/_/_/_/æ/ƿ(CCAAAVC)
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/æ/ƿ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (5)
					> version: s/h/_/a/u/w
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/h/_/a/u/w
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/h/_/au/w
					TRYING: w
					> version: s/h/_/a/uw
					TRYING: uw
					adding blocked set: V = V >> aƿ, _, u, uw
					> version: s/h/_/au/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'au', '_', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'uw']
				adding dashed alternative: ['s', 'h', '_', 'au', '_', 'w']
				s/h/_/a/u/w(CCAVAC)
s/h/_/a/u/w(CCAVAC)
s/h/_/au/w(CCAVC)
s/h/_/a/uw(CCAVV)
s/h/_/au/w(CCAVC)
s/h/_/a/_/u/w(CCAVAAC)
s/h/_/a/_/u/w(CCAVAAC)
s/h/_/au/_/w(CCAVAC)
s/h/_/a/_/uw(CCAVAV)
s/h/_/au/_/w(CCAVAC)
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a/uw', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'uw']
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				version split: ['s', 'h', '_', 'a', '_', 'u', 'w']
				{'string': 's/h/_/a/_/u', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', '_', 'u', 'w']
				version split: ['s', 'h', '_', 'a', '_', 'u', 'w']
				{'string': 's/h/_/a/_/u', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', '_', 'u', 'w']
				version split: ['s', 'h', '_', 'au', '_', 'w']
				{'string': 's/h/_/au/_/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', '_', 'w']
				version split: ['s', 'h', '_', 'a', '_', 'uw']
				{'string': 's/h/_/a/_/uw', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', '_', 'uw']
				version split: ['s', 'h', '_', 'au', '_', 'w']
				{'string': 's/h/_/au/_/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'au', '_', 'w']
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/_/a/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'ƿ']
				s/h/_/a/ƿ(CCAVC)
s/h/_/a/_/ƿ(CCAVAC)
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a/ƿ', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'a', '_', 'ƿ']
				{'string': 's/h/_/a/_/ƿ', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', '_', 'ƿ']
				ANALYSING: shaw
					resolving (1)
					> version: s/h/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'w']
				s/h/_/a/w(CCAVC)
s/h/_/a/_/w(CCAVAC)
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a/w', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'w']
				version split: ['s', 'h', '_', 'a', '_', 'w']
				{'string': 's/h/_/a/_/w', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', '_', 'w']
				ANALYSING: sheaƿ
					resolving (2)
					> version: s/h/_/e/a/ƿ
					TRYING: a
					adding blocked set: V = V >> aƿ, _, u, a
					> version: s/h/_/e/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> aƿ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'aƿ']
				s/h/_/e/a/ƿ(CCAVVC)
s/h/_/e/aƿ(CCAVV)
s/h/_/e/_/a/ƿ(CCAVAVC)
s/h/_/e/_/aƿ(CCAVAV)
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e/a/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e/aƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'aƿ']
				version split: ['s', 'h', '_', 'e', '_', 'a', 'ƿ']
				{'string': 's/h/_/e/_/a', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'e', '_', 'aƿ']
				{'string': 's/h/_/e/_/aƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'aƿ']
				ANALYSING: sheu
					resolving (2)
					> version: s/h/_/e/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					> version: s/h/_/e/u
					TRYING: u
					adding blocked set: V = V >> aƿ, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'u']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'u']
				s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/e/_/u(CCAVAA)
s/h/_/e/_/u(CCAVAA)
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'e', '_', 'u']
				{'string': 's/h/_/e/_/u', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'u']
				version split: ['s', 'h', '_', 'e', '_', 'u']
				{'string': 's/h/_/e/_/u', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'u']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'ƿ']
				s/h/_/e/ƿ(CCAVC)
s/h/_/e/_/ƿ(CCAVAC)
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', '_', 'ƿ']
				{'string': 's/h/_/e/_/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'ƿ']
				ANALYSING: shew
					resolving (1)
					> version: s/h/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'w']
				s/h/_/e/w(CCAVC)
s/h/_/e/_/w(CCAVAC)
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e/w', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'w']
				version split: ['s', 'h', '_', 'e', '_', 'w']
				{'string': 's/h/_/e/_/w', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', '_', 'w']
				ANALYSING: show
					resolving (2)
					> version: s/h/_/_/o/w
					TRYING: o
					adding blocked set: V = V >> aƿ, _, u, o
					> version: s/h/_/_/ow
					TRYING: ow
					adding blocked set: V = V >> aƿ, ow, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'ow']
				s/h/_/_/o/w(CCAAVC)
s/h/_/_/ow(CCAAV)
s/h/_/_/_/o/w(CCAAAVC)
s/h/_/_/_/ow(CCAAAV)
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/o/w', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'o', 'w']
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_/ow', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'ow']
				version split: ['s', 'h', '_', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/_/o', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'o', 'w']
				version split: ['s', 'h', '_', '_', '_', 'ow']
				{'string': 's/h/_/_/_/ow', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'ow']
				ANALYSING: schaƿ
					resolving (1)
					> version: s/c/h/a/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'a', '_', 'ƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/a/_/ƿ(CCCVAC)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h/a/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'a', '_', 'ƿ']
				{'string': 's/c/h/a/_/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', '_', 'ƿ']
				ANALYSING: schaw
					resolving (1)
					> version: s/c/h/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'a', '_', 'w']
				s/c/h/a/w(CCCVC)
s/c/h/a/_/w(CCCVAC)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h/a/w', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['s', 'c', 'h', 'a', '_', 'w']
				{'string': 's/c/h/a/_/w', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', '_', 'w']
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
s/c/h/e/_/ƿ(CCCVAC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['s', 'c', 'h', 'e', '_', 'ƿ']
				{'string': 's/c/h/e/_/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', '_', 'ƿ']
				ANALYSING: schew
					resolving (1)
					> version: s/c/h/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'w']
				s/c/h/e/w(CCCVC)
s/c/h/e/_/w(CCCVAC)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h/e/w', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['s', 'c', 'h', 'e', '_', 'w']
				{'string': 's/c/h/e/_/w', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', '_', 'w']
				ANALYSING: schow
					resolving (2)
					> version: s/c/h/_/o/w
					TRYING: o
					adding blocked set: V = V >> aƿ, _, u, o
					> version: s/c/h/_/ow
					TRYING: ow
					adding blocked set: V = V >> aƿ, ow, _, u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'c', 'h', '_', '_', 'ow']
				s/c/h/_/o/w(CCCAVC)
s/c/h/_/ow(CCCAV)
s/c/h/_/_/o/w(CCCAAVC)
s/c/h/_/_/ow(CCCAAV)
				version split: ['s', 'c', 'h', '_', 'o', 'w']
				{'string': 's/c/h/_/o/w', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'o', 'w']
				version split: ['s', 'c', 'h', '_', 'ow']
				{'string': 's/c/h/_/ow', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'ow']
				version split: ['s', 'c', 'h', '_', '_', 'o', 'w']
				{'string': 's/c/h/_/_/o', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', '_', 'o', 'w']
				version split: ['s', 'c', 'h', '_', '_', 'ow']
				{'string': 's/c/h/_/_/ow', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'h', '_', '_', 'ow']
				ANALYSING: sseaw
					resolving (2)
					> version: ss/_/_/e/a/w
					TRYING: a
					adding blocked set: V = V >> aƿ, _, u, a
					> version: ss/_/_/e/aw
					TRYING: aw
					adding blocked set: V = V >> aƿ, aw, _, u
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', '_', 'e', '_', 'a', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', '_', 'aw']
				ss/_/_/e/a/w(CAAVVC)
ss/_/_/e/aw(CAAVV)
ss/_/_/e/_/a/w(CAAVAVC)
ss/_/_/e/_/aw(CAAVAV)
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e/a/w', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e/aw', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'aw']
				version split: ['ss', '_', '_', 'e', '_', 'a', 'w']
				{'string': 'ss/_/_/e/_/a', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', '_', 'a', 'w']
				version split: ['ss', '_', '_', 'e', '_', 'aw']
				{'string': 'ss/_/_/e/_/aw', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', '_', 'aw']
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', '_', 'e', '_', 'w']
				ss/_/_/e/w(CAAVC)
ss/_/_/e/_/w(CAAVAC)
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e/w', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'w']
				version split: ['ss', '_', '_', 'e', '_', 'w']
				{'string': 'ss/_/_/e/_/w', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', '_', 'w']
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'w', 'e', '_']
				ss/_/w/e(CACV)
ss/_/w/e/_(CACVA)
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['ss', '_', 'w', 'e', '_']
				{'string': 'ss/_/w/e/_', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'c', '_', 'au', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'c', 'w', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['ss', '_', 'w', 'e', '_']
		SPLIT: ['s', 'c', 'h', 'a', 'u']
		SPLIT: ['s', 'c', 'h', 'e', 'aƿ']
		SPLIT: ['s', 'c', 'h', 'e', 'u']
		SPLIT: ["['ch', 'c']", "['h']", "['_']", "['a']", "['_']"]
		SPLIT: ['s', 'c', '_', 'au', '_']
		['s', 'c', '_', 'au', '_']
		SPLIT: ["['s']", "['c']", "['_']", "['a']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['c']", "['_']", "['e']", "['_']"]
		SPLIT: ['s', 'c', 'w', '_', '_']
		['s', 'c', 'w', '_', '_']
		SPLIT: ["['s']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['au', 'a']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['a']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['a']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['a']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['a']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['e']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['e']", "['_']"]
		SPLIT: ["['s']", "['ch', 'c']", "['h']", "['_']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ["['s']", "['_']", "['_']", "['e']", "['_']"]
		SPLIT: ['ss', '_', 'w', 'e', '_']
		['ss', '_', 'w', 'e', '_']
		version for pattern CCCVV is INVALID
		[{'aƿ', '_', 'u'}]
		23
		OVERVIEW: version for pattern CCCVV
{'aƿ', '_', 'u'}
faulty splits: 23
['ch', 'c']['h']['']['a'][''] <-! chaw
['s']['c']['']['a'][''] <-! scaw
['s']['c']['']['e'][''] <-! sceaƿ
['s']['c']['']['e'][''] <-! sceu
['s']['c']['']['e'][''] <-! scew
['s']['']['']['e'][''] <-! seƿ
['s']['h'][''][''][''] <-! shæ
['s']['h'][''][''][''] <-! shæƿ
['s']['h']['']['au', 'a'][''] <-! shauw
['s']['h']['']['a'][''] <-! shaƿ
['s']['h']['']['a'][''] <-! shaw
['s']['h']['']['e'][''] <-! sheaƿ
['s']['h']['']['e'][''] <-! sheu
['s']['h']['']['e'][''] <-! sheƿ
['s']['h']['']['e'][''] <-! shew
['s']['h'][''][''][''] <-! show
['s']['ch', 'c']['h']['a'][''] <-! schaƿ
['s']['ch', 'c']['h']['a'][''] <-! schaw
['s']['ch', 'c']['h']['e'][''] <-! scheƿ
['s']['ch', 'c']['h']['e'][''] <-! schew
['s']['ch', 'c']['h'][''][''] <-! schow
['s']['']['']['e'][''] <-! sseaw
['s']['']['']['e'][''] <-! ssew
s | c | h | a | u
s | c | h | e | aƿ
s | c | h | e | u
['ch', 'c'] | ['h'] | ['_'] | ['a'] | ['_']
s | c | _ | au | _
['s'] | ['c'] | ['_'] | ['a'] | ['_']
['s'] | ['c'] | ['_'] | ['e'] | ['_']
['s'] | ['c'] | ['_'] | ['e'] | ['_']
['s'] | ['c'] | ['_'] | ['e'] | ['_']
s | c | w | _ | _
['s'] | ['_'] | ['_'] | ['e'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['au', 'a'] | ['_']
['s'] | ['h'] | ['_'] | ['a'] | ['_']
['s'] | ['h'] | ['_'] | ['a'] | ['_']
['s'] | ['h'] | ['_'] | ['e'] | ['_']
['s'] | ['h'] | ['_'] | ['e'] | ['_']
['s'] | ['h'] | ['_'] | ['e'] | ['_']
['s'] | ['h'] | ['_'] | ['e'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['a'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['a'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['e'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['e'] | ['_']
['s'] | ['ch', 'c'] | ['h'] | ['_'] | ['_']
['s'] | ['_'] | ['_'] | ['e'] | ['_']
['s'] | ['_'] | ['_'] | ['e'] | ['_']
ss | _ | w | e | _
1 : {'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 'w', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
2 : {'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'}
3 : {'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'e', '_', 'o', 'a', 'au'},{'e', '_', 'o', 'a', 'au'}
4 : {'aƿ', '_', 'u'},{'aƿ', '_', 'u', 'a'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u'},{'aƿ', 'ow', '_', 'u'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u', 'o'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u', 'uw'},{'aƿ', '_', 'u', 'o'},{'aƿ', '_', 'u'},{'aƿ', 'æ', '_', 'u'},{'aƿ', '_', 'u'},{'aƿ', '_', 'u', 'a'},{'aƿ', '_', 'u', 'a'},{'aƿ', 'ow', '_', 'u'},{'aƿ', 'æ', '_', 'u'},{'aƿ', 'aw', '_', 'u'},{'aƿ', '_', 'u'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCVCC
	Selection for pattern: CCVCC completed
	Making a version for pattern: CCVCC
			___CCVCC : 0___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					> version: s/c/h/a/u
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/u
					TRYING: s
					> version: s/ch/a/u
					TRYING: s
					> version: s/c/h/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/ƿ
					TRYING: s
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/w
					TRYING: s
					> version: s/c/h/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				ANALYSING: scheaƿ
					resolving (32)
					> version: s/c/h/e/a/ƿ
					TRYING: s
					> version: s/c/h/e/aƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/a/ƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/aƿ
					TRYING: s
					> version: s/c/h/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ea/ƿ
					TRYING: s
					> version: sc/h/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ea/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'a', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'e', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'aƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'a', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'aƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sch', 'ea', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				version split: ['sc', 'h', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ea', 'ƿ']
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					> version: s/c/h/e/u
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/u
					TRYING: s
					> version: s/ch/e/u
					TRYING: s
					> version: s/c/h/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/w
					TRYING: s
					> version: s/c/h/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/o/w
					TRYING: s
					> version: s/c/h/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCVCC : 1___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					> version: ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					> version: s/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: s/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					> version: s/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					> version: s/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: c
					> version: s/c/h/a/u
					TRYING: c
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/au
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/au
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: c
					> version: s/c/h/aƿ
					TRYING: c
					> version: s/ch/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: c
					> version: s/ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: c
					> version: s/c/h/e/aƿ
					TRYING: c
					> version: s/ch/e/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ea/ƿ
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ea/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: c
					> version: s/c/h/e/u
					TRYING: c
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/eu
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/eu
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: s/ch/e/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: c
					> version: s/ch/e/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ew
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ew
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: c
					> version: s/ch/o/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ow
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ow
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/e/aw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				s/s/e/a/w(CCVVC)
ss/e/a/w(CVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/e/aw(CVV)
ss/ea/w(CVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/eaw(CV)
ss/ea/w(CVC)
s/s/eaw(CCV)
ss/eaw(CV)
s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> ch, _, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCVCC : 2___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: aw
					adding blocked set: V = V >> aw, a
					RESULT:  ['a']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a', 'rgx': '((ch)|(c))/((h))/((a))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c/h/aw', 'rgx': '((ch)|(c))/((h))/((a))$'}
				_____REMOVING________['c', 'h', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((au)|(a))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((au)|(a))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((au)|(a))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					adding blocked set: V = V >> aw, au, a
					RESULT:  ['a']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((a))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((a))$'}
				_____REMOVING________['s', 'c', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, a, ea
					> version: s/c/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, a, ea
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((e))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((e))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((e))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((e))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					adding blocked set: V = V >> au, e, a, eu
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((e))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((e))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((e))$'}
				_____REMOVING________['s', 'c', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					adding blocked set: V = V >> ew, au, e, a
					RESULT:  ['e']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((e))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((e))$'}
				_____REMOVING________['s', 'c', 'ew']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'w']
				s/c/w(CCC)
s/c/_/w(CCAC)
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['s', 'c', '_', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ']
				s/h/æ(CCV)
s/h/_/æ(CCAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/h/_/æ/ƿ(CCAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: a
					> version: s/h/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((a))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h/aƿ', 'rgx': '((s))/((h))/((a))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((a))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h/aw', 'rgx': '((s))/((h))/((a))$'}
				_____REMOVING________['s', 'h', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: e
					> version: s/h/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/h/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((e))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((e))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: e
					> version: s/h/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h/eu', 'rgx': '((s))/((h))/((e))$'}
				_____REMOVING________['s', 'h', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((e))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h/ew', 'rgx': '((s))/((h))/((e))$'}
				_____REMOVING________['s', 'h', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/h/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h/o', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: h
					> version: s/c/h/a/u
					TRYING: h
					> version: s/ch/a/u
					TRYING: a
					> version: s/ch/a/u
					TRYING: a
					> version: s/c/h/au
					TRYING: h
					> version: s/ch/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's/ch/au', 'rgx': '((s))/((ch)|(c))/((au)|(a))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: h
					> version: s/c/h/aƿ
					TRYING: h
					> version: s/ch/a/ƿ
					TRYING: a
					> version: s/ch/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((a))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch/aƿ', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: h
					> version: s/ch/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: h
					> version: s/ch/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((a))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch/aw', 'rgx': '((s))/((ch)|(c))/((a))$'}
				_____REMOVING________['s', 'ch', 'aw']
				ANALYSING: scheaƿ
					resolving (8)
					> version: s/c/h/e/a/ƿ
					TRYING: h
					> version: s/c/h/e/aƿ
					TRYING: h
					> version: s/ch/e/a/ƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/e/aƿ
					TRYING: e
					> version: s/c/h/ea/ƿ
					TRYING: h
					> version: s/ch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/ch/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'a', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'e', 'aƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				version split: ['s', 'c', 'h', 'ea', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				version split: ['s', 'ch', 'ea', 'ƿ']
				{'string': 's/ch/ea', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'ch', 'ea', 'ƿ']
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: h
					> version: s/c/h/e/u
					TRYING: h
					> version: s/ch/e/u
					TRYING: e
					> version: s/ch/e/u
					TRYING: e
					> version: s/c/h/eu
					TRYING: h
					> version: s/ch/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch/eu', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'ch', 'eu']
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: h
					> version: s/ch/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: h
					> version: s/ch/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: h
					> version: s/ch/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((e))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch/ew', 'rgx': '((s))/((ch)|(c))/((e))$'}
				_____REMOVING________['s', 'ch', 'ew']
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: h
					> version: s/ch/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/c/h/ow
					TRYING: h
					> version: s/ch/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', 'o', 'w']
				adding dashed alternative: ['s', 'ch', '_', 'o', 'w']
				adding dashed alternative: ['s', 'c', '_', 'h', 'ow']
				adding dashed alternative: ['s', 'ch', '_', 'ow']
				s/c/h/o/w(CCCVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
s/ch/ow(CCV)
s/c/_/h/o/w(CCACVC)
s/ch/_/o/w(CCAVC)
s/c/_/h/ow(CCACV)
s/ch/_/ow(CCAV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch/o', 'rgx': '((s))/((ch)|(c))/((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch/ow', 'rgx': '((s))/((ch)|(c))/((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['s', 'c', '_', 'h', 'o', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((ch)|(c))/((_))$'}
				version split: ['s', 'ch', '_', 'o', 'w']
				{'string': 's/ch/_', 'rgx': '((s))/((ch)|(c))/((_))$'}
				version split: ['s', 'c', '_', 'h', 'ow']
				{'string': 's/c/_', 'rgx': '((s))/((ch)|(c))/((_))$'}
				version split: ['s', 'ch', '_', 'ow']
				{'string': 's/ch/_', 'rgx': '((s))/((ch)|(c))/((_))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/s/e/a/w
					TRYING: s
					> version: ss/_/e/a/w
					TRYING: e
					> version: s/_/s/eaw
					TRYING: s
					> version: s/_/s/e/aw
					TRYING: s
					> version: s/_/s/ea/w
					TRYING: s
					> version: ss/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/e/aw
					TRYING: e
					> version: ss/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/s/eaw
					TRYING: s
					> version: s/_/s/eaw
					TRYING: s
					> version: s/_/s/ea/w
					TRYING: s
					> version: ss/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/s/eaw
					TRYING: s
					> version: ss/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					RESULT:  ['e']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((e))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'e', 'aw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((e))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					> version: ss/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((e))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((e))$'}
				_____REMOVING________['ss', '_', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', '_', 'w', 'e']
				s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
s/_/_/s/w/e(CAACCV)
ss/_/_/w/e(CAACV)
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
			___CCVCC : 3___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a/w', 'rgx': '((ch)|(c))/((h))/((a))/((w))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: u
					> version: s/c/a/u
					TRYING: u
					> version: s/c/au
					RESULT:  ['u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((au)|(a))/((u))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((au)|(a))/((u))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'c', 'au']
				ANALYSING: scaw
					resolving (1)
					> version: s/c/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a/w', 'rgx': '((s))/((c))/((a))/((w))$'}
				ANALYSING: sceaƿ
					resolving (2)
					> version: s/c/e/a/ƿ
					TRYING: a
					> version: s/c/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', 'e', '_', 'aƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/e/_/a/ƿ(CCVAVC)
s/c/e/_/aƿ(CCVAV)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e/a', 'rgx': '((s))/((c))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e/aƿ', 'rgx': '((s))/((c))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'e', '_', 'a', 'ƿ']
				{'string': 's/c/e/_', 'rgx': '((s))/((c))/((e))/((_))$'}
				version split: ['s', 'c', 'e', '_', 'aƿ']
				{'string': 's/c/e/_', 'rgx': '((s))/((c))/((e))/((_))$'}
				ANALYSING: sceu
					resolving (2)
					> version: s/c/e/u
					TRYING: u
					> version: s/c/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((e))/((u))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((e))/((u))$'}
				ANALYSING: scew
					resolving (1)
					> version: s/c/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e/w', 'rgx': '((s))/((c))/((e))/((w))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', '_', 'w']
				{'string': 's/c/_/w', 'rgx': '((s))/((c))/((_))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e/ƿ', 'rgx': '((s))/((_))/((e))/((ƿ))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ']
				s/h/_/æ(CCAV)
s/h/_/_/æ(CCAAV)
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ']
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ', 'ƿ']
				s/h/_/æ/ƿ(CCAVC)
s/h/_/_/æ/ƿ(CCAAVC)
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a/ƿ', 'rgx': '((s))/((h))/((a))/((ƿ))$'}
				ANALYSING: shaw
					resolving (1)
					> version: s/h/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a/w', 'rgx': '((s))/((h))/((a))/((w))$'}
				ANALYSING: sheaƿ
					resolving (2)
					> version: s/h/e/a/ƿ
					TRYING: a
					> version: s/h/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', 'e', '_', 'aƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/e/_/a/ƿ(CCVAVC)
s/h/e/_/aƿ(CCVAV)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e/a', 'rgx': '((s))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e/aƿ', 'rgx': '((s))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'e', '_', 'a', 'ƿ']
				{'string': 's/h/e/_', 'rgx': '((s))/((h))/((e))/((_))$'}
				version split: ['s', 'h', 'e', '_', 'aƿ']
				{'string': 's/h/e/_', 'rgx': '((s))/((h))/((e))/((_))$'}
				ANALYSING: sheu
					resolving (2)
					> version: s/h/e/u
					TRYING: u
					> version: s/h/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((e))/((u))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((e))/((u))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e/ƿ', 'rgx': '((s))/((h))/((e))/((ƿ))$'}
				ANALYSING: shew
					resolving (1)
					> version: s/h/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e/w', 'rgx': '((s))/((h))/((e))/((w))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/_/o/w
					TRYING: o
					> version: s/h/_/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', '_', 'ow']
				s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
s/h/_/_/o/w(CCAAVC)
s/h/_/_/ow(CCAAV)
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'o', 'w']
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_/ow', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ow']
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: schau
					resolving (3)
					> version: s/ch/a/u
					TRYING: u
					> version: s/ch/a/u
					TRYING: u
					> version: s/ch/au
					RESULT:  ['u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch/au', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'ch', 'au']
				ANALYSING: schaƿ
					resolving (1)
					> version: s/ch/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a/ƿ', 'rgx': '((s))/((ch)|(c))/((a))/((ƿ))$'}
				ANALYSING: schaw
					resolving (1)
					> version: s/ch/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a/w', 'rgx': '((s))/((ch)|(c))/((a))/((w))$'}
				ANALYSING: scheaƿ
					resolving (2)
					> version: s/ch/e/a/ƿ
					TRYING: a
					> version: s/ch/e/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'e', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'ch', 'e', '_', 'aƿ']
				s/ch/e/a/ƿ(CCVVC)
s/ch/e/aƿ(CCVV)
s/ch/e/_/a/ƿ(CCVAVC)
s/ch/e/_/aƿ(CCVAV)
				version split: ['s', 'ch', 'e', 'a', 'ƿ']
				{'string': 's/ch/e/a', 'rgx': '((s))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', 'aƿ']
				{'string': 's/ch/e/aƿ', 'rgx': '((s))/((ch)|(c))/((e))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'aƿ']
				version split: ['s', 'ch', 'e', '_', 'a', 'ƿ']
				{'string': 's/ch/e/_', 'rgx': '((s))/((ch)|(c))/((e))/((_))$'}
				version split: ['s', 'ch', 'e', '_', 'aƿ']
				{'string': 's/ch/e/_', 'rgx': '((s))/((ch)|(c))/((e))/((_))$'}
				ANALYSING: scheu
					resolving (2)
					> version: s/ch/e/u
					TRYING: u
					> version: s/ch/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((e))/((u))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((e))/((u))$'}
				ANALYSING: scheƿ
					resolving (1)
					> version: s/ch/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e/ƿ', 'rgx': '((s))/((ch)|(c))/((e))/((ƿ))$'}
				ANALYSING: schew
					resolving (1)
					> version: s/ch/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e/w', 'rgx': '((s))/((ch)|(c))/((e))/((w))$'}
				ANALYSING: schow
					resolving (4)
					> version: s/c/_/h/o/w
					TRYING: h
					> version: s/ch/_/o/w
					TRYING: o
					> version: s/c/_/h/ow
					TRYING: h
					> version: s/ch/_/ow
					TRYING: ow
					RESULT:  ['h']
				version split: ['s', 'c', '_', 'h', 'o', 'w']
				{'string': 's/c/_/h', 'rgx': '((s))/((ch)|(c))/((_))/((h))$'}
				version split: ['s', 'ch', '_', 'o', 'w']
				{'string': 's/ch/_/o', 'rgx': '((s))/((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['s', 'ch', '_', 'o', 'w']
				version split: ['s', 'c', '_', 'h', 'ow']
				{'string': 's/c/_/h', 'rgx': '((s))/((ch)|(c))/((_))/((h))$'}
				version split: ['s', 'ch', '_', 'ow']
				{'string': 's/ch/_/ow', 'rgx': '((s))/((ch)|(c))/((_))/((h))$'}
				_____REMOVING________['s', 'ch', '_', 'ow']
				ANALYSING: sseaw
					resolving (2)
					> version: ss/_/e/a/w
					TRYING: a
					> version: ss/_/e/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'e', '_', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', '_', 'aw']
				ss/_/e/a/w(CAVVC)
ss/_/e/aw(CAVV)
ss/_/e/_/a/w(CAVAVC)
ss/_/e/_/aw(CAVAV)
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e/a', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e/aw', 'rgx': '((s))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'aw']
				version split: ['ss', '_', 'e', '_', 'a', 'w']
				{'string': 'ss/_/e/_', 'rgx': '((s))/((_))/((e))/((_))$'}
				version split: ['ss', '_', 'e', '_', 'aw']
				{'string': 'ss/_/e/_', 'rgx': '((s))/((_))/((e))/((_))$'}
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e/w', 'rgx': '((s))/((_))/((e))/((w))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, w, h, u, ƿ
					> version: ss/_/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', '_', 's', 'w', 'e']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((w))$'}
				_____REMOVING________['s', '_', '_', 's', 'w', 'e']
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/w', 'rgx': '((s))/((_))/((_))/((w))$'}
			___CCVCC : 4___
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/a/w
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', 'a', 'w', '_']
				c/h/a/w(CCVC)
c/h/a/w/_(CCVCA)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a/w', 'rgx': '((ch)|(c))/((h))/((a))/((w))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'a', 'w', '_']
				{'string': 'c/h/a/w/_', 'rgx': '((ch)|(c))/((h))/((a))/((w))/((_))$'}
				ANALYSING: scau
					resolving (2)
					> version: s/c/a/u
					> version: s/c/a/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'a', 'u', '_']
				adding dashed alternative: ['s', 'c', 'a', 'u', '_']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/a/u/_(CCVAA)
s/c/a/u/_(CCVAA)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a/u', 'rgx': '((s))/((c))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u', '_']
				{'string': 's/c/a/u/_', 'rgx': '((s))/((c))/((au)|(a))/((u))/((_))$'}
				version split: ['s', 'c', 'a', 'u', '_']
				{'string': 's/c/a/u/_', 'rgx': '((s))/((c))/((au)|(a))/((u))/((_))$'}
				ANALYSING: scaw
					resolving (1)
					> version: s/c/a/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'a', 'w', '_']
				s/c/a/w(CCVC)
s/c/a/w/_(CCVCA)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a/w', 'rgx': '((s))/((c))/((a))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'a', 'w', '_']
				{'string': 's/c/a/w/_', 'rgx': '((s))/((c))/((a))/((w))/((_))$'}
				ANALYSING: sceaƿ
					resolving (2)
					> version: s/c/e/_/a/ƿ
					TRYING: a
					> version: s/c/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', 'e', '_', '_', 'aƿ']
				s/c/e/_/a/ƿ(CCVAVC)
s/c/e/_/aƿ(CCVAV)
s/c/e/_/_/a/ƿ(CCVAAVC)
s/c/e/_/_/aƿ(CCVAAV)
				version split: ['s', 'c', 'e', '_', 'a', 'ƿ']
				{'string': 's/c/e/_/a/ƿ', 'rgx': '((s))/((c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'e', '_', 'a', 'ƿ']
				version split: ['s', 'c', 'e', '_', 'aƿ']
				{'string': 's/c/e/_/aƿ', 'rgx': '((s))/((c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'e', '_', 'aƿ']
				version split: ['s', 'c', 'e', '_', '_', 'a', 'ƿ']
				{'string': 's/c/e/_/_/a', 'rgx': '((s))/((c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'e', '_', '_', 'a', 'ƿ']
				version split: ['s', 'c', 'e', '_', '_', 'aƿ']
				{'string': 's/c/e/_/_/aƿ', 'rgx': '((s))/((c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'e', '_', '_', 'aƿ']
				ANALYSING: sceu
					resolving (2)
					> version: s/c/e/u
					> version: s/c/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'e', 'u', '_']
				adding dashed alternative: ['s', 'c', 'e', 'u', '_']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/e/u/_(CCVAA)
s/c/e/u/_(CCVAA)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e/u', 'rgx': '((s))/((c))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u', '_']
				{'string': 's/c/e/u/_', 'rgx': '((s))/((c))/((e))/((u))/((_))$'}
				version split: ['s', 'c', 'e', 'u', '_']
				{'string': 's/c/e/u/_', 'rgx': '((s))/((c))/((e))/((u))/((_))$'}
				ANALYSING: scew
					resolving (1)
					> version: s/c/e/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'e', 'w', '_']
				s/c/e/w(CCVC)
s/c/e/w/_(CCVCA)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e/w', 'rgx': '((s))/((c))/((e))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'e', 'w', '_']
				{'string': 's/c/e/w/_', 'rgx': '((s))/((c))/((e))/((w))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/_/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'w', '_']
				s/c/_/w(CCAC)
s/c/_/w/_(CCACA)
				version split: ['s', 'c', '_', 'w']
				{'string': 's/c/_/w', 'rgx': '((s))/((c))/((_))/((w))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'w']
				version split: ['s', 'c', '_', 'w', '_']
				{'string': 's/c/_/w/_', 'rgx': '((s))/((c))/((_))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ', '_']
				s/_/e/ƿ(CAVC)
s/_/e/ƿ/_(CAVCA)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e/ƿ', 'rgx': '((s))/((_))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ', '_']
				{'string': 's/_/e/ƿ/_', 'rgx': '((s))/((_))/((e))/((ƿ))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/_/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ']
				s/h/_/_/æ(CCAAV)
s/h/_/_/_/æ(CCAAAV)
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ']
				version split: ['s', 'h', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/_/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				s/h/_/_/æ/ƿ(CCAAVC)
s/h/_/_/_/æ/ƿ(CCAAAVC)
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/æ/ƿ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/a/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'a', 'ƿ', '_']
				s/h/a/ƿ(CCVC)
s/h/a/ƿ/_(CCVCA)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a/ƿ', 'rgx': '((s))/((h))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'a', 'ƿ', '_']
				{'string': 's/h/a/ƿ/_', 'rgx': '((s))/((h))/((a))/((ƿ))/((_))$'}
				ANALYSING: shaw
					resolving (1)
					> version: s/h/a/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'a', 'w', '_']
				s/h/a/w(CCVC)
s/h/a/w/_(CCVCA)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a/w', 'rgx': '((s))/((h))/((a))/((w))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'a', 'w', '_']
				{'string': 's/h/a/w/_', 'rgx': '((s))/((h))/((a))/((w))/((_))$'}
				ANALYSING: sheaƿ
					resolving (2)
					> version: s/h/e/_/a/ƿ
					TRYING: a
					> version: s/h/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', 'e', '_', '_', 'aƿ']
				s/h/e/_/a/ƿ(CCVAVC)
s/h/e/_/aƿ(CCVAV)
s/h/e/_/_/a/ƿ(CCVAAVC)
s/h/e/_/_/aƿ(CCVAAV)
				version split: ['s', 'h', 'e', '_', 'a', 'ƿ']
				{'string': 's/h/e/_/a/ƿ', 'rgx': '((s))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'e', '_', 'a', 'ƿ']
				version split: ['s', 'h', 'e', '_', 'aƿ']
				{'string': 's/h/e/_/aƿ', 'rgx': '((s))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'e', '_', 'aƿ']
				version split: ['s', 'h', 'e', '_', '_', 'a', 'ƿ']
				{'string': 's/h/e/_/_/a', 'rgx': '((s))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'e', '_', '_', 'a', 'ƿ']
				version split: ['s', 'h', 'e', '_', '_', 'aƿ']
				{'string': 's/h/e/_/_/aƿ', 'rgx': '((s))/((h))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'e', '_', '_', 'aƿ']
				ANALYSING: sheu
					resolving (2)
					> version: s/h/e/u
					> version: s/h/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'e', 'u', '_']
				adding dashed alternative: ['s', 'h', 'e', 'u', '_']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/e/u/_(CCVAA)
s/h/e/u/_(CCVAA)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e/u', 'rgx': '((s))/((h))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u', '_']
				{'string': 's/h/e/u/_', 'rgx': '((s))/((h))/((e))/((u))/((_))$'}
				version split: ['s', 'h', 'e', 'u', '_']
				{'string': 's/h/e/u/_', 'rgx': '((s))/((h))/((e))/((u))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'e', 'ƿ', '_']
				s/h/e/ƿ(CCVC)
s/h/e/ƿ/_(CCVCA)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e/ƿ', 'rgx': '((s))/((h))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', 'h', 'e', 'ƿ', '_']
				{'string': 's/h/e/ƿ/_', 'rgx': '((s))/((h))/((e))/((ƿ))/((_))$'}
				ANALYSING: shew
					resolving (1)
					> version: s/h/e/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'e', 'w', '_']
				s/h/e/w(CCVC)
s/h/e/w/_(CCVCA)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e/w', 'rgx': '((s))/((h))/((e))/((w))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'e', 'w', '_']
				{'string': 's/h/e/w/_', 'rgx': '((s))/((h))/((e))/((w))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/_/_/o/w
					TRYING: o
					> version: s/h/_/_/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'ow']
				s/h/_/_/o/w(CCAAVC)
s/h/_/_/ow(CCAAV)
s/h/_/_/_/o/w(CCAAAVC)
s/h/_/_/_/ow(CCAAAV)
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/o/w', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'o', 'w']
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_/ow', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'ow']
				version split: ['s', 'h', '_', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/_/o', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'o', 'w']
				version split: ['s', 'h', '_', '_', '_', 'ow']
				{'string': 's/h/_/_/_/ow', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'ow']
				ANALYSING: schau
					resolving (2)
					> version: s/ch/a/u
					> version: s/ch/a/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'a', 'u', '_']
				adding dashed alternative: ['s', 'ch', 'a', 'u', '_']
				s/ch/a/u(CCVC)
s/ch/a/u(CCVV)
s/ch/a/u/_(CCVAA)
s/ch/a/u/_(CCVAA)
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a/u', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u', '_']
				{'string': 's/ch/a/u/_', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))/((_))$'}
				version split: ['s', 'ch', 'a', 'u', '_']
				{'string': 's/ch/a/u/_', 'rgx': '((s))/((ch)|(c))/((au)|(a))/((u))/((_))$'}
				ANALYSING: schaƿ
					resolving (1)
					> version: s/ch/a/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'a', 'ƿ', '_']
				s/ch/a/ƿ(CCVC)
s/ch/a/ƿ/_(CCVCA)
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a/ƿ', 'rgx': '((s))/((ch)|(c))/((a))/((ƿ))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ', '_']
				{'string': 's/ch/a/ƿ/_', 'rgx': '((s))/((ch)|(c))/((a))/((ƿ))/((_))$'}
				ANALYSING: schaw
					resolving (1)
					> version: s/ch/a/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'a', 'w', '_']
				s/ch/a/w(CCVC)
s/ch/a/w/_(CCVCA)
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a/w', 'rgx': '((s))/((ch)|(c))/((a))/((w))/((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w', '_']
				{'string': 's/ch/a/w/_', 'rgx': '((s))/((ch)|(c))/((a))/((w))/((_))$'}
				ANALYSING: scheaƿ
					resolving (2)
					> version: s/ch/e/_/a/ƿ
					TRYING: a
					> version: s/ch/e/_/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'e', '_', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'ch', 'e', '_', '_', 'aƿ']
				s/ch/e/_/a/ƿ(CCVAVC)
s/ch/e/_/aƿ(CCVAV)
s/ch/e/_/_/a/ƿ(CCVAAVC)
s/ch/e/_/_/aƿ(CCVAAV)
				version split: ['s', 'ch', 'e', '_', 'a', 'ƿ']
				{'string': 's/ch/e/_/a/ƿ', 'rgx': '((s))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', '_', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', '_', 'aƿ']
				{'string': 's/ch/e/_/aƿ', 'rgx': '((s))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', '_', 'aƿ']
				version split: ['s', 'ch', 'e', '_', '_', 'a', 'ƿ']
				{'string': 's/ch/e/_/_/a', 'rgx': '((s))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', '_', '_', 'a', 'ƿ']
				version split: ['s', 'ch', 'e', '_', '_', 'aƿ']
				{'string': 's/ch/e/_/_/aƿ', 'rgx': '((s))/((ch)|(c))/((e))/((_))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', '_', '_', 'aƿ']
				ANALYSING: scheu
					resolving (2)
					> version: s/ch/e/u
					> version: s/ch/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'e', 'u', '_']
				adding dashed alternative: ['s', 'ch', 'e', 'u', '_']
				s/ch/e/u(CCVC)
s/ch/e/u(CCVV)
s/ch/e/u/_(CCVAA)
s/ch/e/u/_(CCVAA)
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e/u', 'rgx': '((s))/((ch)|(c))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u', '_']
				{'string': 's/ch/e/u/_', 'rgx': '((s))/((ch)|(c))/((e))/((u))/((_))$'}
				version split: ['s', 'ch', 'e', 'u', '_']
				{'string': 's/ch/e/u/_', 'rgx': '((s))/((ch)|(c))/((e))/((u))/((_))$'}
				ANALYSING: scheƿ
					resolving (1)
					> version: s/ch/e/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'e', 'ƿ', '_']
				s/ch/e/ƿ(CCVC)
s/ch/e/ƿ/_(CCVCA)
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e/ƿ', 'rgx': '((s))/((ch)|(c))/((e))/((ƿ))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ', '_']
				{'string': 's/ch/e/ƿ/_', 'rgx': '((s))/((ch)|(c))/((e))/((ƿ))/((_))$'}
				ANALYSING: schew
					resolving (1)
					> version: s/ch/e/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ch', 'e', 'w', '_']
				s/ch/e/w(CCVC)
s/ch/e/w/_(CCVCA)
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e/w', 'rgx': '((s))/((ch)|(c))/((e))/((w))/((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w', '_']
				{'string': 's/ch/e/w/_', 'rgx': '((s))/((ch)|(c))/((e))/((w))/((_))$'}
				ANALYSING: schow
					resolving (2)
					> version: s/c/_/h/o/w
					TRYING: o
					> version: s/c/_/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'c', '_', 'h', '_', 'ow']
				s/c/_/h/o/w(CCACVC)
s/c/_/h/ow(CCACV)
s/c/_/h/_/o/w(CCACAVC)
s/c/_/h/_/ow(CCACAV)
				version split: ['s', 'c', '_', 'h', 'o', 'w']
				{'string': 's/c/_/h/o/w', 'rgx': '((s))/((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'o', 'w']
				version split: ['s', 'c', '_', 'h', 'ow']
				{'string': 's/c/_/h/ow', 'rgx': '((s))/((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', 'ow']
				version split: ['s', 'c', '_', 'h', '_', 'o', 'w']
				{'string': 's/c/_/h/_/o', 'rgx': '((s))/((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'o', 'w']
				version split: ['s', 'c', '_', 'h', '_', 'ow']
				{'string': 's/c/_/h/_/ow', 'rgx': '((s))/((ch)|(c))/((_))/((h))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'h', '_', 'ow']
				ANALYSING: sseaw
					resolving (2)
					> version: ss/_/e/_/a/w
					TRYING: a
					> version: ss/_/e/_/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'e', '_', '_', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', '_', '_', 'aw']
				ss/_/e/_/a/w(CAVAVC)
ss/_/e/_/aw(CAVAV)
ss/_/e/_/_/a/w(CAVAAVC)
ss/_/e/_/_/aw(CAVAAV)
				version split: ['ss', '_', 'e', '_', 'a', 'w']
				{'string': 'ss/_/e/_/a/w', 'rgx': '((s))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', '_', 'a', 'w']
				version split: ['ss', '_', 'e', '_', 'aw']
				{'string': 'ss/_/e/_/aw', 'rgx': '((s))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', '_', 'aw']
				version split: ['ss', '_', 'e', '_', '_', 'a', 'w']
				{'string': 'ss/_/e/_/_/a', 'rgx': '((s))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', '_', '_', 'a', 'w']
				version split: ['ss', '_', 'e', '_', '_', 'aw']
				{'string': 'ss/_/e/_/_/aw', 'rgx': '((s))/((_))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', '_', '_', 'aw']
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/e/w
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'e', 'w', '_']
				ss/_/e/w(CAVC)
ss/_/e/w/_(CAVCA)
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e/w', 'rgx': '((s))/((_))/((e))/((w))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['ss', '_', 'e', 'w', '_']
				{'string': 'ss/_/e/w/_', 'rgx': '((s))/((_))/((e))/((w))/((_))$'}
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/_/w/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', '_', 'w', '_', 'e']
				ss/_/_/w/e(CAACV)
ss/_/_/w/_/e(CAACAV)
				version split: ['ss', '_', '_', 'w', 'e']
				{'string': 'ss/_/_/w/e', 'rgx': '((s))/((_))/((_))/((w))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'w', 'e']
				version split: ['ss', '_', '_', 'w', '_', 'e']
				{'string': 'ss/_/_/w/_/e', 'rgx': '((s))/((_))/((_))/((w))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'w', '_', 'e']
		FAIL: 
		only one version left: ['c', 'h', 'a', 'w', '_']
		only one version left: ['s', 'c', 'a', 'u', '_']
		only one version left: ['s', 'c', 'a', 'w', '_']
		FAIL: 
		only one version left: ['s', 'c', 'e', 'u', '_']
		only one version left: ['s', 'c', 'e', 'w', '_']
		only one version left: ['s', 'c', '_', 'w', '_']
		only one version left: ['s', '_', 'e', 'ƿ', '_']
		FAIL: 
		FAIL: 
		only one version left: ['s', 'h', 'a', 'ƿ', '_']
		only one version left: ['s', 'h', 'a', 'w', '_']
		FAIL: 
		only one version left: ['s', 'h', 'e', 'u', '_']
		only one version left: ['s', 'h', 'e', 'ƿ', '_']
		only one version left: ['s', 'h', 'e', 'w', '_']
		FAIL: 
		only one version left: ['s', 'ch', 'a', 'u', '_']
		only one version left: ['s', 'ch', 'a', 'ƿ', '_']
		only one version left: ['s', 'ch', 'a', 'w', '_']
		FAIL: 
		only one version left: ['s', 'ch', 'e', 'u', '_']
		only one version left: ['s', 'ch', 'e', 'ƿ', '_']
		only one version left: ['s', 'ch', 'e', 'w', '_']
		FAIL: 
		FAIL: 
		only one version left: ['ss', '_', 'e', 'w', '_']
		FAIL: 
		SPLIT: ['s', 'h', 'a', 'u', 'w']
		SPLIT: ['c', 'h', 'a', 'w', '_']
		['c', 'h', 'a', 'w', '_']
		SPLIT: ['s', 'c', 'a', 'u', '_']
		['s', 'c', 'a', 'u', '_']
		['s', 'c', 'a', 'u', '_']
		SPLIT: ['s', 'c', 'a', 'w', '_']
		['s', 'c', 'a', 'w', '_']
		SPLIT: ["['s']", "['c']", "['e']", "['_']", "['_']"]
		SPLIT: ['s', 'c', 'e', 'u', '_']
		['s', 'c', 'e', 'u', '_']
		['s', 'c', 'e', 'u', '_']
		SPLIT: ['s', 'c', 'e', 'w', '_']
		['s', 'c', 'e', 'w', '_']
		SPLIT: ['s', 'c', '_', 'w', '_']
		['s', 'c', '_', 'w', '_']
		SPLIT: ['s', '_', 'e', 'ƿ', '_']
		['s', '_', 'e', 'ƿ', '_']
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ['s', 'h', 'a', 'ƿ', '_']
		['s', 'h', 'a', 'ƿ', '_']
		SPLIT: ['s', 'h', 'a', 'w', '_']
		['s', 'h', 'a', 'w', '_']
		SPLIT: ["['s']", "['h']", "['e']", "['_']", "['_']"]
		SPLIT: ['s', 'h', 'e', 'u', '_']
		['s', 'h', 'e', 'u', '_']
		['s', 'h', 'e', 'u', '_']
		SPLIT: ['s', 'h', 'e', 'ƿ', '_']
		['s', 'h', 'e', 'ƿ', '_']
		SPLIT: ['s', 'h', 'e', 'w', '_']
		['s', 'h', 'e', 'w', '_']
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ['s', 'ch', 'a', 'u', '_']
		['s', 'ch', 'a', 'u', '_']
		['s', 'ch', 'a', 'u', '_']
		SPLIT: ['s', 'ch', 'a', 'ƿ', '_']
		['s', 'ch', 'a', 'ƿ', '_']
		SPLIT: ['s', 'ch', 'a', 'w', '_']
		['s', 'ch', 'a', 'w', '_']
		SPLIT: ["['s']", "['ch', 'c']", "['e']", "['_']", "['_']"]
		SPLIT: ['s', 'ch', 'e', 'u', '_']
		['s', 'ch', 'e', 'u', '_']
		['s', 'ch', 'e', 'u', '_']
		SPLIT: ['s', 'ch', 'e', 'ƿ', '_']
		['s', 'ch', 'e', 'ƿ', '_']
		SPLIT: ['s', 'ch', 'e', 'w', '_']
		['s', 'ch', 'e', 'w', '_']
		SPLIT: ["['s']", "['ch', 'c']", "['_']", "['h']", "['_']"]
		SPLIT: ["['s']", "['_']", "['e']", "['_']", "['_']"]
		SPLIT: ['ss', '_', 'e', 'w', '_']
		['ss', '_', 'e', 'w', '_']
		SPLIT: ["['s']", "['_']", "['_']", "['w']", "['_']"]
		version for pattern CCVCC is INVALID
		[]
		9
		OVERVIEW: version for pattern CCVCC

faulty splits: 9
['s']['c']['e'][''][''] <-! sceaƿ
['s']['h'][''][''][''] <-! shæ
['s']['h'][''][''][''] <-! shæƿ
['s']['h']['e'][''][''] <-! sheaƿ
['s']['h'][''][''][''] <-! show
['s']['ch', 'c']['e'][''][''] <-! scheaƿ
['s']['ch', 'c']['']['h'][''] <-! schow
['s']['']['e'][''][''] <-! sseaw
['s']['']['']['w'][''] <-! sswe
s | h | a | u | w
c | h | a | w | _
s | c | a | u | _
s | c | a | w | _
['s'] | ['c'] | ['e'] | ['_'] | ['_']
s | c | e | u | _
s | c | e | w | _
s | c | _ | w | _
s | _ | e | ƿ | _
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_']
s | h | a | ƿ | _
s | h | a | w | _
['s'] | ['h'] | ['e'] | ['_'] | ['_']
s | h | e | u | _
s | h | e | ƿ | _
s | h | e | w | _
['s'] | ['h'] | ['_'] | ['_'] | ['_']
s | ch | a | u | _
s | ch | a | ƿ | _
s | ch | a | w | _
['s'] | ['ch', 'c'] | ['e'] | ['_'] | ['_']
s | ch | e | u | _
s | ch | e | ƿ | _
s | ch | e | w | _
['s'] | ['ch', 'c'] | ['_'] | ['h'] | ['_']
['s'] | ['_'] | ['e'] | ['_'] | ['_']
ss | _ | e | w | _
['s'] | ['_'] | ['_'] | ['w'] | ['_']
1 : {'ch', '_', 's', 'h', 'c'},{'ch', '_', 'w', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
2 : {'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'e', '_', 'o', 'a', 'au'},{'e', '_', 'o', 'a', 'au'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCVVC
	Selection for pattern: CCCVVC completed
	Making a version for pattern: CCCVVC
			___CCCVVC : 0___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					> version: s/h/a/u/w
					TRYING: s
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: s/h/a/uw
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					> version: s/c/h/a/u
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/u
					TRYING: s
					> version: s/ch/a/u
					TRYING: s
					> version: s/c/h/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/au
					TRYING: s
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'au']
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					> version: s/c/h/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/ƿ
					TRYING: s
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aƿ
					TRYING: s
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/a/w
					TRYING: s
					> version: s/c/h/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/aw
					TRYING: s
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'aw']
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					> version: s/c/h/e/u
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/u
					TRYING: s
					> version: s/ch/e/u
					TRYING: s
					> version: s/c/h/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/eu
					TRYING: s
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/ƿ
					TRYING: s
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/e/w
					TRYING: s
					> version: s/c/h/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ew
					TRYING: s
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/o/w
					TRYING: s
					> version: s/c/h/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: s/ch/ow
					TRYING: s
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> s, sch, ch, c
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((s))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'h', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCCVVC : 1___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					> version: ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					> version: s/h/a/uw
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					> version: s/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: s/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					> version: s/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					> version: s/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: c
					> version: s/c/h/a/u
					TRYING: c
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/a/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/au
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/au
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: c
					> version: s/c/h/aƿ
					TRYING: c
					> version: s/ch/a/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: c
					> version: s/ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: c
					> version: s/c/h/e/u
					TRYING: c
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/e/u
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/eu
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/eu
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: c
					> version: s/ch/e/ƿ
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: c
					> version: s/ch/e/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ew
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ew
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: c
					> version: s/ch/o/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/c/h/ow
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: s/ch/ow
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c', 'rgx': '((s))/((ch)|(c))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch', 'rgx': '((s))/((ch)|(c))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/e/aw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				s/s/e/a/w(CCVVC)
ss/e/a/w(CVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/e/aw(CVV)
ss/ea/w(CVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/eaw(CV)
ss/ea/w(CVC)
s/s/eaw(CCV)
ss/eaw(CV)
s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> ch, _, s, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> ch, _, w, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCCVVC : 2___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', 'w']
				adding dashed alternative: ['c', 'h', '_', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/h/_/a/w(CCAVC)
c/h/_/aw(CCAV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h/aw', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/au(CCV)
s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', 'aw']
				s/c/a/w(CCVC)
s/c/aw(CCV)
s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					> version: s/c/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/ea/ƿ(CCVC)
s/c/ea/ƿ(CCVC)
s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/eu(CCV)
s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', 'ew']
				s/c/e/w(CCVC)
s/c/ew(CCV)
s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ']
				s/h/æ(CCV)
s/h/_/æ(CCAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/h/_/æ/ƿ(CCAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					> version: s/h/a/uw
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'uw']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
s/h/au/w(CCVC)
s/h/_/a/u/w(CCAVAC)
s/h/_/a/u/w(CCAVAC)
s/h/_/au/w(CCAVC)
s/h/_/a/uw(CCAVV)
s/h/_/au/w(CCAVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: a
					> version: s/h/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/h/_/a/ƿ(CCAVC)
s/h/_/aƿ(CCAV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'w']
				adding dashed alternative: ['s', 'h', '_', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/h/_/a/w(CCAVC)
s/h/_/aw(CCAV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h/aw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: e
					> version: s/h/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: ea
					> version: s/h/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/ea/ƿ(CCVC)
s/h/ea/ƿ(CCVC)
s/h/_/e/a/ƿ(CCAVVC)
s/h/_/e/aƿ(CCAVV)
s/h/_/ea/ƿ(CCAVC)
s/h/_/ea/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: e
					> version: s/h/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/eu(CCAV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h/eu', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/h/_/e/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/h/_/e/w(CCAVC)
s/h/_/ew(CCAV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h/ew', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: o
					> version: s/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h/o', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: schau
					resolving (6)
					> version: s/c/h/a/u
					TRYING: h
					> version: s/c/h/a/u
					TRYING: h
					> version: s/ch/a/u
					TRYING: a
					> version: s/ch/a/u
					TRYING: a
					> version: s/c/h/au
					TRYING: h
					> version: s/ch/au
					TRYING: au
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'au']
				{'string': 's/ch/au', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'au']
				ANALYSING: schaƿ
					resolving (4)
					> version: s/c/h/a/ƿ
					TRYING: h
					> version: s/c/h/aƿ
					TRYING: h
					> version: s/ch/a/ƿ
					TRYING: a
					> version: s/ch/aƿ
					TRYING: aƿ
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's/ch/aƿ', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				ANALYSING: schaw
					resolving (4)
					> version: s/c/h/a/w
					TRYING: h
					> version: s/ch/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: h
					> version: s/ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's/ch/a', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'aw']
				{'string': 's/ch/aw', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'aw']
				ANALYSING: scheu
					resolving (6)
					> version: s/c/h/e/u
					TRYING: h
					> version: s/c/h/e/u
					TRYING: h
					> version: s/ch/e/u
					TRYING: e
					> version: s/ch/e/u
					TRYING: e
					> version: s/c/h/eu
					TRYING: h
					> version: s/ch/eu
					TRYING: eu
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'eu']
				{'string': 's/ch/eu', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'eu']
				ANALYSING: scheƿ
					resolving (2)
					> version: s/c/h/e/ƿ
					TRYING: h
					> version: s/ch/e/ƿ
					TRYING: e
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				ANALYSING: schew
					resolving (4)
					> version: s/c/h/e/w
					TRYING: h
					> version: s/ch/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: h
					> version: s/ch/ew
					TRYING: ew
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's/ch/e', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'ew']
				{'string': 's/ch/ew', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ew']
				ANALYSING: schow
					resolving (4)
					> version: s/c/h/o/w
					TRYING: h
					> version: s/ch/o/w
					TRYING: o
					> version: s/c/h/ow
					TRYING: h
					> version: s/ch/ow
					TRYING: ow
					RESULT:  ['h']
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's/ch/o', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h', 'rgx': '((s))/((ch)|(c))/((h))$'}
				version split: ['s', 'ch', 'ow']
				{'string': 's/ch/ow', 'rgx': '((s))/((ch)|(c))/((h))$'}
				_____REMOVING________['s', 'ch', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/e/a/w
					TRYING: e
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/e/aw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/e/aw
					TRYING: e
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
s/_/_/s/e/a/w(CAACVVC)
ss/_/_/e/a/w(CAAVVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/e/aw(CAACVV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/e/aw(CAAVV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/eaw(CAACV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/eaw(CAAV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
ss/_/_/eaw(CAAV)
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'a', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'aw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'aw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', '_', 'ew']
				s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
s/_/_/s/e/w(CAACVC)
ss/_/_/e/w(CAAVC)
s/_/_/s/ew(CAACV)
ss/_/_/ew(CAAV)
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ew']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((w))$'}
			___CCCVVC : 3___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/_/a/w
					TRYING: a
					> version: c/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> aw, e
					RESULT:  ['a']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_/aw', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				_____REMOVING________['c', 'h', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((au)|(a))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/_/a/w
					TRYING: a
					> version: s/c/_/aw
					TRYING: aw
					adding blocked set: V = V >> aw, au, e, a
					RESULT:  ['a']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((a))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_/aw', 'rgx': '((s))/((c))/((_))/((a))$'}
				_____REMOVING________['s', 'c', '_', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/_/e/a/ƿ
					TRYING: e
					> version: s/c/_/e/aƿ
					TRYING: e
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, e, a, ea
					> version: s/c/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> au, e, a, ea
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (3)
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/eu
					TRYING: eu
					adding blocked set: V = V >> au, e, a, eu
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_/eu', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/_/e/w
					TRYING: e
					> version: s/c/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, au, e, a
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_/ew', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ew']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_']
				s/c/w(CCC)
s/c/w/_(CCCA)
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/æ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ']
				s/h/_/æ(CCAV)
s/h/_/_/æ(CCAAV)
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ']
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, a, au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ', 'ƿ']
				s/h/_/æ/ƿ(CCAVC)
s/h/_/_/æ/ƿ(CCAAVC)
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/au/w
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: s/h/_/a/uw
					TRYING: a
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					> version: s/h/_/au/w
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((au)|(a))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/_/a/ƿ
					TRYING: a
					> version: s/h/_/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_/aƿ', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/h/_/a/w
					TRYING: a
					> version: s/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_/aw', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/_/e/a/ƿ
					TRYING: e
					> version: s/h/_/e/aƿ
					TRYING: e
					> version: s/h/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/h/_/ea/ƿ
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (3)
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_/eu', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/_/e/w
					TRYING: e
					> version: s/h/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_/ew', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/h/_/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/h/_/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', '_', 'ow']
				s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
s/h/_/_/o/w(CCAAVC)
s/h/_/_/ow(CCAAV)
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'o', 'w']
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_/ow', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'ow']
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: schau
					resolving (3)
					> version: s/c/h/a/u
					TRYING: a
					> version: s/c/h/a/u
					TRYING: a
					> version: s/c/h/au
					TRYING: au
					>>> MULTIPLE RESOLVE OPTIONS: {'au', 'a'}
					RESULT:  ['au', 'a']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c/h/au', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))$'}
				ANALYSING: schaƿ
					resolving (2)
					> version: s/c/h/a/ƿ
					TRYING: a
					> version: s/c/h/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, a, aƿ, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's/c/h/aƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (2)
					> version: s/c/h/a/w
					TRYING: a
					> version: s/c/h/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, a, aw, au
					RESULT:  ['a']
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h/a', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's/c/h/aw', 'rgx': '((s))/((ch)|(c))/((h))/((a))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				ANALYSING: scheu
					resolving (3)
					> version: s/c/h/e/u
					TRYING: e
					> version: s/c/h/e/u
					TRYING: e
					> version: s/c/h/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, a, eu, au
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's/c/h/eu', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				ANALYSING: schew
					resolving (2)
					> version: s/c/h/e/w
					TRYING: e
					> version: s/c/h/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h/e', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's/c/h/ew', 'rgx': '((s))/((ch)|(c))/((h))/((e))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				ANALYSING: schow
					resolving (2)
					> version: s/c/h/o/w
					TRYING: o
					adding blocked set: V = V >> e, _, o, a, au
					> version: s/c/h/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, a, au, ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'c', 'h', '_', 'ow']
				s/c/h/o/w(CCCVC)
s/c/h/ow(CCCV)
s/c/h/_/o/w(CCCAVC)
s/c/h/_/ow(CCCAV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's/c/h/o', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's/c/h/ow', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['s', 'c', 'h', '_', 'o', 'w']
				{'string': 's/c/h/_', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				version split: ['s', 'c', 'h', '_', 'ow']
				{'string': 's/c/h/_', 'rgx': '((s))/((ch)|(c))/((h))/((_))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/_/s/e/a/w
					TRYING: s
					> version: ss/_/_/e/a/w
					TRYING: e
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/e/aw
					TRYING: s
					> version: s/_/_/s/ea/w
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/e/aw
					TRYING: e
					> version: ss/_/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/ea/w
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					> version: ss/_/_/ea/w
					TRYING: ea
					adding blocked set: V = V >> e, _, a, au, ea
					> version: s/_/_/s/eaw
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, a, au, eaw
					RESULT:  ['e']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'aw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ea', 'w']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/_/_/s/e/w
					TRYING: s
					> version: ss/_/_/e/w
					TRYING: e
					> version: s/_/_/s/ew
					TRYING: s
					> version: ss/_/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, a, au
					RESULT:  ['e']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'w']
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ew']
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_/ew', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ew']
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))$'}
			___CCCVVC : 4___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', '_', 'w']
				c/h/_/a/w(CCAVC)
c/h/_/a/_/w(CCAVAC)
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a/w', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['c', 'h', '_', 'a', 'w']
				version split: ['c', 'h', '_', 'a', '_', 'w']
				{'string': 'c/h/_/a/_', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: u
					> version: s/c/_/a/u
					TRYING: u
					> version: s/c/_/au
					RESULT:  ['u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'c', '_', 'au']
				ANALYSING: scaw
					resolving (1)
					> version: s/c/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', '_', 'w']
				s/c/_/a/w(CCAVC)
s/c/_/a/_/w(CCAVAC)
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a/w', 'rgx': '((s))/((c))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'w']
				version split: ['s', 'c', '_', 'a', '_', 'w']
				{'string': 's/c/_/a/_', 'rgx': '((s))/((c))/((_))/((a))/((_))$'}
				ANALYSING: sceaƿ
					resolving (2)
					> version: s/c/_/e/a/ƿ
					TRYING: a
					> version: s/c/_/e/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> aƿ, _, u, a
					RESULT:  ['a']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e/a', 'rgx': '((s))/((c))/((_))/((e))/((a))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e/aƿ', 'rgx': '((s))/((c))/((_))/((e))/((a))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'aƿ']
				ANALYSING: sceu
					resolving (2)
					> version: s/c/_/e/u
					TRYING: u
					> version: s/c/_/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))$'}
				ANALYSING: scew
					resolving (1)
					> version: s/c/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', '_', 'w']
				s/c/_/e/w(CCAVC)
s/c/_/e/_/w(CCAVAC)
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e/w', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'w']
				version split: ['s', 'c', '_', 'e', '_', 'w']
				{'string': 's/c/_/e/_', 'rgx': '((s))/((c))/((_))/((e))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_', '_']
				s/c/w/_(CCCA)
s/c/w/_/_(CCCAA)
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'w', '_']
				version split: ['s', 'c', 'w', '_', '_']
				{'string': 's/c/w/_/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', '_', 'ƿ']
				s/_/_/e/ƿ(CAAVC)
s/_/_/e/_/ƿ(CAAVAC)
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e/ƿ', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['s', '_', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', '_', 'ƿ']
				{'string': 's/_/_/e/_', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/_/æ
					TRYING: æ
					adding blocked set: V = V >> æ, _, u, a
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ']
				s/h/_/_/æ(CCAAV)
s/h/_/_/_/æ(CCAAAV)
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ']
				version split: ['s', 'h', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/_/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, _, u, a
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				s/h/_/_/æ/ƿ(CCAAVC)
s/h/_/_/_/æ/ƿ(CCAAAVC)
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/_/a/u/w
					TRYING: u
					> version: s/h/_/a/u/w
					TRYING: u
					> version: s/h/_/au/w
					TRYING: w
					> version: s/h/_/a/uw
					TRYING: uw
					adding blocked set: V = V >> uw, _, u, a
					> version: s/h/_/au/w
					TRYING: w
					RESULT:  ['u']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a/uw', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'uw']
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/_/a/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'ƿ']
				s/h/_/a/ƿ(CCAVC)
s/h/_/a/_/ƿ(CCAVAC)
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a/ƿ', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'a', '_', 'ƿ']
				{'string': 's/h/_/a/_', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				ANALYSING: shaw
					resolving (1)
					> version: s/h/_/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', '_', 'w']
				s/h/_/a/w(CCAVC)
s/h/_/a/_/w(CCAVAC)
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a/w', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'w']
				version split: ['s', 'h', '_', 'a', '_', 'w']
				{'string': 's/h/_/a/_', 'rgx': '((s))/((h))/((_))/((a))/((_))$'}
				ANALYSING: sheaƿ
					resolving (2)
					> version: s/h/_/e/a/ƿ
					TRYING: a
					> version: s/h/_/e/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> aƿ, _, u, a
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e/a', 'rgx': '((s))/((h))/((_))/((e))/((a))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e/aƿ', 'rgx': '((s))/((h))/((_))/((e))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'aƿ']
				ANALYSING: sheu
					resolving (2)
					> version: s/h/_/e/u
					TRYING: u
					> version: s/h/_/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'ƿ']
				s/h/_/e/ƿ(CCAVC)
s/h/_/e/_/ƿ(CCAVAC)
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', '_', 'ƿ']
				{'string': 's/h/_/e/_', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				ANALYSING: shew
					resolving (1)
					> version: s/h/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', '_', 'w']
				s/h/_/e/w(CCAVC)
s/h/_/e/_/w(CCAVAC)
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e/w', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'w']
				version split: ['s', 'h', '_', 'e', '_', 'w']
				{'string': 's/h/_/e/_', 'rgx': '((s))/((h))/((_))/((e))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/_/_/o/w
					TRYING: o
					> version: s/h/_/_/ow
					TRYING: ow
					adding blocked set: V = V >> ow, _, u, a
					RESULT:  ['o']
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/o', 'rgx': '((s))/((h))/((_))/((_))/((o))$'}
				version split: ['s', 'h', '_', '_', 'ow']
				{'string': 's/h/_/_/ow', 'rgx': '((s))/((h))/((_))/((_))/((o))$'}
				_____REMOVING________['s', 'h', '_', '_', 'ow']
				ANALYSING: schau
					resolving (3)
					> version: s/c/h/a/u
					TRYING: u
					> version: s/c/h/a/u
					TRYING: u
					> version: s/c/h/au
					RESULT:  ['u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a/u', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))$'}
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a/u', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))$'}
				version split: ['s', 'c', 'h', 'au']
				{'string': 's/c/h/au', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				ANALYSING: schaƿ
					resolving (1)
					> version: s/c/h/a/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'a', '_', 'ƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/a/_/ƿ(CCCVAC)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's/c/h/a/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'a', '_', 'ƿ']
				{'string': 's/c/h/a/_', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				ANALYSING: schaw
					resolving (1)
					> version: s/c/h/a/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'a', '_', 'w']
				s/c/h/a/w(CCCVC)
s/c/h/a/_/w(CCCVAC)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's/c/h/a/w', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['s', 'c', 'h', 'a', '_', 'w']
				{'string': 's/c/h/a/_', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))$'}
				ANALYSING: scheu
					resolving (2)
					> version: s/c/h/e/u
					TRYING: u
					> version: s/c/h/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e/u', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))$'}
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e/u', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))$'}
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
s/c/h/e/_/ƿ(CCCVAC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's/c/h/e/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['s', 'c', 'h', 'e', '_', 'ƿ']
				{'string': 's/c/h/e/_', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: schew
					resolving (1)
					> version: s/c/h/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', '_', 'w']
				s/c/h/e/w(CCCVC)
s/c/h/e/_/w(CCCVAC)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's/c/h/e/w', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['s', 'c', 'h', 'e', '_', 'w']
				{'string': 's/c/h/e/_', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))$'}
				ANALYSING: schow
					resolving (2)
					> version: s/c/h/_/o/w
					TRYING: o
					> version: s/c/h/_/ow
					TRYING: ow
					adding blocked set: V = V >> _, a, o, ow, u
					RESULT:  ['o']
				version split: ['s', 'c', 'h', '_', 'o', 'w']
				{'string': 's/c/h/_/o', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((o))$'}
				version split: ['s', 'c', 'h', '_', 'ow']
				{'string': 's/c/h/_/ow', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((o))$'}
				_____REMOVING________['s', 'c', 'h', '_', 'ow']
				ANALYSING: sseaw
					resolving (2)
					> version: ss/_/_/e/a/w
					TRYING: a
					> version: ss/_/_/e/aw
					TRYING: aw
					adding blocked set: V = V >> _, o, a, aw, u
					RESULT:  ['a']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e/a', 'rgx': '((s))/((_))/((_))/((e))/((a))$'}
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e/aw', 'rgx': '((s))/((_))/((_))/((e))/((a))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'aw']
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/_/e/w
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', '_', 'e', '_', 'w']
				ss/_/_/e/w(CAAVC)
ss/_/_/e/_/w(CAAVAC)
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e/w', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'w']
				version split: ['ss', '_', '_', 'e', '_', 'w']
				{'string': 'ss/_/_/e/_', 'rgx': '((s))/((_))/((_))/((e))/((_))$'}
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'w', 'e', '_']
				ss/_/w/e(CACV)
ss/_/w/e/_(CACVA)
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['ss', '_', 'w', 'e', '_']
				{'string': 'ss/_/w/e/_', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
			___CCCVVC : 5___
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/_/a/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['c', 'h', '_', 'a', '_', 'w']
				{'string': 'c/h/_/a/_/w', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((_))/((w))$'}
				ANALYSING: scau
					resolving (2)
					> version: s/c/_/a/u
					> version: s/c/_/a/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u', '_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u', '_']
				s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/a/u/_(CCAVAA)
s/c/_/a/u/_(CCAVAA)
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'a', 'u']
				version split: ['s', 'c', '_', 'a', 'u', '_']
				{'string': 's/c/_/a/u/_', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))/((_))$'}
				version split: ['s', 'c', '_', 'a', 'u', '_']
				{'string': 's/c/_/a/u/_', 'rgx': '((s))/((c))/((_))/((au)|(a))/((u))/((_))$'}
				ANALYSING: scaw
					resolving (1)
					> version: s/c/_/a/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', '_', 'a', '_', 'w']
				{'string': 's/c/_/a/_/w', 'rgx': '((s))/((c))/((_))/((a))/((_))/((w))$'}
				ANALYSING: sceaƿ
					resolving (1)
					> version: s/c/_/e/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e/a/ƿ', 'rgx': '((s))/((c))/((_))/((e))/((a))/((ƿ))$'}
				ANALYSING: sceu
					resolving (2)
					> version: s/c/_/e/u
					> version: s/c/_/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u', '_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u', '_']
				s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/e/u/_(CCAVAA)
s/c/_/e/u/_(CCAVAA)
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'u']
				version split: ['s', 'c', '_', 'e', 'u', '_']
				{'string': 's/c/_/e/u/_', 'rgx': '((s))/((c))/((_))/((e))/((u))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'u', '_']
				{'string': 's/c/_/e/u/_', 'rgx': '((s))/((c))/((_))/((e))/((u))/((_))$'}
				ANALYSING: scew
					resolving (1)
					> version: s/c/_/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', '_', 'e', '_', 'w']
				{'string': 's/c/_/e/_/w', 'rgx': '((s))/((c))/((_))/((e))/((_))/((w))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_', '_', '_']
				s/c/w/_/_(CCCAA)
s/c/w/_/_/_(CCCAAA)
				version split: ['s', 'c', 'w', '_', '_']
				{'string': 's/c/w/_/_', 'rgx': '((s))/((c))/((w))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'w', '_', '_']
				version split: ['s', 'c', 'w', '_', '_', '_']
				{'string': 's/c/w/_/_/_', 'rgx': '((s))/((c))/((w))/((_))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', '_', '_', 'e', '_', 'ƿ']
				{'string': 's/_/_/e/_/ƿ', 'rgx': '((s))/((_))/((_))/((e))/((_))/((ƿ))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/_/_/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', '_', 'æ']
				s/h/_/_/_/æ(CCAAAV)
s/h/_/_/_/_/æ(CCAAAAV)
				version split: ['s', 'h', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ']
				version split: ['s', 'h', '_', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/_/_/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', '_', 'æ', 'ƿ']
				s/h/_/_/_/æ/ƿ(CCAAAVC)
s/h/_/_/_/_/æ/ƿ(CCAAAAVC)
				version split: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_/æ/ƿ', 'rgx': '((s))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', '_', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (2)
					> version: s/h/_/a/u/w
					TRYING: w
					> version: s/h/_/a/u/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))/((w))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((au)|(a))/((u))/((w))$'}
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/_/a/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'a', '_', 'ƿ']
				{'string': 's/h/_/a/_/ƿ', 'rgx': '((s))/((h))/((_))/((a))/((_))/((ƿ))$'}
				ANALYSING: shaw
					resolving (1)
					> version: s/h/_/a/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'a', '_', 'w']
				{'string': 's/h/_/a/_/w', 'rgx': '((s))/((h))/((_))/((a))/((_))/((w))$'}
				ANALYSING: sheaƿ
					resolving (1)
					> version: s/h/_/e/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e/a/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((a))/((ƿ))$'}
				ANALYSING: sheu
					resolving (2)
					> version: s/h/_/e/u
					> version: s/h/_/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u', '_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u', '_']
				s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/e/u/_(CCAVAA)
s/h/_/e/u/_(CCAVAA)
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'u']
				version split: ['s', 'h', '_', 'e', 'u', '_']
				{'string': 's/h/_/e/u/_', 'rgx': '((s))/((h))/((_))/((e))/((u))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'u', '_']
				{'string': 's/h/_/e/u/_', 'rgx': '((s))/((h))/((_))/((e))/((u))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'e', '_', 'ƿ']
				{'string': 's/h/_/e/_/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((_))/((ƿ))$'}
				ANALYSING: shew
					resolving (1)
					> version: s/h/_/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'e', '_', 'w']
				{'string': 's/h/_/e/_/w', 'rgx': '((s))/((h))/((_))/((e))/((_))/((w))$'}
				ANALYSING: show
					resolving (1)
					> version: s/h/_/_/o/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', '_', 'o', 'w']
				{'string': 's/h/_/_/o/w', 'rgx': '((s))/((h))/((_))/((_))/((o))/((w))$'}
				ANALYSING: schau
					resolving (2)
					> version: s/c/h/a/u
					> version: s/c/h/a/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'a', 'u', '_']
				adding dashed alternative: ['s', 'c', 'h', 'a', 'u', '_']
				s/c/h/a/u(CCCVC)
s/c/h/a/u(CCCVV)
s/c/h/a/u/_(CCCVAA)
s/c/h/a/u/_(CCCVAA)
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a/u', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's/c/h/a/u', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u', '_']
				{'string': 's/c/h/a/u/_', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))/((_))$'}
				version split: ['s', 'c', 'h', 'a', 'u', '_']
				{'string': 's/c/h/a/u/_', 'rgx': '((s))/((ch)|(c))/((h))/((au)|(a))/((u))/((_))$'}
				ANALYSING: schaƿ
					resolving (1)
					> version: s/c/h/a/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'c', 'h', 'a', '_', 'ƿ']
				{'string': 's/c/h/a/_/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))/((ƿ))$'}
				ANALYSING: schaw
					resolving (1)
					> version: s/c/h/a/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'h', 'a', '_', 'w']
				{'string': 's/c/h/a/_/w', 'rgx': '((s))/((ch)|(c))/((h))/((a))/((_))/((w))$'}
				ANALYSING: scheu
					resolving (2)
					> version: s/c/h/e/u
					> version: s/c/h/e/u
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'u', '_']
				adding dashed alternative: ['s', 'c', 'h', 'e', 'u', '_']
				s/c/h/e/u(CCCVC)
s/c/h/e/u(CCCVV)
s/c/h/e/u/_(CCCVAA)
s/c/h/e/u/_(CCCVAA)
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e/u', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's/c/h/e/u', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))/((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u', '_']
				{'string': 's/c/h/e/u/_', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))/((_))$'}
				version split: ['s', 'c', 'h', 'e', 'u', '_']
				{'string': 's/c/h/e/u/_', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((u))/((_))$'}
				ANALYSING: scheƿ
					resolving (1)
					> version: s/c/h/e/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'c', 'h', 'e', '_', 'ƿ']
				{'string': 's/c/h/e/_/ƿ', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))/((ƿ))$'}
				ANALYSING: schew
					resolving (1)
					> version: s/c/h/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'h', 'e', '_', 'w']
				{'string': 's/c/h/e/_/w', 'rgx': '((s))/((ch)|(c))/((h))/((e))/((_))/((w))$'}
				ANALYSING: schow
					resolving (1)
					> version: s/c/h/_/o/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'h', '_', 'o', 'w']
				{'string': 's/c/h/_/o/w', 'rgx': '((s))/((ch)|(c))/((h))/((_))/((o))/((w))$'}
				ANALYSING: sseaw
					resolving (1)
					> version: ss/_/_/e/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e/a/w', 'rgx': '((s))/((_))/((_))/((e))/((a))/((w))$'}
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/_/e/_/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', '_', 'e', '_', 'w']
				{'string': 'ss/_/_/e/_/w', 'rgx': '((s))/((_))/((_))/((e))/((_))/((w))$'}
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e/_
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'w', 'e', '_', '_']
				ss/_/w/e/_(CACVA)
ss/_/w/e/_/_(CACVAA)
				version split: ['ss', '_', 'w', 'e', '_']
				{'string': 'ss/_/w/e/_', 'rgx': '((s))/((_))/((w))/((e))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e', '_']
				version split: ['ss', '_', 'w', 'e', '_', '_']
				{'string': 'ss/_/w/e/_/_', 'rgx': '((s))/((_))/((w))/((e))/((_))/((_))$'}
		FAIL: 
		only one version left: ['c', 'h', '_', 'a', '_', 'w']
		only one version left: ['s', 'c', '_', 'a', 'u', '_']
		only one version left: ['s', 'c', '_', 'a', '_', 'w']
		only one version left: ['s', 'c', '_', 'e', 'a', 'ƿ']
		only one version left: ['s', 'c', '_', 'e', 'u', '_']
		only one version left: ['s', 'c', '_', 'e', '_', 'w']
		only one version left: ['s', 'c', 'w', '_', '_', '_']
		only one version left: ['s', '_', '_', 'e', '_', 'ƿ']
		FAIL: 
		FAIL: 
		only one version left: ['s', 'h', '_', 'a', 'u', 'w']
		only one version left: ['s', 'h', '_', 'a', '_', 'ƿ']
		only one version left: ['s', 'h', '_', 'a', '_', 'w']
		only one version left: ['s', 'h', '_', 'e', 'a', 'ƿ']
		only one version left: ['s', 'h', '_', 'e', 'u', '_']
		only one version left: ['s', 'h', '_', 'e', '_', 'ƿ']
		only one version left: ['s', 'h', '_', 'e', '_', 'w']
		only one version left: ['s', 'h', '_', '_', 'o', 'w']
		only one version left: ['s', 'c', 'h', 'a', 'u', '_']
		only one version left: ['s', 'c', 'h', 'a', '_', 'ƿ']
		only one version left: ['s', 'c', 'h', 'a', '_', 'w']
		only one version left: ['s', 'c', 'h', 'e', 'u', '_']
		only one version left: ['s', 'c', 'h', 'e', '_', 'ƿ']
		only one version left: ['s', 'c', 'h', 'e', '_', 'w']
		only one version left: ['s', 'c', 'h', '_', 'o', 'w']
		only one version left: ['ss', '_', '_', 'e', 'a', 'w']
		only one version left: ['ss', '_', '_', 'e', '_', 'w']
		only one version left: ['ss', '_', 'w', 'e', '_', '_']
		SPLIT: ['s', 'c', 'h', 'e', 'a', 'ƿ']
		SPLIT: ['c', 'h', '_', 'a', '_', 'w']
		['c', 'h', '_', 'a', '_', 'w']
		SPLIT: ['s', 'c', '_', 'a', 'u', '_']
		['s', 'c', '_', 'a', 'u', '_']
		['s', 'c', '_', 'a', 'u', '_']
		SPLIT: ['s', 'c', '_', 'a', '_', 'w']
		['s', 'c', '_', 'a', '_', 'w']
		SPLIT: ['s', 'c', '_', 'e', 'a', 'ƿ']
		['s', 'c', '_', 'e', 'a', 'ƿ']
		SPLIT: ['s', 'c', '_', 'e', 'u', '_']
		['s', 'c', '_', 'e', 'u', '_']
		['s', 'c', '_', 'e', 'u', '_']
		SPLIT: ['s', 'c', '_', 'e', '_', 'w']
		['s', 'c', '_', 'e', '_', 'w']
		SPLIT: ['s', 'c', 'w', '_', '_', '_']
		['s', 'c', 'w', '_', '_', '_']
		SPLIT: ['s', '_', '_', 'e', '_', 'ƿ']
		['s', '_', '_', 'e', '_', 'ƿ']
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']", "['_']"]
		SPLIT: ['s', 'h', '_', 'a', 'u', 'w']
		['s', 'h', '_', 'a', 'u', 'w']
		['s', 'h', '_', 'a', 'u', 'w']
		SPLIT: ['s', 'h', '_', 'a', '_', 'ƿ']
		['s', 'h', '_', 'a', '_', 'ƿ']
		SPLIT: ['s', 'h', '_', 'a', '_', 'w']
		['s', 'h', '_', 'a', '_', 'w']
		SPLIT: ['s', 'h', '_', 'e', 'a', 'ƿ']
		['s', 'h', '_', 'e', 'a', 'ƿ']
		SPLIT: ['s', 'h', '_', 'e', 'u', '_']
		['s', 'h', '_', 'e', 'u', '_']
		['s', 'h', '_', 'e', 'u', '_']
		SPLIT: ['s', 'h', '_', 'e', '_', 'ƿ']
		['s', 'h', '_', 'e', '_', 'ƿ']
		SPLIT: ['s', 'h', '_', 'e', '_', 'w']
		['s', 'h', '_', 'e', '_', 'w']
		SPLIT: ['s', 'h', '_', '_', 'o', 'w']
		['s', 'h', '_', '_', 'o', 'w']
		SPLIT: ['s', 'c', 'h', 'a', 'u', '_']
		['s', 'c', 'h', 'a', 'u', '_']
		['s', 'c', 'h', 'a', 'u', '_']
		SPLIT: ['s', 'c', 'h', 'a', '_', 'ƿ']
		['s', 'c', 'h', 'a', '_', 'ƿ']
		SPLIT: ['s', 'c', 'h', 'a', '_', 'w']
		['s', 'c', 'h', 'a', '_', 'w']
		SPLIT: ['s', 'c', 'h', 'e', 'u', '_']
		['s', 'c', 'h', 'e', 'u', '_']
		['s', 'c', 'h', 'e', 'u', '_']
		SPLIT: ['s', 'c', 'h', 'e', '_', 'ƿ']
		['s', 'c', 'h', 'e', '_', 'ƿ']
		SPLIT: ['s', 'c', 'h', 'e', '_', 'w']
		['s', 'c', 'h', 'e', '_', 'w']
		SPLIT: ['s', 'c', 'h', '_', 'o', 'w']
		['s', 'c', 'h', '_', 'o', 'w']
		SPLIT: ['ss', '_', '_', 'e', 'a', 'w']
		['ss', '_', '_', 'e', 'a', 'w']
		SPLIT: ['ss', '_', '_', 'e', '_', 'w']
		['ss', '_', '_', 'e', '_', 'w']
		SPLIT: ['ss', '_', 'w', 'e', '_', '_']
		['ss', '_', 'w', 'e', '_', '_']
		version for pattern CCCVVC is INVALID
		[]
		2
		OVERVIEW: version for pattern CCCVVC

faulty splits: 2
['s']['h'][''][''][''][''] <-! shæ
['s']['h'][''][''][''][''] <-! shæƿ
s | c | h | e | a | ƿ
c | h | _ | a | _ | w
s | c | _ | a | u | _
s | c | _ | a | _ | w
s | c | _ | e | a | ƿ
s | c | _ | e | u | _
s | c | _ | e | _ | w
s | c | w | _ | _ | _
s | _ | _ | e | _ | ƿ
['s'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
s | h | _ | a | u | w
s | h | _ | a | _ | ƿ
s | h | _ | a | _ | w
s | h | _ | e | a | ƿ
s | h | _ | e | u | _
s | h | _ | e | _ | ƿ
s | h | _ | e | _ | w
s | h | _ | _ | o | w
s | c | h | a | u | _
s | c | h | a | _ | ƿ
s | c | h | a | _ | w
s | c | h | e | u | _
s | c | h | e | _ | ƿ
s | c | h | e | _ | w
s | c | h | _ | o | w
ss | _ | _ | e | a | w
ss | _ | _ | e | _ | w
ss | _ | w | e | _ | _
1 : {'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 'w', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
2 : {'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'}
3 : {'e', '_', 'o', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'o', 'a', 'au'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'}
4 : {'æ', '_', 'u', 'a'},{'æ', '_', 'u', 'a'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CVVC
	Selection for pattern: CVVC completed
	Making a version for pattern: CVVC
			___CVVC : 0___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					adding blocked set: C = C >> sc, sh, ss, c, sch
					> version: ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, sc, sh, ss, sch
					> version: c/h/aw
					TRYING: c
					adding blocked set: C = C >> sc, sh, ss, c, sch
					> version: ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', 'ch', 'aw']
				c/h/a/w(CCVC)
ch/a/w(CVC)
c/h/aw(CCV)
ch/aw(CV)
_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((_))$'}
				_____REMOVING________['ch', 'aw']
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/au
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', 's', 'c', 'au']
				adding dashed alternative: ['_', 'sc', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
sc/a/u(CVC)
sc/a/u(CVV)
s/c/au(CCV)
sc/au(CV)
_/s/c/a/u(ACCVA)
_/s/c/a/u(ACCVA)
_/sc/a/u(ACVA)
_/sc/a/u(ACVA)
_/s/c/au(ACCV)
_/sc/au(ACV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'au']
				version split: ['_', 's', 'c', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'au']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', 's', 'c', 'aw']
				adding dashed alternative: ['_', 'sc', 'aw']
				s/c/a/w(CCVC)
sc/a/w(CVC)
s/c/aw(CCV)
sc/aw(CV)
_/s/c/a/w(ACCVC)
_/sc/a/w(ACVC)
_/s/c/aw(ACCV)
_/sc/aw(ACV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'aw']
				version split: ['_', 's', 'c', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/eu
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', 's', 'c', 'eu']
				adding dashed alternative: ['_', 'sc', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
sc/e/u(CVC)
sc/e/u(CVV)
s/c/eu(CCV)
sc/eu(CV)
_/s/c/e/u(ACCVA)
_/s/c/e/u(ACCVA)
_/sc/e/u(ACVA)
_/sc/e/u(ACVA)
_/s/c/eu(ACCV)
_/sc/eu(ACV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'eu']
				version split: ['_', 's', 'c', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/c/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', 's', 'c', 'ew']
				adding dashed alternative: ['_', 'sc', 'ew']
				s/c/e/w(CCVC)
sc/e/w(CVC)
s/c/ew(CCV)
sc/ew(CV)
_/s/c/e/w(ACCVC)
_/sc/e/w(ACVC)
_/s/c/ew(ACCV)
_/sc/ew(ACV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'ew']
				version split: ['_', 's', 'c', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'w']
				adding dashed alternative: ['_', 'sc', 'w']
				s/c/w(CCC)
sc/w(CC)
_/s/c/w(ACCC)
_/sc/w(ACC)
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'w']
				version split: ['_', 's', 'c', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'w']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'e', 'ƿ']
				s/e/ƿ(CVC)
_/s/e/ƿ(ACVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ']
				adding dashed alternative: ['_', 'sh', 'æ']
				s/h/æ(CCV)
sh/æ(CV)
_/s/h/æ(ACCV)
_/sh/æ(ACV)
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ']
				version split: ['_', 's', 'h', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
sh/æ/ƿ(CVC)
_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/h/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
sh/a/ƿ(CVC)
sh/aƿ(CV)
_/s/h/a/ƿ(ACCVC)
_/s/h/aƿ(ACCV)
_/sh/a/ƿ(ACVC)
_/sh/aƿ(ACV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'aƿ']
				version split: ['_', 's', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', 's', 'h', 'aw']
				adding dashed alternative: ['_', 'sh', 'aw']
				s/h/a/w(CCVC)
sh/a/w(CVC)
s/h/aw(CCV)
sh/aw(CV)
_/s/h/a/w(ACCVC)
_/sh/a/w(ACVC)
_/s/h/aw(ACCV)
_/sh/aw(ACV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'aw']
				version split: ['_', 's', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/h/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/eu
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', 's', 'h', 'eu']
				adding dashed alternative: ['_', 'sh', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
sh/e/u(CVC)
sh/e/u(CVV)
s/h/eu(CCV)
sh/eu(CV)
_/s/h/e/u(ACCVA)
_/s/h/e/u(ACCVA)
_/sh/e/u(ACVA)
_/sh/e/u(ACVA)
_/s/h/eu(ACCV)
_/sh/eu(ACV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'eu']
				version split: ['_', 's', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sh', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
sh/e/ƿ(CVC)
_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', 's', 'h', 'ew']
				adding dashed alternative: ['_', 'sh', 'ew']
				s/h/e/w(CCVC)
sh/e/w(CVC)
s/h/ew(CCV)
sh/ew(CV)
_/s/h/e/w(ACCVC)
_/sh/e/w(ACVC)
_/s/h/ew(ACCV)
_/sh/ew(ACV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ew']
				version split: ['_', 's', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/h/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', 's', 'h', 'ow']
				adding dashed alternative: ['_', 'sh', 'ow']
				s/h/o/w(CCVC)
sh/o/w(CVC)
s/h/ow(CCV)
sh/ow(CV)
_/s/h/o/w(ACCVC)
_/sh/o/w(ACVC)
_/s/h/ow(ACCV)
_/sh/ow(ACV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((_))$'}
				_____REMOVING________['sh', 'ow']
				version split: ['_', 's', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sh', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schau
					resolving (24)
					> version: s/c/h/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/ch/a/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/au
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/au
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/au
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/au
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', 's', 'c', 'h', 'au']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', 'sch', 'au']
				adding dashed alternative: ['_', 's', 'ch', 'au']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', 'sch', 'au']
				adding dashed alternative: ['_', 'sc', 'h', 'au']
				s/c/h/a/u(CCCVC)
s/c/h/a/u(CCCVV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sch/a/u(CVC)
sch/a/u(CVV)
s/ch/a/u(CCVC)
s/ch/a/u(CCVV)
s/c/h/au(CCCV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/au(CCV)
sch/a/u(CVC)
sch/a/u(CVV)
sch/au(CV)
s/ch/au(CCV)
sc/h/a/u(CCVC)
sc/h/a/u(CCVV)
sc/h/au(CCV)
sc/h/au(CCV)
sch/au(CV)
sc/h/au(CCV)
_/s/c/h/a/u(ACCCVA)
_/s/c/h/a/u(ACCCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sch/a/u(ACVA)
_/sch/a/u(ACVA)
_/s/ch/a/u(ACCVA)
_/s/ch/a/u(ACCVA)
_/s/c/h/au(ACCCV)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/au(ACCV)
_/sch/a/u(ACVA)
_/sch/a/u(ACVA)
_/sch/au(ACV)
_/s/ch/au(ACCV)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/au(ACCV)
_/sc/h/au(ACCV)
_/sch/au(ACV)
_/sc/h/au(ACCV)
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['s', 'c', 'h', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'ch', 'a', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'u']
				version split: ['s', 'c', 'h', 'au']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'a', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'u']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'au']
				version split: ['s', 'ch', 'au']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'au']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'a', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'u']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['sch', 'au']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'au']
				version split: ['sc', 'h', 'au']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'au']
				version split: ['_', 's', 'c', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'au']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: s/c/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/a/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/aƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'aƿ']
				adding dashed alternative: ['_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', 'sch', 'aƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'aƿ']
				s/c/h/a/ƿ(CCCVC)
s/c/h/aƿ(CCCV)
sc/h/a/ƿ(CCVC)
sch/a/ƿ(CVC)
s/ch/a/ƿ(CCVC)
sc/h/aƿ(CCV)
sch/aƿ(CV)
s/ch/aƿ(CCV)
sc/h/a/ƿ(CCVC)
sc/h/a/ƿ(CCVC)
sch/a/ƿ(CVC)
sc/h/aƿ(CCV)
sc/h/aƿ(CCV)
sch/aƿ(CV)
sc/h/a/ƿ(CCVC)
sc/h/aƿ(CCV)
_/s/c/h/a/ƿ(ACCCVC)
_/s/c/h/aƿ(ACCCV)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/s/ch/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/s/ch/aƿ(ACCV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/sc/h/aƿ(ACCV)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
				version split: ['s', 'c', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'ƿ']
				version split: ['s', 'c', 'h', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['s', 'ch', 'a', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['s', 'ch', 'aƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sch', 'a', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['sch', 'aƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aƿ']
				version split: ['sc', 'h', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'ƿ']
				version split: ['sc', 'h', 'aƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aƿ']
				version split: ['_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schaw
					resolving (16)
					> version: s/c/h/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/a/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/a/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/aw
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/aw
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', 'sch', 'aw']
				adding dashed alternative: ['_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', 'sch', 'aw']
				adding dashed alternative: ['_', 'sc', 'h', 'aw']
				s/c/h/a/w(CCCVC)
sc/h/a/w(CCVC)
sch/a/w(CVC)
s/ch/a/w(CCVC)
s/c/h/aw(CCCV)
sc/h/a/w(CCVC)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sch/a/w(CVC)
sch/aw(CV)
s/ch/aw(CCV)
sc/h/a/w(CCVC)
sc/h/aw(CCV)
sc/h/aw(CCV)
sch/aw(CV)
sc/h/aw(CCV)
_/s/c/h/a/w(ACCCVC)
_/sc/h/a/w(ACCVC)
_/sch/a/w(ACVC)
_/s/ch/a/w(ACCVC)
_/s/c/h/aw(ACCCV)
_/sc/h/a/w(ACCVC)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sch/a/w(ACVC)
_/sch/aw(ACV)
_/s/ch/aw(ACCV)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sc/h/aw(ACCV)
_/sch/aw(ACV)
_/sc/h/aw(ACCV)
				version split: ['s', 'c', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['s', 'ch', 'a', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'a', 'w']
				version split: ['s', 'c', 'h', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'a', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'a', 'w']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['s', 'ch', 'aw']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'aw']
				version split: ['sc', 'h', 'a', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'a', 'w']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['sch', 'aw']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'aw']
				version split: ['sc', 'h', 'aw']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'aw']
				version split: ['_', 's', 'c', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scheu
					resolving (24)
					> version: s/c/h/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/ch/e/u
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/eu
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/u
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/eu
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/eu
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', 's', 'c', 'h', 'eu']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', 'sch', 'eu']
				adding dashed alternative: ['_', 's', 'ch', 'eu']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', 'sch', 'eu']
				adding dashed alternative: ['_', 'sc', 'h', 'eu']
				s/c/h/e/u(CCCVC)
s/c/h/e/u(CCCVV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sch/e/u(CVC)
sch/e/u(CVV)
s/ch/e/u(CCVC)
s/ch/e/u(CCVV)
s/c/h/eu(CCCV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/eu(CCV)
sch/e/u(CVC)
sch/e/u(CVV)
sch/eu(CV)
s/ch/eu(CCV)
sc/h/e/u(CCVC)
sc/h/e/u(CCVV)
sc/h/eu(CCV)
sc/h/eu(CCV)
sch/eu(CV)
sc/h/eu(CCV)
_/s/c/h/e/u(ACCCVA)
_/s/c/h/e/u(ACCCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sch/e/u(ACVA)
_/sch/e/u(ACVA)
_/s/ch/e/u(ACCVA)
_/s/ch/e/u(ACCVA)
_/s/c/h/eu(ACCCV)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/eu(ACCV)
_/sch/e/u(ACVA)
_/sch/e/u(ACVA)
_/sch/eu(ACV)
_/s/ch/eu(ACCV)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/eu(ACCV)
_/sc/h/eu(ACCV)
_/sch/eu(ACV)
_/sc/h/eu(ACCV)
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['s', 'c', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'ch', 'e', 'u']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'u']
				version split: ['s', 'c', 'h', 'eu']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'e', 'u']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'u']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['s', 'ch', 'eu']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'eu']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'e', 'u']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'u']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['sch', 'eu']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'eu']
				version split: ['sc', 'h', 'eu']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'eu']
				version split: ['_', 's', 'c', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: s/c/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/e/ƿ
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'ƿ']
				s/c/h/e/ƿ(CCCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
s/ch/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sc/h/e/ƿ(CCVC)
sch/e/ƿ(CVC)
sc/h/e/ƿ(CCVC)
_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
				version split: ['s', 'c', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['s', 'ch', 'e', 'ƿ']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['sch', 'e', 'ƿ']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'ƿ']
				version split: ['sc', 'h', 'e', 'ƿ']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schew
					resolving (16)
					> version: s/c/h/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/e/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ew
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', 'sch', 'ew']
				adding dashed alternative: ['_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', 'sch', 'ew']
				adding dashed alternative: ['_', 'sc', 'h', 'ew']
				s/c/h/e/w(CCCVC)
sc/h/e/w(CCVC)
sch/e/w(CVC)
s/ch/e/w(CCVC)
s/c/h/ew(CCCV)
sc/h/e/w(CCVC)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sch/e/w(CVC)
sch/ew(CV)
s/ch/ew(CCV)
sc/h/e/w(CCVC)
sc/h/ew(CCV)
sc/h/ew(CCV)
sch/ew(CV)
sc/h/ew(CCV)
_/s/c/h/e/w(ACCCVC)
_/sc/h/e/w(ACCVC)
_/sch/e/w(ACVC)
_/s/ch/e/w(ACCVC)
_/s/c/h/ew(ACCCV)
_/sc/h/e/w(ACCVC)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sch/e/w(ACVC)
_/sch/ew(ACV)
_/s/ch/ew(ACCV)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sc/h/ew(ACCV)
_/sch/ew(ACV)
_/sc/h/ew(ACCV)
				version split: ['s', 'c', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['s', 'ch', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'e', 'w']
				version split: ['s', 'c', 'h', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'e', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'e', 'w']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['s', 'ch', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ew']
				version split: ['sc', 'h', 'e', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'e', 'w']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['sch', 'ew']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ew']
				version split: ['sc', 'h', 'ew']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ew']
				version split: ['_', 's', 'c', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: schow
					resolving (16)
					> version: s/c/h/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/o/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: s/c/h/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/o/w
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/ch/ow
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sch/ow
					TRYING: sch
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', 'sch', 'ow']
				adding dashed alternative: ['_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', 'sch', 'ow']
				adding dashed alternative: ['_', 'sc', 'h', 'ow']
				s/c/h/o/w(CCCVC)
sc/h/o/w(CCVC)
sch/o/w(CVC)
s/ch/o/w(CCVC)
s/c/h/ow(CCCV)
sc/h/o/w(CCVC)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sch/o/w(CVC)
sch/ow(CV)
s/ch/ow(CCV)
sc/h/o/w(CCVC)
sc/h/ow(CCV)
sc/h/ow(CCV)
sch/ow(CV)
sc/h/ow(CCV)
_/s/c/h/o/w(ACCCVC)
_/sc/h/o/w(ACCVC)
_/sch/o/w(ACVC)
_/s/ch/o/w(ACCVC)
_/s/c/h/ow(ACCCV)
_/sc/h/o/w(ACCVC)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sch/o/w(ACVC)
_/sch/ow(ACV)
_/s/ch/ow(ACCV)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sc/h/ow(ACCV)
_/sch/ow(ACV)
_/sc/h/ow(ACCV)
				version split: ['s', 'c', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['s', 'ch', 'o', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'o', 'w']
				version split: ['s', 'c', 'h', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'c', 'h', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'o', 'w']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'o', 'w']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['s', 'ch', 'ow']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 'ch', 'ow']
				version split: ['sc', 'h', 'o', 'w']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'o', 'w']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['sch', 'ow']
				{'string': 'sch', 'rgx': '((_))$'}
				_____REMOVING________['sch', 'ow']
				version split: ['sc', 'h', 'ow']
				{'string': 'sc', 'rgx': '((_))$'}
				_____REMOVING________['sc', 'h', 'ow']
				version split: ['_', 's', 'c', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'c', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 'ch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sch', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', 's', 's', 'ew']
				adding dashed alternative: ['_', 'ss', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
_/s/s/e/w(ACCVC)
_/ss/e/w(ACVC)
_/s/s/ew(ACCV)
_/ss/ew(ACV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['_', 's', 's', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'e', 'w']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 's', 's', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'ew']
				{'string': '_', 'rgx': '((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> _, s, sc, sh, ss, sch
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> _, sc, sh, ss, sch
					RESULT:  ['_']
				adding dashed alternative: ['_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', 'ss', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_', 'rgx': '((_))$'}
			___CVVC : 1___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/c/h/a/w
					TRYING: c
					> version: _/ch/a/w
					TRYING: ch
					> version: _/c/h/aw
					TRYING: c
					> version: _/ch/aw
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'ch', 'aw']
				_/c/h/a/w(ACCVC)
_/ch/a/w(ACVC)
_/c/h/aw(ACCV)
_/ch/aw(ACV)
_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
				version split: ['_', 'c', 'h', 'a', 'w']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'a', 'w']
				version split: ['_', 'ch', 'a', 'w']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'a', 'w']
				version split: ['_', 'c', 'h', 'aw']
				{'string': '_/c', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'c', 'h', 'aw']
				version split: ['_', 'ch', 'aw']
				{'string': '_/ch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ch', 'aw']
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: _/s/c/a/u
					TRYING: s
					> version: _/s/c/a/u
					TRYING: s
					> version: _/sc/a/u
					TRYING: sc
					> version: _/sc/a/u
					TRYING: sc
					> version: _/s/c/au
					TRYING: s
					> version: _/sc/au
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'au']
				adding dashed alternative: ['_', '_', 'sc', 'au']
				_/s/c/a/u(ACCVA)
_/s/c/a/u(ACCVA)
_/sc/a/u(ACVA)
_/sc/a/u(ACVA)
_/s/c/au(ACCV)
_/sc/au(ACV)
_/_/s/c/a/u(AACCVA)
_/_/s/c/a/u(AACCVA)
_/_/sc/a/u(AACVA)
_/_/sc/a/u(AACVA)
_/_/s/c/au(AACCV)
_/_/sc/au(AACV)
				version split: ['_', 's', 'c', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'a', 'u']
				version split: ['_', 's', 'c', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'a', 'u']
				version split: ['_', 'sc', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'a', 'u']
				version split: ['_', 'sc', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'a', 'u']
				version split: ['_', 's', 'c', 'au']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'au']
				version split: ['_', 'sc', 'au']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'au']
				version split: ['_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: _/s/c/a/w
					TRYING: s
					> version: _/sc/a/w
					TRYING: sc
					> version: _/s/c/aw
					TRYING: s
					> version: _/sc/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'aw']
				_/s/c/a/w(ACCVC)
_/sc/a/w(ACVC)
_/s/c/aw(ACCV)
_/sc/aw(ACV)
_/_/s/c/a/w(AACCVC)
_/_/sc/a/w(AACVC)
_/_/s/c/aw(AACCV)
_/_/sc/aw(AACV)
				version split: ['_', 's', 'c', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'a', 'w']
				version split: ['_', 'sc', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'a', 'w']
				version split: ['_', 's', 'c', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'aw']
				version split: ['_', 'sc', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'aw']
				version split: ['_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sceu
					resolving (6)
					> version: _/s/c/e/u
					TRYING: s
					> version: _/s/c/e/u
					TRYING: s
					> version: _/sc/e/u
					TRYING: sc
					> version: _/sc/e/u
					TRYING: sc
					> version: _/s/c/eu
					TRYING: s
					> version: _/sc/eu
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'eu']
				adding dashed alternative: ['_', '_', 'sc', 'eu']
				_/s/c/e/u(ACCVA)
_/s/c/e/u(ACCVA)
_/sc/e/u(ACVA)
_/sc/e/u(ACVA)
_/s/c/eu(ACCV)
_/sc/eu(ACV)
_/_/s/c/e/u(AACCVA)
_/_/s/c/e/u(AACCVA)
_/_/sc/e/u(AACVA)
_/_/sc/e/u(AACVA)
_/_/s/c/eu(AACCV)
_/_/sc/eu(AACV)
				version split: ['_', 's', 'c', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'u']
				version split: ['_', 's', 'c', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'u']
				version split: ['_', 'sc', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'u']
				version split: ['_', 'sc', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'u']
				version split: ['_', 's', 'c', 'eu']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'eu']
				version split: ['_', 'sc', 'eu']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'eu']
				version split: ['_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: _/s/c/e/w
					TRYING: s
					> version: _/sc/e/w
					TRYING: sc
					> version: _/s/c/ew
					TRYING: s
					> version: _/sc/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'ew']
				_/s/c/e/w(ACCVC)
_/sc/e/w(ACVC)
_/s/c/ew(ACCV)
_/sc/ew(ACV)
_/_/s/c/e/w(AACCVC)
_/_/sc/e/w(AACVC)
_/_/s/c/ew(AACCV)
_/_/sc/ew(AACV)
				version split: ['_', 's', 'c', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'e', 'w']
				version split: ['_', 'sc', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'e', 'w']
				version split: ['_', 's', 'c', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'ew']
				version split: ['_', 'sc', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'ew']
				version split: ['_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: _/s/c/w
					TRYING: s
					> version: _/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'w']
				_/s/c/w(ACCC)
_/sc/w(ACC)
_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
				version split: ['_', 's', 'c', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'w']
				version split: ['_', 'sc', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'w']
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: _/s/e/ƿ
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'e', 'ƿ']
				_/s/e/ƿ(ACVC)
_/_/s/e/ƿ(AACVC)
				version split: ['_', 's', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'e', 'ƿ']
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: _/s/h/æ
					TRYING: s
					> version: _/sh/æ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', 'sh', 'æ']
				_/s/h/æ(ACCV)
_/sh/æ(ACV)
_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
				version split: ['_', 's', 'h', 'æ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ']
				version split: ['_', 'sh', 'æ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ']
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: _/s/h/æ/ƿ
					TRYING: s
					> version: _/sh/æ/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'æ', 'ƿ']
				_/s/h/æ/ƿ(ACCVC)
_/sh/æ/ƿ(ACVC)
_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
				version split: ['_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', 'sh', 'æ', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: _/s/h/a/ƿ
					TRYING: s
					> version: _/s/h/aƿ
					TRYING: s
					> version: _/sh/a/ƿ
					TRYING: sh
					> version: _/sh/aƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'aƿ']
				_/s/h/a/ƿ(ACCVC)
_/s/h/aƿ(ACCV)
_/sh/a/ƿ(ACVC)
_/sh/aƿ(ACV)
_/_/s/h/a/ƿ(AACCVC)
_/_/s/h/aƿ(AACCV)
_/_/sh/a/ƿ(AACVC)
_/_/sh/aƿ(AACV)
				version split: ['_', 's', 'h', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'ƿ']
				version split: ['_', 's', 'h', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'aƿ']
				version split: ['_', 'sh', 'a', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'ƿ']
				version split: ['_', 'sh', 'aƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'aƿ']
				version split: ['_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shaw
					resolving (4)
					> version: _/s/h/a/w
					TRYING: s
					> version: _/sh/a/w
					TRYING: sh
					> version: _/s/h/aw
					TRYING: s
					> version: _/sh/aw
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sh', 'aw']
				_/s/h/a/w(ACCVC)
_/sh/a/w(ACVC)
_/s/h/aw(ACCV)
_/sh/aw(ACV)
_/_/s/h/a/w(AACCVC)
_/_/sh/a/w(AACVC)
_/_/s/h/aw(AACCV)
_/_/sh/aw(AACV)
				version split: ['_', 's', 'h', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'a', 'w']
				version split: ['_', 'sh', 'a', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'a', 'w']
				version split: ['_', 's', 'h', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'aw']
				version split: ['_', 'sh', 'aw']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'aw']
				version split: ['_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sheu
					resolving (6)
					> version: _/s/h/e/u
					TRYING: s
					> version: _/s/h/e/u
					TRYING: s
					> version: _/sh/e/u
					TRYING: sh
					> version: _/sh/e/u
					TRYING: sh
					> version: _/s/h/eu
					TRYING: s
					> version: _/sh/eu
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'h', 'eu']
				adding dashed alternative: ['_', '_', 'sh', 'eu']
				_/s/h/e/u(ACCVA)
_/s/h/e/u(ACCVA)
_/sh/e/u(ACVA)
_/sh/e/u(ACVA)
_/s/h/eu(ACCV)
_/sh/eu(ACV)
_/_/s/h/e/u(AACCVA)
_/_/s/h/e/u(AACCVA)
_/_/sh/e/u(AACVA)
_/_/sh/e/u(AACVA)
_/_/s/h/eu(AACCV)
_/_/sh/eu(AACV)
				version split: ['_', 's', 'h', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'u']
				version split: ['_', 's', 'h', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'u']
				version split: ['_', 'sh', 'e', 'u']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'u']
				version split: ['_', 'sh', 'e', 'u']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'u']
				version split: ['_', 's', 'h', 'eu']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'eu']
				version split: ['_', 'sh', 'eu']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'eu']
				version split: ['_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: _/s/h/e/ƿ
					TRYING: s
					> version: _/sh/e/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'ƿ']
				_/s/h/e/ƿ(ACCVC)
_/sh/e/ƿ(ACVC)
_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
				version split: ['_', 's', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'ƿ']
				version split: ['_', 'sh', 'e', 'ƿ']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: shew
					resolving (4)
					> version: _/s/h/e/w
					TRYING: s
					> version: _/sh/e/w
					TRYING: sh
					> version: _/s/h/ew
					TRYING: s
					> version: _/sh/ew
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sh', 'ew']
				_/s/h/e/w(ACCVC)
_/sh/e/w(ACVC)
_/s/h/ew(ACCV)
_/sh/ew(ACV)
_/_/s/h/e/w(AACCVC)
_/_/sh/e/w(AACVC)
_/_/s/h/ew(AACCV)
_/_/sh/ew(AACV)
				version split: ['_', 's', 'h', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'e', 'w']
				version split: ['_', 'sh', 'e', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'e', 'w']
				version split: ['_', 's', 'h', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ew']
				version split: ['_', 'sh', 'ew']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ew']
				version split: ['_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: show
					resolving (4)
					> version: _/s/h/o/w
					TRYING: s
					> version: _/sh/o/w
					TRYING: sh
					> version: _/s/h/ow
					TRYING: s
					> version: _/sh/ow
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sh', 'ow']
				_/s/h/o/w(ACCVC)
_/sh/o/w(ACVC)
_/s/h/ow(ACCV)
_/sh/ow(ACV)
_/_/s/h/o/w(AACCVC)
_/_/sh/o/w(AACVC)
_/_/s/h/ow(AACCV)
_/_/sh/ow(AACV)
				version split: ['_', 's', 'h', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'o', 'w']
				version split: ['_', 'sh', 'o', 'w']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'o', 'w']
				version split: ['_', 's', 'h', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'h', 'ow']
				version split: ['_', 'sh', 'ow']
				{'string': '_/sh', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sh', 'ow']
				version split: ['_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sh', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schau
					resolving (24)
					> version: _/s/c/h/a/u
					TRYING: s
					> version: _/s/c/h/a/u
					TRYING: s
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sch/a/u
					TRYING: sch
					> version: _/sch/a/u
					TRYING: sch
					> version: _/s/ch/a/u
					TRYING: s
					> version: _/s/ch/a/u
					TRYING: s
					> version: _/s/c/h/au
					TRYING: s
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/au
					TRYING: sc
					> version: _/sch/a/u
					TRYING: sch
					> version: _/sch/a/u
					TRYING: sch
					> version: _/sch/au
					TRYING: sch
					> version: _/s/ch/au
					TRYING: s
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/a/u
					TRYING: sc
					> version: _/sc/h/au
					TRYING: sc
					> version: _/sc/h/au
					TRYING: sc
					> version: _/sch/au
					TRYING: sch
					> version: _/sc/h/au
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'au']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', 's', 'ch', 'au']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'au']
				_/s/c/h/a/u(ACCCVA)
_/s/c/h/a/u(ACCCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sch/a/u(ACVA)
_/sch/a/u(ACVA)
_/s/ch/a/u(ACCVA)
_/s/ch/a/u(ACCVA)
_/s/c/h/au(ACCCV)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/au(ACCV)
_/sch/a/u(ACVA)
_/sch/a/u(ACVA)
_/sch/au(ACV)
_/s/ch/au(ACCV)
_/sc/h/a/u(ACCVA)
_/sc/h/a/u(ACCVA)
_/sc/h/au(ACCV)
_/sc/h/au(ACCV)
_/sch/au(ACV)
_/sc/h/au(ACCV)
_/_/s/c/h/a/u(AACCCVA)
_/_/s/c/h/a/u(AACCCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sch/a/u(AACVA)
_/_/sch/a/u(AACVA)
_/_/s/ch/a/u(AACCVA)
_/_/s/ch/a/u(AACCVA)
_/_/s/c/h/au(AACCCV)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/au(AACCV)
_/_/sch/a/u(AACVA)
_/_/sch/a/u(AACVA)
_/_/sch/au(AACV)
_/_/s/ch/au(AACCV)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/au(AACCV)
_/_/sc/h/au(AACCV)
_/_/sch/au(AACV)
_/_/sc/h/au(AACCV)
				version split: ['_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'u']
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'u']
				version split: ['_', 's', 'ch', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'u']
				version split: ['_', 's', 'ch', 'a', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'u']
				version split: ['_', 's', 'c', 'h', 'au']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'au']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'au']
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'u']
				version split: ['_', 'sch', 'a', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'u']
				version split: ['_', 'sch', 'au']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'au']
				version split: ['_', 's', 'ch', 'au']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'au']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'a', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'u']
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'au']
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'au']
				version split: ['_', 'sch', 'au']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'au']
				version split: ['_', 'sc', 'h', 'au']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'au']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: _/s/c/h/a/ƿ
					TRYING: s
					> version: _/s/c/h/aƿ
					TRYING: s
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sch/a/ƿ
					TRYING: sch
					> version: _/s/ch/a/ƿ
					TRYING: s
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sch/aƿ
					TRYING: sch
					> version: _/s/ch/aƿ
					TRYING: s
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sch/a/ƿ
					TRYING: sch
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sc/h/aƿ
					TRYING: sc
					> version: _/sch/aƿ
					TRYING: sch
					> version: _/sc/h/a/ƿ
					TRYING: sc
					> version: _/sc/h/aƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aƿ']
				_/s/c/h/a/ƿ(ACCCVC)
_/s/c/h/aƿ(ACCCV)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/s/ch/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/s/ch/aƿ(ACCV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/a/ƿ(ACCVC)
_/sch/a/ƿ(ACVC)
_/sc/h/aƿ(ACCV)
_/sc/h/aƿ(ACCV)
_/sch/aƿ(ACV)
_/sc/h/a/ƿ(ACCVC)
_/sc/h/aƿ(ACCV)
_/_/s/c/h/a/ƿ(AACCCVC)
_/_/s/c/h/aƿ(AACCCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/s/ch/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/s/ch/aƿ(AACCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/sc/h/aƿ(AACCV)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
				version split: ['_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', 's', 'c', 'h', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'ƿ']
				version split: ['_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sch', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aƿ']
				version split: ['_', 's', 'ch', 'aƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sch', 'a', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', 'sch', 'aƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aƿ']
				version split: ['_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', 'sc', 'h', 'aƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schaw
					resolving (16)
					> version: _/s/c/h/a/w
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sch/a/w
					TRYING: sch
					> version: _/s/ch/a/w
					TRYING: s
					> version: _/s/c/h/aw
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sch/a/w
					TRYING: sch
					> version: _/sch/aw
					TRYING: sch
					> version: _/s/ch/aw
					TRYING: s
					> version: _/sc/h/a/w
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sc/h/aw
					TRYING: sc
					> version: _/sch/aw
					TRYING: sch
					> version: _/sc/h/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'aw']
				_/s/c/h/a/w(ACCCVC)
_/sc/h/a/w(ACCVC)
_/sch/a/w(ACVC)
_/s/ch/a/w(ACCVC)
_/s/c/h/aw(ACCCV)
_/sc/h/a/w(ACCVC)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sch/a/w(ACVC)
_/sch/aw(ACV)
_/s/ch/aw(ACCV)
_/sc/h/a/w(ACCVC)
_/sc/h/aw(ACCV)
_/sc/h/aw(ACCV)
_/sch/aw(ACV)
_/sc/h/aw(ACCV)
_/_/s/c/h/a/w(AACCCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sch/a/w(AACVC)
_/_/s/ch/a/w(AACCVC)
_/_/s/c/h/aw(AACCCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sch/a/w(AACVC)
_/_/sch/aw(AACV)
_/_/s/ch/aw(AACCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sc/h/aw(AACCV)
_/_/sch/aw(AACV)
_/_/sc/h/aw(AACCV)
				version split: ['_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'w']
				version split: ['_', 's', 'ch', 'a', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'a', 'w']
				version split: ['_', 's', 'c', 'h', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'aw']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sch', 'a', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'a', 'w']
				version split: ['_', 'sch', 'aw']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aw']
				version split: ['_', 's', 'ch', 'aw']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'aw']
				version split: ['_', 'sc', 'h', 'a', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'a', 'w']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', 'sch', 'aw']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'aw']
				version split: ['_', 'sc', 'h', 'aw']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'aw']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scheu
					resolving (24)
					> version: _/s/c/h/e/u
					TRYING: s
					> version: _/s/c/h/e/u
					TRYING: s
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sch/e/u
					TRYING: sch
					> version: _/sch/e/u
					TRYING: sch
					> version: _/s/ch/e/u
					TRYING: s
					> version: _/s/ch/e/u
					TRYING: s
					> version: _/s/c/h/eu
					TRYING: s
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/eu
					TRYING: sc
					> version: _/sch/e/u
					TRYING: sch
					> version: _/sch/e/u
					TRYING: sch
					> version: _/sch/eu
					TRYING: sch
					> version: _/s/ch/eu
					TRYING: s
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/e/u
					TRYING: sc
					> version: _/sc/h/eu
					TRYING: sc
					> version: _/sc/h/eu
					TRYING: sc
					> version: _/sch/eu
					TRYING: sch
					> version: _/sc/h/eu
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'eu']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', 's', 'ch', 'eu']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'eu']
				_/s/c/h/e/u(ACCCVA)
_/s/c/h/e/u(ACCCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sch/e/u(ACVA)
_/sch/e/u(ACVA)
_/s/ch/e/u(ACCVA)
_/s/ch/e/u(ACCVA)
_/s/c/h/eu(ACCCV)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/eu(ACCV)
_/sch/e/u(ACVA)
_/sch/e/u(ACVA)
_/sch/eu(ACV)
_/s/ch/eu(ACCV)
_/sc/h/e/u(ACCVA)
_/sc/h/e/u(ACCVA)
_/sc/h/eu(ACCV)
_/sc/h/eu(ACCV)
_/sch/eu(ACV)
_/sc/h/eu(ACCV)
_/_/s/c/h/e/u(AACCCVA)
_/_/s/c/h/e/u(AACCCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sch/e/u(AACVA)
_/_/sch/e/u(AACVA)
_/_/s/ch/e/u(AACCVA)
_/_/s/ch/e/u(AACCVA)
_/_/s/c/h/eu(AACCCV)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/eu(AACCV)
_/_/sch/e/u(AACVA)
_/_/sch/e/u(AACVA)
_/_/sch/eu(AACV)
_/_/s/ch/eu(AACCV)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/eu(AACCV)
_/_/sc/h/eu(AACCV)
_/_/sch/eu(AACV)
_/_/sc/h/eu(AACCV)
				version split: ['_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'u']
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'u']
				version split: ['_', 's', 'ch', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'u']
				version split: ['_', 's', 'ch', 'e', 'u']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'u']
				version split: ['_', 's', 'c', 'h', 'eu']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'eu']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'eu']
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'u']
				version split: ['_', 'sch', 'e', 'u']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'u']
				version split: ['_', 'sch', 'eu']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'eu']
				version split: ['_', 's', 'ch', 'eu']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'eu']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'e', 'u']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'u']
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'eu']
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'eu']
				version split: ['_', 'sch', 'eu']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'eu']
				version split: ['_', 'sc', 'h', 'eu']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'eu']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: _/s/c/h/e/ƿ
					TRYING: s
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sch/e/ƿ
					TRYING: sch
					> version: _/s/ch/e/ƿ
					TRYING: s
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sc/h/e/ƿ
					TRYING: sc
					> version: _/sch/e/ƿ
					TRYING: sch
					> version: _/sc/h/e/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				_/s/c/h/e/ƿ(ACCCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/s/ch/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sc/h/e/ƿ(ACCVC)
_/sch/e/ƿ(ACVC)
_/sc/h/e/ƿ(ACCVC)
_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
				version split: ['_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', 'sch', 'e', 'ƿ']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'ƿ']
				version split: ['_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schew
					resolving (16)
					> version: _/s/c/h/e/w
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sch/e/w
					TRYING: sch
					> version: _/s/ch/e/w
					TRYING: s
					> version: _/s/c/h/ew
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sch/e/w
					TRYING: sch
					> version: _/sch/ew
					TRYING: sch
					> version: _/s/ch/ew
					TRYING: s
					> version: _/sc/h/e/w
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sc/h/ew
					TRYING: sc
					> version: _/sch/ew
					TRYING: sch
					> version: _/sc/h/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ew']
				_/s/c/h/e/w(ACCCVC)
_/sc/h/e/w(ACCVC)
_/sch/e/w(ACVC)
_/s/ch/e/w(ACCVC)
_/s/c/h/ew(ACCCV)
_/sc/h/e/w(ACCVC)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sch/e/w(ACVC)
_/sch/ew(ACV)
_/s/ch/ew(ACCV)
_/sc/h/e/w(ACCVC)
_/sc/h/ew(ACCV)
_/sc/h/ew(ACCV)
_/sch/ew(ACV)
_/sc/h/ew(ACCV)
_/_/s/c/h/e/w(AACCCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sch/e/w(AACVC)
_/_/s/ch/e/w(AACCVC)
_/_/s/c/h/ew(AACCCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sch/e/w(AACVC)
_/_/sch/ew(AACV)
_/_/s/ch/ew(AACCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sc/h/ew(AACCV)
_/_/sch/ew(AACV)
_/_/sc/h/ew(AACCV)
				version split: ['_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'w']
				version split: ['_', 's', 'ch', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'e', 'w']
				version split: ['_', 's', 'c', 'h', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ew']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sch', 'e', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'e', 'w']
				version split: ['_', 'sch', 'ew']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ew']
				version split: ['_', 's', 'ch', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ew']
				version split: ['_', 'sc', 'h', 'e', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'e', 'w']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', 'sch', 'ew']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ew']
				version split: ['_', 'sc', 'h', 'ew']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ew']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: schow
					resolving (16)
					> version: _/s/c/h/o/w
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sch/o/w
					TRYING: sch
					> version: _/s/ch/o/w
					TRYING: s
					> version: _/s/c/h/ow
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sch/o/w
					TRYING: sch
					> version: _/sch/ow
					TRYING: sch
					> version: _/s/ch/ow
					TRYING: s
					> version: _/sc/h/o/w
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sc/h/ow
					TRYING: sc
					> version: _/sch/ow
					TRYING: sch
					> version: _/sc/h/ow
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', '_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', 'sc', 'h', 'ow']
				_/s/c/h/o/w(ACCCVC)
_/sc/h/o/w(ACCVC)
_/sch/o/w(ACVC)
_/s/ch/o/w(ACCVC)
_/s/c/h/ow(ACCCV)
_/sc/h/o/w(ACCVC)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sch/o/w(ACVC)
_/sch/ow(ACV)
_/s/ch/ow(ACCV)
_/sc/h/o/w(ACCVC)
_/sc/h/ow(ACCV)
_/sc/h/ow(ACCV)
_/sch/ow(ACV)
_/sc/h/ow(ACCV)
_/_/s/c/h/o/w(AACCCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sch/o/w(AACVC)
_/_/s/ch/o/w(AACCVC)
_/_/s/c/h/ow(AACCCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sch/o/w(AACVC)
_/_/sch/ow(AACV)
_/_/s/ch/ow(AACCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sc/h/ow(AACCV)
_/_/sch/ow(AACV)
_/_/sc/h/ow(AACCV)
				version split: ['_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'o', 'w']
				version split: ['_', 's', 'ch', 'o', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'o', 'w']
				version split: ['_', 's', 'c', 'h', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'c', 'h', 'ow']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sch', 'o', 'w']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'o', 'w']
				version split: ['_', 'sch', 'ow']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ow']
				version split: ['_', 's', 'ch', 'ow']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 'ch', 'ow']
				version split: ['_', 'sc', 'h', 'o', 'w']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'o', 'w']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', 'sch', 'ow']
				{'string': '_/sch', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sch', 'ow']
				version split: ['_', 'sc', 'h', 'ow']
				{'string': '_/sc', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'sc', 'h', 'ow']
				version split: ['_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 'ch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: _/s/s/e/w
					TRYING: s
					> version: _/ss/e/w
					TRYING: ss
					> version: _/s/s/ew
					TRYING: s
					> version: _/ss/ew
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', '_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', '_', 's', 's', 'ew']
				adding dashed alternative: ['_', '_', 'ss', 'ew']
				_/s/s/e/w(ACCVC)
_/ss/e/w(ACVC)
_/s/s/ew(ACCV)
_/ss/ew(ACV)
_/_/s/s/e/w(AACCVC)
_/_/ss/e/w(AACVC)
_/_/s/s/ew(AACCV)
_/_/ss/ew(AACV)
				version split: ['_', 's', 's', 'e', 'w']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'e', 'w']
				version split: ['_', 'ss', 'e', 'w']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'e', 'w']
				version split: ['_', 's', 's', 'ew']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'ew']
				version split: ['_', 'ss', 'ew']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'ew']
				version split: ['_', '_', 's', 's', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'e', 'w']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 's', 's', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'ew']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: _/s/s/w/e
					TRYING: s
					> version: _/ss/w/e
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', 'ss', 'w', 'e']
				_/s/s/w/e(ACCCV)
_/ss/w/e(ACCV)
_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
				version split: ['_', 's', 's', 'w', 'e']
				{'string': '_/s', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 's', 's', 'w', 'e']
				version split: ['_', 'ss', 'w', 'e']
				{'string': '_/ss', 'rgx': '((_))/((_))$'}
				_____REMOVING________['_', 'ss', 'w', 'e']
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_', 'rgx': '((_))/((_))$'}
			___CVVC : 2___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/_/c/h/a/w
					TRYING: c
					> version: _/_/ch/a/w
					TRYING: ch
					> version: _/_/c/h/aw
					TRYING: c
					> version: _/_/ch/aw
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'ch', 'aw']
				_/_/c/h/a/w(AACCVC)
_/_/ch/a/w(AACVC)
_/_/c/h/aw(AACCV)
_/_/ch/aw(AACV)
_/_/_/c/h/a/w(AAACCVC)
_/_/_/ch/a/w(AAACVC)
_/_/_/c/h/aw(AAACCV)
_/_/_/ch/aw(AAACV)
				version split: ['_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', 'ch', 'a', 'w']
				{'string': '_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', 'c', 'h', 'aw']
				{'string': '_/_/c', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', 'ch', 'aw']
				{'string': '_/_/ch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ch', 'aw']
				version split: ['_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scau
					resolving (6)
					> version: _/_/s/c/a/u
					TRYING: s
					> version: _/_/s/c/a/u
					TRYING: s
					> version: _/_/sc/a/u
					TRYING: sc
					> version: _/_/sc/a/u
					TRYING: sc
					> version: _/_/s/c/au
					TRYING: s
					> version: _/_/sc/au
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'au']
				adding dashed alternative: ['_', '_', '_', 'sc', 'au']
				_/_/s/c/a/u(AACCVA)
_/_/s/c/a/u(AACCVA)
_/_/sc/a/u(AACVA)
_/_/sc/a/u(AACVA)
_/_/s/c/au(AACCV)
_/_/sc/au(AACV)
_/_/_/s/c/a/u(AAACCVA)
_/_/_/s/c/a/u(AAACCVA)
_/_/_/sc/a/u(AAACVA)
_/_/_/sc/a/u(AAACVA)
_/_/_/s/c/au(AAACCV)
_/_/_/sc/au(AAACV)
				version split: ['_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', 'sc', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', 'sc', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', 's', 'c', 'au']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'au']
				version split: ['_', '_', 'sc', 'au']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'au']
				version split: ['_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scaw
					resolving (4)
					> version: _/_/s/c/a/w
					TRYING: s
					> version: _/_/sc/a/w
					TRYING: sc
					> version: _/_/s/c/aw
					TRYING: s
					> version: _/_/sc/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'aw']
				_/_/s/c/a/w(AACCVC)
_/_/sc/a/w(AACVC)
_/_/s/c/aw(AACCV)
_/_/sc/aw(AACV)
_/_/_/s/c/a/w(AAACCVC)
_/_/_/sc/a/w(AAACVC)
_/_/_/s/c/aw(AAACCV)
_/_/_/sc/aw(AAACV)
				version split: ['_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'a', 'w']
				version split: ['_', '_', 'sc', 'a', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'a', 'w']
				version split: ['_', '_', 's', 'c', 'aw']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'aw']
				version split: ['_', '_', 'sc', 'aw']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'aw']
				version split: ['_', '_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: sceu
					resolving (6)
					> version: _/_/s/c/e/u
					TRYING: s
					> version: _/_/s/c/e/u
					TRYING: s
					> version: _/_/sc/e/u
					TRYING: sc
					> version: _/_/sc/e/u
					TRYING: sc
					> version: _/_/s/c/eu
					TRYING: s
					> version: _/_/sc/eu
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sc', 'eu']
				_/_/s/c/e/u(AACCVA)
_/_/s/c/e/u(AACCVA)
_/_/sc/e/u(AACVA)
_/_/sc/e/u(AACVA)
_/_/s/c/eu(AACCV)
_/_/sc/eu(AACV)
_/_/_/s/c/e/u(AAACCVA)
_/_/_/s/c/e/u(AAACCVA)
_/_/_/sc/e/u(AAACVA)
_/_/_/sc/e/u(AAACVA)
_/_/_/s/c/eu(AAACCV)
_/_/_/sc/eu(AAACV)
				version split: ['_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', 'sc', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', 'sc', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', 's', 'c', 'eu']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'eu']
				version split: ['_', '_', 'sc', 'eu']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'eu']
				version split: ['_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scew
					resolving (4)
					> version: _/_/s/c/e/w
					TRYING: s
					> version: _/_/sc/e/w
					TRYING: sc
					> version: _/_/s/c/ew
					TRYING: s
					> version: _/_/sc/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'ew']
				_/_/s/c/e/w(AACCVC)
_/_/sc/e/w(AACVC)
_/_/s/c/ew(AACCV)
_/_/sc/ew(AACV)
_/_/_/s/c/e/w(AAACCVC)
_/_/_/sc/e/w(AAACVC)
_/_/_/s/c/ew(AAACCV)
_/_/_/sc/ew(AAACV)
				version split: ['_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'e', 'w']
				version split: ['_', '_', 'sc', 'e', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'e', 'w']
				version split: ['_', '_', 's', 'c', 'ew']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'ew']
				version split: ['_', '_', 'sc', 'ew']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'ew']
				version split: ['_', '_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scw
					resolving (2)
					> version: _/_/s/c/w
					TRYING: s
					> version: _/_/sc/w
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'w']
				_/_/s/c/w(AACCC)
_/_/sc/w(AACC)
_/_/_/s/c/w(AAACCC)
_/_/_/sc/w(AAACC)
				version split: ['_', '_', 's', 'c', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'w']
				version split: ['_', '_', 'sc', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'w']
				version split: ['_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: _/_/s/e/ƿ
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'e', 'ƿ']
				_/_/s/e/ƿ(AACVC)
_/_/_/s/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (2)
					> version: _/_/s/h/æ
					TRYING: s
					> version: _/_/sh/æ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ']
				_/_/s/h/æ(AACCV)
_/_/sh/æ(AACV)
_/_/_/s/h/æ(AAACCV)
_/_/_/sh/æ(AAACV)
				version split: ['_', '_', 's', 'h', 'æ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ']
				version split: ['_', '_', 'sh', 'æ']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ']
				version split: ['_', '_', '_', 's', 'h', 'æ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'æ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (2)
					> version: _/_/s/h/æ/ƿ
					TRYING: s
					> version: _/_/sh/æ/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				_/_/s/h/æ/ƿ(AACCVC)
_/_/sh/æ/ƿ(AACVC)
_/_/_/s/h/æ/ƿ(AAACCVC)
_/_/_/sh/æ/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: shaƿ
					resolving (4)
					> version: _/_/s/h/a/ƿ
					TRYING: s
					> version: _/_/s/h/aƿ
					TRYING: s
					> version: _/_/sh/a/ƿ
					TRYING: sh
					> version: _/_/sh/aƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'aƿ']
				_/_/s/h/a/ƿ(AACCVC)
_/_/s/h/aƿ(AACCV)
_/_/sh/a/ƿ(AACVC)
_/_/sh/aƿ(AACV)
_/_/_/s/h/a/ƿ(AAACCVC)
_/_/_/s/h/aƿ(AAACCV)
_/_/_/sh/a/ƿ(AAACVC)
_/_/_/sh/aƿ(AAACV)
				version split: ['_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'ƿ']
				version split: ['_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'aƿ']
				version split: ['_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'ƿ']
				version split: ['_', '_', 'sh', 'aƿ']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'aƿ']
				version split: ['_', '_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: shaw
					resolving (4)
					> version: _/_/s/h/a/w
					TRYING: s
					> version: _/_/sh/a/w
					TRYING: sh
					> version: _/_/s/h/aw
					TRYING: s
					> version: _/_/sh/aw
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sh', 'aw']
				_/_/s/h/a/w(AACCVC)
_/_/sh/a/w(AACVC)
_/_/s/h/aw(AACCV)
_/_/sh/aw(AACV)
_/_/_/s/h/a/w(AAACCVC)
_/_/_/sh/a/w(AAACVC)
_/_/_/s/h/aw(AAACCV)
_/_/_/sh/aw(AAACV)
				version split: ['_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'a', 'w']
				version split: ['_', '_', 'sh', 'a', 'w']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'a', 'w']
				version split: ['_', '_', 's', 'h', 'aw']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'aw']
				version split: ['_', '_', 'sh', 'aw']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'aw']
				version split: ['_', '_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: sheu
					resolving (6)
					> version: _/_/s/h/e/u
					TRYING: s
					> version: _/_/s/h/e/u
					TRYING: s
					> version: _/_/sh/e/u
					TRYING: sh
					> version: _/_/sh/e/u
					TRYING: sh
					> version: _/_/s/h/eu
					TRYING: s
					> version: _/_/sh/eu
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sh', 'eu']
				_/_/s/h/e/u(AACCVA)
_/_/s/h/e/u(AACCVA)
_/_/sh/e/u(AACVA)
_/_/sh/e/u(AACVA)
_/_/s/h/eu(AACCV)
_/_/sh/eu(AACV)
_/_/_/s/h/e/u(AAACCVA)
_/_/_/s/h/e/u(AAACCVA)
_/_/_/sh/e/u(AAACVA)
_/_/_/sh/e/u(AAACVA)
_/_/_/s/h/eu(AAACCV)
_/_/_/sh/eu(AAACV)
				version split: ['_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', 'sh', 'e', 'u']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', 'sh', 'e', 'u']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', 's', 'h', 'eu']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'eu']
				version split: ['_', '_', 'sh', 'eu']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'eu']
				version split: ['_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: sheƿ
					resolving (2)
					> version: _/_/s/h/e/ƿ
					TRYING: s
					> version: _/_/sh/e/ƿ
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'ƿ']
				_/_/s/h/e/ƿ(AACCVC)
_/_/sh/e/ƿ(AACVC)
_/_/_/s/h/e/ƿ(AAACCVC)
_/_/_/sh/e/ƿ(AAACVC)
				version split: ['_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: shew
					resolving (4)
					> version: _/_/s/h/e/w
					TRYING: s
					> version: _/_/sh/e/w
					TRYING: sh
					> version: _/_/s/h/ew
					TRYING: s
					> version: _/_/sh/ew
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ew']
				_/_/s/h/e/w(AACCVC)
_/_/sh/e/w(AACVC)
_/_/s/h/ew(AACCV)
_/_/sh/ew(AACV)
_/_/_/s/h/e/w(AAACCVC)
_/_/_/sh/e/w(AAACVC)
_/_/_/s/h/ew(AAACCV)
_/_/_/sh/ew(AAACV)
				version split: ['_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'e', 'w']
				version split: ['_', '_', 'sh', 'e', 'w']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'e', 'w']
				version split: ['_', '_', 's', 'h', 'ew']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ew']
				version split: ['_', '_', 'sh', 'ew']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ew']
				version split: ['_', '_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: show
					resolving (4)
					> version: _/_/s/h/o/w
					TRYING: s
					> version: _/_/sh/o/w
					TRYING: sh
					> version: _/_/s/h/ow
					TRYING: s
					> version: _/_/sh/ow
					TRYING: sh
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sh', 'ow']
				_/_/s/h/o/w(AACCVC)
_/_/sh/o/w(AACVC)
_/_/s/h/ow(AACCV)
_/_/sh/ow(AACV)
_/_/_/s/h/o/w(AAACCVC)
_/_/_/sh/o/w(AAACVC)
_/_/_/s/h/ow(AAACCV)
_/_/_/sh/ow(AAACV)
				version split: ['_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'o', 'w']
				version split: ['_', '_', 'sh', 'o', 'w']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'o', 'w']
				version split: ['_', '_', 's', 'h', 'ow']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'h', 'ow']
				version split: ['_', '_', 'sh', 'ow']
				{'string': '_/_/sh', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sh', 'ow']
				version split: ['_', '_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sh', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: schau
					resolving (24)
					> version: _/_/s/c/h/a/u
					TRYING: s
					> version: _/_/s/c/h/a/u
					TRYING: s
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sch/a/u
					TRYING: sch
					> version: _/_/sch/a/u
					TRYING: sch
					> version: _/_/s/ch/a/u
					TRYING: s
					> version: _/_/s/ch/a/u
					TRYING: s
					> version: _/_/s/c/h/au
					TRYING: s
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/au
					TRYING: sc
					> version: _/_/sch/a/u
					TRYING: sch
					> version: _/_/sch/a/u
					TRYING: sch
					> version: _/_/sch/au
					TRYING: sch
					> version: _/_/s/ch/au
					TRYING: s
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/a/u
					TRYING: sc
					> version: _/_/sc/h/au
					TRYING: sc
					> version: _/_/sc/h/au
					TRYING: sc
					> version: _/_/sch/au
					TRYING: sch
					> version: _/_/sc/h/au
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'au']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'au']
				_/_/s/c/h/a/u(AACCCVA)
_/_/s/c/h/a/u(AACCCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sch/a/u(AACVA)
_/_/sch/a/u(AACVA)
_/_/s/ch/a/u(AACCVA)
_/_/s/ch/a/u(AACCVA)
_/_/s/c/h/au(AACCCV)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/au(AACCV)
_/_/sch/a/u(AACVA)
_/_/sch/a/u(AACVA)
_/_/sch/au(AACV)
_/_/s/ch/au(AACCV)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/a/u(AACCVA)
_/_/sc/h/au(AACCV)
_/_/sc/h/au(AACCV)
_/_/sch/au(AACV)
_/_/sc/h/au(AACCV)
_/_/_/s/c/h/a/u(AAACCCVA)
_/_/_/s/c/h/a/u(AAACCCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/s/ch/a/u(AAACCVA)
_/_/_/s/ch/a/u(AAACCVA)
_/_/_/s/c/h/au(AAACCCV)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/au(AAACCV)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/au(AAACV)
_/_/_/s/ch/au(AAACCV)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/au(AAACCV)
_/_/_/sc/h/au(AAACCV)
_/_/_/sch/au(AAACV)
_/_/_/sc/h/au(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', 's', 'c', 'h', 'au']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'au']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', 'sch', 'a', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', 'sch', 'au']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'au']
				version split: ['_', '_', 's', 'ch', 'au']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'au']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', 'sch', 'au']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'au']
				version split: ['_', '_', 'sc', 'h', 'au']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: schaƿ
					resolving (16)
					> version: _/_/s/c/h/a/ƿ
					TRYING: s
					> version: _/_/s/c/h/aƿ
					TRYING: s
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sch/a/ƿ
					TRYING: sch
					> version: _/_/s/ch/a/ƿ
					TRYING: s
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sch/aƿ
					TRYING: sch
					> version: _/_/s/ch/aƿ
					TRYING: s
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sch/a/ƿ
					TRYING: sch
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sc/h/aƿ
					TRYING: sc
					> version: _/_/sch/aƿ
					TRYING: sch
					> version: _/_/sc/h/a/ƿ
					TRYING: sc
					> version: _/_/sc/h/aƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aƿ']
				_/_/s/c/h/a/ƿ(AACCCVC)
_/_/s/c/h/aƿ(AACCCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/s/ch/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/s/ch/aƿ(AACCV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sch/a/ƿ(AACVC)
_/_/sc/h/aƿ(AACCV)
_/_/sc/h/aƿ(AACCV)
_/_/sch/aƿ(AACV)
_/_/sc/h/a/ƿ(AACCVC)
_/_/sc/h/aƿ(AACCV)
_/_/_/s/c/h/a/ƿ(AAACCCVC)
_/_/_/s/c/h/aƿ(AAACCCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/s/ch/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/s/ch/aƿ(AAACCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aƿ']
				version split: ['_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', 'sch', 'aƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aƿ']
				version split: ['_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: schaw
					resolving (16)
					> version: _/_/s/c/h/a/w
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sch/a/w
					TRYING: sch
					> version: _/_/s/ch/a/w
					TRYING: s
					> version: _/_/s/c/h/aw
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sch/a/w
					TRYING: sch
					> version: _/_/sch/aw
					TRYING: sch
					> version: _/_/s/ch/aw
					TRYING: s
					> version: _/_/sc/h/a/w
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sc/h/aw
					TRYING: sc
					> version: _/_/sch/aw
					TRYING: sch
					> version: _/_/sc/h/aw
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'aw']
				_/_/s/c/h/a/w(AACCCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sch/a/w(AACVC)
_/_/s/ch/a/w(AACCVC)
_/_/s/c/h/aw(AACCCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sch/a/w(AACVC)
_/_/sch/aw(AACV)
_/_/s/ch/aw(AACCV)
_/_/sc/h/a/w(AACCVC)
_/_/sc/h/aw(AACCV)
_/_/sc/h/aw(AACCV)
_/_/sch/aw(AACV)
_/_/sc/h/aw(AACCV)
_/_/_/s/c/h/a/w(AAACCCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sch/a/w(AAACVC)
_/_/_/s/ch/a/w(AAACCVC)
_/_/_/s/c/h/aw(AAACCCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/a/w(AAACVC)
_/_/_/sch/aw(AAACV)
_/_/_/s/ch/aw(AAACCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/aw(AAACV)
_/_/_/sc/h/aw(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'a', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'aw']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sch', 'a', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aw']
				version split: ['_', '_', 's', 'ch', 'aw']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'aw']
				version split: ['_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', 'sch', 'aw']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'aw']
				version split: ['_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scheu
					resolving (24)
					> version: _/_/s/c/h/e/u
					TRYING: s
					> version: _/_/s/c/h/e/u
					TRYING: s
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sch/e/u
					TRYING: sch
					> version: _/_/sch/e/u
					TRYING: sch
					> version: _/_/s/ch/e/u
					TRYING: s
					> version: _/_/s/ch/e/u
					TRYING: s
					> version: _/_/s/c/h/eu
					TRYING: s
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/eu
					TRYING: sc
					> version: _/_/sch/e/u
					TRYING: sch
					> version: _/_/sch/e/u
					TRYING: sch
					> version: _/_/sch/eu
					TRYING: sch
					> version: _/_/s/ch/eu
					TRYING: s
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/e/u
					TRYING: sc
					> version: _/_/sc/h/eu
					TRYING: sc
					> version: _/_/sc/h/eu
					TRYING: sc
					> version: _/_/sch/eu
					TRYING: sch
					> version: _/_/sc/h/eu
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'eu']
				_/_/s/c/h/e/u(AACCCVA)
_/_/s/c/h/e/u(AACCCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sch/e/u(AACVA)
_/_/sch/e/u(AACVA)
_/_/s/ch/e/u(AACCVA)
_/_/s/ch/e/u(AACCVA)
_/_/s/c/h/eu(AACCCV)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/eu(AACCV)
_/_/sch/e/u(AACVA)
_/_/sch/e/u(AACVA)
_/_/sch/eu(AACV)
_/_/s/ch/eu(AACCV)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/e/u(AACCVA)
_/_/sc/h/eu(AACCV)
_/_/sc/h/eu(AACCV)
_/_/sch/eu(AACV)
_/_/sc/h/eu(AACCV)
_/_/_/s/c/h/e/u(AAACCCVA)
_/_/_/s/c/h/e/u(AAACCCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/s/ch/e/u(AAACCVA)
_/_/_/s/ch/e/u(AAACCVA)
_/_/_/s/c/h/eu(AAACCCV)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/eu(AAACV)
_/_/_/s/ch/eu(AAACCV)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sch/eu(AAACV)
_/_/_/sc/h/eu(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', 's', 'c', 'h', 'eu']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'eu']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', 'sch', 'e', 'u']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', 'sch', 'eu']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'eu']
				version split: ['_', '_', 's', 'ch', 'eu']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'eu']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', 'sch', 'eu']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'eu']
				version split: ['_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: scheƿ
					resolving (8)
					> version: _/_/s/c/h/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/s/ch/e/ƿ
					TRYING: s
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					> version: _/_/sch/e/ƿ
					TRYING: sch
					> version: _/_/sc/h/e/ƿ
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				_/_/s/c/h/e/ƿ(AACCCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/s/ch/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/sch/e/ƿ(AACVC)
_/_/sc/h/e/ƿ(AACCVC)
_/_/_/s/c/h/e/ƿ(AAACCCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/s/ch/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: schew
					resolving (16)
					> version: _/_/s/c/h/e/w
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sch/e/w
					TRYING: sch
					> version: _/_/s/ch/e/w
					TRYING: s
					> version: _/_/s/c/h/ew
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sch/e/w
					TRYING: sch
					> version: _/_/sch/ew
					TRYING: sch
					> version: _/_/s/ch/ew
					TRYING: s
					> version: _/_/sc/h/e/w
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sc/h/ew
					TRYING: sc
					> version: _/_/sch/ew
					TRYING: sch
					> version: _/_/sc/h/ew
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ew']
				_/_/s/c/h/e/w(AACCCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sch/e/w(AACVC)
_/_/s/ch/e/w(AACCVC)
_/_/s/c/h/ew(AACCCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sch/e/w(AACVC)
_/_/sch/ew(AACV)
_/_/s/ch/ew(AACCV)
_/_/sc/h/e/w(AACCVC)
_/_/sc/h/ew(AACCV)
_/_/sc/h/ew(AACCV)
_/_/sch/ew(AACV)
_/_/sc/h/ew(AACCV)
_/_/_/s/c/h/e/w(AAACCCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sch/e/w(AAACVC)
_/_/_/s/ch/e/w(AAACCVC)
_/_/_/s/c/h/ew(AAACCCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/e/w(AAACVC)
_/_/_/sch/ew(AAACV)
_/_/_/s/ch/ew(AAACCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/ew(AAACV)
_/_/_/sc/h/ew(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'e', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ew']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sch', 'e', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ew']
				version split: ['_', '_', 's', 'ch', 'ew']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ew']
				version split: ['_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', 'sch', 'ew']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ew']
				version split: ['_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: schow
					resolving (16)
					> version: _/_/s/c/h/o/w
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sch/o/w
					TRYING: sch
					> version: _/_/s/ch/o/w
					TRYING: s
					> version: _/_/s/c/h/ow
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sch/o/w
					TRYING: sch
					> version: _/_/sch/ow
					TRYING: sch
					> version: _/_/s/ch/ow
					TRYING: s
					> version: _/_/sc/h/o/w
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sc/h/ow
					TRYING: sc
					> version: _/_/sch/ow
					TRYING: sch
					> version: _/_/sc/h/ow
					TRYING: sc
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', 'sc', 'h', 'ow']
				_/_/s/c/h/o/w(AACCCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sch/o/w(AACVC)
_/_/s/ch/o/w(AACCVC)
_/_/s/c/h/ow(AACCCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sch/o/w(AACVC)
_/_/sch/ow(AACV)
_/_/s/ch/ow(AACCV)
_/_/sc/h/o/w(AACCVC)
_/_/sc/h/ow(AACCV)
_/_/sc/h/ow(AACCV)
_/_/sch/ow(AACV)
_/_/sc/h/ow(AACCV)
_/_/_/s/c/h/o/w(AAACCCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sch/o/w(AAACVC)
_/_/_/s/ch/o/w(AAACCVC)
_/_/_/s/c/h/ow(AAACCCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/o/w(AAACVC)
_/_/_/sch/ow(AAACV)
_/_/_/s/ch/ow(AAACCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/ow(AAACV)
_/_/_/sc/h/ow(AAACCV)
				version split: ['_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'o', 'w']
				version split: ['_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'c', 'h', 'ow']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sch', 'o', 'w']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ow']
				version split: ['_', '_', 's', 'ch', 'ow']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 'ch', 'ow']
				version split: ['_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', 'sch', 'ow']
				{'string': '_/_/sch', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sch', 'ow']
				version split: ['_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/sc', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 'ch', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: _/_/s/s/e/w
					TRYING: s
					> version: _/_/ss/e/w
					TRYING: ss
					> version: _/_/s/s/ew
					TRYING: s
					> version: _/_/ss/ew
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'ew']
				adding dashed alternative: ['_', '_', '_', 'ss', 'ew']
				_/_/s/s/e/w(AACCVC)
_/_/ss/e/w(AACVC)
_/_/s/s/ew(AACCV)
_/_/ss/ew(AACV)
_/_/_/s/s/e/w(AAACCVC)
_/_/_/ss/e/w(AAACVC)
_/_/_/s/s/ew(AAACCV)
_/_/_/ss/ew(AAACV)
				version split: ['_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'e', 'w']
				version split: ['_', '_', 'ss', 'e', 'w']
				{'string': '_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'e', 'w']
				version split: ['_', '_', 's', 's', 'ew']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'ew']
				version split: ['_', '_', 'ss', 'ew']
				{'string': '_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'ew']
				version split: ['_', '_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ss', 'e', 'w']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 's', 's', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ss', 'ew']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: _/_/s/s/w/e
					TRYING: s
					> version: _/_/ss/w/e
					TRYING: ss
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', '_', 'ss', 'w', 'e']
				_/_/s/s/w/e(AACCCV)
_/_/ss/w/e(AACCV)
_/_/_/s/s/w/e(AAACCCV)
_/_/_/ss/w/e(AAACCV)
				version split: ['_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/s', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', 'ss', 'w', 'e']
				{'string': '_/_/ss', 'rgx': '((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'ss', 'w', 'e']
				version split: ['_', '_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
				version split: ['_', '_', '_', 'ss', 'w', 'e']
				{'string': '_/_/_', 'rgx': '((_))/((_))/((_))$'}
			___CVVC : 3___
				ANALYSING: sceaƿ
				adding littera based on matching pattern
				ANALYSING: shauw
				adding littera based on matching pattern
				ANALYSING: sheaƿ
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: sseaw
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: _/_/_/c/h/a/w
					TRYING: c
					adding blocked set: C = C >> w, ƿ, c
					> version: _/_/_/ch/a/w
					TRYING: ch
					adding blocked set: C = C >> ch, w, ƿ
					> version: _/_/_/c/h/aw
					TRYING: c
					adding blocked set: C = C >> w, ƿ, c
					> version: _/_/_/ch/aw
					TRYING: ch
					adding blocked set: C = C >> ch, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'ch', 'aw']
				_/_/_/c/h/a/w(AAACCVC)
_/_/_/ch/a/w(AAACVC)
_/_/_/c/h/aw(AAACCV)
_/_/_/ch/aw(AAACV)
_/_/_/_/c/h/a/w(AAAACCVC)
_/_/_/_/ch/a/w(AAAACVC)
_/_/_/_/c/h/aw(AAAACCV)
_/_/_/_/ch/aw(AAAACV)
				version split: ['_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/c/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_/ch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_/c/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_/ch/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ch', 'aw']
				version split: ['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/_/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'ch', 'a', 'w']
				{'string': '_/_/_/_/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ch', 'a', 'w']
				version split: ['_', '_', '_', '_', 'c', 'h', 'aw']
				{'string': '_/_/_/_/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'c', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'ch', 'aw']
				{'string': '_/_/_/_/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ch', 'aw']
				ANALYSING: scau
					resolving (6)
					> version: _/_/_/s/c/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/s/c/au
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/au
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'au']
				_/_/_/s/c/a/u(AAACCVA)
_/_/_/s/c/a/u(AAACCVA)
_/_/_/sc/a/u(AAACVA)
_/_/_/sc/a/u(AAACVA)
_/_/_/s/c/au(AAACCV)
_/_/_/sc/au(AAACV)
_/_/_/_/s/c/a/u(AAAACCVA)
_/_/_/_/s/c/a/u(AAAACCVA)
_/_/_/_/sc/a/u(AAAACVA)
_/_/_/_/sc/a/u(AAAACVA)
_/_/_/_/s/c/au(AAAACCV)
_/_/_/_/sc/au(AAAACV)
				version split: ['_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_/sc/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_/sc/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', '_', 's', 'c', 'au']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'au']
				version split: ['_', '_', '_', 'sc', 'au']
				{'string': '_/_/_/sc/au', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'au']
				version split: ['_', '_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'au']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'au']
				version split: ['_', '_', '_', '_', 'sc', 'au']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: _/_/_/s/c/a/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/a/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/s/c/aw
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/aw
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'aw']
				_/_/_/s/c/a/w(AAACCVC)
_/_/_/sc/a/w(AAACVC)
_/_/_/s/c/aw(AAACCV)
_/_/_/sc/aw(AAACV)
_/_/_/_/s/c/a/w(AAAACCVC)
_/_/_/_/sc/a/w(AAAACVC)
_/_/_/_/s/c/aw(AAAACCV)
_/_/_/_/sc/aw(AAAACV)
				version split: ['_', '_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'a', 'w']
				{'string': '_/_/_/sc/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'a', 'w']
				version split: ['_', '_', '_', 's', 'c', 'aw']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'aw']
				version split: ['_', '_', '_', 'sc', 'aw']
				{'string': '_/_/_/sc/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'aw']
				version split: ['_', '_', '_', '_', 's', 'c', 'a', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'a', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'a', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'aw']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'aw']
				version split: ['_', '_', '_', '_', 'sc', 'aw']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'aw']
				ANALYSING: sceu
					resolving (6)
					> version: _/_/_/s/c/e/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/e/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/e/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/e/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/s/c/eu
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/eu
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'eu']
				_/_/_/s/c/e/u(AAACCVA)
_/_/_/s/c/e/u(AAACCVA)
_/_/_/sc/e/u(AAACVA)
_/_/_/sc/e/u(AAACVA)
_/_/_/s/c/eu(AAACCV)
_/_/_/sc/eu(AAACV)
_/_/_/_/s/c/e/u(AAAACCVA)
_/_/_/_/s/c/e/u(AAAACCVA)
_/_/_/_/sc/e/u(AAAACVA)
_/_/_/_/sc/e/u(AAAACVA)
_/_/_/_/s/c/eu(AAAACCV)
_/_/_/_/sc/eu(AAAACV)
				version split: ['_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_/sc/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_/sc/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', '_', 's', 'c', 'eu']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'eu']
				version split: ['_', '_', '_', 'sc', 'eu']
				{'string': '_/_/_/sc/eu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'eu']
				version split: ['_', '_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'eu']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'eu']
				version split: ['_', '_', '_', '_', 'sc', 'eu']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: _/_/_/s/c/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/s/c/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'ew']
				_/_/_/s/c/e/w(AAACCVC)
_/_/_/sc/e/w(AAACVC)
_/_/_/s/c/ew(AAACCV)
_/_/_/sc/ew(AAACV)
_/_/_/_/s/c/e/w(AAAACCVC)
_/_/_/_/sc/e/w(AAAACVC)
_/_/_/_/s/c/ew(AAAACCV)
_/_/_/_/sc/ew(AAAACV)
				version split: ['_', '_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'e', 'w']
				{'string': '_/_/_/sc/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'e', 'w']
				version split: ['_', '_', '_', 's', 'c', 'ew']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'ew']
				version split: ['_', '_', '_', 'sc', 'ew']
				{'string': '_/_/_/sc/ew', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'ew']
				version split: ['_', '_', '_', '_', 's', 'c', 'e', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'e', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'e', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'ew']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'ew']
				version split: ['_', '_', '_', '_', 'sc', 'ew']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: _/_/_/s/c/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'w']
				_/_/_/s/c/w(AAACCC)
_/_/_/sc/w(AAACC)
_/_/_/_/s/c/w(AAAACCC)
_/_/_/_/sc/w(AAAACC)
				version split: ['_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'w']
				version split: ['_', '_', '_', 'sc', 'w']
				{'string': '_/_/_/sc/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: _/_/_/s/e/ƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'e', 'ƿ']
				_/_/_/s/e/ƿ(AAACVC)
_/_/_/_/s/e/ƿ(AAAACVC)
				version split: ['_', '_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/_/s/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'e', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'e', 'ƿ']
				ANALYSING: shæ
					resolving (2)
					> version: _/_/_/s/h/æ
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/æ
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'æ']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'æ']
				_/_/_/s/h/æ(AAACCV)
_/_/_/sh/æ(AAACV)
_/_/_/_/s/h/æ(AAAACCV)
_/_/_/_/sh/æ(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'æ']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ']
				version split: ['_', '_', '_', 'sh', 'æ']
				{'string': '_/_/_/sh/æ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ']
				version split: ['_', '_', '_', '_', 's', 'h', 'æ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'æ']
				version split: ['_', '_', '_', '_', 'sh', 'æ']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: _/_/_/s/h/æ/ƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'æ', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'æ', 'ƿ']
				_/_/_/s/h/æ/ƿ(AAACCVC)
_/_/_/sh/æ/ƿ(AAACVC)
_/_/_/_/s/h/æ/ƿ(AAAACCVC)
_/_/_/_/sh/æ/ƿ(AAAACVC)
				version split: ['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/_/sh/æ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'æ', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'h', 'æ', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'æ', 'ƿ']
				version split: ['_', '_', '_', '_', 'sh', 'æ', 'ƿ']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'æ', 'ƿ']
				ANALYSING: shaƿ
					resolving (4)
					> version: _/_/_/s/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/h/aƿ
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					> version: _/_/_/sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'aƿ']
				_/_/_/s/h/a/ƿ(AAACCVC)
_/_/_/s/h/aƿ(AAACCV)
_/_/_/sh/a/ƿ(AAACVC)
_/_/_/sh/aƿ(AAACV)
_/_/_/_/s/h/a/ƿ(AAAACCVC)
_/_/_/_/s/h/aƿ(AAAACCV)
_/_/_/_/sh/a/ƿ(AAAACVC)
_/_/_/_/sh/aƿ(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/_/sh/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'aƿ']
				{'string': '_/_/_/sh/aƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'aƿ']
				version split: ['_', '_', '_', '_', 's', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'h', 'aƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 'sh', 'a', 'ƿ']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sh', 'aƿ']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: _/_/_/s/h/a/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/a/w
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					> version: _/_/_/s/h/aw
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/aw
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'aw']
				_/_/_/s/h/a/w(AAACCVC)
_/_/_/sh/a/w(AAACVC)
_/_/_/s/h/aw(AAACCV)
_/_/_/sh/aw(AAACV)
_/_/_/_/s/h/a/w(AAAACCVC)
_/_/_/_/sh/a/w(AAAACVC)
_/_/_/_/s/h/aw(AAAACCV)
_/_/_/_/sh/aw(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sh', 'a', 'w']
				{'string': '_/_/_/sh/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'a', 'w']
				version split: ['_', '_', '_', 's', 'h', 'aw']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'aw']
				version split: ['_', '_', '_', 'sh', 'aw']
				{'string': '_/_/_/sh/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'aw']
				version split: ['_', '_', '_', '_', 's', 'h', 'a', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sh', 'a', 'w']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'a', 'w']
				version split: ['_', '_', '_', '_', 's', 'h', 'aw']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'sh', 'aw']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'aw']
				ANALYSING: sheu
					resolving (6)
					> version: _/_/_/s/h/e/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/h/e/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/e/u
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					> version: _/_/_/sh/e/u
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					> version: _/_/_/s/h/eu
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/eu
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'eu']
				_/_/_/s/h/e/u(AAACCVA)
_/_/_/s/h/e/u(AAACCVA)
_/_/_/sh/e/u(AAACVA)
_/_/_/sh/e/u(AAACVA)
_/_/_/s/h/eu(AAACCV)
_/_/_/sh/eu(AAACV)
_/_/_/_/s/h/e/u(AAAACCVA)
_/_/_/_/s/h/e/u(AAAACCVA)
_/_/_/_/sh/e/u(AAAACVA)
_/_/_/_/sh/e/u(AAAACVA)
_/_/_/_/s/h/eu(AAAACCV)
_/_/_/_/sh/eu(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_/sh/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_/sh/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', '_', 's', 'h', 'eu']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'eu']
				version split: ['_', '_', '_', 'sh', 'eu']
				{'string': '_/_/_/sh/eu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'eu']
				version split: ['_', '_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'h', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sh', 'e', 'u']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'h', 'eu']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'eu']
				version split: ['_', '_', '_', '_', 'sh', 'eu']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: _/_/_/s/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'e', 'ƿ']
				_/_/_/s/h/e/ƿ(AAACCVC)
_/_/_/sh/e/ƿ(AAACVC)
_/_/_/_/s/h/e/ƿ(AAAACCVC)
_/_/_/_/sh/e/ƿ(AAAACVC)
				version split: ['_', '_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/_/sh/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sh', 'e', 'ƿ']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: _/_/_/s/h/e/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/e/w
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					> version: _/_/_/s/h/ew
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sh/ew
					TRYING: sh
					adding blocked set: C = C >> sh, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'ew']
				_/_/_/s/h/e/w(AAACCVC)
_/_/_/sh/e/w(AAACVC)
_/_/_/s/h/ew(AAACCV)
_/_/_/sh/ew(AAACV)
_/_/_/_/s/h/e/w(AAAACCVC)
_/_/_/_/sh/e/w(AAAACVC)
_/_/_/_/s/h/ew(AAAACCV)
_/_/_/_/sh/ew(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sh', 'e', 'w']
				{'string': '_/_/_/sh/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'e', 'w']
				version split: ['_', '_', '_', 's', 'h', 'ew']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ew']
				version split: ['_', '_', '_', 'sh', 'ew']
				{'string': '_/_/_/sh/ew', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ew']
				version split: ['_', '_', '_', '_', 's', 'h', 'e', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sh', 'e', 'w']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'e', 'w']
				version split: ['_', '_', '_', '_', 's', 'h', 'ew']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'ew']
				version split: ['_', '_', '_', '_', 'sh', 'ew']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: _/_/_/s/h/o/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/o/w
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					> version: _/_/_/s/h/ow
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sh/ow
					TRYING: sh
					adding blocked set: C = C >> sh, _, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sh', 'ow']
				_/_/_/s/h/o/w(AAACCVC)
_/_/_/sh/o/w(AAACVC)
_/_/_/s/h/ow(AAACCV)
_/_/_/sh/ow(AAACV)
_/_/_/_/s/h/o/w(AAAACCVC)
_/_/_/_/sh/o/w(AAAACVC)
_/_/_/_/s/h/ow(AAAACCV)
_/_/_/_/sh/ow(AAAACV)
				version split: ['_', '_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sh', 'o', 'w']
				{'string': '_/_/_/sh/o', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'o', 'w']
				version split: ['_', '_', '_', 's', 'h', 'ow']
				{'string': '_/_/_/s/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'h', 'ow']
				version split: ['_', '_', '_', 'sh', 'ow']
				{'string': '_/_/_/sh/ow', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sh', 'ow']
				version split: ['_', '_', '_', '_', 's', 'h', 'o', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sh', 'o', 'w']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'o', 'w']
				version split: ['_', '_', '_', '_', 's', 'h', 'ow']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'h', 'ow']
				version split: ['_', '_', '_', '_', 'sh', 'ow']
				{'string': '_/_/_/_/sh', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sh', 'ow']
				ANALYSING: schau
					resolving (24)
					> version: _/_/_/s/c/h/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/h/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/a/u
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sch/a/u
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/ch/a/u
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/h/au
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/au
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/a/u
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sch/a/u
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sch/au
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/au
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/u
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/au
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/au
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/au
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sc/h/au
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'au']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'au']
				_/_/_/s/c/h/a/u(AAACCCVA)
_/_/_/s/c/h/a/u(AAACCCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/s/ch/a/u(AAACCVA)
_/_/_/s/ch/a/u(AAACCVA)
_/_/_/s/c/h/au(AAACCCV)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/au(AAACCV)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/a/u(AAACVA)
_/_/_/sch/au(AAACV)
_/_/_/s/ch/au(AAACCV)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/a/u(AAACCVA)
_/_/_/sc/h/au(AAACCV)
_/_/_/sc/h/au(AAACCV)
_/_/_/sch/au(AAACV)
_/_/_/sc/h/au(AAACCV)
_/_/_/_/s/c/h/a/u(AAAACCCVA)
_/_/_/_/s/c/h/a/u(AAAACCCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sch/a/u(AAAACVA)
_/_/_/_/sch/a/u(AAAACVA)
_/_/_/_/s/ch/a/u(AAAACCVA)
_/_/_/_/s/ch/a/u(AAAACCVA)
_/_/_/_/s/c/h/au(AAAACCCV)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/au(AAAACCV)
_/_/_/_/sch/a/u(AAAACVA)
_/_/_/_/sch/a/u(AAAACVA)
_/_/_/_/sch/au(AAAACV)
_/_/_/_/s/ch/au(AAAACCV)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/a/u(AAAACCVA)
_/_/_/_/sc/h/au(AAAACCV)
_/_/_/_/sc/h/au(AAAACCV)
_/_/_/_/sch/au(AAAACV)
_/_/_/_/sc/h/au(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', '_', 's', 'c', 'h', 'au']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'au']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', 'sch', 'au']
				{'string': '_/_/_/sch/au', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'au']
				version split: ['_', '_', '_', 's', 'ch', 'au']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'au']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', 'sch', 'au']
				{'string': '_/_/_/sch/au', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'au']
				version split: ['_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'a', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'au']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'au']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'au']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'au']
				version split: ['_', '_', '_', '_', 's', 'ch', 'au']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'au']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'au']
				version split: ['_', '_', '_', '_', 'sch', 'au']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'au']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'au']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'au']
				ANALYSING: schaƿ
					resolving (16)
					> version: _/_/_/s/c/h/a/ƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/s/c/h/aƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/a/ƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/aƿ
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/a/ƿ
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/aƿ
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sc/h/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/aƿ
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'aƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				_/_/_/s/c/h/a/ƿ(AAACCCVC)
_/_/_/s/c/h/aƿ(AAACCCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/s/ch/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/s/ch/aƿ(AAACCV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sch/a/ƿ(AAACVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/sch/aƿ(AAACV)
_/_/_/sc/h/a/ƿ(AAACCVC)
_/_/_/sc/h/aƿ(AAACCV)
_/_/_/_/s/c/h/a/ƿ(AAAACCCVC)
_/_/_/_/s/c/h/aƿ(AAAACCCV)
_/_/_/_/sc/h/a/ƿ(AAAACCVC)
_/_/_/_/sch/a/ƿ(AAAACVC)
_/_/_/_/s/ch/a/ƿ(AAAACCVC)
_/_/_/_/sc/h/aƿ(AAAACCV)
_/_/_/_/sch/aƿ(AAAACV)
_/_/_/_/s/ch/aƿ(AAAACCV)
_/_/_/_/sc/h/a/ƿ(AAAACCVC)
_/_/_/_/sc/h/a/ƿ(AAAACCVC)
_/_/_/_/sch/a/ƿ(AAAACVC)
_/_/_/_/sc/h/aƿ(AAAACCV)
_/_/_/_/sc/h/aƿ(AAAACCV)
_/_/_/_/sch/aƿ(AAAACV)
_/_/_/_/sc/h/a/ƿ(AAAACCVC)
_/_/_/_/sc/h/aƿ(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/sch/aƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/sch/aƿ', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'aƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'ch', 'a', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', '_', 's', 'ch', 'aƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'aƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				version split: ['_', '_', '_', '_', 'sch', 'aƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'aƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aƿ']
				ANALYSING: schaw
					resolving (16)
					> version: _/_/_/s/c/h/a/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/a/w
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/a/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/h/aw
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/a/w
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sch/aw
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/aw
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/a/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/aw
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sc/h/aw
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'aw']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				_/_/_/s/c/h/a/w(AAACCCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sch/a/w(AAACVC)
_/_/_/s/ch/a/w(AAACCVC)
_/_/_/s/c/h/aw(AAACCCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/a/w(AAACVC)
_/_/_/sch/aw(AAACV)
_/_/_/s/ch/aw(AAACCV)
_/_/_/sc/h/a/w(AAACCVC)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sc/h/aw(AAACCV)
_/_/_/sch/aw(AAACV)
_/_/_/sc/h/aw(AAACCV)
_/_/_/_/s/c/h/a/w(AAAACCCVC)
_/_/_/_/sc/h/a/w(AAAACCVC)
_/_/_/_/sch/a/w(AAAACVC)
_/_/_/_/s/ch/a/w(AAAACCVC)
_/_/_/_/s/c/h/aw(AAAACCCV)
_/_/_/_/sc/h/a/w(AAAACCVC)
_/_/_/_/sc/h/a/w(AAAACCVC)
_/_/_/_/sc/h/aw(AAAACCV)
_/_/_/_/sch/a/w(AAAACVC)
_/_/_/_/sch/aw(AAAACV)
_/_/_/_/s/ch/aw(AAAACCV)
_/_/_/_/sc/h/a/w(AAAACCVC)
_/_/_/_/sc/h/aw(AAAACCV)
_/_/_/_/sc/h/aw(AAAACCV)
_/_/_/_/sch/aw(AAAACV)
_/_/_/_/sc/h/aw(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'a', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/sch/a', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/sch/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', 's', 'ch', 'aw']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/sch/aw', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'a', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', '_', 's', 'ch', 'a', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'a', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'aw']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'sch', 'a', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', '_', 's', 'ch', 'aw']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'aw']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'a', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aw']
				version split: ['_', '_', '_', '_', 'sch', 'aw']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'aw']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'aw']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'aw']
				ANALYSING: scheu
					resolving (24)
					> version: _/_/_/s/c/h/e/u
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/s/c/h/e/u
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/e/u
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sch/e/u
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/e/u
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/s/ch/e/u
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/s/c/h/eu
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/e/u
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sch/e/u
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sch/eu
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/eu
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/u
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/eu
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sc/h/eu
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'eu']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				_/_/_/s/c/h/e/u(AAACCCVA)
_/_/_/s/c/h/e/u(AAACCCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/s/ch/e/u(AAACCVA)
_/_/_/s/ch/e/u(AAACCVA)
_/_/_/s/c/h/eu(AAACCCV)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/e/u(AAACVA)
_/_/_/sch/eu(AAACV)
_/_/_/s/ch/eu(AAACCV)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/e/u(AAACCVA)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sc/h/eu(AAACCV)
_/_/_/sch/eu(AAACV)
_/_/_/sc/h/eu(AAACCV)
_/_/_/_/s/c/h/e/u(AAAACCCVA)
_/_/_/_/s/c/h/e/u(AAAACCCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sch/e/u(AAAACVA)
_/_/_/_/sch/e/u(AAAACVA)
_/_/_/_/s/ch/e/u(AAAACCVA)
_/_/_/_/s/ch/e/u(AAAACCVA)
_/_/_/_/s/c/h/eu(AAAACCCV)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/eu(AAAACCV)
_/_/_/_/sch/e/u(AAAACVA)
_/_/_/_/sch/e/u(AAAACVA)
_/_/_/_/sch/eu(AAAACV)
_/_/_/_/s/ch/eu(AAAACCV)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/e/u(AAAACCVA)
_/_/_/_/sc/h/eu(AAAACCV)
_/_/_/_/sc/h/eu(AAAACCV)
_/_/_/_/sch/eu(AAAACV)
_/_/_/_/sc/h/eu(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', '_', 's', 'c', 'h', 'eu']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'eu']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_/sch/eu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'eu']
				version split: ['_', '_', '_', 's', 'ch', 'eu']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'eu']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_/sch/eu', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'eu']
				version split: ['_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'e', 'u']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'eu']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'eu']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'u']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'eu']
				version split: ['_', '_', '_', '_', 's', 'ch', 'eu']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'eu']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'u']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'eu']
				version split: ['_', '_', '_', '_', 'sch', 'eu']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'eu']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'eu']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'eu']
				ANALYSING: scheƿ
					resolving (8)
					> version: _/_/_/s/c/h/e/ƿ
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/e/ƿ
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/e/ƿ
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sc/h/e/ƿ
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				_/_/_/s/c/h/e/ƿ(AAACCCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/s/ch/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/sch/e/ƿ(AAACVC)
_/_/_/sc/h/e/ƿ(AAACCVC)
_/_/_/_/s/c/h/e/ƿ(AAAACCCVC)
_/_/_/_/sc/h/e/ƿ(AAAACCVC)
_/_/_/_/sch/e/ƿ(AAAACVC)
_/_/_/_/s/ch/e/ƿ(AAAACCVC)
_/_/_/_/sc/h/e/ƿ(AAAACCVC)
_/_/_/_/sc/h/e/ƿ(AAAACCVC)
_/_/_/_/sch/e/ƿ(AAAACVC)
_/_/_/_/sc/h/e/ƿ(AAAACCVC)
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 's', 'ch', 'e', 'ƿ']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'ƿ']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'ƿ']
				ANALYSING: schew
					resolving (16)
					> version: _/_/_/s/c/h/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/e/w
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/s/c/h/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/e/w
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sch/ew
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/s/ch/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/sc/h/e/w
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					> version: _/_/_/sch/ew
					TRYING: sch
					adding blocked set: C = C >> sch, _, w, ƿ
					> version: _/_/_/sc/h/ew
					TRYING: sc
					adding blocked set: C = C >> _, sc, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				_/_/_/s/c/h/e/w(AAACCCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sch/e/w(AAACVC)
_/_/_/s/ch/e/w(AAACCVC)
_/_/_/s/c/h/ew(AAACCCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/e/w(AAACVC)
_/_/_/sch/ew(AAACV)
_/_/_/s/ch/ew(AAACCV)
_/_/_/sc/h/e/w(AAACCVC)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sc/h/ew(AAACCV)
_/_/_/sch/ew(AAACV)
_/_/_/sc/h/ew(AAACCV)
_/_/_/_/s/c/h/e/w(AAAACCCVC)
_/_/_/_/sc/h/e/w(AAAACCVC)
_/_/_/_/sch/e/w(AAAACVC)
_/_/_/_/s/ch/e/w(AAAACCVC)
_/_/_/_/s/c/h/ew(AAAACCCV)
_/_/_/_/sc/h/e/w(AAAACCVC)
_/_/_/_/sc/h/e/w(AAAACCVC)
_/_/_/_/sc/h/ew(AAAACCV)
_/_/_/_/sch/e/w(AAAACVC)
_/_/_/_/sch/ew(AAAACV)
_/_/_/_/s/ch/ew(AAAACCV)
_/_/_/_/sc/h/e/w(AAAACCVC)
_/_/_/_/sc/h/ew(AAAACCV)
_/_/_/_/sc/h/ew(AAAACCV)
_/_/_/_/sch/ew(AAAACV)
_/_/_/_/sc/h/ew(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'e', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/sch/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/sch/ew', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', 's', 'ch', 'ew']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/sch/ew', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'e', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', '_', 's', 'ch', 'e', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'e', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'ew']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'ew']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', '_', 'sch', 'e', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', '_', 's', 'ch', 'ew']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'ew']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'e', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ew']
				version split: ['_', '_', '_', '_', 'sch', 'ew']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'ew']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ew']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ew']
				ANALYSING: schow
					resolving (16)
					> version: _/_/_/s/c/h/o/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/o/w
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/o/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/s/c/h/ow
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/o/w
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sch/ow
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/s/ch/ow
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/sc/h/o/w
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					> version: _/_/_/sch/ow
					TRYING: sch
					adding blocked set: C = C >> sch, w, _, ƿ
					> version: _/_/_/sc/h/ow
					TRYING: sc
					adding blocked set: C = C >> sc, w, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'c', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 's', 'ch', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sch', 'ow']
				adding dashed alternative: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				_/_/_/s/c/h/o/w(AAACCCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sch/o/w(AAACVC)
_/_/_/s/ch/o/w(AAACCVC)
_/_/_/s/c/h/ow(AAACCCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/o/w(AAACVC)
_/_/_/sch/ow(AAACV)
_/_/_/s/ch/ow(AAACCV)
_/_/_/sc/h/o/w(AAACCVC)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sc/h/ow(AAACCV)
_/_/_/sch/ow(AAACV)
_/_/_/sc/h/ow(AAACCV)
_/_/_/_/s/c/h/o/w(AAAACCCVC)
_/_/_/_/sc/h/o/w(AAAACCVC)
_/_/_/_/sch/o/w(AAAACVC)
_/_/_/_/s/ch/o/w(AAAACCVC)
_/_/_/_/s/c/h/ow(AAAACCCV)
_/_/_/_/sc/h/o/w(AAAACCVC)
_/_/_/_/sc/h/o/w(AAAACCVC)
_/_/_/_/sc/h/ow(AAAACCV)
_/_/_/_/sch/o/w(AAAACVC)
_/_/_/_/sch/ow(AAAACV)
_/_/_/_/s/ch/ow(AAAACCV)
_/_/_/_/sc/h/o/w(AAAACCVC)
_/_/_/_/sc/h/ow(AAAACCV)
_/_/_/_/sc/h/ow(AAAACCV)
_/_/_/_/sch/ow(AAAACV)
_/_/_/_/sc/h/ow(AAAACCV)
				version split: ['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/sch/o', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'o', 'w']
				version split: ['_', '_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/_/s/c', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'c', 'h', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/sch/o', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/sch/ow', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', 's', 'ch', 'ow']
				{'string': '_/_/_/s/ch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 'ch', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/sch/ow', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/sc/h', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'o', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', '_', 's', 'ch', 'o', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'o', 'w']
				version split: ['_', '_', '_', '_', 's', 'c', 'h', 'ow']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'c', 'h', 'ow']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', '_', 'sch', 'o', 'w']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', '_', 's', 'ch', 'ow']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 'ch', 'ow']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'o', 'w']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ow']
				version split: ['_', '_', '_', '_', 'sch', 'ow']
				{'string': '_/_/_/_/sch', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sch', 'ow']
				version split: ['_', '_', '_', '_', 'sc', 'h', 'ow']
				{'string': '_/_/_/_/sc', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'sc', 'h', 'ow']
				ANALYSING: ssew
					resolving (4)
					> version: _/_/_/s/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/ss/e/w
					TRYING: ss
					adding blocked set: C = C >> _, ss, w, ƿ
					> version: _/_/_/s/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, ƿ
					> version: _/_/_/ss/ew
					TRYING: ss
					adding blocked set: C = C >> _, ss, w, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 's', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 'ss', 'e', 'w']
				adding dashed alternative: ['_', '_', '_', '_', 's', 's', 'ew']
				adding dashed alternative: ['_', '_', '_', '_', 'ss', 'ew']
				_/_/_/s/s/e/w(AAACCVC)
_/_/_/ss/e/w(AAACVC)
_/_/_/s/s/ew(AAACCV)
_/_/_/ss/ew(AAACV)
_/_/_/_/s/s/e/w(AAAACCVC)
_/_/_/_/ss/e/w(AAAACVC)
_/_/_/_/s/s/ew(AAAACCV)
_/_/_/_/ss/ew(AAAACV)
				version split: ['_', '_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/_/s/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'e', 'w']
				version split: ['_', '_', '_', 'ss', 'e', 'w']
				{'string': '_/_/_/ss/e', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'e', 'w']
				version split: ['_', '_', '_', 's', 's', 'ew']
				{'string': '_/_/_/s/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'ew']
				version split: ['_', '_', '_', 'ss', 'ew']
				{'string': '_/_/_/ss/ew', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'ew']
				version split: ['_', '_', '_', '_', 's', 's', 'e', 'w']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 's', 'e', 'w']
				version split: ['_', '_', '_', '_', 'ss', 'e', 'w']
				{'string': '_/_/_/_/ss', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ss', 'e', 'w']
				version split: ['_', '_', '_', '_', 's', 's', 'ew']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 's', 'ew']
				version split: ['_', '_', '_', '_', 'ss', 'ew']
				{'string': '_/_/_/_/ss', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ss', 'ew']
				ANALYSING: sswe
					resolving (2)
					> version: _/_/_/s/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, w, _, ƿ
					> version: _/_/_/ss/w/e
					TRYING: ss
					adding blocked set: C = C >> w, ss, _, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['_', '_', '_', '_', 's', 's', 'w', 'e']
				adding dashed alternative: ['_', '_', '_', '_', 'ss', 'w', 'e']
				_/_/_/s/s/w/e(AAACCCV)
_/_/_/ss/w/e(AAACCV)
_/_/_/_/s/s/w/e(AAAACCCV)
_/_/_/_/ss/w/e(AAAACCV)
				version split: ['_', '_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/_/s/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', '_', 'ss', 'w', 'e']
				{'string': '_/_/_/ss/w', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', 'ss', 'w', 'e']
				version split: ['_', '_', '_', '_', 's', 's', 'w', 'e']
				{'string': '_/_/_/_/s', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 's', 's', 'w', 'e']
				version split: ['_', '_', '_', '_', 'ss', 'w', 'e']
				{'string': '_/_/_/_/ss', 'rgx': '((_))/((_))/((_))/((_))$'}
				_____REMOVING________['_', '_', '_', '_', 'ss', 'w', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['sc', 'e', 'a', 'ƿ']
		SPLIT: ['sh', 'a', 'u', 'w']
		SPLIT: ['sh', 'e', 'a', 'ƿ']
		SPLIT: ['sch', 'e', 'a', 'ƿ']
		SPLIT: ['ss', 'e', 'a', 'w']
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		SPLIT: ["['_']", "['_']", "['_']", "['_']"]
		version for pattern CVVC is INVALID
		[{'_', 'sc', 'sh', 'ss', 'sch'}]
		24
		OVERVIEW: version for pattern CVVC
{'_', 'sc', 'sh', 'ss', 'sch'}
faulty splits: 24
[''][''][''][''] <-! chaw
[''][''][''][''] <-! scau
[''][''][''][''] <-! scaw
[''][''][''][''] <-! sceu
[''][''][''][''] <-! scew
[''][''][''][''] <-! scw
[''][''][''][''] <-! seƿ
[''][''][''][''] <-! shæ
[''][''][''][''] <-! shæƿ
[''][''][''][''] <-! shaƿ
[''][''][''][''] <-! shaw
[''][''][''][''] <-! sheu
[''][''][''][''] <-! sheƿ
[''][''][''][''] <-! shew
[''][''][''][''] <-! show
[''][''][''][''] <-! schau
[''][''][''][''] <-! schaƿ
[''][''][''][''] <-! schaw
[''][''][''][''] <-! scheu
[''][''][''][''] <-! scheƿ
[''][''][''][''] <-! schew
[''][''][''][''] <-! schow
[''][''][''][''] <-! ssew
[''][''][''][''] <-! sswe
sc | e | a | ƿ
sh | a | u | w
sh | e | a | ƿ
sch | e | a | ƿ
ss | e | a | w
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
['_'] | ['_'] | ['_'] | ['_']
0 : {'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'ch', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'sc', 'sh', 'ss', 'c', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'sc', 'sh', 'ss', 'c', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'ch', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'},{'_', 's', 'sc', 'sh', 'ss', 'sch'}
3 : {'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'ch', 'w', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'ch', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'w', 'ƿ', 'c'},{'s', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'w', 'ƿ', 'c'},{'sc', 'w', '_', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'w', 'ss', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sh', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sh', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'_', 'ss', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'ss', 'w', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sch', '_', 'w', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'_', 'sc', 'w', 'ƿ'},{'sch', 'w', '_', 'ƿ'},{'s', '_', 'w', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'s', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'},{'sc', 'w', '_', 'ƿ'}
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'ch', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 2}, {'lit': 'uw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 2}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aw', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'eu', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'ow', 'ln': 2, 'index': 2}], [{'lit': 'sh', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 2}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'au', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 3}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'aw', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'aƿ', 'ln': 2, 'index': 4}], [{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}], [{'lit': 'aƿ', 'ln': 2, 'index': 4}, {'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ea', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'eu', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ew', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'sc', 'ln': 2, 'index': 0}], [{'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}], [{'lit': 'sc', 'ln': 2, 'index': 0}, {'lit': 'sch', 'ln': 3, 'index': 0}, {'lit': 'ch', 'ln': 2, 'index': 1}, {'lit': 'ow', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'eaw', 'ln': 3, 'index': 2}, {'lit': 'aw', 'ln': 2, 'index': 3}, {'lit': 'ea', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}], [{'lit': 'ew', 'ln': 2, 'index': 2}], [{'lit': 'ss', 'ln': 2, 'index': 0}, {'lit': 'ew', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ss', 'ln': 2, 'index': 0}]]
	MIN pattern length=3
	Pattern CVV is valid
	Pattern CCVVC is valid
	Pattern CVC is valid
	Pattern CCV is valid
	Pattern CCVC is valid
	Pattern CVCC is valid
	Pattern CC is invalid
	Pattern CCVV is valid
	Pattern CCC is valid
	Pattern CV is invalid
	Pattern CCCV is valid
	Pattern CCCVV is valid
	Pattern CCVCC is valid
	Pattern CCCVVC is valid
	Pattern CVVC is valid
	Pattern CCCVC is valid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: c
					> version: ch/a/w
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: c/h/aw
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					> version: ch/aw
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'ch', 'c'}
					RESULT:  ['ch', 'c']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				version split: ['c', 'h', 'aw']
				{'string': 'c', 'rgx': '((ch)|(c))$'}
				version split: ['ch', 'aw']
				{'string': 'ch', 'rgx': '((ch)|(c))$'}
				ANALYSING: scau
					resolving (6)
					> version: s/c/a/u
					TRYING: s
					> version: s/c/a/u
					TRYING: s
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/a/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/au
					TRYING: s
					> version: sc/au
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['sc', 'a', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'au']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'au']
				ANALYSING: scaw
					resolving (4)
					> version: s/c/a/w
					TRYING: s
					> version: sc/a/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/aw
					TRYING: s
					> version: sc/aw
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'a', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'aw']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'aw']
				ANALYSING: sceaƿ
					resolving (8)
					> version: s/c/e/a/ƿ
					TRYING: s
					> version: s/c/e/aƿ
					TRYING: s
					> version: sc/e/a/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/e/aƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ea/ƿ
					TRYING: s
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/ea/ƿ
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'a', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'aƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				version split: ['sc', 'ea', 'ƿ']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ea', 'ƿ']
				ANALYSING: sceu
					resolving (6)
					> version: s/c/e/u
					TRYING: s
					> version: s/c/e/u
					TRYING: s
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: sc/e/u
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/eu
					TRYING: s
					> version: sc/eu
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['sc', 'e', 'u']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'eu']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'eu']
				ANALYSING: scew
					resolving (4)
					> version: s/c/e/w
					TRYING: s
					> version: sc/e/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					> version: s/c/ew
					TRYING: s
					> version: sc/ew
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'e', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'ew']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'ew']
				ANALYSING: scw
					resolving (2)
					> version: s/c/w
					TRYING: s
					> version: sc/w
					TRYING: sc
					adding blocked set: C = C >> s, ch, sc, c
					RESULT:  ['s']
				version split: ['s', 'c', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sc', 'w']
				{'string': 'sc', 'rgx': '((s))$'}
				_____REMOVING________['sc', 'w']
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: s
					RESULT:  ['s']
				version split: ['s', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				ANALYSING: shæ
					resolving (2)
					> version: s/h/æ
					TRYING: s
					> version: sh/æ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ']
				ANALYSING: shæƿ
					resolving (2)
					> version: s/h/æ/ƿ
					TRYING: s
					> version: sh/æ/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'æ', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (10)
					> version: s/h/a/u/w
					TRYING: s
					> version: s/h/a/u/w
					TRYING: s
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/u/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: s/h/a/uw
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/a/uw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/au/w
					TRYING: s
					> version: sh/au/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['sh', 'a', 'u', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				version split: ['sh', 'a', 'uw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'au', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'au', 'w']
				ANALYSING: shaƿ
					resolving (4)
					> version: s/h/a/ƿ
					TRYING: s
					> version: s/h/aƿ
					TRYING: s
					> version: sh/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'ƿ']
				version split: ['sh', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aƿ']
				ANALYSING: shaw
					resolving (4)
					> version: s/h/a/w
					TRYING: s
					> version: sh/a/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/aw
					TRYING: s
					> version: sh/aw
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'a', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'aw']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'aw']
				ANALYSING: sheaƿ
					resolving (8)
					> version: s/h/e/a/ƿ
					TRYING: s
					> version: s/h/e/aƿ
					TRYING: s
					> version: sh/e/a/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/e/aƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ea/ƿ
					TRYING: s
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/ea/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'a', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'aƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				version split: ['sh', 'ea', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ea', 'ƿ']
				ANALYSING: sheu
					resolving (6)
					> version: s/h/e/u
					TRYING: s
					> version: s/h/e/u
					TRYING: s
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: sh/e/u
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/eu
					TRYING: s
					> version: sh/eu
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['sh', 'e', 'u']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'eu']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'eu']
				ANALYSING: sheƿ
					resolving (2)
					> version: s/h/e/ƿ
					TRYING: s
					> version: sh/e/ƿ
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'ƿ']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'ƿ']
				ANALYSING: shew
					resolving (4)
					> version: s/h/e/w
					TRYING: s
					> version: sh/e/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ew
					TRYING: s
					> version: sh/ew
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'e', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ew']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ew']
				ANALYSING: show
					resolving (4)
					> version: s/h/o/w
					TRYING: s
					> version: sh/o/w
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					> version: s/h/ow
					TRYING: s
					> version: sh/ow
					TRYING: sh
					adding blocked set: C = C >> s, ch, sh, c
					RESULT:  ['s']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'o', 'w']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['sh', 'ow']
				{'string': 'sh', 'rgx': '((s))$'}
				_____REMOVING________['sh', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					> version: ss/e/a/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/e/aw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/e/aw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: s/s/eaw
					TRYING: s
					> version: s/s/ea/w
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: ss/ea/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/eaw
					TRYING: s
					> version: ss/eaw
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'e', 'aw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'aw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['s', 's', 'ea', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['ss', 'ea', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'eaw']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'eaw']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					> version: ss/e/w
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					> version: s/s/ew
					TRYING: s
					> version: ss/ew
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'e', 'w']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'e', 'w']
				{'string': 'ss', 'rgx': '((s))$'}
				version split: ['s', 's', 'ew']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'ew']
				{'string': 'ss', 'rgx': '((s))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					> version: ss/w/e
					TRYING: ss
					adding blocked set: C = C >> s, ch, ss, c
					RESULT:  ['s']
				version split: ['s', 's', 'w', 'e']
				{'string': 's', 'rgx': '((s))$'}
				version split: ['ss', 'w', 'e']
				{'string': 'ss', 'rgx': '((s))$'}
			___CCCVC : 1___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (4)
					> version: c/h/a/w
					TRYING: h
					> version: ch/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: h
					> version: ch/aw
					TRYING: aw
					RESULT:  ['h']
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'a', 'w']
				{'string': 'ch/a', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h', 'rgx': '((ch)|(c))/((h))$'}
				version split: ['ch', 'aw']
				{'string': 'ch/aw', 'rgx': '((ch)|(c))/((h))$'}
				_____REMOVING________['ch', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: c
					> version: s/c/a/u
					TRYING: c
					> version: s/c/au
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'au']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: c
					> version: s/c/aw
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'aw']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: c
					> version: s/c/e/aƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					> version: s/c/ea/ƿ
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: c
					> version: s/c/e/u
					TRYING: c
					> version: s/c/eu
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'eu']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: c
					> version: s/c/ew
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				version split: ['s', 'c', 'ew']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'c', 'w']
				{'string': 's/c', 'rgx': '((s))/((c))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'e', 'ƿ']
				s/e/ƿ(CVC)
s/_/e/ƿ(CAVC)
				version split: ['s', 'e', 'ƿ']
				{'string': 's/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 'e', 'ƿ']
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/a/u/w
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					> version: s/h/a/uw
					TRYING: h
					> version: s/h/au/w
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: h
					> version: s/h/aƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: h
					> version: s/h/aw
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'aw']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: h
					> version: s/h/e/aƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					> version: s/h/ea/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: h
					> version: s/h/e/u
					TRYING: h
					> version: s/h/eu
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'eu']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: h
					> version: s/h/ew
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ew']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: h
					> version: s/h/ow
					TRYING: h
					RESULT:  ['h']
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				version split: ['s', 'h', 'ow']
				{'string': 's/h', 'rgx': '((s))/((h))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/e/a/w
					TRYING: e
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: s/s/e/aw
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/e/aw
					TRYING: e
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: s/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/eaw
					TRYING: eaw
					> version: ss/eaw
					TRYING: eaw
					> version: ss/ea/w
					TRYING: ea
					> version: s/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				adding dashed alternative: ['ss', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', 'eaw']
				s/s/e/a/w(CCVVC)
ss/e/a/w(CVVC)
s/s/eaw(CCV)
s/s/e/aw(CCVV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/e/aw(CVV)
ss/ea/w(CVC)
s/s/eaw(CCV)
s/s/eaw(CCV)
s/s/ea/w(CCVC)
ss/eaw(CV)
ss/eaw(CV)
ss/ea/w(CVC)
s/s/eaw(CCV)
ss/eaw(CV)
s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
				version split: ['s', 's', 'e', 'a', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'a', 'w']
				version split: ['ss', 'e', 'a', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'a', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'e', 'aw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'aw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'e', 'aw']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'aw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['s', 's', 'ea', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ea', 'w']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['ss', 'ea', 'w']
				{'string': 'ss/ea', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ea', 'w']
				version split: ['s', 's', 'eaw']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'eaw']
				version split: ['ss', 'eaw']
				{'string': 'ss/eaw', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'eaw']
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/e/w
					TRYING: e
					> version: s/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', 'ew']
				s/s/e/w(CCVC)
ss/e/w(CVC)
s/s/ew(CCV)
ss/ew(CV)
s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
				version split: ['s', 's', 'e', 'w']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'e', 'w']
				version split: ['ss', 'e', 'w']
				{'string': 'ss/e', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'e', 'w']
				version split: ['s', 's', 'ew']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'ew']
				version split: ['ss', 'ew']
				{'string': 'ss/ew', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'ew']
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, _, h, c
					> version: ss/w/e
					TRYING: w
					adding blocked set: C = C >> w, _, h, c
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 's', 'w', 'e']
				adding dashed alternative: ['ss', '_', 'w', 'e']
				s/s/w/e(CCCV)
ss/w/e(CCV)
s/_/s/w/e(CACCV)
ss/_/w/e(CACV)
				version split: ['s', 's', 'w', 'e']
				{'string': 's/s', 'rgx': '((s))/((_))$'}
				_____REMOVING________['s', 's', 'w', 'e']
				version split: ['ss', 'w', 'e']
				{'string': 'ss/w', 'rgx': '((s))/((_))$'}
				_____REMOVING________['ss', 'w', 'e']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_', 'rgx': '((s))/((_))$'}
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_', 'rgx': '((s))/((_))$'}
			___CCCVC : 2___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/a/w
					TRYING: a
					> version: c/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['c', 'h', '_', 'a', 'w']
				adding dashed alternative: ['c', 'h', '_', 'aw']
				c/h/a/w(CCVC)
c/h/aw(CCV)
c/h/_/a/w(CCAVC)
c/h/_/aw(CCAV)
				version split: ['c', 'h', 'a', 'w']
				{'string': 'c/h/a', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'a', 'w']
				version split: ['c', 'h', 'aw']
				{'string': 'c/h/aw', 'rgx': '((ch)|(c))/((h))/((_))$'}
				_____REMOVING________['c', 'h', 'aw']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_', 'rgx': '((ch)|(c))/((h))/((_))$'}
				ANALYSING: scau
					resolving (3)
					> version: s/c/a/u
					TRYING: a
					> version: s/c/a/u
					TRYING: a
					> version: s/c/au
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'a', 'u']
				adding dashed alternative: ['s', 'c', '_', 'au']
				s/c/a/u(CCVC)
s/c/a/u(CCVV)
s/c/au(CCV)
s/c/_/a/u(CCAVA)
s/c/_/a/u(CCAVA)
s/c/_/au(CCAV)
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'a', 'u']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'u']
				version split: ['s', 'c', 'au']
				{'string': 's/c/au', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'au']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scaw
					resolving (2)
					> version: s/c/a/w
					TRYING: a
					> version: s/c/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'a', 'w']
				adding dashed alternative: ['s', 'c', '_', 'aw']
				s/c/a/w(CCVC)
s/c/aw(CCV)
s/c/_/a/w(CCAVC)
s/c/_/aw(CCAV)
				version split: ['s', 'c', 'a', 'w']
				{'string': 's/c/a', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'a', 'w']
				version split: ['s', 'c', 'aw']
				{'string': 's/c/aw', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'aw']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/e/a/ƿ
					TRYING: e
					> version: s/c/e/aƿ
					TRYING: e
					> version: s/c/ea/ƿ
					TRYING: ea
					> version: s/c/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'c', '_', 'ea', 'ƿ']
				s/c/e/a/ƿ(CCVVC)
s/c/e/aƿ(CCVV)
s/c/ea/ƿ(CCVC)
s/c/ea/ƿ(CCVC)
s/c/_/e/a/ƿ(CCAVVC)
s/c/_/e/aƿ(CCAVV)
s/c/_/ea/ƿ(CCAVC)
s/c/_/ea/ƿ(CCAVC)
				version split: ['s', 'c', 'e', 'a', 'ƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'a', 'ƿ']
				version split: ['s', 'c', 'e', 'aƿ']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'aƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', 'ea', 'ƿ']
				{'string': 's/c/ea', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ea', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/e/u
					TRYING: e
					> version: s/c/e/u
					TRYING: e
					> version: s/c/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'e', 'u']
				adding dashed alternative: ['s', 'c', '_', 'eu']
				s/c/e/u(CCVC)
s/c/e/u(CCVV)
s/c/eu(CCV)
s/c/_/e/u(CCAVA)
s/c/_/e/u(CCAVA)
s/c/_/eu(CCAV)
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'e', 'u']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'u']
				version split: ['s', 'c', 'eu']
				{'string': 's/c/eu', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'eu']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scew
					resolving (2)
					> version: s/c/e/w
					TRYING: e
					> version: s/c/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', '_', 'e', 'w']
				adding dashed alternative: ['s', 'c', '_', 'ew']
				s/c/e/w(CCVC)
s/c/ew(CCV)
s/c/_/e/w(CCAVC)
s/c/_/ew(CCAV)
				version split: ['s', 'c', 'e', 'w']
				{'string': 's/c/e', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'e', 'w']
				version split: ['s', 'c', 'ew']
				{'string': 's/c/ew', 'rgx': '((s))/((c))/((_))$'}
				_____REMOVING________['s', 'c', 'ew']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_', 'rgx': '((s))/((c))/((_))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 'e', 'ƿ']
				s/_/e/ƿ(CAVC)
s/_/_/e/ƿ(CAAVC)
				version split: ['s', '_', 'e', 'ƿ']
				{'string': 's/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'e', 'ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ']
				s/h/æ(CCV)
s/h/_/æ(CCAV)
				version split: ['s', 'h', 'æ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ']
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'æ', 'ƿ']
				s/h/æ/ƿ(CCVC)
s/h/_/æ/ƿ(CCAVC)
				version split: ['s', 'h', 'æ', 'ƿ']
				{'string': 's/h/æ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'æ', 'ƿ']
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/a/u/w
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					> version: s/h/a/uw
					TRYING: a
					> version: s/h/au/w
					TRYING: au
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'u', 'w']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				adding dashed alternative: ['s', 'h', '_', 'a', 'uw']
				adding dashed alternative: ['s', 'h', '_', 'au', 'w']
				s/h/a/u/w(CCVCC)
s/h/a/u/w(CCVVC)
s/h/au/w(CCVC)
s/h/a/uw(CCVV)
s/h/au/w(CCVC)
s/h/_/a/u/w(CCAVAC)
s/h/_/a/u/w(CCAVAC)
s/h/_/au/w(CCAVC)
s/h/_/a/uw(CCAVV)
s/h/_/au/w(CCAVC)
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'a', 'u', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'u', 'w']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', 'a', 'uw']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'uw']
				version split: ['s', 'h', 'au', 'w']
				{'string': 's/h/au', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/a/ƿ
					TRYING: a
					> version: s/h/aƿ
					TRYING: aƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'aƿ']
				s/h/a/ƿ(CCVC)
s/h/aƿ(CCV)
s/h/_/a/ƿ(CCAVC)
s/h/_/aƿ(CCAV)
				version split: ['s', 'h', 'a', 'ƿ']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'ƿ']
				version split: ['s', 'h', 'aƿ']
				{'string': 's/h/aƿ', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aƿ']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shaw
					resolving (2)
					> version: s/h/a/w
					TRYING: a
					> version: s/h/aw
					TRYING: aw
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'a', 'w']
				adding dashed alternative: ['s', 'h', '_', 'aw']
				s/h/a/w(CCVC)
s/h/aw(CCV)
s/h/_/a/w(CCAVC)
s/h/_/aw(CCAV)
				version split: ['s', 'h', 'a', 'w']
				{'string': 's/h/a', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'a', 'w']
				version split: ['s', 'h', 'aw']
				{'string': 's/h/aw', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'aw']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/e/a/ƿ
					TRYING: e
					> version: s/h/e/aƿ
					TRYING: e
					> version: s/h/ea/ƿ
					TRYING: ea
					> version: s/h/ea/ƿ
					TRYING: ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'a', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'e', 'aƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				adding dashed alternative: ['s', 'h', '_', 'ea', 'ƿ']
				s/h/e/a/ƿ(CCVVC)
s/h/e/aƿ(CCVV)
s/h/ea/ƿ(CCVC)
s/h/ea/ƿ(CCVC)
s/h/_/e/a/ƿ(CCAVVC)
s/h/_/e/aƿ(CCAVV)
s/h/_/ea/ƿ(CCAVC)
s/h/_/ea/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'a', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'a', 'ƿ']
				version split: ['s', 'h', 'e', 'aƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'aƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', 'ea', 'ƿ']
				{'string': 's/h/ea', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ea', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/e/u
					TRYING: e
					> version: s/h/e/u
					TRYING: e
					> version: s/h/eu
					TRYING: eu
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'e', 'u']
				adding dashed alternative: ['s', 'h', '_', 'eu']
				s/h/e/u(CCVC)
s/h/e/u(CCVV)
s/h/eu(CCV)
s/h/_/e/u(CCAVA)
s/h/_/e/u(CCAVA)
s/h/_/eu(CCAV)
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'e', 'u']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'u']
				version split: ['s', 'h', 'eu']
				{'string': 's/h/eu', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'eu']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/e/ƿ
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'ƿ']
				s/h/e/ƿ(CCVC)
s/h/_/e/ƿ(CCAVC)
				version split: ['s', 'h', 'e', 'ƿ']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/e/w
					TRYING: e
					> version: s/h/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'e', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ew']
				s/h/e/w(CCVC)
s/h/ew(CCV)
s/h/_/e/w(CCAVC)
s/h/_/ew(CCAV)
				version split: ['s', 'h', 'e', 'w']
				{'string': 's/h/e', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'e', 'w']
				version split: ['s', 'h', 'ew']
				{'string': 's/h/ew', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ew']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: show
					resolving (2)
					> version: s/h/o/w
					TRYING: o
					> version: s/h/ow
					TRYING: ow
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'o', 'w']
				adding dashed alternative: ['s', 'h', '_', 'ow']
				s/h/o/w(CCVC)
s/h/ow(CCV)
s/h/_/o/w(CCAVC)
s/h/_/ow(CCAV)
				version split: ['s', 'h', 'o', 'w']
				{'string': 's/h/o', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'o', 'w']
				version split: ['s', 'h', 'ow']
				{'string': 's/h/ow', 'rgx': '((s))/((h))/((_))$'}
				_____REMOVING________['s', 'h', 'ow']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_', 'rgx': '((s))/((h))/((_))$'}
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/s/e/a/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/e/a/w
					TRYING: e
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/e/aw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/e/aw
					TRYING: e
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: s/_/s/ea/w
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/eaw
					TRYING: eaw
					> version: ss/_/ea/w
					TRYING: ea
					> version: s/_/s/eaw
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/eaw
					TRYING: eaw
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'a', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'a', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'aw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'e', 'aw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['s', '_', '_', 's', 'ea', 'w']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'ea', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'eaw']
				adding dashed alternative: ['ss', '_', '_', 'eaw']
				s/_/s/e/a/w(CACVVC)
ss/_/e/a/w(CAVVC)
s/_/s/eaw(CACV)
s/_/s/e/aw(CACVV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/e/aw(CAVV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
s/_/s/eaw(CACV)
s/_/s/ea/w(CACVC)
ss/_/eaw(CAV)
ss/_/eaw(CAV)
ss/_/ea/w(CAVC)
s/_/s/eaw(CACV)
ss/_/eaw(CAV)
s/_/_/s/e/a/w(CAACVVC)
ss/_/_/e/a/w(CAAVVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/e/aw(CAACVV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/e/aw(CAAVV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
s/_/_/s/eaw(CAACV)
s/_/_/s/ea/w(CAACVC)
ss/_/_/eaw(CAAV)
ss/_/_/eaw(CAAV)
ss/_/_/ea/w(CAAVC)
s/_/_/s/eaw(CAACV)
ss/_/_/eaw(CAAV)
				version split: ['s', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', 'e', 'a', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'a', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'e', 'aw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'aw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'e', 'aw']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'aw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['s', '_', 's', 'ea', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ea', 'w']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['ss', '_', 'ea', 'w']
				{'string': 'ss/_/ea', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ea', 'w']
				version split: ['s', '_', 's', 'eaw']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'eaw']
				version split: ['ss', '_', 'eaw']
				{'string': 'ss/_/eaw', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: ssew
					resolving (4)
					> version: s/_/s/e/w
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/e/w
					TRYING: e
					> version: s/_/s/ew
					TRYING: s
					adding blocked set: C = C >> s, _, w, h
					> version: ss/_/ew
					TRYING: ew
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', '_', 's', 'e', 'w']
				adding dashed alternative: ['ss', '_', '_', 'e', 'w']
				adding dashed alternative: ['s', '_', '_', 's', 'ew']
				adding dashed alternative: ['ss', '_', '_', 'ew']
				s/_/s/e/w(CACVC)
ss/_/e/w(CAVC)
s/_/s/ew(CACV)
ss/_/ew(CAV)
s/_/_/s/e/w(CAACVC)
ss/_/_/e/w(CAAVC)
s/_/_/s/ew(CAACV)
ss/_/_/ew(CAAV)
				version split: ['s', '_', 's', 'e', 'w']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'e', 'w']
				version split: ['ss', '_', 'e', 'w']
				{'string': 'ss/_/e', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'e', 'w']
				version split: ['s', '_', 's', 'ew']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['s', '_', 's', 'ew']
				version split: ['ss', '_', 'ew']
				{'string': 'ss/_/ew', 'rgx': '((s))/((_))/((_))$'}
				_____REMOVING________['ss', '_', 'ew']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_', 'rgx': '((s))/((_))/((_))$'}
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_', 'rgx': '((s))/((_))/((_))$'}
				ANALYSING: sswe
					resolving (2)
					> version: s/_/s/w/e
					TRYING: s
					adding blocked set: C = C >> s, w, _, h
					> version: ss/_/w/e
					TRYING: w
					RESULT:  ['w']
				version split: ['s', '_', 's', 'w', 'e']
				{'string': 's/_/s', 'rgx': '((s))/((_))/((w))$'}
				_____REMOVING________['s', '_', 's', 'w', 'e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w', 'rgx': '((s))/((_))/((w))$'}
			___CCCVC : 3___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (2)
					> version: c/h/_/a/w
					TRYING: a
					> version: c/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, a, o, aw, ea
					RESULT:  ['a']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				version split: ['c', 'h', '_', 'aw']
				{'string': 'c/h/_/aw', 'rgx': '((ch)|(c))/((h))/((_))/((a))$'}
				_____REMOVING________['c', 'h', '_', 'aw']
				ANALYSING: scau
					resolving (3)
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/a/u
					TRYING: a
					> version: s/c/_/au
					TRYING: au
					adding blocked set: V = V >> e, a, o, au, ea
					RESULT:  ['a']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((a))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((a))$'}
				version split: ['s', 'c', '_', 'au']
				{'string': 's/c/_/au', 'rgx': '((s))/((c))/((_))/((a))$'}
				_____REMOVING________['s', 'c', '_', 'au']
				ANALYSING: scaw
					resolving (2)
					> version: s/c/_/a/w
					TRYING: a
					> version: s/c/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, a, o, aw, ea
					RESULT:  ['a']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a', 'rgx': '((s))/((c))/((_))/((a))$'}
				version split: ['s', 'c', '_', 'aw']
				{'string': 's/c/_/aw', 'rgx': '((s))/((c))/((_))/((a))$'}
				_____REMOVING________['s', 'c', '_', 'aw']
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/_/e/a/ƿ
					TRYING: e
					> version: s/c/_/e/aƿ
					TRYING: e
					> version: s/c/_/ea/ƿ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/c/_/ea/ƿ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e)|(ea))$'}
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e)|(ea))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e)|(ea))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea', 'rgx': '((s))/((c))/((_))/((e)|(ea))$'}
				ANALYSING: sceu
					resolving (3)
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/e/u
					TRYING: e
					> version: s/c/_/eu
					TRYING: eu
					adding blocked set: V = V >> e, a, o, eu, ea
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'eu']
				{'string': 's/c/_/eu', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'eu']
				ANALYSING: scew
					resolving (2)
					> version: s/c/_/e/w
					TRYING: e
					> version: s/c/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, a, o, ea
					RESULT:  ['e']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e', 'rgx': '((s))/((c))/((_))/((e))$'}
				version split: ['s', 'c', '_', 'ew']
				{'string': 's/c/_/ew', 'rgx': '((s))/((c))/((_))/((e))$'}
				_____REMOVING________['s', 'c', '_', 'ew']
				ANALYSING: scw
					resolving (1)
					> version: s/c/w
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_']
				s/c/w(CCC)
s/c/w/_(CCCA)
				version split: ['s', 'c', 'w']
				{'string': 's/c/w', 'rgx': '((s))/((c))/((w))/((_))$'}
				_____REMOVING________['s', 'c', 'w']
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/æ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, o, a, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ']
				s/h/_/æ(CCAV)
s/h/_/_/æ(CCAAV)
				version split: ['s', 'h', '_', 'æ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ']
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/æ/ƿ
					TRYING: æ
					adding blocked set: V = V >> æ, e, _, o, a, ea
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', 'æ', 'ƿ']
				s/h/_/æ/ƿ(CCAVC)
s/h/_/_/æ/ƿ(CCAAVC)
				version split: ['s', 'h', '_', 'æ', 'ƿ']
				{'string': 's/h/_/æ', 'rgx': '((s))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_', 'rgx': '((s))/((h))/((_))/((_))$'}
				ANALYSING: shauw
					resolving (5)
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/a/u/w
					TRYING: a
					> version: s/h/_/au/w
					TRYING: au
					adding blocked set: V = V >> e, _, o, a, au, ea
					> version: s/h/_/a/uw
					TRYING: a
					> version: s/h/_/au/w
					TRYING: au
					adding blocked set: V = V >> e, _, o, a, au, ea
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'au', 'w']
				{'string': 's/h/_/au', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'au', 'w']
				ANALYSING: shaƿ
					resolving (2)
					> version: s/h/_/a/ƿ
					TRYING: a
					> version: s/h/_/aƿ
					TRYING: aƿ
					adding blocked set: V = V >> e, _, o, a, aƿ, ea
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aƿ']
				{'string': 's/h/_/aƿ', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aƿ']
				ANALYSING: shaw
					resolving (2)
					> version: s/h/_/a/w
					TRYING: a
					> version: s/h/_/aw
					TRYING: aw
					adding blocked set: V = V >> e, _, o, a, aw, ea
					RESULT:  ['a']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a', 'rgx': '((s))/((h))/((_))/((a))$'}
				version split: ['s', 'h', '_', 'aw']
				{'string': 's/h/_/aw', 'rgx': '((s))/((h))/((_))/((a))$'}
				_____REMOVING________['s', 'h', '_', 'aw']
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/_/e/a/ƿ
					TRYING: e
					> version: s/h/_/e/aƿ
					TRYING: e
					> version: s/h/_/ea/ƿ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/h/_/ea/ƿ
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e)|(ea))$'}
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e)|(ea))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e)|(ea))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea', 'rgx': '((s))/((h))/((_))/((e)|(ea))$'}
				ANALYSING: sheu
					resolving (3)
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/e/u
					TRYING: e
					> version: s/h/_/eu
					TRYING: eu
					adding blocked set: V = V >> e, _, o, a, eu, ea
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'eu']
				{'string': 's/h/_/eu', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'eu']
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				ANALYSING: shew
					resolving (2)
					> version: s/h/_/e/w
					TRYING: e
					> version: s/h/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, o, a, ea
					RESULT:  ['e']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e', 'rgx': '((s))/((h))/((_))/((e))$'}
				version split: ['s', 'h', '_', 'ew']
				{'string': 's/h/_/ew', 'rgx': '((s))/((h))/((_))/((e))$'}
				_____REMOVING________['s', 'h', '_', 'ew']
				ANALYSING: show
					resolving (2)
					> version: s/h/_/o/w
					TRYING: o
					> version: s/h/_/ow
					TRYING: ow
					adding blocked set: V = V >> e, _, o, a, ow, ea
					RESULT:  ['o']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o', 'rgx': '((s))/((h))/((_))/((o))$'}
				version split: ['s', 'h', '_', 'ow']
				{'string': 's/h/_/ow', 'rgx': '((s))/((h))/((_))/((o))$'}
				_____REMOVING________['s', 'h', '_', 'ow']
				ANALYSING: sseaw
					resolving (16)
					> version: s/_/_/s/e/a/w
					TRYING: s
					> version: ss/_/_/e/a/w
					TRYING: e
					> version: s/_/_/s/eaw
					TRYING: s
					> version: s/_/_/s/e/aw
					TRYING: s
					> version: s/_/_/s/ea/w
					TRYING: s
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, o, a, ea, eaw
					> version: ss/_/_/e/aw
					TRYING: e
					> version: ss/_/_/ea/w
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/_/_/s/eaw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/_/_/s/eaw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/_/_/s/ea/w
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, o, a, ea, eaw
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, o, a, ea, eaw
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: ss/_/_/ea/w
					TRYING: ea
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: s/_/_/s/eaw
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					> version: ss/_/_/eaw
					TRYING: eaw
					adding blocked set: V = V >> e, _, o, a, ea, eaw
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'ea'}
					RESULT:  ['e', 'ea']
				version split: ['s', '_', '_', 's', 'e', 'a', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'e', 'aw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'aw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['s', '_', '_', 's', 'ea', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'ea', 'w']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				version split: ['s', '_', '_', 's', 'eaw']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['s', '_', '_', 's', 'eaw']
				version split: ['ss', '_', '_', 'eaw']
				{'string': 'ss/_/_/eaw', 'rgx': '((s))/((_))/((_))/((e)|(ea))$'}
				_____REMOVING________['ss', '_', '_', 'eaw']
				ANALYSING: ssew
					resolving (4)
					> version: s/_/_/s/e/w
					TRYING: s
					> version: ss/_/_/e/w
					TRYING: e
					> version: s/_/_/s/ew
					TRYING: s
					> version: ss/_/_/ew
					TRYING: ew
					adding blocked set: V = V >> ew, e, _, o, a, ea
					RESULT:  ['e']
				version split: ['s', '_', '_', 's', 'e', 'w']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'e', 'w']
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e', 'rgx': '((s))/((_))/((_))/((e))$'}
				version split: ['s', '_', '_', 's', 'ew']
				{'string': 's/_/_/s', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', '_', 's', 'ew']
				version split: ['ss', '_', '_', 'ew']
				{'string': 'ss/_/_/ew', 'rgx': '((s))/((_))/((_))/((e))$'}
				_____REMOVING________['ss', '_', '_', 'ew']
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					TRYING: e
					RESULT:  ['e']
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))$'}
			___CCCVC : 4___
				ANALYSING: schau
				adding littera based on matching pattern
				ANALYSING: schaƿ
				adding littera based on matching pattern
				ANALYSING: schaw
				adding littera based on matching pattern
				ANALYSING: scheaƿ
				adding littera based on matching pattern
				ANALYSING: scheu
				adding littera based on matching pattern
				ANALYSING: scheƿ
				adding littera based on matching pattern
				ANALYSING: schew
				adding littera based on matching pattern
				ANALYSING: schow
				adding littera based on matching pattern
				ANALYSING: chaw
					resolving (1)
					> version: c/h/_/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['c', 'h', '_', 'a', 'w']
				{'string': 'c/h/_/a/w', 'rgx': '((ch)|(c))/((h))/((_))/((a))/((w))$'}
				ANALYSING: scau
					resolving (2)
					> version: s/c/_/a/u
					TRYING: u
					> version: s/c/_/a/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((a))/((u))$'}
				version split: ['s', 'c', '_', 'a', 'u']
				{'string': 's/c/_/a/u', 'rgx': '((s))/((c))/((_))/((a))/((u))$'}
				ANALYSING: scaw
					resolving (1)
					> version: s/c/_/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', '_', 'a', 'w']
				{'string': 's/c/_/a/w', 'rgx': '((s))/((c))/((_))/((a))/((w))$'}
				ANALYSING: sceaƿ
					resolving (4)
					> version: s/c/_/e/a/ƿ
					TRYING: a
					> version: s/c/_/e/aƿ
					TRYING: aƿ
					> version: s/c/_/ea/ƿ
					TRYING: ƿ
					> version: s/c/_/ea/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'c', '_', 'e', 'a', 'ƿ']
				{'string': 's/c/_/e/a/ƿ', 'rgx': '((s))/((c))/((_))/((e)|(ea))/((ƿ))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'c', '_', 'e', 'aƿ']
				{'string': 's/c/_/e/aƿ', 'rgx': '((s))/((c))/((_))/((e)|(ea))/((ƿ))$'}
				_____REMOVING________['s', 'c', '_', 'e', 'aƿ']
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea/ƿ', 'rgx': '((s))/((c))/((_))/((e)|(ea))/((ƿ))$'}
				version split: ['s', 'c', '_', 'ea', 'ƿ']
				{'string': 's/c/_/ea/ƿ', 'rgx': '((s))/((c))/((_))/((e)|(ea))/((ƿ))$'}
				ANALYSING: sceu
					resolving (2)
					> version: s/c/_/e/u
					TRYING: u
					> version: s/c/_/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))$'}
				version split: ['s', 'c', '_', 'e', 'u']
				{'string': 's/c/_/e/u', 'rgx': '((s))/((c))/((_))/((e))/((u))$'}
				ANALYSING: scew
					resolving (1)
					> version: s/c/_/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'c', '_', 'e', 'w']
				{'string': 's/c/_/e/w', 'rgx': '((s))/((c))/((_))/((e))/((w))$'}
				ANALYSING: scw
					resolving (1)
					> version: s/c/w/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'c', 'w', '_', '_']
				s/c/w/_(CCCA)
s/c/w/_/_(CCCAA)
				version split: ['s', 'c', 'w', '_']
				{'string': 's/c/w/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				_____REMOVING________['s', 'c', 'w', '_']
				version split: ['s', 'c', 'w', '_', '_']
				{'string': 's/c/w/_/_', 'rgx': '((s))/((c))/((w))/((_))/((_))$'}
				ANALYSING: seƿ
					resolving (1)
					> version: s/_/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', '_', '_', 'e', 'ƿ']
				{'string': 's/_/_/e/ƿ', 'rgx': '((s))/((_))/((_))/((e))/((ƿ))$'}
				ANALYSING: shæ
					resolving (1)
					> version: s/h/_/_/æ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ']
				s/h/_/_/æ(CCAAV)
s/h/_/_/_/æ(CCAAAV)
				version split: ['s', 'h', '_', '_', 'æ']
				{'string': 's/h/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ']
				version split: ['s', 'h', '_', '_', '_', 'æ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ']
				ANALYSING: shæƿ
					resolving (1)
					> version: s/h/_/_/æ/ƿ
					TRYING: æ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				s/h/_/_/æ/ƿ(CCAAVC)
s/h/_/_/_/æ/ƿ(CCAAAVC)
				version split: ['s', 'h', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/æ/ƿ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', 'æ', 'ƿ']
				version split: ['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				{'string': 's/h/_/_/_/æ', 'rgx': '((s))/((h))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', '_', '_', '_', 'æ', 'ƿ']
				ANALYSING: shauw
					resolving (3)
					> version: s/h/_/a/u/w
					TRYING: u
					> version: s/h/_/a/u/w
					TRYING: u
					> version: s/h/_/a/uw
					TRYING: uw
					RESULT:  ['u']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'a', 'u', 'w']
				{'string': 's/h/_/a/u/w', 'rgx': '((s))/((h))/((_))/((a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'u', 'w']
				version split: ['s', 'h', '_', 'a', 'uw']
				{'string': 's/h/_/a/uw', 'rgx': '((s))/((h))/((_))/((a))/((u))$'}
				_____REMOVING________['s', 'h', '_', 'a', 'uw']
				ANALYSING: shaƿ
					resolving (1)
					> version: s/h/_/a/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'a', 'ƿ']
				{'string': 's/h/_/a/ƿ', 'rgx': '((s))/((h))/((_))/((a))/((ƿ))$'}
				ANALYSING: shaw
					resolving (1)
					> version: s/h/_/a/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'a', 'w']
				{'string': 's/h/_/a/w', 'rgx': '((s))/((h))/((_))/((a))/((w))$'}
				ANALYSING: sheaƿ
					resolving (4)
					> version: s/h/_/e/a/ƿ
					TRYING: a
					> version: s/h/_/e/aƿ
					TRYING: aƿ
					> version: s/h/_/ea/ƿ
					TRYING: ƿ
					> version: s/h/_/ea/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'e', 'a', 'ƿ']
				{'string': 's/h/_/e/a/ƿ', 'rgx': '((s))/((h))/((_))/((e)|(ea))/((ƿ))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'a', 'ƿ']
				version split: ['s', 'h', '_', 'e', 'aƿ']
				{'string': 's/h/_/e/aƿ', 'rgx': '((s))/((h))/((_))/((e)|(ea))/((ƿ))$'}
				_____REMOVING________['s', 'h', '_', 'e', 'aƿ']
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea/ƿ', 'rgx': '((s))/((h))/((_))/((e)|(ea))/((ƿ))$'}
				version split: ['s', 'h', '_', 'ea', 'ƿ']
				{'string': 's/h/_/ea/ƿ', 'rgx': '((s))/((h))/((_))/((e)|(ea))/((ƿ))$'}
				ANALYSING: sheu
					resolving (2)
					> version: s/h/_/e/u
					TRYING: u
					> version: s/h/_/e/u
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))$'}
				version split: ['s', 'h', '_', 'e', 'u']
				{'string': 's/h/_/e/u', 'rgx': '((s))/((h))/((_))/((e))/((u))$'}
				ANALYSING: sheƿ
					resolving (1)
					> version: s/h/_/e/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				version split: ['s', 'h', '_', 'e', 'ƿ']
				{'string': 's/h/_/e/ƿ', 'rgx': '((s))/((h))/((_))/((e))/((ƿ))$'}
				ANALYSING: shew
					resolving (1)
					> version: s/h/_/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'e', 'w']
				{'string': 's/h/_/e/w', 'rgx': '((s))/((h))/((_))/((e))/((w))$'}
				ANALYSING: show
					resolving (1)
					> version: s/h/_/o/w
					TRYING: w
					RESULT:  ['w']
				version split: ['s', 'h', '_', 'o', 'w']
				{'string': 's/h/_/o/w', 'rgx': '((s))/((h))/((_))/((o))/((w))$'}
				ANALYSING: sseaw
					resolving (4)
					> version: ss/_/_/e/a/w
					TRYING: a
					> version: ss/_/_/e/aw
					TRYING: aw
					> version: ss/_/_/ea/w
					TRYING: w
					> version: ss/_/_/ea/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', '_', 'e', 'a', 'w']
				{'string': 'ss/_/_/e/a/w', 'rgx': '((s))/((_))/((_))/((e)|(ea))/((w))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'a', 'w']
				version split: ['ss', '_', '_', 'e', 'aw']
				{'string': 'ss/_/_/e/aw', 'rgx': '((s))/((_))/((_))/((e)|(ea))/((w))$'}
				_____REMOVING________['ss', '_', '_', 'e', 'aw']
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea/w', 'rgx': '((s))/((_))/((_))/((e)|(ea))/((w))$'}
				version split: ['ss', '_', '_', 'ea', 'w']
				{'string': 'ss/_/_/ea/w', 'rgx': '((s))/((_))/((_))/((e)|(ea))/((w))$'}
				ANALYSING: ssew
					resolving (1)
					> version: ss/_/_/e/w
					TRYING: w
					RESULT:  ['w']
				version split: ['ss', '_', '_', 'e', 'w']
				{'string': 'ss/_/_/e/w', 'rgx': '((s))/((_))/((_))/((e))/((w))$'}
				ANALYSING: sswe
					resolving (1)
					> version: ss/_/w/e
					RESULT:  ['_']
				adding dashed alternative: ['ss', '_', 'w', 'e', '_']
				ss/_/w/e(CACV)
ss/_/w/e/_(CACVA)
				version split: ['ss', '_', 'w', 'e']
				{'string': 'ss/_/w/e', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
				_____REMOVING________['ss', '_', 'w', 'e']
				version split: ['ss', '_', 'w', 'e', '_']
				{'string': 'ss/_/w/e/_', 'rgx': '((s))/((_))/((w))/((e))/((_))$'}
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['c', 'h', '_', 'a', 'w']
		only one version left: ['s', 'c', '_', 'a', 'u']
		only one version left: ['s', 'c', '_', 'a', 'w']
		only one version left: ['s', 'c', '_', 'ea', 'ƿ']
		only one version left: ['s', 'c', '_', 'e', 'u']
		only one version left: ['s', 'c', '_', 'e', 'w']
		only one version left: ['s', 'c', 'w', '_', '_']
		only one version left: ['s', '_', '_', 'e', 'ƿ']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'h', '_', 'a', 'ƿ']
		only one version left: ['s', 'h', '_', 'a', 'w']
		only one version left: ['s', 'h', '_', 'ea', 'ƿ']
		only one version left: ['s', 'h', '_', 'e', 'u']
		only one version left: ['s', 'h', '_', 'e', 'ƿ']
		only one version left: ['s', 'h', '_', 'e', 'w']
		only one version left: ['s', 'h', '_', 'o', 'w']
		only one version left: ['ss', '_', '_', 'ea', 'w']
		only one version left: ['ss', '_', '_', 'e', 'w']
		only one version left: ['ss', '_', 'w', 'e', '_']
		SPLIT: ['s', 'c', 'h', 'a', 'u']
		SPLIT: ['s', 'c', 'h', 'a', 'ƿ']
		SPLIT: ['s', 'c', 'h', 'a', 'w']
		SPLIT: ['s', 'c', 'h', 'ea', 'ƿ']
		SPLIT: ['s', 'c', 'h', 'e', 'u']
		SPLIT: ['s', 'c', 'h', 'e', 'ƿ']
		SPLIT: ['s', 'c', 'h', 'e', 'w']
		SPLIT: ['s', 'c', 'h', 'o', 'w']
		SPLIT: ['c', 'h', '_', 'a', 'w']
		['c', 'h', '_', 'a', 'w']
		SPLIT: ['s', 'c', '_', 'a', 'u']
		['s', 'c', '_', 'a', 'u']
		['s', 'c', '_', 'a', 'u']
		SPLIT: ['s', 'c', '_', 'a', 'w']
		['s', 'c', '_', 'a', 'w']
		SPLIT: ['s', 'c', '_', 'ea', 'ƿ']
		['s', 'c', '_', 'ea', 'ƿ']
		['s', 'c', '_', 'ea', 'ƿ']
		SPLIT: ['s', 'c', '_', 'e', 'u']
		['s', 'c', '_', 'e', 'u']
		['s', 'c', '_', 'e', 'u']
		SPLIT: ['s', 'c', '_', 'e', 'w']
		['s', 'c', '_', 'e', 'w']
		SPLIT: ['s', 'c', 'w', '_', '_']
		['s', 'c', 'w', '_', '_']
		SPLIT: ['s', '_', '_', 'e', 'ƿ']
		['s', '_', '_', 'e', 'ƿ']
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['_']", "['_']"]
		SPLIT: ["['s']", "['h']", "['_']", "['a']", "['u']"]
		SPLIT: ['s', 'h', '_', 'a', 'ƿ']
		['s', 'h', '_', 'a', 'ƿ']
		SPLIT: ['s', 'h', '_', 'a', 'w']
		['s', 'h', '_', 'a', 'w']
		SPLIT: ['s', 'h', '_', 'ea', 'ƿ']
		['s', 'h', '_', 'ea', 'ƿ']
		['s', 'h', '_', 'ea', 'ƿ']
		SPLIT: ['s', 'h', '_', 'e', 'u']
		['s', 'h', '_', 'e', 'u']
		['s', 'h', '_', 'e', 'u']
		SPLIT: ['s', 'h', '_', 'e', 'ƿ']
		['s', 'h', '_', 'e', 'ƿ']
		SPLIT: ['s', 'h', '_', 'e', 'w']
		['s', 'h', '_', 'e', 'w']
		SPLIT: ['s', 'h', '_', 'o', 'w']
		['s', 'h', '_', 'o', 'w']
		SPLIT: ['ss', '_', '_', 'ea', 'w']
		['ss', '_', '_', 'ea', 'w']
		['ss', '_', '_', 'ea', 'w']
		SPLIT: ['ss', '_', '_', 'e', 'w']
		['ss', '_', '_', 'e', 'w']
		SPLIT: ['ss', '_', 'w', 'e', '_']
		['ss', '_', 'w', 'e', '_']
		version for pattern CCCVC is INVALID
		[]
		3
		OVERVIEW: version for pattern CCCVC

faulty splits: 3
['s']['h'][''][''][''] <-! shæ
['s']['h'][''][''][''] <-! shæƿ
['s']['h']['']['a']['u'] <-! shauw
s | c | h | a | u
s | c | h | a | ƿ
s | c | h | a | w
s | c | h | ea | ƿ
s | c | h | e | u
s | c | h | e | ƿ
s | c | h | e | w
s | c | h | o | w
c | h | _ | a | w
s | c | _ | a | u
s | c | _ | a | w
s | c | _ | ea | ƿ
s | c | _ | e | u
s | c | _ | e | w
s | c | w | _ | _
s | _ | _ | e | ƿ
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['a'] | ['u']
s | h | _ | a | ƿ
s | h | _ | a | w
s | h | _ | ea | ƿ
s | h | _ | e | u
s | h | _ | e | ƿ
s | h | _ | e | w
s | h | _ | o | w
ss | _ | _ | ea | w
ss | _ | _ | e | w
ss | _ | w | e | _
1 : {'s', '_', 'h', 'c'},{'w', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'},{'s', '_', 'h', 'c'}
2 : {'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'}
3 : {'æ', 'e', '_', 'o', 'a', 'ea'},{'æ', 'e', '_', 'o', 'a', 'ea'}
	FOUND __ 0 __ VALID VERSION(S)
	OVERVIEW: version for pattern CCCVVC

faulty splits: 2
['s']['h'][''][''][''][''] <-! shæ
['s']['h'][''][''][''][''] <-! shæƿ
s | c | h | e | a | ƿ
c | h | _ | a | _ | w
s | c | _ | a | u | _
s | c | _ | a | _ | w
s | c | _ | e | a | ƿ
s | c | _ | e | u | _
s | c | _ | e | _ | w
s | c | w | _ | _ | _
s | _ | _ | e | _ | ƿ
['s'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
['s'] | ['h'] | ['_'] | ['_'] | ['_'] | ['_']
s | h | _ | a | u | w
s | h | _ | a | _ | ƿ
s | h | _ | a | _ | w
s | h | _ | e | a | ƿ
s | h | _ | e | u | _
s | h | _ | e | _ | ƿ
s | h | _ | e | _ | w
s | h | _ | _ | o | w
s | c | h | a | u | _
s | c | h | a | _ | ƿ
s | c | h | a | _ | w
s | c | h | e | u | _
s | c | h | e | _ | ƿ
s | c | h | e | _ | w
s | c | h | _ | o | w
ss | _ | _ | e | a | w
ss | _ | _ | e | _ | w
ss | _ | w | e | _ | _
1 : {'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 'w', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'},{'ch', '_', 's', 'h', 'c'}
2 : {'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'},{'s', 'w', '_', 'h'},{'s', 'w', '_', 'h'},{'s', '_', 'w', 'h'},{'s', '_', 'w', 'h'}
3 : {'e', '_', 'o', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'o', 'a', 'au'},{'æ', 'e', '_', 'a', 'au'},{'e', '_', 'a', 'au', 'ow'}
4 : {'æ', '_', 'u', 'a'},{'æ', '_', 'u', 'a'}
	{'CCVCCC', 'CCCCVV', 'CCCVVCC', 'CVCV', 'CVCC', 'CCVCV', 'CCCCVVC', 'CCCCVC', 'CCCVCC', 'CCCCV', 'CVVCC', 'CCCC', 'CCVCC', 'CVCCC', 'CCVCVC', 'CCVVCC', 'CVCVC'}
