Analysis object initialized
{'hsƿucch': 1, 'shuc': 1, 'slike': 1, 'soch': 1, 'such': 2, 'suche': 1, 'suich': 2, 'suilc': 2, 'suilk': 1, 'suilke': 3, 'suych': 2, 'sƿ': 1, 'swech': 1, 'sƿich': 4, 'swich': 4, 'sƿilc': 1, 'swilc': 1, 'sƿilch': 5, 'swilk': 2, 'sƿillc': 2, 'sƿuc': 3, 'sƿucch': 4, 'sƿucche': 1, 'sƿuch': 16, 'sƿuche': 3, 'sƿulc': 1, 'swulc': 1, 'zuich': 4, 'zuych': 1}
Lexel initialized
[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'll', 'ln': 2, 'index': 3}]]
[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
MIN pattern length=5
Pattern CCVC is invalid
Pattern CVCC is invalid
Pattern CCCC is invalid
Pattern CCVCC is valid
Pattern CCCVCC is valid
Pattern CCCCCCC is invalid
Pattern CCCCCC is invalid
Pattern CCVCCV is valid
Pattern CCCVC is valid
Pattern CCVCV is valid
Pattern CVCV is invalid
Pattern CCCV is invalid
Pattern CVVCC is invalid
Pattern CCCVCCC is valid
Pattern CCCCCV is invalid
Pattern CVCCV is valid
Pattern CVC is invalid
Pattern CCCCCCV is invalid
Pattern CVVCCV is invalid
Pattern CCCCV is invalid
Pattern CCC is invalid
Pattern CCCCC is invalid
Pattern CVVC is invalid
Pattern CC is invalid
Pattern CCVCCCV is valid
Pattern CCVCCC is valid
{'value': 12, 'patterns': ['CCVCC']}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCVCC
	Selection for pattern: CCVCC completed
	Making a version for pattern: CCVCC
			___CCVCC : 0___
				ANALYSING: swech
				adding littera based on matching pattern
				ANALYSING: sƿich
				adding littera based on matching pattern
				ANALYSING: swich
				adding littera based on matching pattern
				ANALYSING: sƿilc
				adding littera based on matching pattern
				ANALYSING: swilc
				adding littera based on matching pattern
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: swilk
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: sƿuch
				adding littera based on matching pattern
				ANALYSING: sƿulc
				adding littera based on matching pattern
				ANALYSING: swulc
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCVCC : 1___
				ANALYSING: swech
				adding littera based on matching pattern
				ANALYSING: sƿich
				adding littera based on matching pattern
				ANALYSING: swich
				adding littera based on matching pattern
				ANALYSING: sƿilc
				adding littera based on matching pattern
				ANALYSING: swilc
				adding littera based on matching pattern
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: swilk
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: sƿuch
				adding littera based on matching pattern
				ANALYSING: sƿulc
				adding littera based on matching pattern
				ANALYSING: swulc
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> w, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					adding blocked set: C = C >> w, _, ƿ, hu
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u'}
					RESULT:  ['h', 'u']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, w, _, l
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					> version: s/u/c/h
					TRYING: u
					> version: s/u/ch
					TRYING: u
					> version: s/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					> version: s/u/c/h/e
					TRYING: u
					> version: s/u/ch/e
					TRYING: u
					> version: s/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					> version: s/u/i/c/h
					TRYING: u
					> version: s/u/i/ch
					TRYING: u
					> version: s/u/i/ch
					TRYING: u
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					> version: s/u/i/l/c
					TRYING: u
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					> version: s/u/i/l/k
					TRYING: u
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					> version: s/u/i/l/k/e
					TRYING: u
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					> version: s/u/y/c/h
					TRYING: u
					> version: s/u/y/ch
					TRYING: u
					> version: s/u/y/ch
					TRYING: u
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					> version: s/ƿ/u/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					> version: z/u/i/c/h
					TRYING: u
					> version: z/u/i/ch
					TRYING: u
					> version: z/u/i/ch
					TRYING: u
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					> version: z/u/y/c/h
					TRYING: u
					> version: z/u/y/ch
					TRYING: u
					> version: z/u/y/ch
					TRYING: u
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, w, _, z
					RESULT:  ['u']
			___CCVCC : 2___
				ANALYSING: swech
				adding littera based on matching pattern
				ANALYSING: sƿich
				adding littera based on matching pattern
				ANALYSING: swich
				adding littera based on matching pattern
				ANALYSING: sƿilc
				adding littera based on matching pattern
				ANALYSING: swilc
				adding littera based on matching pattern
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: swilk
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: sƿuch
				adding littera based on matching pattern
				ANALYSING: sƿulc
				adding littera based on matching pattern
				ANALYSING: swulc
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					> version: s/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: l
					> version: s/_/l/i/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					> version: s/o/ch
					TRYING: ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: c
					> version: s/u/c/h
					TRYING: c
					> version: s/u/ch
					TRYING: ch
					> version: s/u/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/u/_/c/h(CAACC)
s/u/_/c/h(CAACC)
s/u/_/ch(CAAC)
s/u/_/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/ch/e
					TRYING: ch
					> version: s/u/ch/e
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'u', '_', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/u/_/c/h/e(CAACCV)
s/u/_/c/h/e(CAACCV)
s/u/_/ch/e(CAACV)
s/u/_/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/ui/c/h
					TRYING: c
					> version: s/ui/ch
					TRYING: ch
					RESULT:  ['i']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: i
					> version: s/u/i/l/c
					TRYING: i
					> version: s/ui/l/c
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: i
					> version: s/u/i/l/k
					TRYING: i
					> version: s/ui/l/k
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/ui/l/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/uy/c/h
					TRYING: c
					> version: s/uy/ch
					TRYING: ch
					RESULT:  ['y']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				s/ƿ(CC)
s/ƿ/_(CCA)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/ui/c/h
					TRYING: c
					> version: z/ui/ch
					TRYING: ch
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/uy/c/h
					TRYING: c
					> version: z/uy/ch
					TRYING: ch
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCVCC : 3___
				ANALYSING: swech
				adding littera based on matching pattern
				ANALYSING: sƿich
				adding littera based on matching pattern
				ANALYSING: swich
				adding littera based on matching pattern
				ANALYSING: sƿilc
				adding littera based on matching pattern
				ANALYSING: swilc
				adding littera based on matching pattern
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: swilk
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: sƿuch
				adding littera based on matching pattern
				ANALYSING: sƿulc
				adding littera based on matching pattern
				ANALYSING: swulc
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ll, c, u, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ll, c, l
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ll, c, l, s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> k, _, l, ll, c
					> version: s/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> k, _, l, ll, c
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/i/_/k/e(CCAACV)
s/l/i/_/k/e(CCAACV)
s/_/l/_/i/k/e(CACAACV)
s/_/l/_/i/k/e(CACAACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/c/_/h(CVCAC)
s/o/ch/_(CVCA)
s/_/o/_/c/h(CAVACC)
s/_/o/_/ch(CAVAC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/u/ch
					> version: s/u/ch
					> version: s/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', '_', 'ch']
				adding dashed alternative: ['s', 'u', '_', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/u/_/c/h(CAACC)
s/u/_/c/h(CAACC)
s/u/_/ch(CAAC)
s/u/_/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/u/_/_/c/h(CAAACC)
s/u/_/_/c/h(CAAACC)
s/u/_/_/ch(CAAAC)
s/u/_/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'u', '_', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'u', '_', '_', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/u/_/c/h/e(CAACCV)
s/u/_/c/h/e(CAACCV)
s/u/_/ch/e(CAACV)
s/u/_/ch/e(CAACV)
s/u/c/_/h/e(CACACV)
s/u/c/_/h/e(CACACV)
s/u/ch/_/e(CACAV)
s/u/ch/_/e(CACAV)
s/u/_/_/c/h/e(CAAACCV)
s/u/_/_/c/h/e(CAAACCV)
s/u/_/_/ch/e(CAAACV)
s/u/_/_/ch/e(CAAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/ch(CAAAC)
s/u/i/_/ch(CAAAC)
s/ui/c/_/h(CVCAC)
s/ui/ch/_(CVCA)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ui/l/c
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/u/i/_/l/c(CAAACC)
s/u/i/_/l/c(CAAACC)
s/ui/l/_/c(CVCAC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ui/l/k
					TRYING: k
					adding blocked set: C = C >> k, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/u/i/_/l/k(CAAACC)
s/u/i/_/l/k(CAAACC)
s/ui/l/_/k(CVCAC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> k, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/u/i/_/l/k/e(CAAACCV)
s/u/i/_/l/k/e(CAAACCV)
s/ui/l/_/k/e(CVCACV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: s/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/ch(CAAAC)
s/u/y/_/ch(CAAAC)
s/uy/c/_/h(CVCAC)
s/uy/ch/_(CVCA)
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				s/ƿ(CC)
s/ƿ/_(CCA)
s/ƿ/_(CCA)
s/ƿ/_/_(CCAA)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/ƿ/u/_/c(CCAAC)
s/ƿ/u/_/c(CCAAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> cch, _, l, ll, c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> cch, _, l, ll, c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> cch, _, l, ll, c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> cch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: s/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/ch/e(CCAACV)
s/ƿ/u/_/ch/e(CCAACV)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> _, l, ll, c, i
					> version: _/z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: _/z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/ch(CAAAC)
z/u/i/_/ch(CAAAC)
z/ui/c/_/h(CVCAC)
z/ui/ch/_(CVCA)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/ch(ACAAAC)
_/z/u/_/i/ch(ACAAAC)
_/z/ui/_/c/h(ACVACC)
_/z/ui/_/ch(ACVAC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					> version: z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, _, l, ll, c
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> _, l, ll, c, y
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> _, l, ll, c, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> _, l, ll, c, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> _, l, ll, c, y
					> version: _/z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ll, c, _, l
					> version: _/z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> ch, _, l, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/ch(CAAAC)
z/u/y/_/ch(CAAAC)
z/uy/c/_/h(CVCAC)
z/uy/ch/_(CVCA)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/ch(ACAAAC)
_/z/u/_/y/ch(ACAAAC)
_/z/uy/_/c/h(ACVACC)
_/z/uy/_/ch(ACVAC)
			___CCVCC : 4___
				ANALYSING: swech
				adding littera based on matching pattern
				ANALYSING: sƿich
				adding littera based on matching pattern
				ANALYSING: swich
				adding littera based on matching pattern
				ANALYSING: sƿilc
				adding littera based on matching pattern
				ANALYSING: swilc
				adding littera based on matching pattern
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: swilk
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: sƿuch
				adding littera based on matching pattern
				ANALYSING: sƿulc
				adding littera based on matching pattern
				ANALYSING: swulc
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (64)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, c
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, c
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, c
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, c
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, ch, k, s, c
					RESULT:  ['c']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((c))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/l/i/_/k/e
					TRYING: k
					> version: s/l/i/_/k/e
					TRYING: k
					> version: s/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, c, i
					> version: s/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, c, i
					RESULT:  ['k']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', '_', 'k', 'e']
				{'string': 's/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', 'k', 'e']
				{'string': 's/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/i/k', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/i/k', 'rgx': '((s))/((_))/((i))/((_))/((k))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/c/_/h
					TRYING: h
					> version: s/o/ch/_
					> version: s/_/o/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', '_', 'h']
				{'string': 's/o/c/_/h', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', '_', 'h']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', '_', 'c', 'h']
				{'string': 's/_/o/_/c/h', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', '_', 'c', 'h']
				version split: ['s', '_', 'o', '_', 'ch']
				{'string': 's/_/o/_/ch', 'rgx': '((s))/((_))/((o))/((_))/((h)|(c)|(ch))$'}
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/u/_/c/h
					TRYING: h
					> version: s/u/_/c/h
					TRYING: h
					> version: s/u/_/ch
					> version: s/u/_/ch
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', '_', 'c', 'h']
				{'string': 's/u/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'c', 'h']
				{'string': 's/u/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'ch']
				{'string': 's/u/_/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'ch']
				version split: ['s', 'u', '_', 'ch']
				{'string': 's/u/_/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', '_', '_', 'c', 'h']
				{'string': 's/u/_/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'c', 'h']
				version split: ['s', 'u', '_', '_', 'c', 'h']
				{'string': 's/u/_/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'c', 'h']
				version split: ['s', 'u', '_', '_', 'ch']
				{'string': 's/u/_/_/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', 'u', '_', '_', 'ch']
				{'string': 's/u/_/_/ch', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				ANALYSING: suche
					resolving (16)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/u/_/c/h/e
					TRYING: h
					> version: s/u/_/c/h/e
					TRYING: h
					> version: s/u/_/ch/e
					TRYING: e
					> version: s/u/_/ch/e
					TRYING: e
					> version: s/u/c/_/h/e
					TRYING: h
					> version: s/u/c/_/h/e
					TRYING: h
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', '_', 'c', 'h', 'e']
				{'string': 's/u/_/c/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'u', '_', 'c', 'h', 'e']
				{'string': 's/u/_/c/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'u', '_', 'ch', 'e']
				{'string': 's/u/_/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'ch', 'e']
				version split: ['s', 'u', '_', 'ch', 'e']
				{'string': 's/u/_/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', 'ch', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/u/_/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/u/_/_/c/h', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', 'u', '_', '_', 'ch', 'e']
				{'string': 's/u/_/_/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'ch', 'e']
				version split: ['s', 'u', '_', '_', 'ch', 'e']
				{'string': 's/u/_/_/ch/e', 'rgx': '((s))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', '_', '_', 'ch', 'e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', 'ui', 'c', '_', 'h']
				{'string': 's/ui/c/_/h', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', '_', 'h']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((u))/((i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/ui/l/_/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'ui', 'l', '_', 'c']
				{'string': 's/ui/l/_/c', 'rgx': '((s))/((u))/((i))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/ui/l/_/k
					TRYING: k
					RESULT:  ['k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'ui', 'l', '_', 'k']
				{'string': 's/ui/l/_/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/ui/l/_/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/ui/l/_/k/e', 'rgx': '((s))/((u))/((i))/((_))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k', 'e']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', 'uy', 'c', '_', 'h']
				{'string': 's/uy/c/_/h', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', '_', 'h']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((u))/((y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/ƿ/_
					> version: s/ƿ/_
					> version: s/ƿ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				s/ƿ(CC)
s/ƿ/_(CCA)
s/ƿ/_(CCA)
s/ƿ/_/_(CCAA)
s/ƿ/_(CCA)
s/ƿ/_/_(CCAA)
s/ƿ/_/_(CCAA)
s/ƿ/_/_/_(CCAAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((ƿ))/((_))/((_))/((_))$'}
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/ƿ/u/_/c
					TRYING: c
					> version: s/ƿ/u/_/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c))$'}
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c))$'}
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/c', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/c/ch', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/c/ch', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ƿ/u/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/ƿ/u/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/ch/e', 'rgx': '((s))/((ƿ))/((u))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch', 'e']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'ui', 'c', '_', 'h']
				{'string': 'z/ui/c/_/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', '_', 'h']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'ui', '_', 'c', 'h']
				{'string': '_/z/ui/_/c/h', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'c', 'h']
				version split: ['_', 'z', 'ui', '_', 'ch']
				{'string': '_/z/ui/_/ch', 'rgx': '((_))/((u))/((u)|(i))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'uy', 'c', '_', 'h']
				{'string': 'z/uy/c/_/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', '_', 'h']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'uy', '_', 'c', 'h']
				{'string': '_/z/uy/_/c/h', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'c', 'h']
				version split: ['_', 'z', 'uy', '_', 'ch']
				{'string': '_/z/uy/_/ch', 'rgx': '((_))/((u))/((u)|(y))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'ch']
		FAIL: 
		only one version left: ['s', 'h', 'u', '_', 'c']
		FAIL: 
		only one version left: ['s', '_', 'o', '_', 'ch']
		only one version left: ['s', 'u', '_', '_', 'ch']
		FAIL: 
		only one version left: ['s', 'u', 'i', '_', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'u', 'y', '_', 'ch']
		only one version left: ['s', 'ƿ', '_', '_', '_']
		only one version left: ['s', 'ƿ', 'u', '_', 'c']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'w', 'e', 'c', 'h']
		SPLIT: ['s', 'ƿ', 'i', 'c', 'h']
		SPLIT: ['s', 'w', 'i', 'c', 'h']
		SPLIT: ['s', 'ƿ', 'i', 'l', 'c']
		SPLIT: ['s', 'w', 'i', 'l', 'c']
		SPLIT: ['s', 'ƿ', 'i', 'l', 'ch']
		SPLIT: ['s', 'w', 'i', 'l', 'k']
		SPLIT: ['s', 'ƿ', 'i', 'll', 'c']
		SPLIT: ['s', 'ƿ', 'u', 'c', 'ch']
		SPLIT: ['s', 'ƿ', 'u', 'c', 'h']
		SPLIT: ['s', 'ƿ', 'u', 'l', 'c']
		SPLIT: ['s', 'w', 'u', 'l', 'c']
		SPLIT: ['h', '_', '_', '_', 'c', '----!']
		SPLIT: ['s', 'h', 'u', '_', 'c']
		['s', 'h', 'u', '_', 'c']
		['s', 'h', 'u', '_', 'c']
		SPLIT: ['s', '_', 'i', '_', 'k', '----!']
		SPLIT: ['s', '_', 'o', '_', 'ch']
		['s', '_', 'o', '_', 'ch']
		SPLIT: ['s', 'u', '_', '_', 'ch']
		['s', 'u', '_', '_', 'ch']
		['s', 'u', '_', '_', 'ch']
		SPLIT: ['s', 'u', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', 'u', 'i', '_', 'ch']
		['s', 'u', 'i', '_', 'ch']
		['s', 'u', 'i', '_', 'ch']
		SPLIT: ['s', 'u', 'i', '_', 'c', '----!']
		SPLIT: ['s', 'u', 'i', '_', 'k', '----!']
		SPLIT: ['s', 'u', 'i', '_', 'k', '----!']
		SPLIT: ['s', 'u', 'y', '_', 'ch']
		['s', 'u', 'y', '_', 'ch']
		['s', 'u', 'y', '_', 'ch']
		SPLIT: ['s', 'ƿ', '_', '_', '_']
		['s', 'ƿ', '_', '_', '_']
		SPLIT: ['s', 'ƿ', 'u', '_', 'c']
		['s', 'ƿ', 'u', '_', 'c']
		['s', 'ƿ', 'u', '_', 'c']
		SPLIT: ['s', 'ƿ', 'u', '_', 'c.ch', '----!']
		SPLIT: ['s', 'ƿ', 'u', '_', 'h.c.ch', '----!']
		SPLIT: ['_', 'u', 'u.i', '_', 'h.c.ch', '----!']
		SPLIT: ['_', 'u', 'u.y', '_', 'h.c.ch', '----!']
		version for pattern CCVCC is INVALID
		[{'ll', 'c', '_', 'l'}]
		10
		POSSIBLE CHANGE: 3 : Palatal Vicinity l-deletion
		OVERVIEW: version for pattern CCVCC
{'ll', 'c', '_', 'l'}
faulty splits: 10
hc----! <-! hsƿucch
sik----! <-! slike
suh.c.ch----! <-! suche
suic----! <-! suilc
suik----! <-! suilk
suik----! <-! suilke
sƿuc.ch----! <-! sƿucche
sƿuh.c.ch----! <-! sƿuche
uu.ih.c.ch----! <-! zuich
uu.yh.c.ch----! <-! zuych
s | w | e | c | h
s | ƿ | i | c | h
s | w | i | c | h
s | ƿ | i | l | c
s | w | i | l | c
s | ƿ | i | l | ch
s | w | i | l | k
s | ƿ | i | ll | c
s | ƿ | u | c | ch
s | ƿ | u | c | h
s | ƿ | u | l | c
s | w | u | l | c
h | _ | _ | _ | c | ----!
s | h | u | _ | c
s | _ | i | _ | k | ----!
s | _ | o | _ | ch
s | u | _ | _ | ch
s | u | _ | _ | h.c.ch | ----!
s | u | i | _ | ch
s | u | i | _ | c | ----!
s | u | i | _ | k | ----!
s | u | i | _ | k | ----!
s | u | y | _ | ch
s | ƿ | _ | _ | _
s | ƿ | u | _ | c
s | ƿ | u | _ | c.ch | ----!
s | ƿ | u | _ | h.c.ch | ----!
_ | u | u.i | _ | h.c.ch | ----!
_ | u | u.y | _ | h.c.ch | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'h', 'ƿ', 'u', 'w', '_', 'l'},{'w', 'ƿ', 's'}
3 : {'k', '_', 'l', 'll', 'c'},{'ll', 'c', 'l', 's'},{'_', 'l', 'll', 'c', 'y'},{'ch', '_', 'l', 'll', 'c'},{'cch', '_', 'l', 'll', 'c'},{'ll', 'c', '_', 'l'},{'_', 'l', 'll', 'c', 'i'},{'h', '_', 'l', 'll', 'c'},{'ll', 'c', 'u', 'l'},{'ƿ', 'll', 'c', 'l'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCCVCC
	Selection for pattern: CCCVCC completed
	Making a version for pattern: CCCVCC
			___CCCVCC : 0___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCCVCC : 1___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					adding blocked set: C = C >> hu, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					RESULT:  ['h']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCCVCC : 2___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/o/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/ui/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/ui/c/h
					TRYING: ui
					> version: s/_/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/c
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/uy/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/uy/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/uy/c/h
					TRYING: uy
					> version: s/_/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					RESULT:  ['u', 'w']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/ui/c/h
					TRYING: ui
					> version: z/_/ui/ch
					TRYING: ui
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/uy/c/h
					TRYING: uy
					> version: z/_/uy/ch
					TRYING: uy
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
			___CCCVCC : 3___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/_/_/l/i/k/e
					TRYING: l
					> version: s/_/_/l/i/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					> version: s/_/o/ch
					TRYING: ch
					> version: s/o/_/c/h
					TRYING: c
					> version: s/o/_/ch
					TRYING: ch
					> version: s/_/_/o/c/h
					TRYING: o
					> version: s/_/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/ch
					TRYING: ch
					> version: s/_/u/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/ch/e
					TRYING: ch
					> version: s/_/u/ch/e
					TRYING: ch
					RESULT:  ['e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					> version: s/u/i/ch
					TRYING: ch
					> version: s/ui/c/h
					TRYING: h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/ui/c/h
					TRYING: c
					> version: s/_/ui/ch
					TRYING: ch
					RESULT:  ['i']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					> version: s/u/i/l/c
					TRYING: l
					> version: s/ui/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/ui/l/c
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					> version: s/u/i/l/k
					TRYING: l
					> version: s/ui/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/ui/l/k
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/ui/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/ui/l/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					> version: s/u/y/ch
					TRYING: ch
					> version: s/uy/c/h
					TRYING: h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/uy/c/h
					TRYING: c
					> version: s/_/uy/ch
					TRYING: ch
					RESULT:  ['y']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					> version: s/_/w/e/c/h
					TRYING: e
					> version: s/_/w/e/ch
					TRYING: e
					RESULT:  ['e']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					> version: s/w/i/ch
					TRYING: ch
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					> version: s/w/i/l/c
					TRYING: l
					> version: s/_/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					> version: s/w/i/l/k
					TRYING: l
					> version: s/_/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					> version: s/w/u/l/c
					TRYING: l
					> version: s/_/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					> version: z/u/i/ch
					TRYING: ch
					> version: z/ui/c/h
					TRYING: h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/ui/c/h
					TRYING: c
					> version: _/z/ui/ch
					TRYING: ch
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/ui/c/h
					TRYING: c
					> version: z/_/ui/ch
					TRYING: ch
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					> version: z/u/y/ch
					TRYING: ch
					> version: z/uy/c/h
					TRYING: h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/uy/c/h
					TRYING: c
					> version: _/z/uy/ch
					TRYING: ch
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/uy/c/h
					TRYING: c
					> version: z/_/uy/ch
					TRYING: ch
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCCVCC : 4___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['c']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/k
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/k/e
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: k
					> version: s/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					RESULT:  ['c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCCVCC : 5___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					> version: s/h/u/_/c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/_/c/_(CCAACA)
s/h/u/_/c/_(CCAACA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: k
					RESULT:  ['k']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: h
					> version: s/_/_/o/ch
					RESULT:  ['h']
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					> version: s/u/c/_/h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/ch
					> version: s/_/u/_/ch
					RESULT:  ['h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/e/_(CACCVA)
s/u/c/h/e/_(CACCVA)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/ch/e/_(CAACVA)
s/_/u/ch/e/_(CAACVA)
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					RESULT:  ['h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/ui/l/c
					RESULT:  ['c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/ui/l/k
					RESULT:  ['k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/ui/l/k/e
					TRYING: e
					RESULT:  ['k']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					RESULT:  ['h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: h
					> version: s/_/w/e/ch
					RESULT:  ['h']
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					RESULT:  ['h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: k
					RESULT:  ['k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))$'}
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
		only one version left: ['s', 'h', 'u', '_', 'c', '_']
		FAIL: 
		only one version left: ['s', '_', '_', 'o', 'c', 'h']
		only one version left: ['s', '_', 'u', '_', 'c', 'h']
		FAIL: 
		only one version left: ['s', '_', 'u', 'i', 'c', 'h']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'u', 'y', 'c', 'h']
		only one version left: ['s', '_', 'ƿ', '_', '_', '_']
		only one version left: ['s', '_', 'w', 'e', 'c', 'h']
		only one version left: ['s', '_', 'ƿ', 'i', 'c', 'h']
		only one version left: ['s', '_', 'w', 'i', 'c', 'h']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'c', '_']
		only one version left: ['s', '_', 'ƿ', 'u', 'c', 'ch']
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'c', 'h']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 's', 'ƿ', 'u', 'c', 'ch']
		SPLIT: ['s', 'h', 'u', '_', 'c', '_']
		['s', 'h', 'u', '_', 'c', '_']
		['s', 'h', 'u', '_', 'c', '_']
		SPLIT: ['s', '_', '_', 'i', 'k', 'k', '----!']
		SPLIT: ['s', '_', '_', 'o', 'c', 'h']
		['s', '_', '_', 'o', 'c', 'h']
		SPLIT: ['s', '_', 'u', '_', 'c', 'h']
		['s', '_', 'u', '_', 'c', 'h']
		['s', '_', 'u', '_', 'c', 'h']
		SPLIT: ['s', '_', 'u', 'e', 'h', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'c', 'h']
		['s', '_', 'u', 'i', 'c', 'h']
		['s', '_', 'u', 'i', 'c', 'h']
		SPLIT: ['s', '_', 'u', 'i', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'k', 'k', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'k', 'k', '----!']
		SPLIT: ['s', '_', 'u', 'y', 'c', 'h']
		['s', '_', 'u', 'y', 'c', 'h']
		['s', '_', 'u', 'y', 'c', 'h']
		SPLIT: ['s', '_', 'ƿ', '_', '_', '_']
		['s', '_', 'ƿ', '_', '_', '_']
		SPLIT: ['s', '_', 'w', 'e', 'c', 'h']
		['s', '_', 'w', 'e', 'c', 'h']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'h']
		['s', '_', 'ƿ', 'i', 'c', 'h']
		['s', '_', 'ƿ', 'i', 'c', 'h']
		SPLIT: ['s', '_', 'w', 'i', 'c', 'h']
		['s', '_', 'w', 'i', 'c', 'h']
		['s', '_', 'w', 'i', 'c', 'h']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'w', 'i', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c.ch', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'w', 'i', 'k', 'k', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', '_']
		['s', '_', 'ƿ', 'u', 'c', '_']
		['s', '_', 'ƿ', 'u', 'c', '_']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', 'ch']
		['s', '_', 'ƿ', 'u', 'c', 'ch']
		['s', '_', 'ƿ', 'u', 'c', 'ch']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c.ch', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', 'h']
		['s', '_', 'ƿ', 'u', 'c', 'h']
		['s', '_', 'ƿ', 'u', 'c', 'h']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'h.c.ch', 'h', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'u.w', 'u', 'c', 'c', '----!']
		SPLIT: ['_', '_', 'u', 'u.i', 'h.c.ch', 'h.c.ch', '----!']
		SPLIT: ['_', '_', 'u', 'u.y', 'h.c.ch', 'h.c.ch', '----!']
		version for pattern CCCVCC is INVALID
		[]
		16
		OVERVIEW: version for pattern CCCVCC

faulty splits: 16
sikk----! <-! slike
sueh----! <-! suche
suicc----! <-! suilc
suikk----! <-! suilk
suikk----! <-! suilke
sƿicc----! <-! sƿilc
swicc----! <-! swilc
sƿic.chh.c.ch----! <-! sƿilch
swikk----! <-! swilk
sƿicc----! <-! sƿillc
su.ƿuc.chh.c.ch----! <-! sƿucche
su.ƿuh.c.chh----! <-! sƿuche
su.ƿucc----! <-! sƿulc
su.wucc----! <-! swulc
uu.ih.c.chh.c.ch----! <-! zuich
uu.yh.c.chh.c.ch----! <-! zuych
h | s | ƿ | u | c | ch
s | h | u | _ | c | _
s | _ | _ | i | k | k | ----!
s | _ | _ | o | c | h
s | _ | u | _ | c | h
s | _ | u | e | h | _ | ----!
s | _ | u | i | c | h
s | _ | u | i | c | c | ----!
s | _ | u | i | k | k | ----!
s | _ | u | i | k | k | ----!
s | _ | u | y | c | h
s | _ | ƿ | _ | _ | _
s | _ | w | e | c | h
s | _ | ƿ | i | c | h
s | _ | w | i | c | h
s | _ | ƿ | i | c | c | ----!
s | _ | w | i | c | c | ----!
s | _ | ƿ | i | c.ch | h.c.ch | ----!
s | _ | w | i | k | k | ----!
s | _ | ƿ | i | c | c | ----!
s | _ | ƿ | u | c | _
s | _ | ƿ | u | c | ch
s | _ | u.ƿ | u | c.ch | h.c.ch | ----!
s | _ | ƿ | u | c | h
s | _ | u.ƿ | u | h.c.ch | h | ----!
s | _ | u.ƿ | u | c | c | ----!
s | _ | u.w | u | c | c | ----!
_ | _ | u | u.i | h.c.ch | h.c.ch | ----!
_ | _ | u | u.y | h.c.ch | h.c.ch | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'h', '_', 'ƿ', 's'},{'h', 'w', '_', 's'},{'h', '_', 'z', 's'},{'h', 'l', 's'},{'h', 'u', '_', 's'}
2 : {'u', '_', 'ƿ', 'ch'},{'u', '_', 'ƿ', 'c'},{'u', 'ƿ', 'l'},{'u', 'i', 'ƿ'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCVCCV
	Selection for pattern: CCVCCV completed
	Making a version for pattern: CCVCCV
			___CCVCCV : 0___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCVCCV : 1___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					RESULT:  ['h', 'u', 'hu']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCVCCV : 2___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['ƿ']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					> version: s/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: l
					> version: s/_/l/i/k/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					> version: s/o/ch
					TRYING: ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					> version: s/u/c/h
					TRYING: c
					> version: s/u/ch
					TRYING: ch
					> version: s/u/ch
					TRYING: ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/ch/e
					TRYING: ch
					> version: s/u/ch/e
					TRYING: ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/ui/c/h
					TRYING: c
					> version: s/ui/ch
					TRYING: ch
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/ui/c/h
					TRYING: ui
					> version: s/_/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					> version: s/u/i/l/c
					TRYING: i
					> version: s/ui/l/c
					TRYING: l
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					> version: s/u/i/l/k
					TRYING: i
					> version: s/ui/l/k
					TRYING: l
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/ui/l/k/e
					TRYING: l
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/uy/c/h
					TRYING: c
					> version: s/uy/ch
					TRYING: ch
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/uy/c/h
					TRYING: uy
					> version: s/_/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					> version: s/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					> version: s/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					RESULT:  ['u', 'w']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/ui/c/h
					TRYING: c
					> version: z/ui/ch
					TRYING: ch
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/ui/c/h
					TRYING: ui
					> version: z/_/ui/ch
					TRYING: ui
					> version: _/_/z/u/i/c/h
					TRYING: z
					> version: _/_/z/u/i/c/h
					TRYING: z
					> version: _/_/z/u/i/ch
					TRYING: z
					> version: _/_/z/u/i/ch
					TRYING: z
					> version: _/_/z/ui/c/h
					TRYING: z
					> version: _/_/z/ui/ch
					TRYING: z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/uy/c/h
					TRYING: c
					> version: z/uy/ch
					TRYING: ch
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/uy/c/h
					TRYING: uy
					> version: z/_/uy/ch
					TRYING: uy
					> version: _/_/z/u/y/c/h
					TRYING: z
					> version: _/_/z/u/y/c/h
					TRYING: z
					> version: _/_/z/u/y/ch
					TRYING: z
					> version: _/_/z/u/y/ch
					TRYING: z
					> version: _/_/z/uy/c/h
					TRYING: z
					> version: _/_/z/uy/ch
					TRYING: z
					RESULT:  ['u']
			___CCVCCV : 3___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['c']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/c/h
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/ch
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/c/h
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/ch
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCVCCV : 4___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch, ch
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch, ch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, ch
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch
					RESULT:  ['c']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, _, c, i
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, _, c, i
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/ch
					> version: s/_/u/ch
					RESULT:  ['h']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ui/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ui/l/k
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ui/l/k/e
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['c']
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['c']
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					TRYING: k
					> version: s/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['k']
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCVCCV : 5___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					RESULT:  ['u']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: k
					RESULT:  ['e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: h
					> version: s/_/_/o/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch', '_']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/h/_(CAVCCA)
s/_/o/ch/_(CAVCA)
s/o/_/c/h/_(CVACCA)
s/o/_/ch/_(CVACA)
s/_/_/o/c/_/h(CAAVCAC)
s/_/_/o/ch/_(CAAVCA)
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h']
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h', '_']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', '_', 'c', 'h', '_']
				{'string': 's/o/_/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h', '_']
				version split: ['s', 'o', '_', 'ch', '_']
				{'string': 's/o/_/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_']
				version split: ['s', '_', '_', 'o', 'c', '_', 'h']
				{'string': 's/_/_/o/c/_/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', '_', 'h']
				version split: ['s', '_', '_', 'o', 'ch', '_']
				{'string': 's/_/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch', '_']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/h/_(CAACCA)
s/_/u/c/h/_(CAACCA)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					RESULT:  ['e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/c/h/_(CAACCA)
s/u/i/c/h/_(CAACCA)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/ch/_(CAAACA)
s/_/u/i/ch/_(CAAACA)
s/_/ui/c/h/_(CAVCCA)
s/_/ui/ch/_(CAVCA)
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 's/_/u/i/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 's/_/u/i/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'ui', 'c', 'h', '_']
				{'string': 's/_/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h', '_']
				version split: ['s', '_', 'ui', 'ch', '_']
				{'string': 's/_/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/ui/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c', '_']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/l/c/_(CAACCA)
s/u/i/l/c/_(CAACCA)
s/ui/l/c/_(CVCCA)
s/_/u/i/l/_/c(CAAACAC)
s/_/u/i/l/_/c(CAAACAC)
s/_/ui/l/c/_(CAVCCA)
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'c']
				{'string': 's/_/u/i/l/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'c']
				{'string': 's/_/u/i/l/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ui', 'l', 'c', '_']
				{'string': 's/_/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c', '_']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/ui/l/k
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/_/k(CAAACAC)
s/_/u/i/l/_/k(CAAACAC)
s/_/ui/l/k/_(CAVCCA)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'ui', 'l', 'k', '_']
				{'string': 's/_/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/ui/l/k/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((k))/((e))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/c/h/_(CAACCA)
s/u/y/c/h/_(CAACCA)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/ch/_(CAAACA)
s/_/u/y/ch/_(CAAACA)
s/_/uy/c/h/_(CAVCCA)
s/_/uy/ch/_(CAVCA)
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 's/_/u/y/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 's/_/u/y/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'uy', 'c', 'h', '_']
				{'string': 's/_/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h', '_']
				version split: ['s', '_', 'uy', 'ch', '_']
				{'string': 's/_/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_']
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))$'}
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: h
					> version: s/_/w/e/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch', '_']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/c/h/_(CCVCCA)
s/w/e/ch/_(CCVCA)
s/_/w/e/c/_/h(CACVCAC)
s/_/w/e/ch/_(CACVCA)
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', 'e', 'c', 'h', '_']
				{'string': 's/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h', '_']
				version split: ['s', 'w', 'e', 'ch', '_']
				{'string': 's/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_']
				version split: ['s', '_', 'w', 'e', 'c', '_', 'h']
				{'string': 's/_/w/e/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'e', 'ch', '_']
				{'string': 's/_/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch', '_']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/ch/_(CACACA)
s/_/ƿ/i/ch/_(CACACA)
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/c/h/_(CCACCA)
s/w/i/c/h/_(CCACCA)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/ch/_(CACACA)
s/_/w/i/ch/_(CACACA)
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'c', '_', 'h']
				{'string': 's/_/w/i/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'c', '_', 'h']
				{'string': 's/_/w/i/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/ƿ/i/l/c/_(CCACCA)
s/ƿ/i/l/c/_(CCACCA)
s/_/ƿ/i/l/_/c(CACACAC)
s/_/ƿ/i/l/_/c(CACACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/w/i/_/l/c
					TRYING: c
					> version: s/w/i/_/l/c
					TRYING: c
					> version: s/_/w/_/i/l/c
					TRYING: l
					> version: s/_/w/_/i/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
s/w/i/l/c/_(CCACCA)
s/w/i/l/c/_(CCACCA)
s/_/w/i/l/_/c(CACACAC)
s/_/w/i/l/_/c(CACACAC)
s/w/i/_/l/_/c(CCAACAC)
s/w/i/_/l/_/c(CCAACAC)
s/_/w/_/i/_/l/c(CACAAACC)
s/_/w/_/i/_/l/c(CACAAACC)
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'c']
				{'string': 's/_/w/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'c']
				{'string': 's/_/w/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'c']
				{'string': 's/w/i/_/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'c']
				{'string': 's/w/i/_/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					> version: s/ƿ/i/_/l/c/h
					TRYING: c
					> version: s/ƿ/i/_/l/c/h
					TRYING: c
					> version: s/ƿ/i/_/l/ch
					TRYING: ch
					> version: s/ƿ/i/_/l/ch
					TRYING: ch
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/_/i/l/ch
					TRYING: l
					> version: s/_/ƿ/_/i/l/ch
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/ch/_(CCACCA)
s/ƿ/i/l/ch/_(CCACCA)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: k
					> version: s/w/i/_/l/k
					TRYING: k
					> version: s/w/i/_/l/k
					TRYING: k
					> version: s/_/w/_/i/l/k
					TRYING: l
					> version: s/_/w/_/i/l/k
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/i/l/k/_(CCACCA)
s/w/i/l/k/_(CCACCA)
s/_/w/i/l/_/k(CACACAC)
s/_/w/i/l/_/k(CACACAC)
s/w/i/_/l/_/k(CCAACAC)
s/w/i/_/l/_/k(CCAACAC)
s/_/w/_/i/_/l/k(CACAAACC)
s/_/w/_/i/_/l/k(CACAAACC)
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((w))/((_))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/ll/c
					TRYING: c
					> version: s/ƿ/i/_/ll/c
					TRYING: c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/_/i/ll/c
					TRYING: ll
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/ll/c/_(CCACCA)
s/ƿ/i/ll/c/_(CCACCA)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/ll', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/ll', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/ch/_(CACACA)
s/_/ƿ/u/ch/_(CACACA)
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/ƿ/u/l/c/_(CCACCA)
s/ƿ/u/l/c/_(CCACCA)
s/_/ƿ/u/l/_/c(CACACAC)
s/_/ƿ/u/l/_/c(CACACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/l', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/l', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/w/u/_/l/c
					TRYING: c
					> version: s/w/u/_/l/c
					TRYING: c
					> version: s/_/w/_/u/l/c
					TRYING: l
					> version: s/_/w/_/u/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
s/w/u/l/c/_(CCACCA)
s/w/u/l/c/_(CCACCA)
s/_/w/u/l/_/c(CACACAC)
s/_/w/u/l/_/c(CACACAC)
s/w/u/_/l/_/c(CCAACAC)
s/w/u/_/l/_/c(CCAACAC)
s/_/w/_/u/_/l/c(CACAAACC)
s/_/w/_/u/_/l/c(CACAAACC)
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', '_', 'c']
				{'string': 's/_/w/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'u', 'l', '_', 'c']
				{'string': 's/_/w/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', 'c']
				{'string': 's/w/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', 'c']
				{'string': 's/w/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/l', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/l', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: c
					> version: _/_/z/u/i/c/h
					TRYING: c
					> version: _/_/z/u/i/ch
					TRYING: ch
					> version: _/_/z/u/i/ch
					TRYING: ch
					> version: _/_/z/ui/c/h
					TRYING: h
					> version: _/_/z/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch', '_']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/c/h/_(CAACCA)
z/u/i/c/h/_(CAACCA)
z/u/i/ch/_(CAACA)
z/u/i/ch/_(CAACA)
z/ui/c/h/_(CVCCA)
z/ui/ch/_(CVCA)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/ch/_(ACAACA)
_/z/u/i/ch/_(ACAACA)
_/z/ui/c/h/_(ACVCCA)
_/z/ui/ch/_(ACVCA)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/ch/_(CAAACA)
z/_/u/i/ch/_(CAAACA)
z/_/ui/c/h/_(CAVCCA)
z/_/ui/ch/_(CAVCA)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/ui/c/_/h(AACVCAC)
_/_/z/ui/ch/_(AACVCA)
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'ui', 'c', 'h', '_']
				{'string': 'z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h', '_']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'ui', 'c', 'h', '_']
				{'string': '_/z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h', '_']
				version split: ['_', 'z', 'ui', 'ch', '_']
				{'string': '_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/_/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/_/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'ui', 'c', 'h', '_']
				{'string': 'z/_/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h', '_']
				version split: ['z', '_', 'ui', 'ch', '_']
				{'string': 'z/_/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', '_', 'h']
				{'string': '_/_/z/ui/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch', '_']
				{'string': '_/_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch', '_']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: c
					> version: _/_/z/u/y/c/h
					TRYING: c
					> version: _/_/z/u/y/ch
					TRYING: ch
					> version: _/_/z/u/y/ch
					TRYING: ch
					> version: _/_/z/uy/c/h
					TRYING: h
					> version: _/_/z/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch', '_']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/c/h/_(CAACCA)
z/u/y/c/h/_(CAACCA)
z/u/y/ch/_(CAACA)
z/u/y/ch/_(CAACA)
z/uy/c/h/_(CVCCA)
z/uy/ch/_(CVCA)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/ch/_(ACAACA)
_/z/u/y/ch/_(ACAACA)
_/z/uy/c/h/_(ACVCCA)
_/z/uy/ch/_(ACVCA)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/ch/_(CAAACA)
z/_/u/y/ch/_(CAAACA)
z/_/uy/c/h/_(CAVCCA)
z/_/uy/ch/_(CAVCA)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/uy/c/_/h(AACVCAC)
_/_/z/uy/ch/_(AACVCA)
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'uy', 'c', 'h', '_']
				{'string': 'z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h', '_']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'uy', 'c', 'h', '_']
				{'string': '_/z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h', '_']
				version split: ['_', 'z', 'uy', 'ch', '_']
				{'string': '_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/_/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/_/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'uy', 'c', 'h', '_']
				{'string': 'z/_/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h', '_']
				version split: ['z', '_', 'uy', 'ch', '_']
				{'string': 'z/_/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', '_', 'h']
				{'string': '_/_/z/uy/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch', '_']
				{'string': '_/_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch', '_']
		FAIL: 
		only one version left: ['s', 'h', 'u', 'c', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'u', 'c', 'h', '_']
		only one version left: ['s', '_', 'u', 'c', 'h', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'ƿ', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
		SPLIT: ['s', 'ƿ', 'u', 'c', 'h', 'e']
		SPLIT: ['h', '_', 'ƿ', '_', 'c', 'u', '----!']
		SPLIT: ['s', 'h', 'u', 'c', '_', '_']
		['s', 'h', 'u', 'c', '_', '_']
		['s', 'h', 'u', 'c', '_', '_']
		SPLIT: ['s', '_', '_', 'k', 'k', 'e', '----!']
		SPLIT: ['s', '_', '_', 'h.c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'u', 'c', 'h', '_']
		['s', '_', 'u', 'c', 'h', '_']
		['s', '_', 'u', 'c', 'h', '_']
		SPLIT: ['s', '_', 'u', 'c', 'h', 'e']
		['s', '_', 'u', 'c', 'h', 'e']
		['s', '_', 'u', 'c', 'h', 'e']
		SPLIT: ['s', '_', 'u', 'h.c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'u', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u', 'k', 'k', '_', '----!']
		SPLIT: ['s', '_', 'u', 'k', 'k', 'e', '----!']
		SPLIT: ['s', '_', 'u', 'h.c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', '_', '_']
		['s', '_', 'ƿ', '_', '_', '_']
		SPLIT: ['s', '_', 'w', 'c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', 'c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'w', 'c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c', '_', '----!']
		SPLIT: ['s', '_', 'w', '_', 'c', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c.ch', '_', '----!']
		SPLIT: ['s', '_', 'w', '_', 'k', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c', 'c.ch', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', '_', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u.w', '_', 'c', '_', '----!']
		SPLIT: ['_', '_', 'u', 'h.c.ch', 'h.c.ch', '_', '----!']
		SPLIT: ['_', '_', 'u', 'h.c.ch', 'h.c.ch', '_', '----!']
		version for pattern CCVCCV is INVALID
		[{'h', 'ƿ', 'u', 'hu', '_'}]
		23
		OVERVIEW: version for pattern CCVCCV
{'h', 'ƿ', 'u', 'hu', '_'}
faulty splits: 23
hƿcu----! <-! hsƿucch
skke----! <-! slike
sh.c.chh.c.ch----! <-! soch
suh.c.chh.c.ch----! <-! suich
succ----! <-! suilc
sukk----! <-! suilk
sukke----! <-! suilke
suh.c.chh.c.ch----! <-! suych
swc.chh.c.ch----! <-! swech
sƿc.chh.c.ch----! <-! sƿich
swc.chh.c.ch----! <-! swich
sƿc----! <-! sƿilc
swc----! <-! swilc
sƿc.ch----! <-! sƿilch
swk----! <-! swilk
sƿc----! <-! sƿillc
su.ƿcc----! <-! sƿuc
su.ƿcc.ch----! <-! sƿucch
su.ƿc.chh.c.ch----! <-! sƿuch
su.ƿc----! <-! sƿulc
su.wc----! <-! swulc
uh.c.chh.c.ch----! <-! zuich
uh.c.chh.c.ch----! <-! zuych
s | ƿ | u | c | ch | e
s | ƿ | u | c | h | e
h | _ | ƿ | _ | c | u | ----!
s | h | u | c | _ | _
s | _ | _ | k | k | e | ----!
s | _ | _ | h.c.ch | h.c.ch | _ | ----!
s | _ | u | c | h | _
s | _ | u | c | h | e
s | _ | u | h.c.ch | h.c.ch | _ | ----!
s | _ | u | c | c | _ | ----!
s | _ | u | k | k | _ | ----!
s | _ | u | k | k | e | ----!
s | _ | u | h.c.ch | h.c.ch | _ | ----!
s | _ | ƿ | _ | _ | _
s | _ | w | c.ch | h.c.ch | _ | ----!
s | _ | ƿ | c.ch | h.c.ch | _ | ----!
s | _ | w | c.ch | h.c.ch | _ | ----!
s | _ | ƿ | _ | c | _ | ----!
s | _ | w | _ | c | _ | ----!
s | _ | ƿ | _ | c.ch | _ | ----!
s | _ | w | _ | k | _ | ----!
s | _ | ƿ | _ | c | _ | ----!
s | _ | u.ƿ | c | c | _ | ----!
s | _ | u.ƿ | c | c.ch | _ | ----!
s | _ | u.ƿ | c.ch | h.c.ch | _ | ----!
s | _ | u.ƿ | _ | c | _ | ----!
s | _ | u.w | _ | c | _ | ----!
_ | _ | u | h.c.ch | h.c.ch | _ | ----!
_ | _ | u | h.c.ch | h.c.ch | _ | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'ƿ', 's'},{'h', 'ƿ', 'u', 'hu', '_', 'l'},{'h', 'ƿ', 'u', 'w', 'hu', '_'},{'h', 'ƿ', 'u', 'hu', '_', 'z'},{'h', 'ƿ', 'u', 'hu', '_'}
3 : {'c', 'u'},{'h', 'ch', 'k', '_', 'l', 'c'},{'c', 'ƿ'},{'h', 'ch', 'k', '_', 'll', 'c'},{'h', 'ch', 'u', 'k', '_', 'c'},{'h', 'ch', 'k', '_', 'c', 'i'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCCVC
	Selection for pattern: CCCVC completed
	Making a version for pattern: CCCVC
			___CCCVC : 0___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCCVC : 1___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					adding blocked set: C = C >> hu, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					RESULT:  ['h']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCCVC : 2___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/o/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/ui/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/ui/c/h
					TRYING: ui
					> version: s/_/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/c
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/uy/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/uy/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/uy/c/h
					TRYING: uy
					> version: s/_/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					RESULT:  ['u', 'w']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/ui/c/h
					TRYING: ui
					> version: z/_/ui/ch
					TRYING: ui
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/uy/c/h
					TRYING: uy
					> version: z/_/uy/ch
					TRYING: uy
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
			___CCCVC : 3___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/_/_/l/i/k/e
					TRYING: l
					> version: s/_/_/l/i/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					> version: s/_/o/ch
					TRYING: ch
					> version: s/o/_/c/h
					TRYING: c
					> version: s/o/_/ch
					TRYING: ch
					> version: s/_/_/o/c/h
					TRYING: o
					> version: s/_/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/ch
					TRYING: ch
					> version: s/_/u/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/ch/e
					TRYING: ch
					> version: s/_/u/ch/e
					TRYING: ch
					RESULT:  ['e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					> version: s/u/i/ch
					TRYING: ch
					> version: s/ui/c/h
					TRYING: h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/ui/c/h
					TRYING: c
					> version: s/_/ui/ch
					TRYING: ch
					RESULT:  ['i']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					> version: s/u/i/l/c
					TRYING: l
					> version: s/ui/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/ui/l/c
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					> version: s/u/i/l/k
					TRYING: l
					> version: s/ui/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/ui/l/k
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/ui/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/ui/l/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					> version: s/u/y/ch
					TRYING: ch
					> version: s/uy/c/h
					TRYING: h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/uy/c/h
					TRYING: c
					> version: s/_/uy/ch
					TRYING: ch
					RESULT:  ['y']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					> version: s/_/w/e/c/h
					TRYING: e
					> version: s/_/w/e/ch
					TRYING: e
					RESULT:  ['e']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					> version: s/w/i/ch
					TRYING: ch
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					> version: s/w/i/l/c
					TRYING: l
					> version: s/_/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					> version: s/w/i/l/k
					TRYING: l
					> version: s/_/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					> version: s/w/u/l/c
					TRYING: l
					> version: s/_/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					> version: z/u/i/ch
					TRYING: ch
					> version: z/ui/c/h
					TRYING: h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/ui/c/h
					TRYING: c
					> version: _/z/ui/ch
					TRYING: ch
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/ui/c/h
					TRYING: c
					> version: z/_/ui/ch
					TRYING: ch
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					> version: z/u/y/ch
					TRYING: ch
					> version: z/uy/c/h
					TRYING: h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/uy/c/h
					TRYING: c
					> version: _/z/uy/ch
					TRYING: ch
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/uy/c/h
					TRYING: c
					> version: z/_/uy/ch
					TRYING: ch
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCCVC : 4___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, cch
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, cch
					> version: s/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, cch
					> version: s/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, cch
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i, cch
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i, cch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
s/l/i/k/_/e(CCACAV)
s/l/i/k/_/e(CCACAV)
s/_/l/i/_/k/e(CACAACV)
s/_/l/i/_/k/e(CACAACV)
s/l/_/i/_/k/e(CCAAACV)
s/l/_/i/_/k/e(CCAAACV)
s/_/_/l/_/i/k/e(CAACAACV)
s/_/_/l/_/i/k/e(CAACAACV)
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/l/_/i/_/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/l/_/i/_/k', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/i', 'rgx': '((s))/((_))/((_))/((i))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, cch
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, cch
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					> version: s/_/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h']
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((c)|(ch))$'}
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: c
					> version: s/_/u/_/c/h
					TRYING: c
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((c)|(ch))$'}
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/_/e(CACCAV)
s/u/c/h/_/e(CACCAV)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/_/h/e(CAACACV)
s/_/u/c/_/h/e(CAACACV)
s/_/u/ch/_/e(CAACAV)
s/_/u/ch/_/e(CAACAV)
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((e))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', 'k']
				{'string': 's/_/ui/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/l/_/k/e(CAACACV)
s/u/i/l/_/k/e(CAACACV)
s/ui/l/k/_/e(CVCCAV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/ui/l/_/k/e(CAVCACV)
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', '_', 'e']
				{'string': 's/ui/l/k/_/e', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/_/ui/l/_/k', 'rgx': '((s))/((_))/((u))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k', 'e']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))$'}
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					> version: s/_/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((c)|(ch))$'}
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((c)|(ch))$'}
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					RESULT:  ['c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/l/_/k(CCACAC)
s/w/i/l/_/k(CCACAC)
s/_/w/i/_/l/k(CACAACC)
s/_/w/i/_/l/k(CACAACC)
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l', 'rgx': '((s))/((_))/((w))/((i))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					RESULT:  ['c', 'cch', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					RESULT:  ['c', 'cch', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(cch)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					RESULT:  ['c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
		only one version left: ['s', 'h', 'u', '_', 'c']
		FAIL: 
		only one version left: ['s', '_', '_', 'o', 'ch']
		only one version left: ['s', '_', 'u', '_', 'ch']
		FAIL: 
		only one version left: ['s', '_', 'u', 'i', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'u', 'y', 'ch']
		only one version left: ['s', '_', 'ƿ', '_', '_']
		only one version left: ['s', '_', 'w', 'e', 'ch']
		only one version left: ['s', '_', 'ƿ', 'i', 'ch']
		only one version left: ['s', '_', 'w', 'i', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'c']
		only one version left: ['s', '_', 'ƿ', 'u', 'cch']
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 's', 'ƿ', 'u', 'cch']
		SPLIT: ['s', 'h', 'u', '_', 'c']
		['s', 'h', 'u', '_', 'c']
		['s', 'h', 'u', '_', 'c']
		SPLIT: ['s', '_', '_', 'i', '_', '----!']
		SPLIT: ['s', '_', '_', 'o', 'ch']
		['s', '_', '_', 'o', 'ch']
		SPLIT: ['s', '_', 'u', '_', 'ch']
		['s', '_', 'u', '_', 'ch']
		['s', '_', 'u', '_', 'ch']
		SPLIT: ['s', '_', 'u', 'e', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'ch']
		['s', '_', 'u', 'i', 'ch']
		['s', '_', 'u', 'i', 'ch']
		SPLIT: ['s', '_', 'u', 'i', 'c', '----!']
		SPLIT: ['s', '_', 'u', 'i', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', '_', '----!']
		SPLIT: ['s', '_', 'u', 'y', 'ch']
		['s', '_', 'u', 'y', 'ch']
		['s', '_', 'u', 'y', 'ch']
		SPLIT: ['s', '_', 'ƿ', '_', '_']
		['s', '_', 'ƿ', '_', '_']
		SPLIT: ['s', '_', 'w', 'e', 'ch']
		['s', '_', 'w', 'e', 'ch']
		SPLIT: ['s', '_', 'ƿ', 'i', 'ch']
		['s', '_', 'ƿ', 'i', 'ch']
		['s', '_', 'ƿ', 'i', 'ch']
		SPLIT: ['s', '_', 'w', 'i', 'ch']
		['s', '_', 'w', 'i', 'ch']
		['s', '_', 'w', 'i', 'ch']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', '----!']
		SPLIT: ['s', '_', 'w', 'i', 'c', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c.ch', '----!']
		SPLIT: ['s', '_', 'w', 'i', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c']
		['s', '_', 'ƿ', 'u', 'c']
		['s', '_', 'ƿ', 'u', 'c']
		SPLIT: ['s', '_', 'ƿ', 'u', 'cch']
		['s', '_', 'ƿ', 'u', 'cch']
		['s', '_', 'ƿ', 'u', 'cch']
		['s', '_', 'ƿ', 'u', 'cch']
		['s', '_', 'ƿ', 'u', 'cch']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c.cch.ch', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'ch']
		['s', '_', 'ƿ', 'u', 'ch']
		['s', '_', 'ƿ', 'u', 'ch']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c.ch', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c', '----!']
		SPLIT: ['s', '_', 'u.w', 'u', 'c', '----!']
		SPLIT: ['_', '_', 'u', 'u.i', 'c.ch', '----!']
		SPLIT: ['_', '_', 'u', 'u.y', 'c.ch', '----!']
		version for pattern CCCVC is INVALID
		[]
		16
		OVERVIEW: version for pattern CCCVC

faulty splits: 16
si----! <-! slike
sue----! <-! suche
suic----! <-! suilc
sui----! <-! suilk
sui----! <-! suilke
sƿic----! <-! sƿilc
swic----! <-! swilc
sƿic.ch----! <-! sƿilch
swi----! <-! swilk
sƿic----! <-! sƿillc
su.ƿuc.cch.ch----! <-! sƿucche
su.ƿuc.ch----! <-! sƿuche
su.ƿuc----! <-! sƿulc
su.wuc----! <-! swulc
uu.ic.ch----! <-! zuich
uu.yc.ch----! <-! zuych
h | s | ƿ | u | cch
s | h | u | _ | c
s | _ | _ | i | _ | ----!
s | _ | _ | o | ch
s | _ | u | _ | ch
s | _ | u | e | _ | ----!
s | _ | u | i | ch
s | _ | u | i | c | ----!
s | _ | u | i | _ | ----!
s | _ | u | i | _ | ----!
s | _ | u | y | ch
s | _ | ƿ | _ | _
s | _ | w | e | ch
s | _ | ƿ | i | ch
s | _ | w | i | ch
s | _ | ƿ | i | c | ----!
s | _ | w | i | c | ----!
s | _ | ƿ | i | c.ch | ----!
s | _ | w | i | _ | ----!
s | _ | ƿ | i | c | ----!
s | _ | ƿ | u | c
s | _ | ƿ | u | cch
s | _ | u.ƿ | u | c.cch.ch | ----!
s | _ | ƿ | u | ch
s | _ | u.ƿ | u | c.ch | ----!
s | _ | u.ƿ | u | c | ----!
s | _ | u.w | u | c | ----!
_ | _ | u | u.i | c.ch | ----!
_ | _ | u | u.y | c.ch | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'h', '_', 'ƿ', 's'},{'h', 'w', '_', 's'},{'h', '_', 'z', 's'},{'h', 'l', 's'},{'h', 'u', '_', 's'}
2 : {'u', '_', 'ƿ', 'ch'},{'u', '_', 'ƿ', 'c'},{'u', 'ƿ', 'l'},{'u', 'i', 'ƿ'}
4 : {'c', 'k', 'cch'},{'h', 'ch', 'cch', '_', 'c'},{'ch', 'cch', '_', 'l', 'c'},{'ch', 'k', 'cch', '_', 'c'},{'c', 'i', 'cch'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCVCV
	Selection for pattern: CCVCV completed
	Making a version for pattern: CCVCV
			___CCVCV : 0___
				ANALYSING: slike
				adding littera based on matching pattern
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCVCV : 1___
				ANALYSING: slike
				adding littera based on matching pattern
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					adding blocked set: C = C >> h, _, ƿ, l
					> version: s/h/u/c
					TRYING: h
					adding blocked set: C = C >> h, _, ƿ, l
					> version: s/hu/c
					TRYING: hu
					adding blocked set: C = C >> _, ƿ, hu, l
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'h', 'u', 'c']
				adding dashed alternative: ['s', '_', 'h', 'u', 'c']
				adding dashed alternative: ['s', '_', 'hu', 'c']
				adding dashed alternative: ['sh', '_', 'u', 'c']
				adding dashed alternative: ['sh', '_', 'u', 'c']
				adding dashed alternative: ['sh', '_', 'u', 'c']
				adding dashed alternative: ['sh', '_', 'u', 'c']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/_/h/u/c(CACAC)
s/_/h/u/c(CACAC)
s/_/hu/c(CACC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> w, _, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> u, _, ƿ, l
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> _, ƿ, z, l
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCVCV : 2___
				ANALYSING: slike
				adding littera based on matching pattern
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: s/_/h/u/c
					TRYING: h
					> version: s/_/h/u/c
					TRYING: h
					> version: s/_/hu/c
					TRYING: hu
					> version: sh/_/u/c
					TRYING: u
					> version: sh/_/u/c
					TRYING: u
					> version: sh/_/u/c
					TRYING: u
					> version: sh/_/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					> version: s/o/ch
					TRYING: ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					> version: s/u/c/h
					TRYING: c
					> version: s/u/ch
					TRYING: ch
					> version: s/u/ch
					TRYING: ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/ch/e
					TRYING: ch
					> version: s/u/ch/e
					TRYING: ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/ui/c/h
					TRYING: c
					> version: s/ui/ch
					TRYING: ch
					> version: s/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					> version: s/u/i/l/c
					TRYING: i
					> version: s/ui/l/c
					TRYING: l
					> version: s/_/u/i/l/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/c
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					> version: s/u/i/l/k
					TRYING: i
					> version: s/ui/l/k
					TRYING: l
					> version: s/_/u/i/l/k
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/k
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/k
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/ui/l/k/e
					TRYING: l
					> version: s/_/u/i/l/k/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/k/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/k/e
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/uy/c/h
					TRYING: c
					> version: s/uy/ch
					TRYING: ch
					> version: s/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, _, uy, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, _, uy, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['e']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['i']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					> version: s/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['i']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					> version: s/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['i']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					> version: s/_/w/u/l/c
					TRYING: w
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/ui/c/h
					TRYING: c
					> version: z/ui/ch
					TRYING: ch
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/uy/c/h
					TRYING: c
					> version: z/uy/ch
					TRYING: ch
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCVCV : 3___
				ANALYSING: slike
				adding littera based on matching pattern
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> u, k, cch, ch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> k, ƿ, cch, ch
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> s, k, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/_/h/u/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/h/u/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/hu/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: sh/_/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: sh/_/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: sh/_/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: sh/_/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'h', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', 'h', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', 'hu', '_', 'c']
				adding dashed alternative: ['sh', '_', 'u', '_', 'c']
				adding dashed alternative: ['sh', '_', 'u', '_', 'c']
				adding dashed alternative: ['sh', '_', 'u', '_', 'c']
				adding dashed alternative: ['sh', '_', 'u', '_', 'c']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/_/h/u/c(CACAC)
s/_/h/u/c(CACAC)
s/_/hu/c(CACC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
sh/_/u/c(CAAC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/_/h/_/u/c(CACAAC)
s/_/h/_/u/c(CACAAC)
s/_/hu/_/c(CACAC)
sh/_/u/_/c(CAAAC)
sh/_/u/_/c(CAAAC)
sh/_/u/_/c(CAAAC)
sh/_/u/_/c(CAAAC)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/c/_/h(CVCAC)
s/o/ch/_(CVCA)
s/_/o/_/c/h(CAVACC)
s/_/o/_/ch(CAVAC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/u/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/_/h/e(CACACV)
s/u/c/_/h/e(CACACV)
s/u/ch/_/e(CACAV)
s/u/ch/_/e(CACAV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/ch/e(CAAACV)
s/_/u/_/ch/e(CAAACV)
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/ui/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', '_', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/ch(CAAAC)
s/u/i/_/ch(CAAAC)
s/ui/c/_/h(CVCAC)
s/ui/ch/_(CVCA)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/ch(CAAAAC)
s/_/u/_/i/ch(CAAAAC)
s/_/ui/_/c/h(CAVACC)
s/_/ui/_/ch(CAVAC)
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ui/l/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ui/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/_/l/c(CAAACC)
s/u/i/_/l/c(CAAACC)
s/ui/l/_/c(CVCAC)
s/_/u/_/i/l/c(CAAAACC)
s/_/u/_/i/l/c(CAAAACC)
s/_/ui/_/l/c(CAVACC)
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ui/l/k
					TRYING: k
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ui/l/k
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/_/l/k(CAAACC)
s/u/i/_/l/k(CAAACC)
s/ui/l/_/k(CVCAC)
s/_/u/_/i/l/k(CAAAACC)
s/_/u/_/i/l/k(CAAAACC)
s/_/ui/_/l/k(CAVACC)
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/_/l/k/e(CAAACCV)
s/u/i/_/l/k/e(CAAACCV)
s/ui/l/_/k/e(CVCACV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/ui/_/l/k/e(CAVACCV)
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: s/_/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/uy/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', '_', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/ch(CAAAC)
s/u/y/_/ch(CAAAC)
s/uy/c/_/h(CVCAC)
s/uy/ch/_(CVCA)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/ch(CAAAAC)
s/_/u/_/y/ch(CAAAAC)
s/_/uy/_/c/h(CAVACC)
s/_/uy/_/ch(CAVAC)
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, ch, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/w/e/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/w/e/c/h
					TRYING: e
					> version: s/_/w/e/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'e', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/_/c/h(CCVACC)
s/w/e/_/ch(CCVAC)
s/_/w/_/e/c/h(CACAVCC)
s/_/w/_/e/ch(CACAVC)
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/ch(CCAAC)
s/ƿ/i/_/ch(CCAAC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/ch(CACAAC)
s/_/ƿ/_/i/ch(CACAAC)
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/ch(CCAAC)
s/w/i/_/ch(CCAAC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/ch(CACAAC)
s/_/w/_/i/ch(CACAAC)
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, k, cch, _, ll
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, k, cch, _, ll
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/_/c(CCAAC)
s/ƿ/u/_/c(CCAAC)
s/_/ƿ/_/u/c(CACAAC)
s/_/ƿ/_/u/c(CACAAC)
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ƿ/u/c/ch
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/c/ch
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/ƿ/u/_/c/c/h(CCAACCC)
s/ƿ/u/_/c/c/h(CCAACCC)
s/ƿ/u/_/cch(CCAAC)
s/ƿ/u/_/cch(CCAAC)
s/ƿ/u/_/c/ch(CCAACC)
s/ƿ/u/_/c/ch(CCAACC)
s/ƿ/u/_/cch(CCAAC)
s/ƿ/u/_/cch(CCAAC)
s/_/ƿ/_/u/c/c/h(CACAACCC)
s/_/ƿ/_/u/c/c/h(CACAACCC)
s/_/ƿ/_/u/cch(CACAAC)
s/_/ƿ/_/u/cch(CACAAC)
s/_/ƿ/_/u/c/ch(CACAACC)
s/_/ƿ/_/u/c/ch(CACAACC)
s/_/ƿ/_/u/cch(CACAAC)
s/_/ƿ/_/u/cch(CACAAC)
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/ch(CCAAC)
s/ƿ/u/_/ch(CCAAC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/ch(CACAAC)
s/_/ƿ/_/u/ch(CACAAC)
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, k, cch, _, l
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: _/z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: _/z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, k, cch, _, i
					> version: z/_/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/_/ui/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/ui/c/h
					TRYING: ui
					> version: _/_/z/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/ch(CAAAC)
z/u/i/_/ch(CAAAC)
z/ui/c/_/h(CVCAC)
z/ui/ch/_(CVCA)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/ch(ACAAAC)
_/z/u/_/i/ch(ACAAAC)
_/z/ui/_/c/h(ACVACC)
_/z/ui/_/ch(ACVAC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/ch(CAAAAC)
z/_/u/_/i/ch(CAAAAC)
z/_/ui/_/c/h(CAVACC)
z/_/ui/_/ch(CAVAC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/ui/c/h(AACAVCC)
_/_/z/_/ui/ch(AACAVC)
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, k, cch, _
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: _/z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: _/z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, k, cch, _, y
					> version: z/_/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: z/_/uy/ch
					TRYING: ch
					adding blocked set: C = C >> k, _, cch, ch
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> ch, u, k, cch, _
					> version: _/_/z/uy/c/h
					TRYING: uy
					> version: _/_/z/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/ch(CAAAC)
z/u/y/_/ch(CAAAC)
z/uy/c/_/h(CVCAC)
z/uy/ch/_(CVCA)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/ch(ACAAAC)
_/z/u/_/y/ch(ACAAAC)
_/z/uy/_/c/h(ACVACC)
_/z/uy/_/ch(ACVAC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/ch(CAAAAC)
z/_/u/_/y/ch(CAAAAC)
z/_/uy/_/c/h(CAVACC)
z/_/uy/_/ch(CAVAC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/uy/c/h(AACAVCC)
_/_/z/_/uy/ch(AACAVC)
			___CCVCV : 4___
				ANALYSING: slike
				adding littera based on matching pattern
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: sƿuche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (64)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['u']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				ANALYSING: shuc
					resolving (28)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/_/h/u/c
					TRYING: c
					> version: s/_/h/u/c
					TRYING: c
					> version: s/_/hu/c
					> version: sh/_/u/c
					> version: sh/_/u/c
					> version: sh/_/u/c
					> version: sh/_/u/c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/_/h/_/u/c
					TRYING: u
					> version: s/_/h/_/u/c
					TRYING: u
					> version: s/_/hu/_/c
					TRYING: c
					> version: sh/_/u/_/c
					TRYING: c
					> version: sh/_/u/_/c
					TRYING: c
					> version: sh/_/u/_/c
					TRYING: c
					> version: sh/_/u/_/c
					TRYING: c
					RESULT:  ['u']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', '_', 'h', 'u', 'c']
				{'string': 's/_/h/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'h', 'u', 'c']
				version split: ['s', '_', 'h', 'u', 'c']
				{'string': 's/_/h/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'h', 'u', 'c']
				version split: ['s', '_', 'hu', 'c']
				{'string': 's/_/hu/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'hu', 'c']
				version split: ['sh', '_', 'u', 'c']
				{'string': 'sh/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', 'c']
				version split: ['sh', '_', 'u', 'c']
				{'string': 'sh/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', 'c']
				version split: ['sh', '_', 'u', 'c']
				{'string': 'sh/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', 'c']
				version split: ['sh', '_', 'u', 'c']
				{'string': 'sh/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', '_', 'h', '_', 'u', 'c']
				{'string': 's/_/h/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'h', '_', 'u', 'c']
				version split: ['s', '_', 'h', '_', 'u', 'c']
				{'string': 's/_/h/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'h', '_', 'u', 'c']
				version split: ['s', '_', 'hu', '_', 'c']
				{'string': 's/_/hu/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'hu', '_', 'c']
				version split: ['sh', '_', 'u', '_', 'c']
				{'string': 'sh/_/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', '_', 'c']
				version split: ['sh', '_', 'u', '_', 'c']
				{'string': 'sh/_/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', '_', 'c']
				version split: ['sh', '_', 'u', '_', 'c']
				{'string': 'sh/_/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', '_', 'c']
				version split: ['sh', '_', 'u', '_', 'c']
				{'string': 'sh/_/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['sh', '_', 'u', '_', 'c']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/c/_/h
					TRYING: h
					> version: s/o/ch/_
					> version: s/_/o/_/c/h
					TRYING: c
					> version: s/_/o/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'o', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', '_', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/c/_/h(CVCAC)
s/o/ch/_(CVCA)
s/_/o/_/c/h(CAVACC)
s/_/o/_/ch(CAVAC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/_/h(CAVCAC)
s/_/o/ch/_(CAVCA)
s/o/c/_/_/h(CVCAAC)
s/o/ch/_/_(CVCAA)
s/_/o/_/_/c/h(CAVAACC)
s/_/o/_/_/ch(CAVAAC)
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', '_', 'h']
				{'string': 's/o/c/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', '_', 'h']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', '_', 'c', 'h']
				{'string': 's/_/o/_/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', '_', 'c', 'h']
				version split: ['s', '_', 'o', '_', 'ch']
				{'string': 's/_/o/_/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', '_', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', '_', 'h']
				{'string': 's/_/o/c/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', '_', 'h']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', 'c', '_', '_', 'h']
				{'string': 's/o/c/_/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', '_', '_', 'h']
				version split: ['s', 'o', 'ch', '_', '_']
				{'string': 's/o/ch/_/_', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_', '_']
				version split: ['s', '_', 'o', '_', '_', 'c', 'h']
				{'string': 's/_/o/_/_/c', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', '_', '_', 'c', 'h']
				version split: ['s', '_', 'o', '_', '_', 'ch']
				{'string': 's/_/o/_/_/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', '_', '_', 'ch']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: c
					> version: s/_/u/_/c/h
					TRYING: c
					> version: s/_/u/_/ch
					TRYING: ch
					> version: s/_/u/_/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/_/h(CAACAC)
s/_/u/c/_/h(CAACAC)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/_/_/h(CACAAC)
s/u/c/_/_/h(CACAAC)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/_/_/c/h(CAAAACC)
s/_/u/_/_/c/h(CAAAACC)
s/_/u/_/_/ch(CAAAAC)
s/_/u/_/_/ch(CAAAAC)
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', '_', '_', 'h']
				{'string': 's/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h']
				version split: ['s', 'u', 'c', '_', '_', 'h']
				{'string': 's/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h']
				{'string': 's/_/u/_/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h']
				{'string': 's/_/u/_/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'ch']
				{'string': 's/_/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'ch']
				version split: ['s', '_', 'u', '_', '_', 'ch']
				{'string': 's/_/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'ch']
				ANALYSING: suche
					resolving (16)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/u/c/_/h/e
					TRYING: h
					> version: s/u/c/_/h/e
					TRYING: h
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/_/u/_/c/h/e
					TRYING: c
					> version: s/_/u/_/c/h/e
					TRYING: c
					> version: s/_/u/_/ch/e
					TRYING: ch
					> version: s/_/u/_/ch/e
					TRYING: ch
					RESULT:  ['e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', 'ch', 'e']
				{'string': 's/_/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', 'e']
				version split: ['s', '_', 'u', '_', 'ch', 'e']
				{'string': 's/_/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', 'e']
				ANALYSING: suich
					resolving (24)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/ch
					TRYING: ch
					> version: s/_/u/i/ch
					TRYING: ch
					> version: s/_/ui/c/h
					TRYING: h
					> version: s/_/ui/ch
					> version: s/u/i/_/c/h
					TRYING: c
					> version: s/u/i/_/c/h
					TRYING: c
					> version: s/u/i/_/ch
					TRYING: ch
					> version: s/u/i/_/ch
					TRYING: ch
					> version: s/ui/c/_/h
					TRYING: h
					> version: s/ui/ch/_
					> version: s/_/u/_/i/c/h
					TRYING: i
					> version: s/_/u/_/i/c/h
					TRYING: i
					> version: s/_/u/_/i/ch
					TRYING: i
					> version: s/_/u/_/i/ch
					TRYING: i
					> version: s/_/ui/_/c/h
					TRYING: c
					> version: s/_/ui/_/ch
					TRYING: ch
					RESULT:  ['i']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'ch']
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'ch']
				version split: ['s', 'ui', 'c', '_', 'h']
				{'string': 's/ui/c/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'c', '_', 'h']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/i/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/i/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'i', 'ch']
				{'string': 's/_/u/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'ch']
				version split: ['s', '_', 'u', '_', 'i', 'ch']
				{'string': 's/_/u/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'ch']
				version split: ['s', '_', 'ui', '_', 'c', 'h']
				{'string': 's/_/ui/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'c', 'h']
				version split: ['s', '_', 'ui', '_', 'ch']
				{'string': 's/_/ui/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'ch']
				ANALYSING: suilc
					resolving (12)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					> version: s/_/u/i/l/c
					TRYING: l
					> version: s/_/ui/l/c
					TRYING: c
					> version: s/u/i/_/l/c
					TRYING: l
					> version: s/u/i/_/l/c
					TRYING: l
					> version: s/ui/l/_/c
					TRYING: c
					> version: s/_/u/_/i/l/c
					TRYING: i
					> version: s/_/u/_/i/l/c
					TRYING: i
					> version: s/_/ui/_/l/c
					TRYING: l
					RESULT:  ['i']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'ui', 'l', '_', 'c']
				{'string': 's/ui/l/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'c']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', '_', 'l', 'c']
				{'string': 's/_/ui/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'c']
				ANALYSING: suilk
					resolving (12)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					> version: s/_/u/i/l/k
					TRYING: l
					> version: s/_/ui/l/k
					TRYING: k
					> version: s/u/i/_/l/k
					TRYING: l
					> version: s/u/i/_/l/k
					TRYING: l
					> version: s/ui/l/_/k
					TRYING: k
					> version: s/_/u/_/i/l/k
					TRYING: i
					> version: s/_/u/_/i/l/k
					TRYING: i
					> version: s/_/ui/_/l/k
					TRYING: l
					RESULT:  ['i']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'ui', 'l', '_', 'k']
				{'string': 's/ui/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', '_', 'l', 'k']
				{'string': 's/_/ui/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'k']
				ANALYSING: suilke
					resolving (12)
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					> version: s/_/u/i/l/k/e
					TRYING: l
					> version: s/_/ui/l/k/e
					TRYING: k
					> version: s/u/i/_/l/k/e
					TRYING: l
					> version: s/u/i/_/l/k/e
					TRYING: l
					> version: s/ui/l/_/k/e
					TRYING: k
					> version: s/_/u/_/i/l/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					> version: s/_/u/_/i/l/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					> version: s/_/ui/_/l/k/e
					TRYING: l
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					RESULT:  ['e', 'i']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/ui/l/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', '_', 'l', 'k', 'e']
				{'string': 's/_/ui/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'k', 'e']
				ANALYSING: suych
					resolving (24)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/ch
					TRYING: ch
					> version: s/_/u/y/ch
					TRYING: ch
					> version: s/_/uy/c/h
					TRYING: h
					> version: s/_/uy/ch
					> version: s/u/y/_/c/h
					TRYING: c
					> version: s/u/y/_/c/h
					TRYING: c
					> version: s/u/y/_/ch
					TRYING: ch
					> version: s/u/y/_/ch
					TRYING: ch
					> version: s/uy/c/_/h
					TRYING: h
					> version: s/uy/ch/_
					> version: s/_/u/_/y/c/h
					TRYING: y
					> version: s/_/u/_/y/c/h
					TRYING: y
					> version: s/_/u/_/y/ch
					TRYING: y
					> version: s/_/u/_/y/ch
					TRYING: y
					> version: s/_/uy/_/c/h
					TRYING: c
					> version: s/_/uy/_/ch
					TRYING: ch
					RESULT:  ['y']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'ch']
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'ch']
				version split: ['s', 'uy', 'c', '_', 'h']
				{'string': 's/uy/c/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'uy', 'c', '_', 'h']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/y/c', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/y/c', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'y', 'ch']
				{'string': 's/_/u/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'ch']
				version split: ['s', '_', 'u', '_', 'y', 'ch']
				{'string': 's/_/u/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'ch']
				version split: ['s', '_', 'uy', '_', 'c', 'h']
				{'string': 's/_/uy/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'uy', '_', 'c', 'h']
				version split: ['s', '_', 'uy', '_', 'ch']
				{'string': 's/_/uy/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((y))$'}
				_____REMOVING________['s', '_', 'uy', '_', 'ch']
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/_/_/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/ƿ/_(CAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/_/_/ƿ(CAAAAC)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', '_', 'ƿ']
				{'string': 's/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', 'ƿ', '_']
				{'string': 's/_/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', '_', 'ƿ']
				ANALYSING: swech
					resolving (8)
					> version: s/w/e/c/h
					TRYING: h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					> version: s/_/w/e/ch
					TRYING: ch
					> version: s/w/e/_/c/h
					TRYING: c
					> version: s/w/e/_/ch
					TRYING: ch
					> version: s/_/w/_/e/c/h
					TRYING: e
					> version: s/_/w/_/e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', 'e', '_', 'c', 'h']
				{'string': 's/w/e/_/c/h', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'w', 'e', '_', 'c', 'h']
				version split: ['s', 'w', 'e', '_', 'ch']
				{'string': 's/w/e/_/ch', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', 'w', 'e', '_', 'ch']
				version split: ['s', '_', 'w', '_', 'e', 'c', 'h']
				{'string': 's/_/w/_/e/c', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'w', '_', 'e', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'e', 'ch']
				{'string': 's/_/w/_/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'w', '_', 'e', 'ch']
				ANALYSING: sƿich
					resolving (16)
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/ch
					TRYING: ch
					> version: s/_/ƿ/i/ch
					TRYING: ch
					> version: s/ƿ/i/_/c/h
					TRYING: c
					> version: s/ƿ/i/_/c/h
					TRYING: c
					> version: s/ƿ/i/_/ch
					TRYING: ch
					> version: s/ƿ/i/_/ch
					TRYING: ch
					> version: s/_/ƿ/_/i/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/ch
					TRYING: i
					> version: s/_/ƿ/_/i/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'ch']
				{'string': 's/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'ch']
				{'string': 's/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'ch']
				ANALYSING: swich
					resolving (16)
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/ch
					TRYING: ch
					> version: s/_/w/i/ch
					TRYING: ch
					> version: s/w/i/_/c/h
					TRYING: c
					> version: s/w/i/_/c/h
					TRYING: c
					> version: s/w/i/_/ch
					TRYING: ch
					> version: s/w/i/_/ch
					TRYING: ch
					> version: s/_/w/_/i/c/h
					TRYING: i
					> version: s/_/w/_/i/c/h
					TRYING: i
					> version: s/_/w/_/i/ch
					TRYING: i
					> version: s/_/w/_/i/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', '_', 'c', 'h']
				{'string': 's/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', 'c', 'h']
				{'string': 's/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', 'ch']
				{'string': 's/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'ch']
				version split: ['s', 'w', 'i', '_', 'ch']
				{'string': 's/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'ch']
				version split: ['s', '_', 'w', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'i', 'ch']
				{'string': 's/_/w/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'ch']
				version split: ['s', '_', 'w', '_', 'i', 'ch']
				{'string': 's/_/w/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'ch']
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					> version: s/_/w/i/l/c
					TRYING: l
					> version: s/w/i/_/l/c
					TRYING: l
					> version: s/w/i/_/l/c
					TRYING: l
					> version: s/_/w/_/i/l/c
					TRYING: i
					> version: s/_/w/_/i/l/c
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					> version: s/ƿ/i/l/ch
					TRYING: ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					TRYING: k
					> version: s/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: l
					> version: s/_/w/i/l/k
					TRYING: l
					> version: s/w/i/_/l/k
					TRYING: l
					> version: s/w/i/_/l/k
					TRYING: l
					> version: s/_/w/_/i/l/k
					TRYING: i
					> version: s/_/w/_/i/l/k
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll', 'rgx': '((s))/((_))/((i))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/_/c
					TRYING: c
					> version: s/ƿ/u/_/c
					TRYING: c
					> version: s/_/ƿ/_/u/c
					TRYING: u
					> version: s/_/ƿ/_/u/c
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c']
				ANALYSING: sƿucch
					resolving (32)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/_/c/c/h
					TRYING: c
					> version: s/ƿ/u/_/c/c/h
					TRYING: c
					> version: s/ƿ/u/_/cch
					TRYING: cch
					> version: s/ƿ/u/_/cch
					TRYING: cch
					> version: s/ƿ/u/_/c/ch
					TRYING: c
					> version: s/ƿ/u/_/c/ch
					TRYING: c
					> version: s/ƿ/u/_/cch
					TRYING: cch
					> version: s/ƿ/u/_/cch
					TRYING: cch
					> version: s/_/ƿ/_/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/_/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/_/u/cch
					TRYING: u
					> version: s/_/ƿ/_/u/cch
					TRYING: u
					> version: s/_/ƿ/_/u/c/ch
					TRYING: u
					> version: s/_/ƿ/_/u/c/ch
					TRYING: u
					> version: s/_/ƿ/_/u/cch
					TRYING: u
					> version: s/_/ƿ/_/u/cch
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 's/ƿ/u/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 's/ƿ/u/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'cch']
				{'string': 's/ƿ/u/_/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch']
				version split: ['s', 'ƿ', 'u', '_', 'cch']
				{'string': 's/ƿ/u/_/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 's/ƿ/u/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 's/ƿ/u/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'cch']
				{'string': 's/ƿ/u/_/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch']
				version split: ['s', 'ƿ', 'u', '_', 'cch']
				{'string': 's/ƿ/u/_/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 's/_/ƿ/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 's/_/ƿ/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 's/_/ƿ/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 's/_/ƿ/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch']
				ANALYSING: sƿuch
					resolving (16)
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/ch
					TRYING: ch
					> version: s/_/ƿ/u/ch
					TRYING: ch
					> version: s/ƿ/u/_/c/h
					TRYING: c
					> version: s/ƿ/u/_/c/h
					TRYING: c
					> version: s/ƿ/u/_/ch
					TRYING: ch
					> version: s/ƿ/u/_/ch
					TRYING: ch
					> version: s/_/ƿ/_/u/c/h
					TRYING: u
					> version: s/_/ƿ/_/u/c/h
					TRYING: u
					> version: s/_/ƿ/_/u/ch
					TRYING: u
					> version: s/_/ƿ/_/u/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'ch']
				{'string': 's/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'ch']
				{'string': 's/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch']
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					> version: s/_/ƿ/u/l/c
					TRYING: l
					> version: s/ƿ/u/_/l/c
					TRYING: l
					> version: s/ƿ/u/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					> version: s/_/w/u/l/c
					TRYING: l
					> version: s/w/u/_/l/c
					TRYING: l
					> version: s/w/u/_/l/c
					TRYING: l
					> version: s/_/w/_/u/l/c
					TRYING: u
					> version: s/_/w/_/u/l/c
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				ANALYSING: zuich
					resolving (48)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/ch
					TRYING: ch
					> version: _/z/u/i/ch
					TRYING: ch
					> version: _/z/ui/c/h
					TRYING: h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: c
					> version: z/_/u/i/c/h
					TRYING: c
					> version: z/_/u/i/ch
					TRYING: ch
					> version: z/_/u/i/ch
					TRYING: ch
					> version: z/_/ui/c/h
					TRYING: h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: i
					> version: _/_/z/u/i/c/h
					TRYING: i
					> version: _/_/z/u/i/ch
					TRYING: i
					> version: _/_/z/u/i/ch
					TRYING: i
					> version: _/_/z/ui/c/h
					TRYING: c
					> version: _/_/z/ui/ch
					TRYING: ch
					> version: z/u/i/_/c/h
					TRYING: c
					> version: z/u/i/_/c/h
					TRYING: c
					> version: z/u/i/_/ch
					TRYING: ch
					> version: z/u/i/_/ch
					TRYING: ch
					> version: z/ui/c/_/h
					TRYING: h
					> version: z/ui/ch/_
					> version: _/z/u/_/i/c/h
					TRYING: i
					> version: _/z/u/_/i/c/h
					TRYING: i
					> version: _/z/u/_/i/ch
					TRYING: i
					> version: _/z/u/_/i/ch
					TRYING: i
					> version: _/z/ui/_/c/h
					TRYING: c
					> version: _/z/ui/_/ch
					TRYING: ch
					> version: z/_/u/_/i/c/h
					TRYING: i
					> version: z/_/u/_/i/c/h
					TRYING: i
					> version: z/_/u/_/i/ch
					TRYING: i
					> version: z/_/u/_/i/ch
					TRYING: i
					> version: z/_/ui/_/c/h
					TRYING: c
					> version: z/_/ui/_/ch
					TRYING: ch
					> version: _/_/z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/_/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u', 'i'}
					> version: _/_/z/_/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u', 'i'}
					RESULT:  ['ui', 'u', 'i']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'ui', 'c', '_', 'h']
				{'string': 'z/ui/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'ui', 'c', '_', 'h']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'ui', '_', 'c', 'h']
				{'string': '_/z/ui/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'c', 'h']
				version split: ['_', 'z', 'ui', '_', 'ch']
				{'string': '_/z/ui/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'ch']
				version split: ['z', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'i', 'ch']
				{'string': 'z/_/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'ch']
				version split: ['z', '_', 'u', '_', 'i', 'ch']
				{'string': 'z/_/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'ch']
				version split: ['z', '_', 'ui', '_', 'c', 'h']
				{'string': 'z/_/ui/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'ui', '_', 'c', 'h']
				version split: ['z', '_', 'ui', '_', 'ch']
				{'string': 'z/_/ui/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['z', '_', 'ui', '_', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', 'ui', 'c', 'h']
				{'string': '_/_/z/_/ui/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'ui', 'ch']
				{'string': '_/_/z/_/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((ui)|(u)|(i))$'}
				_____REMOVING________['_', '_', 'z', '_', 'ui', 'ch']
				ANALYSING: zuych
					resolving (48)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/ch
					TRYING: ch
					> version: _/z/u/y/ch
					TRYING: ch
					> version: _/z/uy/c/h
					TRYING: h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: c
					> version: z/_/u/y/c/h
					TRYING: c
					> version: z/_/u/y/ch
					TRYING: ch
					> version: z/_/u/y/ch
					TRYING: ch
					> version: z/_/uy/c/h
					TRYING: h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: y
					> version: _/_/z/u/y/c/h
					TRYING: y
					> version: _/_/z/u/y/ch
					TRYING: y
					> version: _/_/z/u/y/ch
					TRYING: y
					> version: _/_/z/uy/c/h
					TRYING: c
					> version: _/_/z/uy/ch
					TRYING: ch
					> version: z/u/y/_/c/h
					TRYING: c
					> version: z/u/y/_/c/h
					TRYING: c
					> version: z/u/y/_/ch
					TRYING: ch
					> version: z/u/y/_/ch
					TRYING: ch
					> version: z/uy/c/_/h
					TRYING: h
					> version: z/uy/ch/_
					> version: _/z/u/_/y/c/h
					TRYING: y
					> version: _/z/u/_/y/c/h
					TRYING: y
					> version: _/z/u/_/y/ch
					TRYING: y
					> version: _/z/u/_/y/ch
					TRYING: y
					> version: _/z/uy/_/c/h
					TRYING: c
					> version: _/z/uy/_/ch
					TRYING: ch
					> version: z/_/u/_/y/c/h
					TRYING: y
					> version: z/_/u/_/y/c/h
					TRYING: y
					> version: z/_/u/_/y/ch
					TRYING: y
					> version: z/_/u/_/y/ch
					TRYING: y
					> version: z/_/uy/_/c/h
					TRYING: c
					> version: z/_/uy/_/ch
					TRYING: ch
					> version: _/_/z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/_/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy', 'y'}
					> version: _/_/z/_/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy', 'y'}
					RESULT:  ['u', 'uy', 'y']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'uy', 'c', '_', 'h']
				{'string': 'z/uy/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'uy', 'c', '_', 'h']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'uy', '_', 'c', 'h']
				{'string': '_/z/uy/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'c', 'h']
				version split: ['_', 'z', 'uy', '_', 'ch']
				{'string': '_/z/uy/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'ch']
				version split: ['z', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'y', 'ch']
				{'string': 'z/_/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'ch']
				version split: ['z', '_', 'u', '_', 'y', 'ch']
				{'string': 'z/_/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'ch']
				version split: ['z', '_', 'uy', '_', 'c', 'h']
				{'string': 'z/_/uy/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'uy', '_', 'c', 'h']
				version split: ['z', '_', 'uy', '_', 'ch']
				{'string': 'z/_/uy/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['z', '_', 'uy', '_', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', 'uy', 'c', 'h']
				{'string': '_/_/z/_/uy/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'uy', 'ch']
				{'string': '_/_/z/_/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((u)|(uy)|(y))$'}
				_____REMOVING________['_', '_', 'z', '_', 'uy', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'l', 'i', 'k', 'e']
		SPLIT: ['s', 'ƿ', 'u', 'cch', 'e']
		SPLIT: ['s', 'ƿ', 'u', 'ch', 'e']
		SPLIT: ['h', '_', '_', '_', 'u', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['s', '_', 'o', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', '_', 'e', '----!']
		SPLIT: ['s', '_', 'u.i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'u.i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'u.i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'u.i', '_', 'e.i', '----!']
		SPLIT: ['s', '_', 'u.y', '_', 'y', '----!']
		SPLIT: ['s', '_', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'e', '_', 'e', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'i', '_', 'i', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['s', '_', 'u', '_', 'u', '----!']
		SPLIT: ['_', '_', 'u.i', '_', 'ui.u.i', '----!']
		SPLIT: ['_', '_', 'u.y', '_', 'u.uy.y', '----!']
		version for pattern CCVCV is INVALID
		[{'_', 'ƿ', 'l'}, {'k', '_', 'cch', 'ch'}]
		26
		POSSIBLE CHANGE: 1 : Palatal Vicinity l-deletion
		OVERVIEW: version for pattern CCVCV
{'_', 'ƿ', 'l'}, {'k', '_', 'cch', 'ch'}
faulty splits: 26
hu----! <-! hsƿucch
suu----! <-! shuc
so----! <-! soch
su----! <-! such
sue----! <-! suche
su.ii----! <-! suich
su.ii----! <-! suilc
su.ii----! <-! suilk
su.ie.i----! <-! suilke
su.yy----! <-! suych
s----! <-! sƿ
see----! <-! swech
sii----! <-! sƿich
sii----! <-! swich
sii----! <-! sƿilc
sii----! <-! swilc
sii----! <-! sƿilch
sii----! <-! swilk
sii----! <-! sƿillc
suu----! <-! sƿuc
suu----! <-! sƿucch
suu----! <-! sƿuch
suu----! <-! sƿulc
suu----! <-! swulc
u.iui.u.i----! <-! zuich
u.yu.uy.y----! <-! zuych
s | l | i | k | e
s | ƿ | u | cch | e
s | ƿ | u | ch | e
h | _ | _ | _ | u | ----!
s | _ | u | _ | u | ----!
s | _ | o | _ | _ | ----!
s | _ | u | _ | _ | ----!
s | _ | u | _ | e | ----!
s | _ | u.i | _ | i | ----!
s | _ | u.i | _ | i | ----!
s | _ | u.i | _ | i | ----!
s | _ | u.i | _ | e.i | ----!
s | _ | u.y | _ | y | ----!
s | _ | _ | _ | _ | ----!
s | _ | e | _ | e | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | i | _ | i | ----!
s | _ | u | _ | u | ----!
s | _ | u | _ | u | ----!
s | _ | u | _ | u | ----!
s | _ | u | _ | u | ----!
s | _ | u | _ | u | ----!
_ | _ | u.i | _ | ui.u.i | ----!
_ | _ | u.y | _ | u.uy.y | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'_', 'ƿ', 'l'},{'w', '_', 'ƿ', 'l'},{'s', 'ƿ', 'l'},{'_', 'ƿ', 'z', 'l'},{'u', '_', 'ƿ', 'l'},{'_', 'ƿ', 'hu', 'l'},{'h', '_', 'ƿ', 'l'}
3 : {'s', 'k', 'cch', 'ch'},{'k', '_', 'cch', 'ch'},{'ch', 'k', 'cch', '_', 'l'},{'ch', 'k', 'cch', '_', 'y'},{'ch', 'k', 'cch', '_', 'c'},{'k', 'ƿ', 'cch', 'ch'},{'h', 'ch', 'k', 'cch', '_'},{'ch', 'k', 'cch', '_', 'll'},{'ch', 'k', 'cch', '_', 'i'},{'ch', 'u', 'k', 'cch', '_'},{'ƿ', 'ch', 'k', 'cch', '_'},{'u', 'k', 'cch', 'ch'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCCVCCC
	Selection for pattern: CCCVCCC completed
	Making a version for pattern: CCCVCCC
			___CCCVCCC : 0___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCCVCCC : 1___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					adding blocked set: C = C >> hu, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					> version: sh/u/c
					TRYING: u
					adding blocked set: C = C >> u, s
					RESULT:  ['h']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, l, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, _, ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, w, _, s
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, u, _, s
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCCVCCC : 2___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, ƿ
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> u, i, ƿ
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> u, ƿ, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/o/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/ui/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/ui/c/h
					TRYING: ui
					> version: s/_/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/c
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> u, _, ƿ, i
					> version: s/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> u, _, ƿ, l
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> u, _, ƿ, y
					> version: s/uy/c/h
					TRYING: c
					adding blocked set: C = C >> u, _, ƿ, c
					> version: s/uy/ch
					TRYING: ch
					adding blocked set: C = C >> u, _, ƿ, ch
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/uy/c/h
					TRYING: uy
					> version: s/_/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					RESULT:  ['u', 'w']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ƿ, u, w, _, i
					> version: z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/ui/c/h
					TRYING: ui
					> version: z/_/ui/ch
					TRYING: ui
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ƿ, u, w, _, y
					> version: z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> ƿ, u, w, _, c
					> version: z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> ƿ, ch, u, w, _
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/uy/c/h
					TRYING: uy
					> version: z/_/uy/ch
					TRYING: uy
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					> version: _/_/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> ƿ, u, w, _, z
					RESULT:  ['u']
			___CCCVCCC : 3___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/l/_/i/k/e
					TRYING: i
					> version: s/_/_/l/i/k/e
					TRYING: l
					> version: s/_/_/l/i/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					> version: s/_/o/ch
					TRYING: ch
					> version: s/o/_/c/h
					TRYING: c
					> version: s/o/_/ch
					TRYING: ch
					> version: s/_/_/o/c/h
					TRYING: o
					> version: s/_/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/c/h
					TRYING: c
					> version: s/_/u/ch
					TRYING: ch
					> version: s/_/u/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/c/h/e
					TRYING: c
					> version: s/_/u/ch/e
					TRYING: ch
					> version: s/_/u/ch/e
					TRYING: ch
					RESULT:  ['e']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					> version: s/u/i/ch
					TRYING: ch
					> version: s/ui/c/h
					TRYING: h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/c/h
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/u/i/ch
					TRYING: i
					> version: s/_/ui/c/h
					TRYING: c
					> version: s/_/ui/ch
					TRYING: ch
					RESULT:  ['i']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					> version: s/u/i/l/c
					TRYING: l
					> version: s/ui/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/u/i/l/c
					TRYING: i
					> version: s/_/ui/l/c
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					> version: s/u/i/l/k
					TRYING: l
					> version: s/ui/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/u/i/l/k
					TRYING: i
					> version: s/_/ui/l/k
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/u/i/l/k/e
					TRYING: l
					> version: s/ui/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/u/i/l/k/e
					TRYING: i
					> version: s/_/ui/l/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					> version: s/u/y/ch
					TRYING: ch
					> version: s/uy/c/h
					TRYING: h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/c/h
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/u/y/ch
					TRYING: y
					> version: s/_/uy/c/h
					TRYING: c
					> version: s/_/uy/ch
					TRYING: ch
					RESULT:  ['y']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					> version: s/_/w/e/c/h
					TRYING: e
					> version: s/_/w/e/ch
					TRYING: e
					RESULT:  ['e']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/ƿ/i/ch
					TRYING: ch
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					> version: s/w/i/ch
					TRYING: ch
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					> version: s/_/w/i/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/ƿ/i/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					> version: s/w/i/l/c
					TRYING: l
					> version: s/_/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/c/h
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/ƿ/i/l/ch
					TRYING: l
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					RESULT:  ['i']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					> version: s/w/i/l/k
					TRYING: l
					> version: s/_/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/ƿ/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					RESULT:  ['i']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/cch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/ƿ/u/ch
					TRYING: ch
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/ƿ/u/ch/e
					TRYING: ch
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/ƿ/u/l/c
					TRYING: l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					> version: s/w/u/l/c
					TRYING: l
					> version: s/_/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					> version: z/u/i/ch
					TRYING: ch
					> version: z/ui/c/h
					TRYING: h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/c/h
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/u/i/ch
					TRYING: i
					> version: _/z/ui/c/h
					TRYING: c
					> version: _/z/ui/ch
					TRYING: ch
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/c/h
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/u/i/ch
					TRYING: i
					> version: z/_/ui/c/h
					TRYING: c
					> version: z/_/ui/ch
					TRYING: ch
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					> version: z/u/y/ch
					TRYING: ch
					> version: z/uy/c/h
					TRYING: h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/c/h
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/u/y/ch
					TRYING: y
					> version: _/z/uy/c/h
					TRYING: c
					> version: _/z/uy/ch
					TRYING: ch
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/c/h
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/u/y/ch
					TRYING: y
					> version: z/_/uy/c/h
					TRYING: c
					> version: z/_/uy/ch
					TRYING: ch
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCCVCCC : 4___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/h/u/_/c
					TRYING: c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['c']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, i
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/c/h
					TRYING: h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/c/_/h
					TRYING: h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/c/h/e
					TRYING: h
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/k
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/u/i/l/k/e
					TRYING: k
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, l, c
					> version: s/_/ui/l/k/e
					TRYING: k
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: k
					> version: s/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					RESULT:  ['c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCCVCCC : 5___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					> version: s/h/u/_/c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/_/c/_(CCAACA)
s/h/u/_/c/_(CCAACA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: k
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: h
					> version: s/_/_/o/ch
					RESULT:  ['h']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					> version: s/u/c/_/h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/ch
					> version: s/_/u/_/ch
					RESULT:  ['h']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/e/_(CACCVA)
s/u/c/h/e/_(CACCVA)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/ch/e/_(CAACVA)
s/_/u/ch/e/_(CAACVA)
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					RESULT:  ['h']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/ui/l/c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: k
					> version: s/_/ui/l/k
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: k
					> version: s/_/ui/l/k/e
					TRYING: e
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					RESULT:  ['h']
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: h
					> version: s/_/w/e/ch
					RESULT:  ['h']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					RESULT:  ['h']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					RESULT:  ['h']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/c/h
					TRYING: h
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: k
					RESULT:  ['k']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/l/l/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/c/c/h
					TRYING: h
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					RESULT:  ['h']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					RESULT:  ['h']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCCVCCC : 6___
				ANALYSING: hsƿucch
				adding littera based on matching pattern
				ANALYSING: shuc
					resolving (28)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					> version: s/h/u/_/c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/_/c/_
					> version: s/h/u/_/c/_
					> version: s/hu/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/_/c/_(CCAACA)
s/h/u/_/c/_(CCAACA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/_/c/_(CCAACA)
s/h/u/_/c/_(CCAACA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/_/c/_/_(CCAACAA)
s/h/u/_/c/_/_(CCAACAA)
s/hu/c/_/_/_(CCCAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_']
				{'string': 's/h/u/_/c/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', '_', 'c', '_', '_']
				{'string': 's/h/u/_/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				version split: ['s', 'h', 'u', '_', 'c', '_', '_']
				{'string': 's/h/u/_/c/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				version split: ['s', 'hu', 'c', '_', '_', '_']
				{'string': 's/hu/c/_/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h))/((u))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					> version: s/_/l/i/k/e
					> version: s/l/_/i/k/e
					> version: s/l/_/i/k/e
					> version: s/_/_/l/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
s/l/i/k/e/_(CCACVA)
s/l/i/k/e/_(CCACVA)
s/_/l/i/k/e/_(CACACVA)
s/_/l/i/k/e/_(CACACVA)
s/l/_/i/k/e/_(CCAACVA)
s/l/_/i/k/e/_(CCAACVA)
s/_/_/l/i/k/_/e(CAACACAV)
s/_/_/l/i/k/_/e(CAACACAV)
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', '_', 'l', 'i', 'k', 'e', '_']
				{'string': 's/_/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e', '_']
				version split: ['s', '_', 'l', 'i', 'k', 'e', '_']
				{'string': 's/_/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e', '_']
				version split: ['s', 'l', '_', 'i', 'k', 'e', '_']
				{'string': 's/l/_/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e', '_']
				version split: ['s', 'l', '_', 'i', 'k', 'e', '_']
				{'string': 's/l/_/i/k/e/_', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e', '_']
				version split: ['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/_/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/_/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', '_', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					> version: s/_/_/o/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch', '_']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/h/_(CAVCCA)
s/_/o/ch/_(CAVCA)
s/o/_/c/h/_(CVACCA)
s/o/_/ch/_(CVACA)
s/_/_/o/c/h/_(CAAVCCA)
s/_/_/o/ch/_(CAAVCA)
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h']
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h', '_']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', '_', 'c', 'h', '_']
				{'string': 's/o/_/c/h/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h', '_']
				version split: ['s', 'o', '_', 'ch', '_']
				{'string': 's/o/_/ch/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_']
				version split: ['s', '_', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', '_', 'o', 'ch', '_']
				{'string': 's/_/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((o))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch', '_']
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					> version: s/u/c/_/h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					> version: s/_/u/_/c/h
					> version: s/_/u/_/ch
					> version: s/_/u/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/h/_(CAACCA)
s/_/u/c/h/_(CAACCA)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/_/h/_(CACACA)
s/u/c/_/h/_(CACACA)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/_/c/h/_(CAAACCA)
s/_/u/_/c/h/_(CAAACCA)
s/_/u/_/ch/_(CAAACA)
s/_/u/_/ch/_(CAAACA)
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', '_', 'h', '_']
				{'string': 's/u/c/_/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', '_']
				version split: ['s', 'u', 'c', '_', 'h', '_']
				{'string': 's/u/c/_/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h', '_']
				{'string': 's/_/u/_/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', '_', 'c', 'h', '_']
				{'string': 's/_/u/_/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', '_', 'ch', '_']
				{'string': 's/_/u/_/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'ch', '_']
				{'string': 's/_/u/_/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', '_']
				ANALYSING: suche
					resolving (16)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					> version: s/_/u/c/h/e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					> version: s/u/c/h/e/_
					> version: s/u/c/h/e/_
					> version: s/u/ch/e/_
					> version: s/u/ch/e/_
					> version: s/_/u/c/h/_/e
					TRYING: e
					> version: s/_/u/c/h/_/e
					TRYING: e
					> version: s/_/u/ch/e/_
					> version: s/_/u/ch/e/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_', '_']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/e/_(CACCVA)
s/u/c/h/e/_(CACCVA)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/ch/e/_(CAACVA)
s/_/u/ch/e/_(CAACVA)
s/u/c/h/e/_(CACCVA)
s/u/c/h/e/_(CACCVA)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/h/e/_(CAACCVA)
s/_/u/c/h/e/_(CAACCVA)
s/_/u/ch/e/_(CAACVA)
s/_/u/ch/e/_(CAACVA)
s/u/c/h/e/_/_(CACCVAA)
s/u/c/h/e/_/_(CACCVAA)
s/u/ch/e/_/_(CACVAA)
s/u/ch/e/_/_(CACVAA)
s/_/u/c/h/_/_/e(CAACCAAV)
s/_/u/c/h/_/_/e(CAACCAAV)
s/_/u/ch/e/_/_(CAACVAA)
s/_/u/ch/e/_/_(CAACVAA)
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', 'h', 'e', '_']
				{'string': 's/_/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e', '_']
				version split: ['s', '_', 'u', 'c', 'h', 'e', '_']
				{'string': 's/_/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 's/u/c/h/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_', '_']
				{'string': 's/u/c/h/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_', '_']
				version split: ['s', 'u', 'ch', 'e', '_', '_']
				{'string': 's/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_', '_']
				version split: ['s', 'u', 'ch', 'e', '_', '_']
				{'string': 's/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				{'string': 's/_/u/c/h/_/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				version split: ['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				{'string': 's/_/u/c/h/_/_/e', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', '_', 'e']
				version split: ['s', '_', 'u', 'ch', 'e', '_', '_']
				{'string': 's/_/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_', '_']
				{'string': 's/_/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((e))/((h))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_', '_']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					> version: s/_/u/i/c/h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/c/h/_(CAACCA)
s/u/i/c/h/_(CAACCA)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/c/h/_(CAAACCA)
s/_/u/i/c/h/_(CAAACCA)
s/_/u/i/ch/_(CAAACA)
s/_/u/i/ch/_(CAAACA)
s/_/ui/c/h/_(CAVCCA)
s/_/ui/ch/_(CAVCA)
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 's/_/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 's/_/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'ui', 'c', 'h', '_']
				{'string': 's/_/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h', '_']
				version split: ['s', '_', 'ui', 'ch', '_']
				{'string': 's/_/ui/ch/_', 'rgx': '((s))/((_))/((u))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					> version: s/_/u/i/l/c
					> version: s/_/ui/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c', '_']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/l/c/_(CAACCA)
s/u/i/l/c/_(CAACCA)
s/ui/l/c/_(CVCCA)
s/_/u/i/l/c/_(CAAACCA)
s/_/u/i/l/c/_(CAAACCA)
s/_/ui/l/c/_(CAVCCA)
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'c', '_']
				{'string': 's/_/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'c', '_']
				{'string': 's/_/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ui', 'l', 'c', '_']
				{'string': 's/_/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c', '_']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					> version: s/_/u/i/l/k
					> version: s/_/ui/l/k
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/k/_(CAAACCA)
s/_/u/i/l/k/_(CAAACCA)
s/_/ui/l/k/_(CAVCCA)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_']
				{'string': 's/_/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_']
				{'string': 's/_/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'ui', 'l', 'k', '_']
				{'string': 's/_/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					> version: s/u/i/l/k/e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: e
					> version: s/_/ui/l/k/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', 'e', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', 'e', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e', '_']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/l/k/e/_(CAACCVA)
s/u/i/l/k/e/_(CAACCVA)
s/ui/l/k/e/_(CVCCVA)
s/_/u/i/l/k/_/e(CAAACCAV)
s/_/u/i/l/k/_/e(CAAACCAV)
s/_/ui/l/k/e/_(CAVCCVA)
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e', '_']
				{'string': 's/u/i/l/k/e/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e', '_']
				version split: ['s', 'u', 'i', 'l', 'k', 'e', '_']
				{'string': 's/u/i/l/k/e/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e', '_']
				version split: ['s', 'ui', 'l', 'k', 'e', '_']
				{'string': 's/ui/l/k/e/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/_/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/_/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e', '_']
				{'string': 's/_/ui/l/k/e/_', 'rgx': '((s))/((_))/((u))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e', '_']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					> version: s/_/u/y/c/h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/c/h/_(CAACCA)
s/u/y/c/h/_(CAACCA)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/c/h/_(CAAACCA)
s/_/u/y/c/h/_(CAAACCA)
s/_/u/y/ch/_(CAAACA)
s/_/u/y/ch/_(CAAACA)
s/_/uy/c/h/_(CAVCCA)
s/_/uy/ch/_(CAVCA)
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 's/_/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 's/_/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'uy', 'c', 'h', '_']
				{'string': 's/_/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h', '_']
				version split: ['s', '_', 'uy', 'ch', '_']
				{'string': 's/_/uy/ch/_', 'rgx': '((s))/((_))/((u))/((y))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_']
				ANALYSING: sƿ
					resolving (16)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_/_/_
					> version: s/_/ƿ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_/_/_(CCAAAA)
s/_/ƿ/_/_/_/_(CACAAAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_', '_']
				{'string': 's/ƿ/_/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					> version: s/_/w/e/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch', '_']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/c/h/_(CCVCCA)
s/w/e/ch/_(CCVCA)
s/_/w/e/c/h/_(CACVCCA)
s/_/w/e/ch/_(CACVCA)
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', 'e', 'c', 'h', '_']
				{'string': 's/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h', '_']
				version split: ['s', 'w', 'e', 'ch', '_']
				{'string': 's/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_']
				version split: ['s', '_', 'w', 'e', 'c', 'h', '_']
				{'string': 's/_/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'w', 'e', 'ch', '_']
				{'string': 's/_/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((e))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch', '_']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					> version: s/_/ƿ/i/c/h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/c/h/_(CACACCA)
s/_/ƿ/i/c/h/_(CACACCA)
s/_/ƿ/i/ch/_(CACACA)
s/_/ƿ/i/ch/_(CACACA)
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/_/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/_/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					> version: s/_/w/i/c/h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/c/h/_(CCACCA)
s/w/i/c/h/_(CCACCA)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/c/h/_(CACACCA)
s/_/w/i/c/h/_(CACACCA)
s/_/w/i/ch/_(CACACA)
s/_/w/i/ch/_(CACACA)
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'c', 'h', '_']
				{'string': 's/_/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'w', 'i', 'c', 'h', '_']
				{'string': 's/_/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((i))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/l/c/_(CCACCA)
s/ƿ/i/l/c/_(CCACCA)
s/_/ƿ/i/l/c/_(CACACCA)
s/_/ƿ/i/l/c/_(CACACCA)
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/_/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/_/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					> version: s/_/w/i/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c', '_']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/l/c/_(CCACCA)
s/w/i/l/c/_(CCACCA)
s/_/w/i/l/c/_(CACACCA)
s/_/w/i/l/c/_(CACACCA)
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'c', '_']
				{'string': 's/_/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'c', '_']
				{'string': 's/_/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((i))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c', '_']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					> version: s/ƿ/i/l/c/h
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: h
					> version: s/_/ƿ/i/l/c/h
					TRYING: h
					> version: s/_/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/ch
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((i))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					> version: s/_/w/i/l/k
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k', '_']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/l/k/_(CCACCA)
s/w/i/l/k/_(CCACCA)
s/_/w/i/l/k/_(CACACCA)
s/_/w/i/l/k/_(CACACCA)
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'k', '_']
				{'string': 's/_/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'k', '_']
				{'string': 's/_/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((i))/((k))/((k))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k', '_']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					> version: s/ƿ/i/l/l/c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: c
					> version: s/_/ƿ/i/ll/c
					> version: s/_/ƿ/i/ll/c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((i))/((c))/((c))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/ƿ/u/c/_
					> version: s/ƿ/u/c/_
					> version: s/_/ƿ/u/c/_
					> version: s/_/ƿ/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
s/ƿ/u/c/_/_(CCACAA)
s/ƿ/u/c/_/_(CCACAA)
s/_/ƿ/u/c/_/_(CACACAA)
s/_/ƿ/u/c/_/_(CACACAA)
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/_/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/_/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((_))/((_))$'}
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					> version: s/ƿ/u/c/c/h
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/c/h
					TRYING: h
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/c/ch
					> version: s/_/ƿ/u/c/ch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: e
					> version: s/ƿ/u/c/c/h/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/c/ch/e
					> version: s/ƿ/u/c/ch/e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/cch/e
					> version: s/_/ƿ/u/cch/e
					> version: s/_/ƿ/u/c/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/ch/e
					TRYING: e
					> version: s/_/ƿ/u/cch/e
					> version: s/_/ƿ/u/cch/e
					RESULT:  ['h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					> version: s/_/ƿ/u/c/h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/c/h/_(CACACCA)
s/_/ƿ/u/c/h/_(CACACCA)
s/_/ƿ/u/ch/_(CACACA)
s/_/ƿ/u/ch/_(CACACA)
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/_/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/_/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					> version: s/ƿ/u/c/h/e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					> version: s/_/ƿ/u/ch/e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
s/ƿ/u/c/h/e/_(CCACCVA)
s/ƿ/u/c/h/e/_(CCACCVA)
s/ƿ/u/ch/e/_(CCACVA)
s/ƿ/u/ch/e/_(CCACVA)
s/_/ƿ/u/c/h/_/e(CACACCAV)
s/_/ƿ/u/c/h/_/e(CACACCAV)
s/_/ƿ/u/ch/e/_(CACACVA)
s/_/ƿ/u/ch/e/_(CACACVA)
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				{'string': 's/ƿ/u/c/h/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				{'string': 's/ƿ/u/c/h/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e', '_']
				version split: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/ƿ/u/c/h/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/ƿ/u/c/h/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/_/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/_/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((h)|(c)|(ch))/((h))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e', '_']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/l/c/_(CCACCA)
s/ƿ/u/l/c/_(CCACCA)
s/_/ƿ/u/l/c/_(CACACCA)
s/_/ƿ/u/l/c/_(CACACCA)
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/_/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/_/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					> version: s/_/w/u/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c', '_']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/l/c/_(CCACCA)
s/w/u/l/c/_(CCACCA)
s/_/w/u/l/c/_(CACACCA)
s/_/w/u/l/c/_(CACACCA)
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', 'c', '_']
				{'string': 's/_/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', 'c', '_']
				{'string': 's/_/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((u))/((c))/((c))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c', '_']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					> version: _/z/u/i/c/h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					> version: z/_/u/i/c/h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: h
					> version: _/_/z/u/i/c/h
					TRYING: h
					> version: _/_/z/u/i/ch
					> version: _/_/z/u/i/ch
					> version: _/_/z/ui/c/h
					> version: _/_/z/ui/ch
					RESULT:  ['h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((u)|(i))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					> version: _/z/u/y/c/h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					> version: z/_/u/y/c/h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: h
					> version: _/_/z/u/y/c/h
					TRYING: h
					> version: _/_/z/u/y/ch
					> version: _/_/z/u/y/ch
					> version: _/_/z/uy/c/h
					> version: _/_/z/uy/ch
					RESULT:  ['h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((u)|(y))/((h)|(c)|(ch))/((h)|(c)|(ch))/((h))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
		only one version left: ['s', 'h', 'u', '_', 'c', '_', '_']
		FAIL: 
		only one version left: ['s', '_', '_', 'o', 'c', 'h', '_']
		only one version left: ['s', '_', 'u', '_', 'c', 'h', '_']
		FAIL: 
		only one version left: ['s', '_', 'u', 'i', 'c', 'h', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'u', 'y', 'c', 'h', '_']
		only one version left: ['s', '_', 'ƿ', '_', '_', '_', '_']
		only one version left: ['s', '_', 'w', 'e', 'c', 'h', '_']
		only one version left: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
		only one version left: ['s', '_', 'w', 'i', 'c', 'h', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
		only one version left: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
		FAIL: 
		only one version left: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
		SPLIT: ['s', 'h', 'u', '_', 'c', '_', '_']
		['s', 'h', 'u', '_', 'c', '_', '_']
		['s', 'h', 'u', '_', 'c', '_', '_']
		SPLIT: ['s', '_', '_', 'i', 'k', 'k', '_', '----!']
		SPLIT: ['s', '_', '_', 'o', 'c', 'h', '_']
		['s', '_', '_', 'o', 'c', 'h', '_']
		SPLIT: ['s', '_', 'u', '_', 'c', 'h', '_']
		['s', '_', 'u', '_', 'c', 'h', '_']
		['s', '_', 'u', '_', 'c', 'h', '_']
		SPLIT: ['s', '_', 'u', 'e', 'h', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'c', 'h', '_']
		['s', '_', 'u', 'i', 'c', 'h', '_']
		['s', '_', 'u', 'i', 'c', 'h', '_']
		SPLIT: ['s', '_', 'u', 'i', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'k', 'k', '_', '----!']
		SPLIT: ['s', '_', 'u', 'i', 'k', 'k', '_', '----!']
		SPLIT: ['s', '_', 'u', 'y', 'c', 'h', '_']
		['s', '_', 'u', 'y', 'c', 'h', '_']
		['s', '_', 'u', 'y', 'c', 'h', '_']
		SPLIT: ['s', '_', 'ƿ', '_', '_', '_', '_']
		['s', '_', 'ƿ', '_', '_', '_', '_']
		SPLIT: ['s', '_', 'w', 'e', 'c', 'h', '_']
		['s', '_', 'w', 'e', 'c', 'h', '_']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
		['s', '_', 'ƿ', 'i', 'c', 'h', '_']
		['s', '_', 'ƿ', 'i', 'c', 'h', '_']
		SPLIT: ['s', '_', 'w', 'i', 'c', 'h', '_']
		['s', '_', 'w', 'i', 'c', 'h', '_']
		['s', '_', 'w', 'i', 'c', 'h', '_']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'w', 'i', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c.ch', 'h.c.ch', 'h', '----!']
		SPLIT: ['s', '_', 'w', 'i', 'k', 'k', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', 'i', 'c', 'c', 'c', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
		['s', '_', 'ƿ', 'u', 'c', '_', '_']
		['s', '_', 'ƿ', 'u', 'c', '_', '_']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
		['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
		['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c.ch', 'h.c.ch', 'h', '----!']
		SPLIT: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
		['s', '_', 'ƿ', 'u', 'c', 'h', '_']
		['s', '_', 'ƿ', 'u', 'c', 'h', '_']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'h.c.ch', 'h', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'u', 'c', 'c', '_', '----!']
		SPLIT: ['s', '_', 'u.w', 'u', 'c', 'c', '_', '----!']
		SPLIT: ['_', '_', 'u', 'u.i', 'h.c.ch', 'h.c.ch', 'h', '----!']
		SPLIT: ['_', '_', 'u', 'u.y', 'h.c.ch', 'h.c.ch', 'h', '----!']
		version for pattern CCCVCCC is INVALID
		[]
		16
		OVERVIEW: version for pattern CCCVCCC

faulty splits: 16
sikk----! <-! slike
sueh----! <-! suche
suicc----! <-! suilc
suikk----! <-! suilk
suikk----! <-! suilke
sƿicc----! <-! sƿilc
swicc----! <-! swilc
sƿic.chh.c.chh----! <-! sƿilch
swikk----! <-! swilk
sƿiccc----! <-! sƿillc
su.ƿuc.chh.c.chh----! <-! sƿucche
su.ƿuh.c.chh----! <-! sƿuche
su.ƿucc----! <-! sƿulc
su.wucc----! <-! swulc
uu.ih.c.chh.c.chh----! <-! zuich
uu.yh.c.chh.c.chh----! <-! zuych
h | s | ƿ | u | c | c | h
s | h | u | _ | c | _ | _
s | _ | _ | i | k | k | _ | ----!
s | _ | _ | o | c | h | _
s | _ | u | _ | c | h | _
s | _ | u | e | h | _ | _ | ----!
s | _ | u | i | c | h | _
s | _ | u | i | c | c | _ | ----!
s | _ | u | i | k | k | _ | ----!
s | _ | u | i | k | k | _ | ----!
s | _ | u | y | c | h | _
s | _ | ƿ | _ | _ | _ | _
s | _ | w | e | c | h | _
s | _ | ƿ | i | c | h | _
s | _ | w | i | c | h | _
s | _ | ƿ | i | c | c | _ | ----!
s | _ | w | i | c | c | _ | ----!
s | _ | ƿ | i | c.ch | h.c.ch | h | ----!
s | _ | w | i | k | k | _ | ----!
s | _ | ƿ | i | c | c | c | ----!
s | _ | ƿ | u | c | _ | _
s | _ | ƿ | u | c | c | h
s | _ | u.ƿ | u | c.ch | h.c.ch | h | ----!
s | _ | ƿ | u | c | h | _
s | _ | u.ƿ | u | h.c.ch | h | _ | ----!
s | _ | u.ƿ | u | c | c | _ | ----!
s | _ | u.w | u | c | c | _ | ----!
_ | _ | u | u.i | h.c.ch | h.c.ch | h | ----!
_ | _ | u | u.y | h.c.ch | h.c.ch | h | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'h', '_', 'ƿ', 's'},{'h', 'w', '_', 's'},{'h', '_', 'z', 's'},{'h', 'l', 's'},{'h', 'u', '_', 's'}
2 : {'u', '_', 'ƿ', 'ch'},{'u', '_', 'ƿ', 'c'},{'u', 'ƿ', 'l'},{'u', 'i', 'ƿ'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CVCCV
	Selection for pattern: CVCCV completed
	Making a version for pattern: CVCCV
			___CVCCV : 0___
				ANALYSING: suche
				adding littera based on matching pattern
				ANALYSING: suilke
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CVCCV : 1___
				ANALYSING: suche
				adding littera based on matching pattern
				ANALYSING: suilke
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/s/ƿ/u/cch
					TRYING: s
					> version: h/s/ƿ/u/cch
					TRYING: s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					> version: h/s/ƿ/u/cch
					TRYING: s
					> version: h/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					> version: sh/u/c
					TRYING: u
					> version: sh/u/c
					TRYING: u
					> version: sh/u/c
					TRYING: u
					> version: sh/u/c
					TRYING: u
					RESULT:  ['u']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					> version: s/l/i/k/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					adding blocked set: V = V >> o, ui, u, _
					> version: s/o/ch
					TRYING: o
					adding blocked set: V = V >> o, ui, u, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					> version: s/u/c/h
					TRYING: u
					> version: s/u/ch
					TRYING: u
					> version: s/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					> version: s/u/i/c/h
					TRYING: u
					> version: s/u/i/ch
					TRYING: u
					> version: s/u/i/ch
					TRYING: u
					> version: s/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: s/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					RESULT:  ['ui', 'u']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					> version: s/u/i/l/c
					TRYING: u
					> version: s/ui/l/c
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					RESULT:  ['ui', 'u']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					> version: s/u/i/l/k
					TRYING: u
					> version: s/ui/l/k
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					RESULT:  ['ui', 'u']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					> version: s/u/y/c/h
					TRYING: u
					> version: s/u/y/ch
					TRYING: u
					> version: s/u/y/ch
					TRYING: u
					> version: s/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: s/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					> version: s/w/e/ch
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					> version: s/ƿ/i/ch
					TRYING: ƿ
					> version: s/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					> version: s/w/i/c/h
					TRYING: w
					> version: s/w/i/ch
					TRYING: w
					> version: s/w/i/ch
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					> version: s/w/i/l/c
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					> version: s/w/i/l/k
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					> version: s/ƿ/u/c
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: s/ƿ/u/cch
					TRYING: ƿ
					> version: s/ƿ/u/cch
					TRYING: ƿ
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					> version: s/ƿ/u/cch
					TRYING: ƿ
					> version: s/ƿ/u/cch
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					> version: s/ƿ/u/ch
					TRYING: ƿ
					> version: s/ƿ/u/ch
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					> version: s/w/u/l/c
					TRYING: w
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					> version: z/u/i/c/h
					TRYING: u
					> version: z/u/i/ch
					TRYING: u
					> version: z/u/i/ch
					TRYING: u
					> version: z/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: z/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/ui/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					> version: _/z/ui/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'ui', 'u'}
					RESULT:  ['ui', 'u']
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					> version: z/u/y/c/h
					TRYING: u
					> version: z/u/y/ch
					TRYING: u
					> version: z/u/y/ch
					TRYING: u
					> version: z/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: z/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/uy/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					> version: _/z/uy/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'uy'}
					RESULT:  ['u', 'uy']
			___CVCCV : 2___
				ANALYSING: suche
				adding littera based on matching pattern
				ANALYSING: suilke
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/h/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/hu/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: sh/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', '_', 'u', 'c']
				adding dashed alternative: ['s', 'h', '_', 'u', 'c']
				adding dashed alternative: ['s', 'hu', '_', 'c']
				adding dashed alternative: ['sh', 'u', '_', 'c']
				adding dashed alternative: ['sh', 'u', '_', 'c']
				adding dashed alternative: ['sh', 'u', '_', 'c']
				adding dashed alternative: ['sh', 'u', '_', 'c']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/_/u/c(CCAAC)
s/h/_/u/c(CCAAC)
s/hu/_/c(CCAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/o/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/u/_/c/h(CAACC)
s/u/_/c/h(CAACC)
s/u/_/ch(CAAC)
s/u/_/ch(CAAC)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ui', '_', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/u/_/i/c/h(CAAACC)
s/u/_/i/c/h(CAAACC)
s/u/_/i/ch(CAAAC)
s/u/_/i/ch(CAAAC)
s/ui/_/c/h(CVACC)
s/ui/_/ch(CVAC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ui/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'ui', '_', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/u/_/i/l/c(CAAACC)
s/u/_/i/l/c(CAAACC)
s/ui/_/l/c(CVACC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ui/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', 'ui', '_', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/u/_/i/l/k(CAAACC)
s/u/_/i/l/k(CAAACC)
s/ui/_/l/k(CVACC)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['s', 'uy', '_', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/u/_/y/c/h(CAAACC)
s/u/_/y/c/h(CAAACC)
s/u/_/y/ch(CAAAC)
s/u/_/y/ch(CAAAC)
s/uy/_/c/h(CVACC)
s/uy/_/ch(CVAC)
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/e/ch
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', '_', 'e', 'c', 'h']
				adding dashed alternative: ['s', 'w', '_', 'e', 'ch']
				adding dashed alternative: ['s', '_', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/_/e/c/h(CCAVCC)
s/w/_/e/ch(CCAVC)
s/_/_/w/e/c/h(CAACVCC)
s/_/_/w/e/ch(CAACVC)
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/_/i/c/h(CCAACC)
s/ƿ/_/i/c/h(CCAACC)
s/ƿ/_/i/ch(CCAAC)
s/ƿ/_/i/ch(CCAAC)
s/_/_/ƿ/i/c/h(CAACACC)
s/_/_/ƿ/i/c/h(CAACACC)
s/_/_/ƿ/i/ch(CAACAC)
s/_/_/ƿ/i/ch(CAACAC)
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/w/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/i/ch
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/i/ch
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', 'w', '_', 'i', 'ch']
				adding dashed alternative: ['s', 'w', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/_/i/c/h(CCAACC)
s/w/_/i/c/h(CCAACC)
s/w/_/i/ch(CCAAC)
s/w/_/i/ch(CCAAC)
s/_/_/w/i/c/h(CAACACC)
s/_/_/w/i/c/h(CAACACC)
s/_/_/w/i/ch(CAACAC)
s/_/_/w/i/ch(CAACAC)
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/_/i/l/c(CCAACC)
s/ƿ/_/i/l/c(CCAACC)
s/_/_/ƿ/i/l/c(CAACACC)
s/_/_/ƿ/i/l/c(CAACACC)
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/_/i/l/c(CCAACC)
s/w/_/i/l/c(CCAACC)
s/_/_/w/i/l/c(CAACACC)
s/_/_/w/i/l/c(CAACACC)
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/_/i/l/c/h(CCAACCC)
s/ƿ/_/i/l/c/h(CCAACCC)
s/ƿ/_/i/l/ch(CCAACC)
s/ƿ/_/i/l/ch(CCAACC)
s/_/_/ƿ/i/l/c/h(CAACACCC)
s/_/_/ƿ/i/l/c/h(CAACACCC)
s/_/_/ƿ/i/l/ch(CAACACC)
s/_/_/ƿ/i/l/ch(CAACACC)
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/_/i/l/k(CCAACC)
s/w/_/i/l/k(CCAACC)
s/_/_/w/i/l/k(CAACACC)
s/_/_/w/i/l/k(CAACACC)
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/_/i/l/l/c(CCAACCC)
s/ƿ/_/i/l/l/c(CCAACCC)
s/ƿ/_/i/ll/c(CCAACC)
s/ƿ/_/i/ll/c(CCAACC)
s/_/_/ƿ/i/l/l/c(CAACACCC)
s/_/_/ƿ/i/l/l/c(CAACACCC)
s/_/_/ƿ/i/ll/c(CAACACC)
s/_/_/ƿ/i/ll/c(CAACACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/_/u/c(CCAAC)
s/ƿ/_/u/c(CCAAC)
s/_/_/ƿ/u/c(CAACAC)
s/_/_/ƿ/u/c(CAACAC)
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/ƿ/_/u/c/c/h(CCAACCC)
s/ƿ/_/u/c/c/h(CCAACCC)
s/ƿ/_/u/cch(CCAAC)
s/ƿ/_/u/cch(CCAAC)
s/ƿ/_/u/c/ch(CCAACC)
s/ƿ/_/u/c/ch(CCAACC)
s/ƿ/_/u/cch(CCAAC)
s/ƿ/_/u/cch(CCAAC)
s/_/_/ƿ/u/c/c/h(CAACACCC)
s/_/_/ƿ/u/c/c/h(CAACACCC)
s/_/_/ƿ/u/cch(CAACAC)
s/_/_/ƿ/u/cch(CAACAC)
s/_/_/ƿ/u/c/ch(CAACACC)
s/_/_/ƿ/u/c/ch(CAACACC)
s/_/_/ƿ/u/cch(CAACAC)
s/_/_/ƿ/u/cch(CAACAC)
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/ƿ/_/u/c/c/h/e(CCAACCCV)
s/ƿ/_/u/c/c/h/e(CCAACCCV)
s/ƿ/_/u/cch/e(CCAACV)
s/ƿ/_/u/cch/e(CCAACV)
s/ƿ/_/u/c/ch/e(CCAACCV)
s/ƿ/_/u/c/ch/e(CCAACCV)
s/ƿ/_/u/cch/e(CCAACV)
s/ƿ/_/u/cch/e(CCAACV)
s/_/_/ƿ/u/c/c/h/e(CAACACCCV)
s/_/_/ƿ/u/c/c/h/e(CAACACCCV)
s/_/_/ƿ/u/cch/e(CAACACV)
s/_/_/ƿ/u/cch/e(CAACACV)
s/_/_/ƿ/u/c/ch/e(CAACACCV)
s/_/_/ƿ/u/c/ch/e(CAACACCV)
s/_/_/ƿ/u/cch/e(CAACACV)
s/_/_/ƿ/u/cch/e(CAACACV)
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/_/u/c/h(CCAACC)
s/ƿ/_/u/c/h(CCAACC)
s/ƿ/_/u/ch(CCAAC)
s/ƿ/_/u/ch(CCAAC)
s/_/_/ƿ/u/c/h(CAACACC)
s/_/_/ƿ/u/c/h(CAACACC)
s/_/_/ƿ/u/ch(CAACAC)
s/_/_/ƿ/u/ch(CAACAC)
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
s/ƿ/_/u/c/h/e(CCAACCV)
s/ƿ/_/u/c/h/e(CCAACCV)
s/ƿ/_/u/ch/e(CCAACV)
s/ƿ/_/u/ch/e(CCAACV)
s/_/_/ƿ/u/c/h/e(CAACACCV)
s/_/_/ƿ/u/c/h/e(CAACACCV)
s/_/_/ƿ/u/ch/e(CAACACV)
s/_/_/ƿ/u/ch/e(CAACACV)
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/_/u/l/c(CCAACC)
s/ƿ/_/u/l/c(CCAACC)
s/_/_/ƿ/u/l/c(CAACACC)
s/_/_/ƿ/u/l/c(CAACACC)
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					> version: s/_/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> c, w, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/_/u/l/c(CCAACC)
s/w/_/u/l/c(CCAACC)
s/_/_/w/u/l/c(CAACACC)
s/_/_/w/u/l/c(CAACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['z', 'ui', '_', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/u/_/i/c/h(CAAACC)
z/u/_/i/c/h(CAAACC)
z/u/_/i/ch(CAAAC)
z/u/_/i/ch(CAAAC)
z/ui/_/c/h(CVACC)
z/ui/_/ch(CVAC)
_/z/_/u/i/c/h(ACAAACC)
_/z/_/u/i/c/h(ACAAACC)
_/z/_/u/i/ch(ACAAAC)
_/z/_/u/i/ch(ACAAAC)
_/z/_/ui/c/h(ACAVCC)
_/z/_/ui/ch(ACAVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['z', 'uy', '_', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', '_', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/u/_/y/c/h(CAAACC)
z/u/_/y/c/h(CAAACC)
z/u/_/y/ch(CAAAC)
z/u/_/y/ch(CAAAC)
z/uy/_/c/h(CVACC)
z/uy/_/ch(CVAC)
_/z/_/u/y/c/h(ACAAACC)
_/z/_/u/y/c/h(ACAAACC)
_/z/_/u/y/ch(ACAAAC)
_/z/_/u/y/ch(ACAAAC)
_/z/_/uy/c/h(ACAVCC)
_/z/_/uy/ch(ACAVC)
			___CVCCV : 3___
				ANALYSING: suche
				adding littera based on matching pattern
				ANALYSING: suilke
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, u, k
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, k, ƿ
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> h, k, s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, u, k, _
					> version: s/h/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, u, k, _
					> version: s/hu/_/c
					TRYING: c
					> version: sh/u/_/c
					TRYING: c
					> version: sh/u/_/c
					TRYING: c
					> version: sh/u/_/c
					TRYING: c
					> version: sh/u/_/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, k, _, c, i
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, k, _, c, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, k, _, c, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, k, _, c, i
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, k, _, l, c
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, k, _, l, c
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/c/h
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/ch
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/c
					TRYING: c
					> version: s/u/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/u/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ui/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/k
					TRYING: k
					> version: s/u/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/u/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ui/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
				ANALYSING: swech
					resolving (8)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/c/h
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/ch
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/e/c/h
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/e/ch
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿich
					resolving (16)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swich
					resolving (16)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/_/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/_/i/l/c(CCAACC)
s/ƿ/_/i/l/c(CCAACC)
s/_/_/ƿ/i/l/c(CAACACC)
s/_/_/ƿ/i/l/c(CAACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/ƿ/_/_/i/l/c(CCAAACC)
s/ƿ/_/_/i/l/c(CCAAACC)
s/_/_/_/ƿ/i/l/c(CAAACACC)
s/_/_/_/ƿ/i/l/c(CAAACACC)
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/_/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					> version: s/_/_/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/_/i/l/c(CCAACC)
s/w/_/i/l/c(CCAACC)
s/_/_/w/i/l/c(CAACACC)
s/_/_/w/i/l/c(CAACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
s/w/_/_/i/l/c(CCAAACC)
s/w/_/_/i/l/c(CCAAACC)
s/_/_/_/w/i/l/c(CAAACACC)
s/_/_/_/w/i/l/c(CAAACACC)
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/_/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/_/i/l/c/h(CCAACCC)
s/ƿ/_/i/l/c/h(CCAACCC)
s/ƿ/_/i/l/ch(CCAACC)
s/ƿ/_/i/l/ch(CCAACC)
s/_/_/ƿ/i/l/c/h(CAACACCC)
s/_/_/ƿ/i/l/c/h(CAACACCC)
s/_/_/ƿ/i/l/ch(CAACACC)
s/_/_/ƿ/i/l/ch(CAACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/ƿ/_/_/i/l/c/h(CCAAACCC)
s/ƿ/_/_/i/l/c/h(CCAAACCC)
s/ƿ/_/_/i/l/ch(CCAAACC)
s/ƿ/_/_/i/l/ch(CCAAACC)
s/_/_/_/ƿ/i/l/c/h(CAAACACCC)
s/_/_/_/ƿ/i/l/c/h(CAAACACCC)
s/_/_/_/ƿ/i/l/ch(CAAACACC)
s/_/_/_/ƿ/i/l/ch(CAAACACC)
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/_/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					> version: s/_/_/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', 'w', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', 'w', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/_/i/l/k(CCAACC)
s/w/_/i/l/k(CCAACC)
s/_/_/w/i/l/k(CAACACC)
s/_/_/w/i/l/k(CAACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/_/_/i/l/k(CCAAACC)
s/w/_/_/i/l/k(CCAAACC)
s/_/_/_/w/i/l/k(CAAACACC)
s/_/_/_/w/i/l/k(CAAACACC)
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/_/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/_/i/l/l/c(CCAACCC)
s/ƿ/_/i/l/l/c(CCAACCC)
s/ƿ/_/i/ll/c(CCAACC)
s/ƿ/_/i/ll/c(CCAACC)
s/_/_/ƿ/i/l/l/c(CAACACCC)
s/_/_/ƿ/i/l/l/c(CAACACCC)
s/_/_/ƿ/i/ll/c(CAACACC)
s/_/_/ƿ/i/ll/c(CAACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/ƿ/_/_/i/l/l/c(CCAAACCC)
s/ƿ/_/_/i/l/l/c(CCAAACCC)
s/ƿ/_/_/i/ll/c(CCAAACC)
s/ƿ/_/_/i/ll/c(CCAAACC)
s/_/_/_/ƿ/i/l/l/c(CAAACACCC)
s/_/_/_/ƿ/i/l/l/c(CAAACACCC)
s/_/_/_/ƿ/i/ll/c(CAAACACC)
s/_/_/_/ƿ/i/ll/c(CAAACACC)
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (32)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿucche
					resolving (32)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿuch
					resolving (16)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuche
					resolving (16)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/_/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					> version: s/_/_/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/_/u/l/c(CCAACC)
s/ƿ/_/u/l/c(CCAACC)
s/_/_/ƿ/u/l/c(CAACACC)
s/_/_/ƿ/u/l/c(CAACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/ƿ/_/_/u/l/c(CCAAACC)
s/ƿ/_/_/u/l/c(CCAAACC)
s/_/_/_/ƿ/u/l/c(CAAACACC)
s/_/_/_/ƿ/u/l/c(CAAACACC)
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					> version: s/_/_/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ch, k, w, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', 'w', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/_/u/l/c(CCAACC)
s/w/_/u/l/c(CCAACC)
s/_/_/w/u/l/c(CAACACC)
s/_/_/w/u/l/c(CAACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
s/w/_/_/u/l/c(CCAAACC)
s/w/_/_/u/l/c(CCAAACC)
s/_/_/_/w/u/l/c(CAAACACC)
s/_/_/_/w/u/l/c(CAAACACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/_/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CVCCV : 4___
				ANALYSING: suche
				adding littera based on matching pattern
				ANALYSING: suilke
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (64)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['u']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/_/u/c
					TRYING: c
					> version: s/h/_/u/c
					TRYING: c
					> version: s/hu/_/c
					> version: sh/u/_/c
					> version: sh/u/_/c
					> version: sh/u/_/c
					> version: sh/u/_/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', '_', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', '_', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', '_', 'c', '_']
				adding dashed alternative: ['sh', 'u', '_', 'c', '_']
				adding dashed alternative: ['sh', 'u', '_', 'c', '_']
				adding dashed alternative: ['sh', 'u', '_', 'c', '_']
				adding dashed alternative: ['sh', 'u', '_', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/_/u/c(CCAAC)
s/h/_/u/c(CCAAC)
s/hu/_/c(CCAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
sh/u/_/c(CAAC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/_/u/_/c(CCAAAC)
s/h/_/u/_/c(CCAAAC)
s/hu/_/c/_(CCACA)
sh/u/_/c/_(CAACA)
sh/u/_/c/_(CAACA)
sh/u/_/c/_(CAACA)
sh/u/_/c/_(CAACA)
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', '_', 'u', 'c']
				{'string': 's/h/_/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'u', 'c']
				version split: ['s', 'h', '_', 'u', 'c']
				{'string': 's/h/_/u/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'u', 'c']
				version split: ['s', 'hu', '_', 'c']
				{'string': 's/hu/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', '_', 'c']
				version split: ['sh', 'u', '_', 'c']
				{'string': 'sh/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c']
				version split: ['sh', 'u', '_', 'c']
				{'string': 'sh/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c']
				version split: ['sh', 'u', '_', 'c']
				{'string': 'sh/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c']
				version split: ['sh', 'u', '_', 'c']
				{'string': 'sh/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', '_', 'u', '_', 'c']
				{'string': 's/h/_/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'u', '_', 'c']
				version split: ['s', 'h', '_', 'u', '_', 'c']
				{'string': 's/h/_/u/_/c', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'h', '_', 'u', '_', 'c']
				version split: ['s', 'hu', '_', 'c', '_']
				{'string': 's/hu/_/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'hu', '_', 'c', '_']
				version split: ['sh', 'u', '_', 'c', '_']
				{'string': 'sh/u/_/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c', '_']
				version split: ['sh', 'u', '_', 'c', '_']
				{'string': 'sh/u/_/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c', '_']
				version split: ['sh', 'u', '_', 'c', '_']
				{'string': 'sh/u/_/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c', '_']
				version split: ['sh', 'u', '_', 'c', '_']
				{'string': 'sh/u/_/c/_', 'rgx': '((s))/((u))/((_))/((c))/((_))$'}
				_____REMOVING________['sh', 'u', '_', 'c', '_']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/l/_/i/k/e
					TRYING: k
					> version: s/_/_/l/i/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					> version: s/_/_/l/i/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					RESULT:  ['e', 'i']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k', 'rgx': '((s))/((_))/((_))/((k))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					> version: s/_/_/o/ch
					TRYING: ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', '_', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/_/h(CAVCAC)
s/_/o/ch/_(CAVCA)
s/o/_/c/_/h(CVACAC)
s/o/_/ch/_(CVACA)
s/_/_/o/_/c/h(CAAVACC)
s/_/_/o/_/ch(CAAVAC)
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h']
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', '_', 'h']
				{'string': 's/_/o/c/_/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', '_', 'h']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', '_', 'c', '_', 'h']
				{'string': 's/o/_/c/_/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', '_', 'h']
				version split: ['s', 'o', '_', 'ch', '_']
				{'string': 's/o/_/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_']
				version split: ['s', '_', '_', 'o', '_', 'c', 'h']
				{'string': 's/_/_/o/_/c', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', '_', 'c', 'h']
				version split: ['s', '_', '_', 'o', '_', 'ch']
				{'string': 's/_/_/o/_/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', '_', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/u/_/c/h
					TRYING: h
					> version: s/u/_/c/h
					TRYING: h
					> version: s/u/_/ch
					> version: s/u/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', '_', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', '_', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', '_', 'ch', '_']
				adding dashed alternative: ['s', 'u', '_', 'ch', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/u/_/c/h(CAACC)
s/u/_/c/h(CAACC)
s/u/_/ch(CAAC)
s/u/_/ch(CAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/u/_/c/_/h(CAACAC)
s/u/_/c/_/h(CAACAC)
s/u/_/ch/_(CAACA)
s/u/_/ch/_(CAACA)
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', '_', 'c', 'h']
				{'string': 's/u/_/c/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'c', 'h']
				{'string': 's/u/_/c/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'ch']
				{'string': 's/u/_/ch', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'ch']
				version split: ['s', 'u', '_', 'ch']
				{'string': 's/u/_/ch', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', '_', 'c', '_', 'h']
				{'string': 's/u/_/c/_/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'c', '_', 'h']
				version split: ['s', 'u', '_', 'c', '_', 'h']
				{'string': 's/u/_/c/_/h', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'c', '_', 'h']
				version split: ['s', 'u', '_', 'ch', '_']
				{'string': 's/u/_/ch/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				version split: ['s', 'u', '_', 'ch', '_']
				{'string': 's/u/_/ch/_', 'rgx': '((s))/((u))/((_))/((h)|(c)|(ch))/((_))$'}
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/c/h
					TRYING: h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/u/_/i/c/h
					TRYING: c
					> version: s/u/_/i/c/h
					TRYING: c
					> version: s/u/_/i/ch
					TRYING: ch
					> version: s/u/_/i/ch
					TRYING: ch
					> version: s/ui/_/c/h
					TRYING: h
					> version: s/ui/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ui', '_', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ui', '_', 'ch', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/u/_/i/c/h(CAAACC)
s/u/_/i/c/h(CAAACC)
s/u/_/i/ch(CAAAC)
s/u/_/i/ch(CAAAC)
s/ui/_/c/h(CVACC)
s/ui/_/ch(CVAC)
s/u/i/c/_/h(CAACAC)
s/u/i/c/_/h(CAACAC)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/u/_/i/_/c/h(CAAAACC)
s/u/_/i/_/c/h(CAAAACC)
s/u/_/i/_/ch(CAAAAC)
s/u/_/i/_/ch(CAAAAC)
s/ui/_/c/_/h(CVACAC)
s/ui/_/ch/_(CVACA)
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', 'u', '_', 'i', 'c', 'h']
				{'string': 's/u/_/i/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'c', 'h']
				version split: ['s', 'u', '_', 'i', 'c', 'h']
				{'string': 's/u/_/i/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'c', 'h']
				version split: ['s', 'u', '_', 'i', 'ch']
				{'string': 's/u/_/i/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'ch']
				version split: ['s', 'u', '_', 'i', 'ch']
				{'string': 's/u/_/i/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'ch']
				version split: ['s', 'ui', '_', 'c', 'h']
				{'string': 's/ui/_/c/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'c', 'h']
				version split: ['s', 'ui', '_', 'ch']
				{'string': 's/ui/_/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'ch']
				version split: ['s', 'u', 'i', 'c', '_', 'h']
				{'string': 's/u/i/c/_/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', '_', 'h']
				version split: ['s', 'u', 'i', 'c', '_', 'h']
				{'string': 's/u/i/c/_/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', '_', 'h']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', 'u', '_', 'i', '_', 'c', 'h']
				{'string': 's/u/_/i/_/c', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'i', '_', 'c', 'h']
				{'string': 's/u/_/i/_/c', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'i', '_', 'ch']
				{'string': 's/u/_/i/_/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'ch']
				version split: ['s', 'u', '_', 'i', '_', 'ch']
				{'string': 's/u/_/i/_/ch', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'ch']
				version split: ['s', 'ui', '_', 'c', '_', 'h']
				{'string': 's/ui/_/c/_/h', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'c', '_', 'h']
				version split: ['s', 'ui', '_', 'ch', '_']
				{'string': 's/ui/_/ch/_', 'rgx': '((s))/((ui)|(u))/((_))/((h)|(c)|(ch))/((_))$'}
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/u/_/i/l/c
					TRYING: l
					> version: s/u/_/i/l/c
					TRYING: l
					> version: s/ui/_/l/c
					TRYING: c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ui', '_', 'l', '_', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/u/_/i/l/c(CAAACC)
s/u/_/i/l/c(CAAACC)
s/ui/_/l/c(CVACC)
s/u/i/l/_/c(CAACAC)
s/u/i/l/_/c(CAACAC)
s/ui/l/c/_(CVCCA)
s/u/_/i/_/l/c(CAAAACC)
s/u/_/i/_/l/c(CAAAACC)
s/ui/_/l/_/c(CVACAC)
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', 'u', '_', 'i', 'l', 'c']
				{'string': 's/u/_/i/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'l', 'c']
				version split: ['s', 'u', '_', 'i', 'l', 'c']
				{'string': 's/u/_/i/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'l', 'c']
				version split: ['s', 'ui', '_', 'l', 'c']
				{'string': 's/ui/_/l/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', '_', 'c']
				{'string': 's/u/i/l/_/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'c']
				version split: ['s', 'u', 'i', 'l', '_', 'c']
				{'string': 's/u/i/l/_/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'c']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', 'u', '_', 'i', '_', 'l', 'c']
				{'string': 's/u/_/i/_/l', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'l', 'c']
				version split: ['s', 'u', '_', 'i', '_', 'l', 'c']
				{'string': 's/u/_/i/_/l', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'l', 'c']
				version split: ['s', 'ui', '_', 'l', '_', 'c']
				{'string': 's/ui/_/l/_/c', 'rgx': '((s))/((ui)|(u))/((_))/((c))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'l', '_', 'c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					> version: s/u/i/l/k
					TRYING: k
					> version: s/ui/l/k
					> version: s/u/_/i/l/k
					TRYING: l
					> version: s/u/_/i/l/k
					TRYING: l
					> version: s/ui/_/l/k
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', '_', 'l', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/u/_/i/l/k(CAAACC)
s/u/_/i/l/k(CAAACC)
s/ui/_/l/k(CVACC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/u/_/i/_/l/k(CAAAACC)
s/u/_/i/_/l/k(CAAAACC)
s/ui/_/l/_/k(CVACAC)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', 'u', '_', 'i', 'l', 'k']
				{'string': 's/u/_/i/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'l', 'k']
				version split: ['s', 'u', '_', 'i', 'l', 'k']
				{'string': 's/u/_/i/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', 'l', 'k']
				version split: ['s', 'ui', '_', 'l', 'k']
				{'string': 's/ui/_/l/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', 'u', '_', 'i', '_', 'l', 'k']
				{'string': 's/u/_/i/_/l', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'l', 'k']
				version split: ['s', 'u', '_', 'i', '_', 'l', 'k']
				{'string': 's/u/_/i/_/l', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'i', '_', 'l', 'k']
				version split: ['s', 'ui', '_', 'l', '_', 'k']
				{'string': 's/ui/_/l/_/k', 'rgx': '((s))/((ui)|(u))/((_))/((k))/((_))$'}
				_____REMOVING________['s', 'ui', '_', 'l', '_', 'k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/c/h
					TRYING: h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/u/_/y/c/h
					TRYING: c
					> version: s/u/_/y/c/h
					TRYING: c
					> version: s/u/_/y/ch
					TRYING: ch
					> version: s/u/_/y/ch
					TRYING: ch
					> version: s/uy/_/c/h
					TRYING: h
					> version: s/uy/_/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', 'u', '_', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', '_', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'u', '_', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'uy', '_', 'c', '_', 'h']
				adding dashed alternative: ['s', 'uy', '_', 'ch', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/u/_/y/c/h(CAAACC)
s/u/_/y/c/h(CAAACC)
s/u/_/y/ch(CAAAC)
s/u/_/y/ch(CAAAC)
s/uy/_/c/h(CVACC)
s/uy/_/ch(CVAC)
s/u/y/c/_/h(CAACAC)
s/u/y/c/_/h(CAACAC)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/u/_/y/_/c/h(CAAAACC)
s/u/_/y/_/c/h(CAAAACC)
s/u/_/y/_/ch(CAAAAC)
s/u/_/y/_/ch(CAAAAC)
s/uy/_/c/_/h(CVACAC)
s/uy/_/ch/_(CVACA)
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', 'u', '_', 'y', 'c', 'h']
				{'string': 's/u/_/y/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', 'c', 'h']
				version split: ['s', 'u', '_', 'y', 'c', 'h']
				{'string': 's/u/_/y/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', 'c', 'h']
				version split: ['s', 'u', '_', 'y', 'ch']
				{'string': 's/u/_/y/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', 'ch']
				version split: ['s', 'u', '_', 'y', 'ch']
				{'string': 's/u/_/y/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', 'ch']
				version split: ['s', 'uy', '_', 'c', 'h']
				{'string': 's/uy/_/c/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', '_', 'c', 'h']
				version split: ['s', 'uy', '_', 'ch']
				{'string': 's/uy/_/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', '_', 'ch']
				version split: ['s', 'u', 'y', 'c', '_', 'h']
				{'string': 's/u/y/c/_/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', '_', 'h']
				version split: ['s', 'u', 'y', 'c', '_', 'h']
				{'string': 's/u/y/c/_/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', '_', 'h']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', 'u', '_', 'y', '_', 'c', 'h']
				{'string': 's/u/_/y/_/c', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'y', '_', 'c', 'h']
				{'string': 's/u/_/y/_/c', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', '_', 'c', 'h']
				version split: ['s', 'u', '_', 'y', '_', 'ch']
				{'string': 's/u/_/y/_/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', '_', 'ch']
				version split: ['s', 'u', '_', 'y', '_', 'ch']
				{'string': 's/u/_/y/_/ch', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'u', '_', 'y', '_', 'ch']
				version split: ['s', 'uy', '_', 'c', '_', 'h']
				{'string': 's/uy/_/c/_/h', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				_____REMOVING________['s', 'uy', '_', 'c', '_', 'h']
				version split: ['s', 'uy', '_', 'ch', '_']
				{'string': 's/uy/_/ch/_', 'rgx': '((s))/((u)|(uy))/((_))/((h)|(c)|(ch))/((_))$'}
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/_/_/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/ƿ/_(CAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/_/_/ƿ(CAAAAC)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', '_', 'ƿ']
				{'string': 's/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', 'ƿ', '_']
				{'string': 's/_/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', '_', 'ƿ']
				ANALYSING: swech
					resolving (8)
					> version: s/w/e/c/h
					TRYING: h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					> version: s/_/w/e/ch
					TRYING: ch
					> version: s/w/_/e/c/h
					TRYING: c
					> version: s/w/_/e/ch
					TRYING: ch
					> version: s/_/_/w/e/c/h
					TRYING: e
					> version: s/_/_/w/e/ch
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', '_', 'e', 'c', 'h']
				{'string': 's/w/_/e/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', 'w', '_', 'e', 'c', 'h']
				version split: ['s', 'w', '_', 'e', 'ch']
				{'string': 's/w/_/e/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', 'w', '_', 'e', 'ch']
				version split: ['s', '_', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/_/w/e/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', '_', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', '_', 'w', 'e', 'ch']
				{'string': 's/_/_/w/e/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((e))$'}
				_____REMOVING________['s', '_', '_', 'w', 'e', 'ch']
				ANALYSING: sƿich
					resolving (16)
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/c/h
					TRYING: h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/ch
					TRYING: ch
					> version: s/_/ƿ/i/ch
					TRYING: ch
					> version: s/ƿ/_/i/c/h
					TRYING: c
					> version: s/ƿ/_/i/c/h
					TRYING: c
					> version: s/ƿ/_/i/ch
					TRYING: ch
					> version: s/ƿ/_/i/ch
					TRYING: ch
					> version: s/_/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/_/ƿ/i/c/h
					TRYING: i
					> version: s/_/_/ƿ/i/ch
					TRYING: i
					> version: s/_/_/ƿ/i/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/ƿ/_/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/ƿ/_/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'i', 'ch']
				{'string': 's/ƿ/_/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'ch']
				version split: ['s', 'ƿ', '_', 'i', 'ch']
				{'string': 's/ƿ/_/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/_/ƿ/i/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/_/ƿ/i/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/_/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/_/ƿ/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'ch']
				ANALYSING: swich
					resolving (16)
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/c/h
					TRYING: h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/ch
					TRYING: ch
					> version: s/_/w/i/ch
					TRYING: ch
					> version: s/w/_/i/c/h
					TRYING: c
					> version: s/w/_/i/c/h
					TRYING: c
					> version: s/w/_/i/ch
					TRYING: ch
					> version: s/w/_/i/ch
					TRYING: ch
					> version: s/_/_/w/i/c/h
					TRYING: i
					> version: s/_/_/w/i/c/h
					TRYING: i
					> version: s/_/_/w/i/ch
					TRYING: i
					> version: s/_/_/w/i/ch
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', '_', 'i', 'c', 'h']
				{'string': 's/w/_/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'c', 'h']
				version split: ['s', 'w', '_', 'i', 'c', 'h']
				{'string': 's/w/_/i/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'c', 'h']
				version split: ['s', 'w', '_', 'i', 'ch']
				{'string': 's/w/_/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'ch']
				version split: ['s', 'w', '_', 'i', 'ch']
				{'string': 's/w/_/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'ch']
				version split: ['s', '_', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/_/w/i/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/_/w/i/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', '_', 'w', 'i', 'ch']
				{'string': 's/_/_/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'ch']
				version split: ['s', '_', '_', 'w', 'i', 'ch']
				{'string': 's/_/_/w/i/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'ch']
				ANALYSING: sƿilc
					resolving (16)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/c
					TRYING: l
					> version: s/ƿ/_/i/l/c
					TRYING: l
					> version: s/ƿ/_/i/l/c
					TRYING: l
					> version: s/_/_/ƿ/i/l/c
					TRYING: i
					> version: s/_/_/ƿ/i/l/c
					TRYING: i
					> version: s/ƿ/i/_/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					> version: s/ƿ/_/_/i/l/c
					TRYING: i
					> version: s/ƿ/_/_/i/l/c
					TRYING: i
					> version: s/_/_/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c']
				ANALYSING: swilc
					resolving (16)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					> version: s/_/w/i/l/c
					TRYING: l
					> version: s/w/_/i/l/c
					TRYING: l
					> version: s/w/_/i/l/c
					TRYING: l
					> version: s/_/_/w/i/l/c
					TRYING: i
					> version: s/_/_/w/i/l/c
					TRYING: i
					> version: s/w/i/_/l/c
					TRYING: l
					> version: s/w/i/_/l/c
					TRYING: l
					> version: s/_/w/_/i/l/c
					TRYING: i
					> version: s/_/w/_/i/l/c
					TRYING: i
					> version: s/w/_/_/i/l/c
					TRYING: i
					> version: s/w/_/_/i/l/c
					TRYING: i
					> version: s/_/_/_/w/i/l/c
					TRYING: w
					> version: s/_/_/_/w/i/l/c
					TRYING: w
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', '_', 'i', 'l', 'c']
				{'string': 's/w/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'l', 'c']
				version split: ['s', 'w', '_', 'i', 'l', 'c']
				{'string': 's/w/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/_/w/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/_/w/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', 'w', '_', '_', 'i', 'l', 'c']
				{'string': 's/w/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', '_', 'i', 'l', 'c']
				version split: ['s', 'w', '_', '_', 'i', 'l', 'c']
				{'string': 's/w/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/_/_/w/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/_/_/w/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'i', 'l', 'c']
				ANALYSING: sƿilch
					resolving (32)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					> version: s/ƿ/i/l/ch
					TRYING: ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					> version: s/ƿ/_/i/l/c/h
					TRYING: l
					> version: s/ƿ/_/i/l/c/h
					TRYING: l
					> version: s/ƿ/_/i/l/ch
					TRYING: l
					> version: s/ƿ/_/i/l/ch
					TRYING: l
					> version: s/_/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/_/ƿ/i/l/c/h
					TRYING: i
					> version: s/_/_/ƿ/i/l/ch
					TRYING: i
					> version: s/_/_/ƿ/i/l/ch
					TRYING: i
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					> version: s/ƿ/_/_/i/l/c/h
					TRYING: i
					> version: s/ƿ/_/_/i/l/c/h
					TRYING: i
					> version: s/ƿ/_/_/i/l/ch
					TRYING: i
					> version: s/ƿ/_/_/i/l/ch
					TRYING: i
					> version: s/_/_/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'ch']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'ch']
				ANALYSING: swilk
					resolving (16)
					> version: s/w/i/l/k
					TRYING: k
					> version: s/w/i/l/k
					TRYING: k
					> version: s/_/w/i/l/k
					TRYING: l
					> version: s/_/w/i/l/k
					TRYING: l
					> version: s/w/_/i/l/k
					TRYING: l
					> version: s/w/_/i/l/k
					TRYING: l
					> version: s/_/_/w/i/l/k
					TRYING: i
					> version: s/_/_/w/i/l/k
					TRYING: i
					> version: s/w/i/_/l/k
					TRYING: l
					> version: s/w/i/_/l/k
					TRYING: l
					> version: s/_/w/_/i/l/k
					TRYING: i
					> version: s/_/w/_/i/l/k
					TRYING: i
					> version: s/w/_/_/i/l/k
					TRYING: i
					> version: s/w/_/_/i/l/k
					TRYING: i
					> version: s/_/_/_/w/i/l/k
					TRYING: w
					> version: s/_/_/_/w/i/l/k
					TRYING: w
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', '_', 'i', 'l', 'k']
				{'string': 's/w/_/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'l', 'k']
				version split: ['s', 'w', '_', 'i', 'l', 'k']
				{'string': 's/w/_/i/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/_/w/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/_/w/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/w/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/w/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/_/_/w/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/_/_/w/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'i', 'l', 'k']
				ANALYSING: sƿillc
					resolving (32)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/l/l/c
					TRYING: l
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					> version: s/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/ƿ/_/i/ll/c
					TRYING: ll
					> version: s/ƿ/_/i/ll/c
					TRYING: ll
					> version: s/_/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/_/ƿ/i/l/l/c
					TRYING: i
					> version: s/_/_/ƿ/i/ll/c
					TRYING: i
					> version: s/_/_/ƿ/i/ll/c
					TRYING: i
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					> version: s/ƿ/_/_/i/l/l/c
					TRYING: i
					> version: s/ƿ/_/_/i/l/l/c
					TRYING: i
					> version: s/ƿ/_/_/i/ll/c
					TRYING: i
					> version: s/ƿ/_/_/i/ll/c
					TRYING: i
					> version: s/_/_/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/_/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['i']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/_/i/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/_/i/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/_/ƿ/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/_/ƿ/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/_/ƿ/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				{'string': 's/ƿ/_/_/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				version split: ['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				{'string': 's/ƿ/_/_/i/ll', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'i', 'll', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/_/_/ƿ/i', 'rgx': '((s))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'i', 'll', 'c']
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/ƿ/_/u/c
					TRYING: c
					> version: s/ƿ/_/u/c
					TRYING: c
					> version: s/_/_/ƿ/u/c
					TRYING: u
					> version: s/_/_/ƿ/u/c
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', '_', 'u', 'c']
				{'string': 's/ƿ/_/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c']
				version split: ['s', 'ƿ', '_', 'u', 'c']
				{'string': 's/ƿ/_/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c']
				ANALYSING: sƿucch
					resolving (32)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/_/ƿ/u/cch
					TRYING: cch
					> version: s/ƿ/_/u/c/c/h
					TRYING: c
					> version: s/ƿ/_/u/c/c/h
					TRYING: c
					> version: s/ƿ/_/u/cch
					TRYING: cch
					> version: s/ƿ/_/u/cch
					TRYING: cch
					> version: s/ƿ/_/u/c/ch
					TRYING: c
					> version: s/ƿ/_/u/c/ch
					TRYING: c
					> version: s/ƿ/_/u/cch
					TRYING: cch
					> version: s/ƿ/_/u/cch
					TRYING: cch
					> version: s/_/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/_/ƿ/u/c/c/h
					TRYING: u
					> version: s/_/_/ƿ/u/cch
					TRYING: u
					> version: s/_/_/ƿ/u/cch
					TRYING: u
					> version: s/_/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/_/ƿ/u/c/ch
					TRYING: u
					> version: s/_/_/ƿ/u/cch
					TRYING: u
					> version: s/_/_/ƿ/u/cch
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'u', 'cch']
				{'string': 's/ƿ/_/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch']
				version split: ['s', 'ƿ', '_', 'u', 'cch']
				{'string': 's/ƿ/_/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 's/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 's/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', '_', 'u', 'cch']
				{'string': 's/ƿ/_/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch']
				version split: ['s', 'ƿ', '_', 'u', 'cch']
				{'string': 's/ƿ/_/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch']
				ANALYSING: sƿucche
					resolving (32)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					> version: s/ƿ/_/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/_/u/c/c/h/e
					TRYING: c
					> version: s/ƿ/_/u/cch/e
					TRYING: cch
					> version: s/ƿ/_/u/cch/e
					TRYING: cch
					> version: s/ƿ/_/u/c/ch/e
					TRYING: c
					> version: s/ƿ/_/u/c/ch/e
					TRYING: c
					> version: s/ƿ/_/u/cch/e
					TRYING: cch
					> version: s/ƿ/_/u/cch/e
					TRYING: cch
					> version: s/_/_/ƿ/u/c/c/h/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/c/c/h/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/cch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/cch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/c/ch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/c/ch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/cch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/cch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					RESULT:  ['u', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/_/ƿ/u/cch', 'rgx': '((s))/((_))/((_))/((c))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'cch', 'e']
				ANALYSING: sƿuch
					resolving (16)
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/c/h
					TRYING: h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/ch
					TRYING: ch
					> version: s/_/ƿ/u/ch
					TRYING: ch
					> version: s/ƿ/_/u/c/h
					TRYING: c
					> version: s/ƿ/_/u/c/h
					TRYING: c
					> version: s/ƿ/_/u/ch
					TRYING: ch
					> version: s/ƿ/_/u/ch
					TRYING: ch
					> version: s/_/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/_/ƿ/u/c/h
					TRYING: u
					> version: s/_/_/ƿ/u/ch
					TRYING: u
					> version: s/_/_/ƿ/u/ch
					TRYING: u
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', 'ƿ', '_', 'u', 'ch']
				{'string': 's/ƿ/_/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'ch']
				version split: ['s', 'ƿ', '_', 'u', 'ch']
				{'string': 's/ƿ/_/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'ch']
				ANALYSING: sƿuche
					resolving (16)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/h/e
					TRYING: h
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					> version: s/ƿ/_/u/c/h/e
					TRYING: c
					> version: s/ƿ/_/u/c/h/e
					TRYING: c
					> version: s/ƿ/_/u/ch/e
					TRYING: ch
					> version: s/ƿ/_/u/ch/e
					TRYING: ch
					> version: s/_/_/ƿ/u/c/h/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/c/h/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/ch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					> version: s/_/_/ƿ/u/ch/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'e'}
					RESULT:  ['u', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'ch', 'e']
				{'string': 's/ƿ/_/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', '_', 'u', 'ch', 'e']
				{'string': 's/ƿ/_/u/ch/e', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'ch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/_/ƿ/u/c', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/_/ƿ/u/ch', 'rgx': '((s))/((_))/((_))/((c)|(ch))/((u)|(e))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'ch', 'e']
				ANALYSING: sƿulc
					resolving (16)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					> version: s/_/ƿ/u/l/c
					TRYING: l
					> version: s/ƿ/_/u/l/c
					TRYING: l
					> version: s/ƿ/_/u/l/c
					TRYING: l
					> version: s/_/_/ƿ/u/l/c
					TRYING: u
					> version: s/_/_/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/_/l/c
					TRYING: l
					> version: s/ƿ/u/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					> version: s/ƿ/_/_/u/l/c
					TRYING: u
					> version: s/ƿ/_/_/u/l/c
					TRYING: u
					> version: s/_/_/_/ƿ/u/l/c
					TRYING: ƿ
					> version: s/_/_/_/ƿ/u/l/c
					TRYING: ƿ
					RESULT:  ['u']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/_/ƿ/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/_/ƿ/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				{'string': 's/ƿ/_/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				{'string': 's/ƿ/_/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', 'u', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/_/_/ƿ/u', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/_/_/ƿ/u', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', 'u', 'l', 'c']
				ANALYSING: swulc
					resolving (16)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					> version: s/_/w/u/l/c
					TRYING: l
					> version: s/w/_/u/l/c
					TRYING: l
					> version: s/w/_/u/l/c
					TRYING: l
					> version: s/_/_/w/u/l/c
					TRYING: u
					> version: s/_/_/w/u/l/c
					TRYING: u
					> version: s/w/u/_/l/c
					TRYING: l
					> version: s/w/u/_/l/c
					TRYING: l
					> version: s/_/w/_/u/l/c
					TRYING: u
					> version: s/_/w/_/u/l/c
					TRYING: u
					> version: s/w/_/_/u/l/c
					TRYING: u
					> version: s/w/_/_/u/l/c
					TRYING: u
					> version: s/_/_/_/w/u/l/c
					TRYING: w
					> version: s/_/_/_/w/u/l/c
					TRYING: w
					RESULT:  ['u']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', '_', 'u', 'l', 'c']
				{'string': 's/w/_/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', '_', 'u', 'l', 'c']
				version split: ['s', 'w', '_', 'u', 'l', 'c']
				{'string': 's/w/_/u/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/_/w/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/_/w/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', 'w', '_', '_', 'u', 'l', 'c']
				{'string': 's/w/_/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', '_', '_', 'u', 'l', 'c']
				version split: ['s', 'w', '_', '_', 'u', 'l', 'c']
				{'string': 's/w/_/_/u/l', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', 'w', '_', '_', 'u', 'l', 'c']
				version split: ['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/_/_/w/u', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/_/_/w/u', 'rgx': '((s))/((_))/((_))/((_))/((u))$'}
				_____REMOVING________['s', '_', '_', '_', 'w', 'u', 'l', 'c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/c/h
					TRYING: h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/ch
					TRYING: ch
					> version: _/z/u/i/ch
					TRYING: ch
					> version: _/z/ui/c/h
					TRYING: h
					> version: _/z/ui/ch
					> version: z/u/_/i/c/h
					TRYING: c
					> version: z/u/_/i/c/h
					TRYING: c
					> version: z/u/_/i/ch
					TRYING: ch
					> version: z/u/_/i/ch
					TRYING: ch
					> version: z/ui/_/c/h
					TRYING: h
					> version: z/ui/_/ch
					> version: _/z/_/u/i/c/h
					TRYING: i
					> version: _/z/_/u/i/c/h
					TRYING: i
					> version: _/z/_/u/i/ch
					TRYING: i
					> version: _/z/_/u/i/ch
					TRYING: i
					> version: _/z/_/ui/c/h
					TRYING: c
					> version: _/z/_/ui/ch
					TRYING: ch
					RESULT:  ['i']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/u/_/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', '_', 'i', 'c', 'h']
				version split: ['z', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/u/_/i/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', '_', 'i', 'c', 'h']
				version split: ['z', 'u', '_', 'i', 'ch']
				{'string': 'z/u/_/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', '_', 'i', 'ch']
				version split: ['z', 'u', '_', 'i', 'ch']
				{'string': 'z/u/_/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'u', '_', 'i', 'ch']
				version split: ['z', 'ui', '_', 'c', 'h']
				{'string': 'z/ui/_/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'ui', '_', 'c', 'h']
				version split: ['z', 'ui', '_', 'ch']
				{'string': 'z/ui/_/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['z', 'ui', '_', 'ch']
				version split: ['_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/z/_/u/i/c', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/z/_/u/i/c', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/z/_/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/z/_/u/i/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', 'z', '_', 'ui', 'c', 'h']
				{'string': '_/z/_/ui/c/h', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'ui', 'c', 'h']
				version split: ['_', 'z', '_', 'ui', 'ch']
				{'string': '_/z/_/ui/ch', 'rgx': '((_))/((ui)|(u))/((_))/((h)|(c)|(ch))/((i))$'}
				_____REMOVING________['_', 'z', '_', 'ui', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/c/h
					TRYING: h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/ch
					TRYING: ch
					> version: _/z/u/y/ch
					TRYING: ch
					> version: _/z/uy/c/h
					TRYING: h
					> version: _/z/uy/ch
					> version: z/u/_/y/c/h
					TRYING: c
					> version: z/u/_/y/c/h
					TRYING: c
					> version: z/u/_/y/ch
					TRYING: ch
					> version: z/u/_/y/ch
					TRYING: ch
					> version: z/uy/_/c/h
					TRYING: h
					> version: z/uy/_/ch
					> version: _/z/_/u/y/c/h
					TRYING: y
					> version: _/z/_/u/y/c/h
					TRYING: y
					> version: _/z/_/u/y/ch
					TRYING: y
					> version: _/z/_/u/y/ch
					TRYING: y
					> version: _/z/_/uy/c/h
					TRYING: c
					> version: _/z/_/uy/ch
					TRYING: ch
					RESULT:  ['y']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/u/_/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', '_', 'y', 'c', 'h']
				version split: ['z', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/u/_/y/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', '_', 'y', 'c', 'h']
				version split: ['z', 'u', '_', 'y', 'ch']
				{'string': 'z/u/_/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', '_', 'y', 'ch']
				version split: ['z', 'u', '_', 'y', 'ch']
				{'string': 'z/u/_/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'u', '_', 'y', 'ch']
				version split: ['z', 'uy', '_', 'c', 'h']
				{'string': 'z/uy/_/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'uy', '_', 'c', 'h']
				version split: ['z', 'uy', '_', 'ch']
				{'string': 'z/uy/_/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['z', 'uy', '_', 'ch']
				version split: ['_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/z/_/u/y/c', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/z/_/u/y/c', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/z/_/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/z/_/u/y/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', 'z', '_', 'uy', 'c', 'h']
				{'string': '_/z/_/uy/c/h', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'uy', 'c', 'h']
				version split: ['_', 'z', '_', 'uy', 'ch']
				{'string': '_/z/_/uy/ch', 'rgx': '((_))/((u)|(uy))/((_))/((h)|(c)|(ch))/((y))$'}
				_____REMOVING________['_', 'z', '_', 'uy', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', 'u', '_', 'ch', '_']
		only one version left: ['s', 'ui', '_', 'ch', '_']
		FAIL: 
		FAIL: 
		only one version left: ['s', 'uy', '_', 'ch', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'u', 'c', 'h', 'e']
		SPLIT: ['s', 'ui', 'l', 'k', 'e']
		SPLIT: ['h', '_', '_', '_', 'u', '----!']
		SPLIT: ['s', 'u', '_', 'c', '_', '----!']
		SPLIT: ['s', '_', '_', 'k', 'e.i', '----!']
		SPLIT: ['s', '_', '_', 'h.c.ch', '_', '----!']
		SPLIT: ['s', 'u', '_', 'ch', '_']
		['s', 'u', '_', 'ch', '_']
		['s', 'u', '_', 'ch', '_']
		SPLIT: ['s', 'ui', '_', 'ch', '_']
		['s', 'ui', '_', 'ch', '_']
		SPLIT: ['s', 'ui.u', '_', 'c', '_', '----!']
		SPLIT: ['s', 'ui.u', '_', 'k', '_', '----!']
		SPLIT: ['s', 'uy', '_', 'ch', '_']
		['s', 'uy', '_', 'ch', '_']
		SPLIT: ['s', '_', '_', '_', '_', '----!']
		SPLIT: ['s', '_', '_', 'c.ch', 'e', '----!']
		SPLIT: ['s', '_', '_', 'c.ch', 'i', '----!']
		SPLIT: ['s', '_', '_', 'c.ch', 'i', '----!']
		SPLIT: ['s', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', '_', 'c', 'u', '----!']
		SPLIT: ['s', '_', '_', 'c', 'u', '----!']
		SPLIT: ['s', '_', '_', 'c', 'u.e', '----!']
		SPLIT: ['s', '_', '_', 'c.ch', 'u', '----!']
		SPLIT: ['s', '_', '_', 'c.ch', 'u.e', '----!']
		SPLIT: ['s', '_', '_', '_', 'u', '----!']
		SPLIT: ['s', '_', '_', '_', 'u', '----!']
		SPLIT: ['_', 'ui.u', '_', 'h.c.ch', 'i', '----!']
		SPLIT: ['_', 'u.uy', '_', 'h.c.ch', 'y', '----!']
		version for pattern CVCCV is INVALID
		[{'c', '_', 'l'}]
		24
		POSSIBLE CHANGE: 2 : Palatal Vicinity l-deletion
		OVERVIEW: version for pattern CVCCV
{'c', '_', 'l'}
faulty splits: 24
hu----! <-! hsƿucch
suc----! <-! shuc
ske.i----! <-! slike
sh.c.ch----! <-! soch
sui.uc----! <-! suilc
sui.uk----! <-! suilk
s----! <-! sƿ
sc.che----! <-! swech
sc.chi----! <-! sƿich
sc.chi----! <-! swich
si----! <-! sƿilc
si----! <-! swilc
si----! <-! sƿilch
si----! <-! swilk
si----! <-! sƿillc
scu----! <-! sƿuc
scu----! <-! sƿucch
scu.e----! <-! sƿucche
sc.chu----! <-! sƿuch
sc.chu.e----! <-! sƿuche
su----! <-! sƿulc
su----! <-! swulc
ui.uh.c.chi----! <-! zuich
u.uyh.c.chy----! <-! zuych
s | u | c | h | e
s | ui | l | k | e
h | _ | _ | _ | u | ----!
s | u | _ | c | _ | ----!
s | _ | _ | k | e.i | ----!
s | _ | _ | h.c.ch | _ | ----!
s | u | _ | ch | _
s | ui | _ | ch | _
s | ui.u | _ | c | _ | ----!
s | ui.u | _ | k | _ | ----!
s | uy | _ | ch | _
s | _ | _ | _ | _ | ----!
s | _ | _ | c.ch | e | ----!
s | _ | _ | c.ch | i | ----!
s | _ | _ | c.ch | i | ----!
s | _ | _ | _ | i | ----!
s | _ | _ | _ | i | ----!
s | _ | _ | _ | i | ----!
s | _ | _ | _ | i | ----!
s | _ | _ | _ | i | ----!
s | _ | _ | c | u | ----!
s | _ | _ | c | u | ----!
s | _ | _ | c | u.e | ----!
s | _ | _ | c.ch | u | ----!
s | _ | _ | c.ch | u.e | ----!
s | _ | _ | _ | u | ----!
s | _ | _ | _ | u | ----!
_ | ui.u | _ | h.c.ch | i | ----!
_ | u.uy | _ | h.c.ch | y | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'o', 'ui', 'u', '_'}
2 : {'c', '_', 'l', 'ch'},{'c', '_', 'l', 'y'},{'c', '_', 'l'},{'ƿ', 'c', '_', 'l'},{'c', 'l', 's'},{'c', 'w', '_', 'l'},{'ƿ', 'c', 'l'},{'c', '_', 'l', 'i'},{'c', 'u', '_', 'l'}
3 : {'h', 'ch', 'k', '_', 'l', 'c'},{'h', 'k', 's'},{'h', 'k', 'ƿ'},{'h', 'u', 'k'},{'h', 'ƿ', 'ch', 'k', '_', 'c'},{'h', 'ch', 'k', 'w', '_', 'c'},{'h', 'ch', 'k', '_', 'll', 'c'},{'h', 'ch', 'u', 'k', '_', 'c'},{'h', 'ch', 'k', '_', 'c', 'i'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCVCCCV
	Selection for pattern: CCVCCCV completed
	Making a version for pattern: CCVCCCV
			___CCVCCCV : 0___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/c/h
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					> version: s/ƿ/i/l/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/l/l/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					> version: s/ƿ/i/ll/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/c/c/h
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/c/ch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					> version: s/ƿ/u/cch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCVCCCV : 1___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					RESULT:  ['h', 'u', 'hu']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: sƿilch
					resolving (4)
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿillc
					resolving (4)
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ll/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucch
					resolving (8)
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCVCCCV : 2___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['ƿ']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					> version: s/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: l
					> version: s/_/l/i/k/e
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					> version: s/o/ch
					TRYING: ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', 'o', '_', 'ch']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					> version: s/u/c/h
					TRYING: c
					> version: s/u/ch
					TRYING: ch
					> version: s/u/ch
					TRYING: ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/ch/e
					TRYING: ch
					> version: s/u/ch/e
					TRYING: ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/ui/c/h
					TRYING: c
					> version: s/ui/ch
					TRYING: ch
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/c/h
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/u/i/ch
					TRYING: u
					> version: s/_/ui/c/h
					TRYING: ui
					> version: s/_/ui/ch
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					> version: s/u/i/l/c
					TRYING: i
					> version: s/ui/l/c
					TRYING: l
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/u/i/l/c
					TRYING: u
					> version: s/_/ui/l/c
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					> version: s/u/i/l/k
					TRYING: i
					> version: s/ui/l/k
					TRYING: l
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/u/i/l/k
					TRYING: u
					> version: s/_/ui/l/k
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/ui/l/k/e
					TRYING: l
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/u/i/l/k/e
					TRYING: u
					> version: s/_/ui/l/k/e
					TRYING: ui
					RESULT:  ['u']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/uy/c/h
					TRYING: c
					> version: s/uy/ch
					TRYING: ch
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/c/h
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/u/y/ch
					TRYING: u
					> version: s/_/uy/c/h
					TRYING: uy
					> version: s/_/uy/ch
					TRYING: uy
					RESULT:  ['u']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					> version: s/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/c/h
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/ƿ/i/l/ch
					TRYING: i
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/l/ch
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					> version: s/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['w']
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/l/l/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/ƿ/i/ll/c
					TRYING: i
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					> version: s/_/ƿ/i/ll/c
					TRYING: ƿ
					RESULT:  ['ƿ']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/c/c/h
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/c/ch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/ƿ/u/cch
					TRYING: u
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/cch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'ƿ'}
					RESULT:  ['u', 'ƿ']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					> version: s/_/w/u/l/c
					TRYING: w
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'w'}
					RESULT:  ['u', 'w']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/ui/c/h
					TRYING: c
					> version: z/ui/ch
					TRYING: ch
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/c/h
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/u/i/ch
					TRYING: u
					> version: _/z/ui/c/h
					TRYING: ui
					> version: _/z/ui/ch
					TRYING: ui
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/c/h
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/u/i/ch
					TRYING: u
					> version: z/_/ui/c/h
					TRYING: ui
					> version: z/_/ui/ch
					TRYING: ui
					> version: _/_/z/u/i/c/h
					TRYING: z
					> version: _/_/z/u/i/c/h
					TRYING: z
					> version: _/_/z/u/i/ch
					TRYING: z
					> version: _/_/z/u/i/ch
					TRYING: z
					> version: _/_/z/ui/c/h
					TRYING: z
					> version: _/_/z/ui/ch
					TRYING: z
					RESULT:  ['u']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/uy/c/h
					TRYING: c
					> version: z/uy/ch
					TRYING: ch
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/c/h
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/u/y/ch
					TRYING: u
					> version: _/z/uy/c/h
					TRYING: uy
					> version: _/z/uy/ch
					TRYING: uy
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/c/h
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/u/y/ch
					TRYING: u
					> version: z/_/uy/c/h
					TRYING: uy
					> version: z/_/uy/ch
					TRYING: uy
					> version: _/_/z/u/y/c/h
					TRYING: z
					> version: _/_/z/u/y/c/h
					TRYING: z
					> version: _/_/z/u/y/ch
					TRYING: z
					> version: _/_/z/u/y/ch
					TRYING: z
					> version: _/_/z/uy/c/h
					TRYING: z
					> version: _/_/z/uy/ch
					TRYING: z
					RESULT:  ['u']
			___CCVCCCV : 3___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					> version: s/h/u/c
					TRYING: c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['c']
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: k
					> version: s/l/i/k/e
					TRYING: k
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, i
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/_/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['k']
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					TRYING: h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/o/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/c/h
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/_/o/ch
					TRYING: o
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					> version: s/u/c/h
					TRYING: h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/c/h/e
					TRYING: h
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/c/h
					TRYING: c
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/k
					TRYING: k
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ui/l/k/e
					TRYING: k
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					RESULT:  ['k']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/c/h
					TRYING: c
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					> version: s/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/c/h
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/e/ch
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/c/h
					TRYING: c
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/c/h
					TRYING: c
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
				ANALYSING: sƿilch
					resolving (8)
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
				ANALYSING: sƿillc
					resolving (8)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, k, _, ll, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					> version: s/_/ƿ/i/ll/c
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/c/ch
					TRYING: c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, ch, k, cch, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['c']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/c/h
					TRYING: c
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/c/h/e
					TRYING: c
					> version: s/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, k, _, l, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/c/h
					TRYING: c
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, k, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/c/h
					TRYING: c
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, k, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, k, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
			___CCVCCCV : 4___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch'}
					RESULT:  ['c', 'cch']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, cch
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, cch
					> version: s/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, cch
					> version: s/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, cch
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, cch, i
					> version: s/_/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, cch, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
s/l/i/k/_/e(CCACAV)
s/l/i/k/_/e(CCACAV)
s/_/l/i/_/k/e(CACAACV)
s/_/l/i/_/k/e(CACAACV)
s/l/_/i/_/k/e(CCAAACV)
s/l/_/i/_/k/e(CCAAACV)
s/_/_/l/_/i/k/e(CAACAACV)
s/_/_/l/_/i/k/e(CAACAACV)
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, cch
					> version: s/_/o/ch
					> version: s/o/_/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, cch
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: c
					> version: s/_/_/o/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/ch
					> version: s/_/u/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/_/h(CAACAC)
s/_/u/c/_/h(CAACAC)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/_/e(CACCAV)
s/u/c/h/_/e(CACCAV)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/_/h/e(CAACACV)
s/_/u/c/_/h/e(CAACACV)
s/_/u/ch/_/e(CAACAV)
s/_/u/ch/_/e(CAACAV)
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/c/h
					TRYING: c
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: c
					> version: s/u/i/l/c
					TRYING: c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/l/_/k/e(CAACACV)
s/u/i/l/_/k/e(CAACACV)
s/ui/l/k/_/e(CVCCAV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/ui/l/_/k/e(CAVCACV)
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/c/h
					TRYING: c
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					> version: s/_/w/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/c/h
					TRYING: c
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/c/h
					TRYING: c
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/w/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					RESULT:  ['c']
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					TRYING: c
					> version: s/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					RESULT:  ['c']
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/c/h
					TRYING: c
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/l/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/i/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/c/h
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/i/_/l/ch
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/_/i/l/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> ch, k, cch, _, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/i/l/_/k(CCACAC)
s/w/i/l/_/k(CCACAC)
s/_/w/i/_/l/k(CACAACC)
s/_/w/i/_/l/k(CACAACC)
s/w/i/_/_/l/k(CCAAACC)
s/w/i/_/_/l/k(CCAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/ƿ/i/ll/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					> version: s/_/ƿ/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					> version: s/ƿ/i/_/ll/c
					TRYING: ll
					adding blocked set: C = C >> ch, cch, _, ll, c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					> version: s/_/ƿ/_/i/ll/c
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					RESULT:  ['c']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					> version: s/_/ƿ/u/c
					TRYING: c
					RESULT:  ['c']
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/c/c/h
					TRYING: c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					> version: s/_/ƿ/u/cch
					TRYING: cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'cch', 'ch'}
					RESULT:  ['c', 'cch', 'ch']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/h
					TRYING: c
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, cch, _, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, cch, _, c
					RESULT:  ['c']
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					TRYING: c
					> version: s/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> ch, cch, _, l, c
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, cch, _, c
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> ch, u, cch, _, c
					RESULT:  ['c']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/c/h
					TRYING: c
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> ch, cch, _, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/c/h
					TRYING: c
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, cch, _, c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: z/_/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> ch, cch, _, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: _/_/z/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					RESULT:  ['c', 'ch']
			___CCVCCCV : 5___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'u', 'ch'}
					RESULT:  ['c', 'u', 'ch']
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
				ANALYSING: slike
					resolving (16)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/l/_/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/l/i/k/_/e
					TRYING: e
					> version: s/l/i/k/_/e
					TRYING: e
					> version: s/_/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/l/_/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/l/_/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, u, _, c, i
					> version: s/_/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, u, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/_/i/k/e(CCAACV)
s/l/_/i/k/e(CCAACV)
s/_/_/l/i/k/e(CAACACV)
s/_/_/l/i/k/e(CAACACV)
s/l/i/k/_/e(CCACAV)
s/l/i/k/_/e(CCACAV)
s/_/l/i/_/k/e(CACAACV)
s/_/l/i/_/k/e(CACAACV)
s/l/_/i/_/k/e(CCAAACV)
s/l/_/i/_/k/e(CCAAACV)
s/_/_/l/_/i/k/e(CAACAACV)
s/_/_/l/_/i/k/e(CAACAACV)
s/l/i/k/e/_(CCACVA)
s/l/i/k/e/_(CCACVA)
s/_/l/i/k/_/e(CACACAV)
s/_/l/i/k/_/e(CACACAV)
s/l/_/i/k/_/e(CCAACAV)
s/l/_/i/k/_/e(CCAACAV)
s/_/_/l/i/_/k/e(CAACAACV)
s/_/_/l/i/_/k/e(CAACAACV)
s/l/i/k/_/_/e(CCACAAV)
s/l/i/k/_/_/e(CCACAAV)
s/_/l/i/_/_/k/e(CACAAACV)
s/_/l/i/_/_/k/e(CACAAACV)
s/l/_/i/_/_/k/e(CCAAAACV)
s/l/_/i/_/_/k/e(CCAAAACV)
s/_/_/l/_/_/i/k/e(CAACAAACV)
s/_/_/l/_/_/i/k/e(CAACAAACV)
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/_/o/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch', '_']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/h/_(CAVCCA)
s/_/o/ch/_(CAVCA)
s/o/_/c/h/_(CVACCA)
s/o/_/ch/_(CVACA)
s/_/_/o/c/_/h(CAAVCAC)
s/_/_/o/ch/_(CAAVCA)
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/h/_
					> version: s/u/c/h/_
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/ch/_
					> version: s/_/u/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/_/h(CAACAC)
s/_/u/c/_/h(CAACAC)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/h/_(CAACCA)
s/_/u/c/h/_(CAACCA)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/h/_/_(CACCAA)
s/u/c/h/_/_(CACCAA)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/c/_/_/h(CAACAAC)
s/_/u/c/_/_/h(CAACAAC)
s/_/u/ch/_/_(CAACAA)
s/_/u/ch/_/_(CAACAA)
				ANALYSING: suche
					resolving (16)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					> version: s/u/c/h/_/e
					TRYING: e
					> version: s/u/c/h/_/e
					TRYING: e
					> version: s/u/ch/e/_
					> version: s/u/ch/e/_
					> version: s/_/u/c/_/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/c/_/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/ch/_/e
					TRYING: e
					> version: s/_/u/ch/_/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_', 'e']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/h/_/e(CACCAV)
s/u/c/h/_/e(CACCAV)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/_/h/e(CAACACV)
s/_/u/c/_/h/e(CAACACV)
s/_/u/ch/_/e(CAACAV)
s/_/u/ch/_/e(CAACAV)
s/u/c/h/e/_(CACCVA)
s/u/c/h/e/_(CACCVA)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/c/h/_/e(CAACCAV)
s/_/u/ch/e/_(CAACVA)
s/_/u/ch/e/_(CAACVA)
s/u/c/h/_/_/e(CACCAAV)
s/u/c/h/_/_/e(CACCAAV)
s/u/ch/e/_/_(CACVAA)
s/u/ch/e/_/_(CACVAA)
s/_/u/c/_/_/h/e(CAACAACV)
s/_/u/c/_/_/h/e(CAACAACV)
s/_/u/ch/_/_/e(CAACAAV)
s/_/u/ch/_/_/e(CAACAAV)
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/c/h/_(CAACCA)
s/u/i/c/h/_(CAACCA)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/ch/_(CAAACA)
s/_/u/i/ch/_(CAAACA)
s/_/ui/c/h/_(CAVCCA)
s/_/ui/ch/_(CAVCA)
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ui/l/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c', '_']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/l/c/_(CAACCA)
s/u/i/l/c/_(CAACCA)
s/ui/l/c/_(CVCCA)
s/_/u/i/l/_/c(CAAACAC)
s/_/u/i/l/_/c(CAAACAC)
s/_/ui/l/c/_(CAVCCA)
				ANALYSING: suilk
					resolving (12)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ui/l/k
					> version: s/u/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/u/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ui/l/k/_
					> version: s/_/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ui/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/_/k(CAAACAC)
s/_/u/i/l/_/k(CAAACAC)
s/_/ui/l/k/_(CAVCCA)
s/u/i/l/_/_/k(CAACAAC)
s/u/i/l/_/_/k(CAACAAC)
s/ui/l/k/_/_(CVCCAA)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/ui/l/_/_/k(CAVCAAC)
				ANALYSING: suilke
					resolving (12)
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/ui/l/k/e
					TRYING: e
					> version: s/u/i/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/u/i/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/ui/l/k/_/e
					TRYING: e
					> version: s/_/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ui/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/l/_/k/e(CAACACV)
s/u/i/l/_/k/e(CAACACV)
s/ui/l/k/_/e(CVCCAV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/ui/l/_/k/e(CAVCACV)
s/u/i/l/k/_/e(CAACCAV)
s/u/i/l/k/_/e(CAACCAV)
s/ui/l/k/e/_(CVCCVA)
s/_/u/i/l/_/k/e(CAAACACV)
s/_/u/i/l/_/k/e(CAAACACV)
s/_/ui/l/k/_/e(CAVCCAV)
s/u/i/l/_/_/k/e(CAACAACV)
s/u/i/l/_/_/k/e(CAACAACV)
s/ui/l/k/_/_/e(CVCCAAV)
s/_/u/i/_/_/l/k/e(CAAAAACCV)
s/_/u/i/_/_/l/k/e(CAAAAACCV)
s/_/ui/l/_/_/k/e(CAVCAACV)
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/c/h/_(CAACCA)
s/u/y/c/h/_(CAACCA)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/ch/_(CAAACA)
s/_/u/y/ch/_(CAAACA)
s/_/uy/c/h/_(CAVCCA)
s/_/uy/ch/_(CAVCA)
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/e/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch', '_']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/c/h/_(CCVCCA)
s/w/e/ch/_(CCVCA)
s/_/w/e/c/_/h(CACVCAC)
s/_/w/e/ch/_(CACVCA)
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/ch/_(CACACA)
s/_/ƿ/i/ch/_(CACACA)
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/c/h/_(CCACCA)
s/w/i/c/h/_(CCACCA)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/ch/_(CACACA)
s/_/w/i/ch/_(CACACA)
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/ƿ/i/l/c/_(CCACCA)
s/ƿ/i/l/c/_(CCACCA)
s/_/ƿ/i/l/_/c(CACACAC)
s/_/ƿ/i/l/_/c(CACACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/i/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/w/i/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/w/i/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/w/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
s/w/i/l/c/_(CCACCA)
s/w/i/l/c/_(CCACCA)
s/_/w/i/l/_/c(CACACAC)
s/_/w/i/l/_/c(CACACAC)
s/w/i/_/l/_/c(CCAACAC)
s/w/i/_/l/_/c(CCAACAC)
s/_/w/_/i/_/l/c(CACAAACC)
s/_/w/_/i/_/l/c(CACAAACC)
				ANALYSING: sƿilch
					resolving (16)
					> version: s/ƿ/i/l/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/l/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/l/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/l/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/l/ch
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/ch/_(CCACCA)
s/ƿ/i/l/ch/_(CCACCA)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
				ANALYSING: swilk
					resolving (16)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/w/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/w/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/w/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/w/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/w/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, u, k, _, c
					> version: s/_/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/w/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/w/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/w/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, u, _, c, i
					> version: s/_/w/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, u, _, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/i/l/_/k(CCACAC)
s/w/i/l/_/k(CCACAC)
s/_/w/i/_/l/k(CACAACC)
s/_/w/i/_/l/k(CACAACC)
s/w/i/_/_/l/k(CCAAACC)
s/w/i/_/_/l/k(CCAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/w/i/l/k/_(CCACCA)
s/w/i/l/k/_(CCACCA)
s/_/w/i/l/_/k(CACACAC)
s/_/w/i/l/_/k(CACACAC)
s/w/i/_/l/_/k(CCAACAC)
s/w/i/_/l/_/k(CCAACAC)
s/_/w/_/i/_/l/k(CACAAACC)
s/_/w/_/i/_/l/k(CACAAACC)
s/w/i/l/_/_/k(CCACAAC)
s/w/i/l/_/_/k(CCACAAC)
s/_/w/i/_/_/l/k(CACAAACC)
s/_/w/i/_/_/l/k(CACAAACC)
s/w/i/_/_/_/l/k(CCAAAACC)
s/w/i/_/_/_/l/k(CCAAAACC)
s/_/w/_/_/_/i/l/k(CACAAAACC)
s/_/w/_/_/_/i/l/k(CACAAAACC)
				ANALYSING: sƿillc
					resolving (16)
					> version: s/ƿ/i/l/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/l/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/i/ll/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/ƿ/i/_/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/ƿ/i/_/ll/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/i/_/ll/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, u, _, ll, c
					> version: s/_/ƿ/_/i/ll/c
					TRYING: ll
					adding blocked set: C = C >> h, ch, u, _, ll, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/ll/c/_(CCACCA)
s/ƿ/i/ll/c/_(CCACCA)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
				ANALYSING: sƿucch
					resolving (16)
					> version: s/ƿ/u/c/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/u/c/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/c/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/ch/_(CACACA)
s/_/ƿ/u/ch/_(CACACA)
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
s/ƿ/u/c/h/_/e(CCACCAV)
s/ƿ/u/c/h/_/e(CCACCAV)
s/ƿ/u/ch/e/_(CCACVA)
s/ƿ/u/ch/e/_(CCACVA)
s/_/ƿ/u/c/_/h/e(CACACACV)
s/_/ƿ/u/c/_/h/e(CACACACV)
s/_/ƿ/u/ch/_/e(CACACAV)
s/_/ƿ/u/ch/_/e(CACACAV)
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/ƿ/u/l/c/_(CCACCA)
s/ƿ/u/l/c/_(CCACCA)
s/_/ƿ/u/l/_/c(CACACAC)
s/_/ƿ/u/l/_/c(CACACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/u/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/w/u/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/w/u/_/l/c
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: s/_/w/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					> version: s/_/w/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, u, _, l, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
s/w/u/l/c/_(CCACCA)
s/w/u/l/c/_(CCACCA)
s/_/w/u/l/_/c(CACACAC)
s/_/w/u/l/_/c(CACACAC)
s/w/u/_/l/_/c(CCAACAC)
s/w/u/_/l/_/c(CCAACAC)
s/_/w/_/u/_/l/c(CACAAACC)
s/_/w/_/u/_/l/c(CACAAACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: z/_/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/ui/ch
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch', '_']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/c/h/_(CAACCA)
z/u/i/c/h/_(CAACCA)
z/u/i/ch/_(CAACA)
z/u/i/ch/_(CAACA)
z/ui/c/h/_(CVCCA)
z/ui/ch/_(CVCA)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/ch/_(ACAACA)
_/z/u/i/ch/_(ACAACA)
_/z/ui/c/h/_(ACVCCA)
_/z/ui/ch/_(ACVCA)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/ch/_(CAAACA)
z/_/u/i/ch/_(CAAACA)
z/_/ui/c/h/_(CAVCCA)
z/_/ui/ch/_(CAVCA)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/ui/c/_/h(AACVCAC)
_/_/z/ui/ch/_(AACVCA)
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: z/_/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, ch, u, _, c
					> version: _/_/z/uy/ch
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch', '_']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/c/h/_(CAACCA)
z/u/y/c/h/_(CAACCA)
z/u/y/ch/_(CAACA)
z/u/y/ch/_(CAACA)
z/uy/c/h/_(CVCCA)
z/uy/ch/_(CVCA)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/ch/_(ACAACA)
_/z/u/y/ch/_(ACAACA)
_/z/uy/c/h/_(ACVCCA)
_/z/uy/ch/_(ACVCA)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/ch/_(CAAACA)
z/_/u/y/ch/_(CAAACA)
z/_/uy/c/h/_(CAVCCA)
z/_/uy/ch/_(CAVCA)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/uy/c/_/h(AACVCAC)
_/_/z/uy/ch/_(AACVCA)
			___CCVCCCV : 6___
				ANALYSING: sƿucche
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/c/ch
					> version: h/s/ƿ/u/c/ch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/ƿ/u/cch
					> version: h/_/s/ƿ/u/cch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ch
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ch
					> version: h/_/s/ƿ/u/cch
					> version: h/_/s/ƿ/u/cch
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/_/u/cch
					> version: h/s/ƿ/_/u/cch
					> version: h/s/ƿ/_/u/c/ch
					TRYING: ch
					> version: h/s/ƿ/_/u/c/ch
					TRYING: ch
					> version: h/s/ƿ/_/u/cch
					> version: h/s/ƿ/_/u/cch
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: c
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: c
					> version: h/_/s/_/ƿ/u/cch
					TRYING: cch
					> version: h/_/s/_/ƿ/u/cch
					TRYING: cch
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/ƿ/u/c/c/_/h(CCCACCAC)
h/s/ƿ/u/c/c/_/h(CCCACCAC)
h/s/ƿ/u/cch/_(CCCACA)
h/s/ƿ/u/cch/_(CCCACA)
h/s/ƿ/u/c/ch/_(CCCACCA)
h/s/ƿ/u/c/ch/_(CCCACCA)
h/s/ƿ/u/cch/_(CCCACA)
h/s/ƿ/u/cch/_(CCCACA)
h/_/s/ƿ/u/c/_/c/h(CACCACACC)
h/_/s/ƿ/u/c/_/c/h(CACCACACC)
h/_/s/ƿ/u/cch/_(CACCACA)
h/_/s/ƿ/u/cch/_(CACCACA)
h/_/s/ƿ/u/c/_/ch(CACCACAC)
h/_/s/ƿ/u/c/_/ch(CACCACAC)
h/_/s/ƿ/u/cch/_(CACCACA)
h/_/s/ƿ/u/cch/_(CACCACA)
h/s/ƿ/_/u/c/_/c/h(CCCAACACC)
h/s/ƿ/_/u/c/_/c/h(CCCAACACC)
h/s/ƿ/_/u/cch/_(CCCAACA)
h/s/ƿ/_/u/cch/_(CCCAACA)
h/s/ƿ/_/u/c/_/ch(CCCAACAC)
h/s/ƿ/_/u/c/_/ch(CCCAACAC)
h/s/ƿ/_/u/cch/_(CCCAACA)
h/s/ƿ/_/u/cch/_(CCCAACA)
h/_/s/_/ƿ/u/_/c/c/h(CACACAACCC)
h/_/s/_/ƿ/u/_/c/c/h(CACACAACCC)
h/_/s/_/ƿ/u/_/cch(CACACAAC)
h/_/s/_/ƿ/u/_/cch(CACACAAC)
h/_/s/_/ƿ/u/_/c/ch(CACACAACC)
h/_/s/_/ƿ/u/_/c/ch(CACACAACC)
h/_/s/_/ƿ/u/_/cch(CACACAAC)
h/_/s/_/ƿ/u/_/cch(CACACAAC)
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 'h/s/ƿ/u/c/c/_/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 'h/s/ƿ/u/c/c/_/h', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 'h/s/ƿ/u/c/ch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 'h/s/ƿ/u/c/ch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['h', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/_/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/_/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 'h/_/s/ƿ/u/c/_/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 'h/_/s/ƿ/u/c/_/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/_/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				{'string': 'h/_/s/ƿ/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', '_', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/_/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/_/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				{'string': 'h/s/ƿ/_/u/c/_/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				{'string': 'h/s/ƿ/_/u/c/_/ch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', '_', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/_/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				{'string': 'h/s/ƿ/_/u/cch/_', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch', '_']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/_/s/_/ƿ/u/_/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/_/s/_/ƿ/u/_/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/_/c', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/_/s/_/ƿ/u/_/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/_/s/_/ƿ/u/_/cch', 'rgx': '((h))/((_))/((ƿ))/((_))/((c)|(cch))/((c)|(u)|(ch))/((_))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', '_', 'cch']
				ANALYSING: shuc
					resolving (28)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/c/_/_
					> version: s/h/u/c/_/_
					> version: s/hu/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/c/_/_(CCACAA)
s/h/u/c/_/_(CCACAA)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
s/h/u/c/_/_/_(CCACAAA)
s/h/u/c/_/_/_(CCACAAA)
s/hu/c/_/_/_(CCCAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
sh/u/c/_/_/_(CACAAA)
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_']
				{'string': 's/h/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_', '_']
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['s', 'h', 'u', 'c', '_', '_', '_']
				{'string': 's/h/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				version split: ['s', 'h', 'u', 'c', '_', '_', '_']
				{'string': 's/h/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				version split: ['s', 'hu', 'c', '_', '_', '_']
				{'string': 's/hu/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_', '_']
				{'string': 'sh/u/c/_/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((c))/((_))/((_))/((_))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_', '_']
				ANALYSING: slike
					resolving (32)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					> version: s/_/l/i/k/e
					> version: s/l/_/i/k/e
					> version: s/l/_/i/k/e
					> version: s/_/_/l/i/k/e
					TRYING: e
					> version: s/_/_/l/i/k/e
					TRYING: e
					> version: s/l/i/k/_/e
					> version: s/l/i/k/_/e
					> version: s/_/l/i/_/k/e
					TRYING: e
					> version: s/_/l/i/_/k/e
					TRYING: e
					> version: s/l/_/i/_/k/e
					TRYING: e
					> version: s/l/_/i/_/k/e
					TRYING: e
					> version: s/_/_/l/_/i/k/e
					TRYING: k
					> version: s/_/_/l/_/i/k/e
					TRYING: k
					> version: s/l/i/k/e/_
					> version: s/l/i/k/e/_
					> version: s/_/l/i/k/_/e
					TRYING: e
					> version: s/_/l/i/k/_/e
					TRYING: e
					> version: s/l/_/i/k/_/e
					TRYING: e
					> version: s/l/_/i/k/_/e
					TRYING: e
					> version: s/_/_/l/i/_/k/e
					TRYING: k
					> version: s/_/_/l/i/_/k/e
					TRYING: k
					> version: s/l/i/k/_/_/e
					TRYING: e
					> version: s/l/i/k/_/_/e
					TRYING: e
					> version: s/_/l/i/_/_/k/e
					TRYING: k
					> version: s/_/l/i/_/_/k/e
					TRYING: k
					> version: s/l/_/i/_/_/k/e
					TRYING: k
					> version: s/l/_/i/_/_/k/e
					TRYING: k
					> version: s/_/_/l/_/_/i/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					> version: s/_/_/l/_/_/i/k/e
					TRYING: i
					>>> MULTIPLE RESOLVE OPTIONS: {'e', 'i'}
					RESULT:  ['e', 'i']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', '_', 'i', 'k', 'e']
				{'string': 's/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/_/l/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/l/_/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/l/_/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/i/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/l/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', '_', 'e']
				version split: ['s', 'l', '_', 'i', 'k', '_', 'e']
				{'string': 's/l/_/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', '_', 'e']
				version split: ['s', 'l', '_', 'i', 'k', '_', 'e']
				{'string': 's/l/_/i/k/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', 'k', '_', 'e']
				version split: ['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/_/l/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/_/l/i/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', '_', '_', 'e']
				{'string': 's/l/i/k/_/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', '_', 'e']
				version split: ['s', 'l', 'i', 'k', '_', '_', 'e']
				{'string': 's/l/i/k/_/_/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', '_', 'e']
				version split: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/_/l/i/_/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/_/l/i/_/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				{'string': 's/l/_/i/_/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				version split: ['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				{'string': 's/l/_/i/_/_/k/e', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', 'l', '_', 'i', '_', '_', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/_/i/k', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				version split: ['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/_/l/_/_/i/k', 'rgx': '((s))/((_))/((_))/((k))/((_))/((_))/((e)|(i))$'}
				_____REMOVING________['s', '_', '_', 'l', '_', '_', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (16)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/_/c/h
					> version: s/o/_/ch
					> version: s/_/_/o/c/h
					> version: s/_/_/o/ch
					> version: s/o/c/h/_
					> version: s/o/ch/_
					> version: s/_/o/c/h/_
					> version: s/_/o/ch/_
					> version: s/o/_/c/h/_
					> version: s/o/_/ch/_
					> version: s/_/_/o/c/_/h
					TRYING: h
					> version: s/_/_/o/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_', '_']
				adding dashed alternative: ['s', 'o', '_', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'o', '_', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'o', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', '_', 'o', 'ch', '_', '_']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/_/c/h(CVACC)
s/o/_/ch(CVAC)
s/_/_/o/c/h(CAAVCC)
s/_/_/o/ch(CAAVC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/h/_(CAVCCA)
s/_/o/ch/_(CAVCA)
s/o/_/c/h/_(CVACCA)
s/o/_/ch/_(CVACA)
s/_/_/o/c/_/h(CAAVCAC)
s/_/_/o/ch/_(CAAVCA)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/h/_(CAVCCA)
s/_/o/ch/_(CAVCA)
s/o/_/c/h/_(CVACCA)
s/o/_/ch/_(CVACA)
s/_/_/o/c/h/_(CAAVCCA)
s/_/_/o/ch/_(CAAVCA)
s/o/c/h/_/_(CVCCAA)
s/o/ch/_/_(CVCAA)
s/_/o/c/h/_/_(CAVCCAA)
s/_/o/ch/_/_(CAVCAA)
s/o/_/c/h/_/_(CVACCAA)
s/o/_/ch/_/_(CVACAA)
s/_/_/o/c/_/_/h(CAAVCAAC)
s/_/_/o/ch/_/_(CAAVCAA)
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', '_', 'c', 'h']
				{'string': 's/o/_/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h']
				version split: ['s', 'o', '_', 'ch']
				{'string': 's/o/_/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch']
				version split: ['s', '_', '_', 'o', 'c', 'h']
				{'string': 's/_/_/o/c/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h']
				version split: ['s', '_', '_', 'o', 'ch']
				{'string': 's/_/_/o/ch', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h', '_']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', '_', 'c', 'h', '_']
				{'string': 's/o/_/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h', '_']
				version split: ['s', 'o', '_', 'ch', '_']
				{'string': 's/o/_/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_']
				version split: ['s', '_', '_', 'o', 'c', '_', 'h']
				{'string': 's/_/_/o/c/_/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', '_', 'h']
				version split: ['s', '_', '_', 'o', 'ch', '_']
				{'string': 's/_/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch', '_']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h', '_']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', '_', 'c', 'h', '_']
				{'string': 's/o/_/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h', '_']
				version split: ['s', 'o', '_', 'ch', '_']
				{'string': 's/o/_/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_']
				version split: ['s', '_', '_', 'o', 'c', 'h', '_']
				{'string': 's/_/_/o/c/h/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', 'h', '_']
				version split: ['s', '_', '_', 'o', 'ch', '_']
				{'string': 's/_/_/o/ch/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch', '_']
				version split: ['s', 'o', 'c', 'h', '_', '_']
				{'string': 's/o/c/h/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_', '_']
				version split: ['s', 'o', 'ch', '_', '_']
				{'string': 's/o/ch/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', 'ch', '_', '_']
				version split: ['s', '_', 'o', 'c', 'h', '_', '_']
				{'string': 's/_/o/c/h/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h', '_', '_']
				version split: ['s', '_', 'o', 'ch', '_', '_']
				{'string': 's/_/o/ch/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_', '_']
				version split: ['s', 'o', '_', 'c', 'h', '_', '_']
				{'string': 's/o/_/c/h/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'c', 'h', '_', '_']
				version split: ['s', 'o', '_', 'ch', '_', '_']
				{'string': 's/o/_/ch/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'o', '_', 'ch', '_', '_']
				version split: ['s', '_', '_', 'o', 'c', '_', '_', 'h']
				{'string': 's/_/_/o/c/_/_/h', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'c', '_', '_', 'h']
				version split: ['s', '_', '_', 'o', 'ch', '_', '_']
				{'string': 's/_/_/o/ch/_/_', 'rgx': '((s))/((_))/((_))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'o', 'ch', '_', '_']
				ANALYSING: such
					resolving (32)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/h/_
					> version: s/u/c/h/_
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/c/_/h
					> version: s/_/u/c/_/h
					> version: s/_/u/ch/_
					> version: s/_/u/ch/_
					> version: s/u/c/h/_
					> version: s/u/c/h/_
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/c/h/_
					> version: s/_/u/c/h/_
					> version: s/_/u/ch/_
					> version: s/_/u/ch/_
					> version: s/u/c/h/_/_
					> version: s/u/c/h/_/_
					> version: s/u/ch/_/_
					> version: s/u/ch/_/_
					> version: s/_/u/c/_/_/h
					TRYING: h
					> version: s/_/u/c/_/_/h
					TRYING: h
					> version: s/_/u/ch/_/_
					> version: s/_/u/ch/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', '_', '_']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/_/h(CAACAC)
s/_/u/c/_/h(CAACAC)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/h/_(CAACCA)
s/_/u/c/h/_(CAACCA)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/h/_/_(CACCAA)
s/u/c/h/_/_(CACCAA)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/c/_/_/h(CAACAAC)
s/_/u/c/_/_/h(CAACAAC)
s/_/u/ch/_/_(CAACAA)
s/_/u/ch/_/_(CAACAA)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/h/_(CAACCA)
s/_/u/c/h/_(CAACCA)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/h/_/_(CACCAA)
s/u/c/h/_/_(CACCAA)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/c/_/h/_(CAACACA)
s/_/u/c/_/h/_(CAACACA)
s/_/u/ch/_/_(CAACAA)
s/_/u/ch/_/_(CAACAA)
s/u/c/h/_/_(CACCAA)
s/u/c/h/_/_(CACCAA)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/c/h/_/_(CAACCAA)
s/_/u/c/h/_/_(CAACCAA)
s/_/u/ch/_/_(CAACAA)
s/_/u/ch/_/_(CAACAA)
s/u/c/h/_/_/_(CACCAAA)
s/u/c/h/_/_/_(CACCAAA)
s/u/ch/_/_/_(CACAAA)
s/u/ch/_/_/_(CACAAA)
s/_/u/c/_/_/_/h(CAACAAAC)
s/_/u/c/_/_/_/h(CAACAAAC)
s/_/u/ch/_/_/_(CAACAAA)
s/_/u/ch/_/_/_(CAACAAA)
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'c', '_', '_', 'h']
				{'string': 's/_/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'c', '_', '_', 'h']
				{'string': 's/_/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_']
				{'string': 's/_/u/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h', '_']
				{'string': 's/_/u/c/_/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h', '_']
				{'string': 's/_/u/c/_/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', '_']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_']
				{'string': 's/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', '_']
				{'string': 's/_/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', '_']
				{'string': 's/_/u/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', '_']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'ch', '_', '_']
				{'string': 's/_/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_', '_']
				{'string': 's/u/c/h/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_', '_']
				{'string': 's/u/c/h/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_', '_']
				{'string': 's/u/ch/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_', '_']
				{'string': 's/u/ch/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_', '_']
				version split: ['s', '_', 'u', 'c', '_', '_', '_', 'h']
				{'string': 's/_/u/c/_/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', '_', 'h']
				version split: ['s', '_', 'u', 'c', '_', '_', '_', 'h']
				{'string': 's/_/u/c/_/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', '_', 'h']
				version split: ['s', '_', 'u', 'ch', '_', '_', '_']
				{'string': 's/_/u/ch/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				version split: ['s', '_', 'u', 'ch', '_', '_', '_']
				{'string': 's/_/u/ch/_/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((_))$'}
				ANALYSING: suche
					resolving (32)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					> version: s/_/u/c/h/e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					> version: s/u/c/h/_/e
					> version: s/u/c/h/_/e
					> version: s/u/ch/e/_
					> version: s/u/ch/e/_
					> version: s/_/u/c/_/h/e
					TRYING: e
					> version: s/_/u/c/_/h/e
					TRYING: e
					> version: s/_/u/ch/_/e
					> version: s/_/u/ch/_/e
					> version: s/u/c/h/e/_
					> version: s/u/c/h/e/_
					> version: s/u/ch/e/_
					> version: s/u/ch/e/_
					> version: s/_/u/c/h/_/e
					TRYING: e
					> version: s/_/u/c/h/_/e
					TRYING: e
					> version: s/_/u/ch/e/_
					> version: s/_/u/ch/e/_
					> version: s/u/c/h/_/_/e
					TRYING: e
					> version: s/u/c/h/_/_/e
					TRYING: e
					> version: s/u/ch/e/_/_
					> version: s/u/ch/e/_/_
					> version: s/_/u/c/_/_/h/e
					TRYING: h
					> version: s/_/u/c/_/_/h/e
					TRYING: h
					> version: s/_/u/ch/_/_/e
					TRYING: e
					> version: s/_/u/ch/_/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'c', 'h', 'e', '_']
				{'string': 's/u/c/h/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'c', 'h', '_', 'e']
				{'string': 's/_/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', '_', 'e']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'ch', 'e', '_']
				{'string': 's/_/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'c', 'h', '_', '_', 'e']
				{'string': 's/u/c/h/_/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_', 'e']
				version split: ['s', 'u', 'c', 'h', '_', '_', 'e']
				{'string': 's/u/c/h/_/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', '_', 'e']
				version split: ['s', 'u', 'ch', 'e', '_', '_']
				{'string': 's/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_', '_']
				version split: ['s', 'u', 'ch', 'e', '_', '_']
				{'string': 's/u/ch/e/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_', '_']
				version split: ['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				{'string': 's/_/u/c/_/_/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				{'string': 's/_/u/c/_/_/h/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', '_', '_', 'e']
				{'string': 's/_/u/ch/_/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				version split: ['s', '_', 'u', 'ch', '_', '_', 'e']
				{'string': 's/_/u/ch/_/_/e', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((_))/((_))/((e))$'}
				ANALYSING: suich
					resolving (24)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					> version: s/_/u/i/c/h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					> version: s/u/i/c/h/_
					> version: s/u/i/c/h/_
					> version: s/u/i/ch/_
					> version: s/u/i/ch/_
					> version: s/ui/c/h/_
					> version: s/ui/ch/_
					> version: s/_/u/i/c/_/h
					TRYING: h
					> version: s/_/u/i/c/_/h
					TRYING: h
					> version: s/_/u/i/ch/_
					> version: s/_/u/i/ch/_
					> version: s/_/ui/c/h/_
					> version: s/_/ui/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_', '_']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/c/h/_(CAACCA)
s/u/i/c/h/_(CAACCA)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/c/_/h(CAAACAC)
s/_/u/i/ch/_(CAAACA)
s/_/u/i/ch/_(CAAACA)
s/_/ui/c/h/_(CAVCCA)
s/_/ui/ch/_(CAVCA)
s/u/i/c/h/_(CAACCA)
s/u/i/c/h/_(CAACCA)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/c/h/_(CAAACCA)
s/_/u/i/c/h/_(CAAACCA)
s/_/u/i/ch/_(CAAACA)
s/_/u/i/ch/_(CAAACA)
s/_/ui/c/h/_(CAVCCA)
s/_/ui/ch/_(CAVCA)
s/u/i/c/h/_/_(CAACCAA)
s/u/i/c/h/_/_(CAACCAA)
s/u/i/ch/_/_(CAACAA)
s/u/i/ch/_/_(CAACAA)
s/ui/c/h/_/_(CVCCAA)
s/ui/ch/_/_(CVCAA)
s/_/u/i/c/_/_/h(CAAACAAC)
s/_/u/i/c/_/_/h(CAAACAAC)
s/_/u/i/ch/_/_(CAAACAA)
s/_/u/i/ch/_/_(CAAACAA)
s/_/ui/c/h/_/_(CAVCCAA)
s/_/ui/ch/_/_(CAVCAA)
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 's/_/u/i/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 's/_/u/i/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'ui', 'c', 'h', '_']
				{'string': 's/_/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h', '_']
				version split: ['s', '_', 'ui', 'ch', '_']
				{'string': 's/_/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_']
				{'string': 's/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 's/_/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 's/_/u/i/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_']
				{'string': 's/_/u/i/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_']
				version split: ['s', '_', 'ui', 'c', 'h', '_']
				{'string': 's/_/ui/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h', '_']
				version split: ['s', '_', 'ui', 'ch', '_']
				{'string': 's/_/ui/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_', '_']
				{'string': 's/u/i/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'i', 'c', 'h', '_', '_']
				{'string': 's/u/i/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'i', 'ch', '_', '_']
				{'string': 's/u/i/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_', '_']
				version split: ['s', 'u', 'i', 'ch', '_', '_']
				{'string': 's/u/i/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_', '_']
				version split: ['s', 'ui', 'c', 'h', '_', '_']
				{'string': 's/ui/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_', '_']
				version split: ['s', 'ui', 'ch', '_', '_']
				{'string': 's/ui/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/u/i/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/u/i/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'i', 'ch', '_', '_']
				{'string': 's/_/u/i/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'i', 'ch', '_', '_']
				{'string': 's/_/u/i/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'ui', 'c', 'h', '_', '_']
				{'string': 's/_/ui/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h', '_', '_']
				version split: ['s', '_', 'ui', 'ch', '_', '_']
				{'string': 's/_/ui/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_', '_']
				ANALYSING: suilc
					resolving (12)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					> version: s/_/u/i/l/c
					> version: s/_/ui/l/c
					> version: s/u/i/l/c/_
					> version: s/u/i/l/c/_
					> version: s/ui/l/c/_
					> version: s/_/u/i/l/_/c
					TRYING: c
					> version: s/_/u/i/l/_/c
					TRYING: c
					> version: s/_/ui/l/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c', '_', '_']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/l/c/_(CAACCA)
s/u/i/l/c/_(CAACCA)
s/ui/l/c/_(CVCCA)
s/_/u/i/l/_/c(CAAACAC)
s/_/u/i/l/_/c(CAAACAC)
s/_/ui/l/c/_(CAVCCA)
s/u/i/l/c/_(CAACCA)
s/u/i/l/c/_(CAACCA)
s/ui/l/c/_(CVCCA)
s/_/u/i/l/c/_(CAAACCA)
s/_/u/i/l/c/_(CAAACCA)
s/_/ui/l/c/_(CAVCCA)
s/u/i/l/c/_/_(CAACCAA)
s/u/i/l/c/_/_(CAACCAA)
s/ui/l/c/_/_(CVCCAA)
s/_/u/i/l/_/_/c(CAAACAAC)
s/_/u/i/l/_/_/c(CAAACAAC)
s/_/ui/l/c/_/_(CAVCCAA)
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'c']
				{'string': 's/_/u/i/l/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'c']
				{'string': 's/_/u/i/l/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ui', 'l', 'c', '_']
				{'string': 's/_/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_']
				{'string': 's/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'c', '_']
				{'string': 's/_/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'c', '_']
				{'string': 's/_/u/i/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ui', 'l', 'c', '_']
				{'string': 's/_/ui/l/c/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_', '_']
				{'string': 's/u/i/l/c/_/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_', '_']
				version split: ['s', 'u', 'i', 'l', 'c', '_', '_']
				{'string': 's/u/i/l/c/_/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c', '_', '_']
				version split: ['s', 'ui', 'l', 'c', '_', '_']
				{'string': 's/ui/l/c/_/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/u/i/l/_/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				version split: ['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/u/i/l/_/_/c', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', '_', 'c']
				version split: ['s', '_', 'ui', 'l', 'c', '_', '_']
				{'string': 's/_/ui/l/c/_/_', 'rgx': '((s))/((_))/((u))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c', '_', '_']
				ANALYSING: suilk
					resolving (24)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					> version: s/_/u/i/l/k
					> version: s/_/ui/l/k
					> version: s/u/i/l/_/k
					> version: s/u/i/l/_/k
					> version: s/ui/l/k/_
					> version: s/_/u/i/_/l/k
					TRYING: k
					> version: s/_/u/i/_/l/k
					TRYING: k
					> version: s/_/ui/l/_/k
					> version: s/u/i/l/k/_
					> version: s/u/i/l/k/_
					> version: s/ui/l/k/_
					> version: s/_/u/i/l/_/k
					TRYING: k
					> version: s/_/u/i/l/_/k
					TRYING: k
					> version: s/_/ui/l/k/_
					> version: s/u/i/l/_/_/k
					TRYING: k
					> version: s/u/i/l/_/_/k
					TRYING: k
					> version: s/ui/l/k/_/_
					> version: s/_/u/i/_/_/l/k
					TRYING: l
					> version: s/_/u/i/_/_/l/k
					TRYING: l
					> version: s/_/ui/l/_/_/k
					TRYING: k
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', '_', '_', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/_/k(CAAACAC)
s/_/u/i/l/_/k(CAAACAC)
s/_/ui/l/k/_(CAVCCA)
s/u/i/l/_/_/k(CAACAAC)
s/u/i/l/_/_/k(CAACAAC)
s/ui/l/k/_/_(CVCCAA)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/ui/l/_/_/k(CAVCAAC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/k/_(CAAACCA)
s/_/u/i/l/k/_(CAAACCA)
s/_/ui/l/k/_(CAVCCA)
s/u/i/l/_/k/_(CAACACA)
s/u/i/l/_/k/_(CAACACA)
s/ui/l/k/_/_(CVCCAA)
s/_/u/i/_/l/_/k(CAAAACAC)
s/_/u/i/_/l/_/k(CAAAACAC)
s/_/ui/l/_/k/_(CAVCACA)
s/u/i/l/k/_/_(CAACCAA)
s/u/i/l/k/_/_(CAACCAA)
s/ui/l/k/_/_(CVCCAA)
s/_/u/i/l/_/_/k(CAAACAAC)
s/_/u/i/l/_/_/k(CAAACAAC)
s/_/ui/l/k/_/_(CAVCCAA)
s/u/i/l/_/_/_/k(CAACAAAC)
s/u/i/l/_/_/_/k(CAACAAAC)
s/ui/l/k/_/_/_(CVCCAAA)
s/_/u/i/_/_/_/l/k(CAAAAAACC)
s/_/u/i/_/_/_/l/k(CAAAAAACC)
s/_/ui/l/_/_/_/k(CAVCAAAC)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', 'k']
				{'string': 's/_/ui/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'ui', 'l', 'k', '_']
				{'string': 's/_/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_', '_']
				{'string': 's/ui/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', '_', 'k']
				{'string': 's/_/ui/l/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', '_', 'k']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_']
				{'string': 's/_/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', 'k', '_']
				{'string': 's/_/u/i/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'ui', 'l', 'k', '_']
				{'string': 's/_/ui/l/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', '_', 'k', '_']
				{'string': 's/u/i/l/_/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', '_']
				version split: ['s', 'u', 'i', 'l', '_', 'k', '_']
				{'string': 's/u/i/l/_/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_', '_']
				{'string': 's/ui/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_']
				version split: ['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				{'string': 's/_/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				version split: ['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				{'string': 's/_/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', '_', 'k']
				version split: ['s', '_', 'ui', 'l', '_', 'k', '_']
				{'string': 's/_/ui/l/_/k/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_', '_']
				{'string': 's/u/i/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_', '_']
				{'string': 's/u/i/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', '_']
				version split: ['s', 'ui', 'l', 'k', '_', '_']
				{'string': 's/ui/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/_/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/_/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', '_', 'ui', 'l', 'k', '_', '_']
				{'string': 's/_/ui/l/k/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_', '_']
				version split: ['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_', '_', '_']
				{'string': 's/ui/l/k/_/_/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_', '_']
				version split: ['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', '_', '_', 'k']
				{'string': 's/_/ui/l/_/_/_/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', '_', '_', 'k']
				ANALYSING: suilke
					resolving (24)
					> version: s/u/i/l/k/e
					> version: s/u/i/l/k/e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: e
					> version: s/_/ui/l/k/e
					> version: s/u/i/l/_/k/e
					TRYING: e
					> version: s/u/i/l/_/k/e
					TRYING: e
					> version: s/ui/l/k/_/e
					> version: s/_/u/i/_/l/k/e
					TRYING: k
					> version: s/_/u/i/_/l/k/e
					TRYING: k
					> version: s/_/ui/l/_/k/e
					TRYING: e
					> version: s/u/i/l/k/_/e
					TRYING: e
					> version: s/u/i/l/k/_/e
					TRYING: e
					> version: s/ui/l/k/e/_
					> version: s/_/u/i/l/_/k/e
					TRYING: k
					> version: s/_/u/i/l/_/k/e
					TRYING: k
					> version: s/_/ui/l/k/_/e
					TRYING: e
					> version: s/u/i/l/_/_/k/e
					TRYING: k
					> version: s/u/i/l/_/_/k/e
					TRYING: k
					> version: s/ui/l/k/_/_/e
					TRYING: e
					> version: s/_/u/i/_/_/l/k/e
					TRYING: l
					> version: s/_/u/i/_/_/l/k/e
					TRYING: l
					> version: s/_/ui/l/_/_/k/e
					TRYING: k
					RESULT:  ['e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', '_', 'e']
				{'string': 's/ui/l/k/_/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/_/ui/l/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e', '_']
				{'string': 's/ui/l/k/e/_', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/_/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/_/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', '_', 'e']
				{'string': 's/_/ui/l/k/_/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_', 'e']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				{'string': 's/u/i/l/_/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				{'string': 's/u/i/l/_/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', '_', '_', 'e']
				{'string': 's/ui/l/k/_/_/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_', 'e']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				{'string': 's/_/ui/l/_/_/k/e', 'rgx': '((s))/((_))/((u))/((k))/((_))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				ANALYSING: suych
					resolving (24)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					> version: s/_/u/y/c/h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					> version: s/u/y/c/h/_
					> version: s/u/y/c/h/_
					> version: s/u/y/ch/_
					> version: s/u/y/ch/_
					> version: s/uy/c/h/_
					> version: s/uy/ch/_
					> version: s/_/u/y/c/_/h
					TRYING: h
					> version: s/_/u/y/c/_/h
					TRYING: h
					> version: s/_/u/y/ch/_
					> version: s/_/u/y/ch/_
					> version: s/_/uy/c/h/_
					> version: s/_/uy/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'y', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_', '_']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/c/h/_(CAACCA)
s/u/y/c/h/_(CAACCA)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/c/_/h(CAAACAC)
s/_/u/y/ch/_(CAAACA)
s/_/u/y/ch/_(CAAACA)
s/_/uy/c/h/_(CAVCCA)
s/_/uy/ch/_(CAVCA)
s/u/y/c/h/_(CAACCA)
s/u/y/c/h/_(CAACCA)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/c/h/_(CAAACCA)
s/_/u/y/c/h/_(CAAACCA)
s/_/u/y/ch/_(CAAACA)
s/_/u/y/ch/_(CAAACA)
s/_/uy/c/h/_(CAVCCA)
s/_/uy/ch/_(CAVCA)
s/u/y/c/h/_/_(CAACCAA)
s/u/y/c/h/_/_(CAACCAA)
s/u/y/ch/_/_(CAACAA)
s/u/y/ch/_/_(CAACAA)
s/uy/c/h/_/_(CVCCAA)
s/uy/ch/_/_(CVCAA)
s/_/u/y/c/_/_/h(CAAACAAC)
s/_/u/y/c/_/_/h(CAAACAAC)
s/_/u/y/ch/_/_(CAAACAA)
s/_/u/y/ch/_/_(CAAACAA)
s/_/uy/c/h/_/_(CAVCCAA)
s/_/uy/ch/_/_(CAVCAA)
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 's/_/u/y/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 's/_/u/y/c/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'uy', 'c', 'h', '_']
				{'string': 's/_/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h', '_']
				version split: ['s', '_', 'uy', 'ch', '_']
				{'string': 's/_/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_']
				{'string': 's/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 's/_/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 's/_/u/y/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_']
				{'string': 's/_/u/y/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_']
				version split: ['s', '_', 'uy', 'c', 'h', '_']
				{'string': 's/_/uy/c/h/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h', '_']
				version split: ['s', '_', 'uy', 'ch', '_']
				{'string': 's/_/uy/ch/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_', '_']
				{'string': 's/u/y/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'y', 'c', 'h', '_', '_']
				{'string': 's/u/y/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h', '_', '_']
				version split: ['s', 'u', 'y', 'ch', '_', '_']
				{'string': 's/u/y/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_', '_']
				version split: ['s', 'u', 'y', 'ch', '_', '_']
				{'string': 's/u/y/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_', '_']
				version split: ['s', 'uy', 'c', 'h', '_', '_']
				{'string': 's/uy/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_', '_']
				version split: ['s', 'uy', 'ch', '_', '_']
				{'string': 's/uy/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'uy', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				{'string': 's/_/u/y/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				{'string': 's/_/u/y/c/_/_/h', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['s', '_', 'u', 'y', 'ch', '_', '_']
				{'string': 's/_/u/y/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_', '_']
				version split: ['s', '_', 'u', 'y', 'ch', '_', '_']
				{'string': 's/_/u/y/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch', '_', '_']
				version split: ['s', '_', 'uy', 'c', 'h', '_', '_']
				{'string': 's/_/uy/c/h/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h', '_', '_']
				version split: ['s', '_', 'uy', 'ch', '_', '_']
				{'string': 's/_/uy/ch/_/_', 'rgx': '((s))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_', '_']
				ANALYSING: sƿ
					resolving (16)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_/_/_
					> version: s/_/ƿ/_/_/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_', '_']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_/_/_(CCAAAA)
s/_/ƿ/_/_/_/_(CACAAAA)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_', '_']
				{'string': 's/ƿ/_/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((_))/((_))/((_))$'}
				ANALYSING: swech
					resolving (8)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					> version: s/_/w/e/ch
					> version: s/w/e/c/h/_
					> version: s/w/e/ch/_
					> version: s/_/w/e/c/_/h
					TRYING: h
					> version: s/_/w/e/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'e', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch', '_', '_']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/c/h/_(CCVCCA)
s/w/e/ch/_(CCVCA)
s/_/w/e/c/_/h(CACVCAC)
s/_/w/e/ch/_(CACVCA)
s/w/e/c/h/_(CCVCCA)
s/w/e/ch/_(CCVCA)
s/_/w/e/c/h/_(CACVCCA)
s/_/w/e/ch/_(CACVCA)
s/w/e/c/h/_/_(CCVCCAA)
s/w/e/ch/_/_(CCVCAA)
s/_/w/e/c/_/_/h(CACVCAAC)
s/_/w/e/ch/_/_(CACVCAA)
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', 'e', 'c', 'h', '_']
				{'string': 's/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h', '_']
				version split: ['s', 'w', 'e', 'ch', '_']
				{'string': 's/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_']
				version split: ['s', '_', 'w', 'e', 'c', '_', 'h']
				{'string': 's/_/w/e/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'e', 'ch', '_']
				{'string': 's/_/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch', '_']
				version split: ['s', 'w', 'e', 'c', 'h', '_']
				{'string': 's/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h', '_']
				version split: ['s', 'w', 'e', 'ch', '_']
				{'string': 's/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_']
				version split: ['s', '_', 'w', 'e', 'c', 'h', '_']
				{'string': 's/_/w/e/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h', '_']
				version split: ['s', '_', 'w', 'e', 'ch', '_']
				{'string': 's/_/w/e/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch', '_']
				version split: ['s', 'w', 'e', 'c', 'h', '_', '_']
				{'string': 's/w/e/c/h/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h', '_', '_']
				version split: ['s', 'w', 'e', 'ch', '_', '_']
				{'string': 's/w/e/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_', '_']
				version split: ['s', '_', 'w', 'e', 'c', '_', '_', 'h']
				{'string': 's/_/w/e/c/_/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', '_', '_', 'h']
				version split: ['s', '_', 'w', 'e', 'ch', '_', '_']
				{'string': 's/_/w/e/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch', '_', '_']
				ANALYSING: sƿich
					resolving (16)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					> version: s/_/ƿ/i/c/h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					> version: s/ƿ/i/c/h/_
					> version: s/ƿ/i/c/h/_
					> version: s/ƿ/i/ch/_
					> version: s/ƿ/i/ch/_
					> version: s/_/ƿ/i/c/_/h
					TRYING: h
					> version: s/_/ƿ/i/c/_/h
					TRYING: h
					> version: s/_/ƿ/i/ch/_
					> version: s/_/ƿ/i/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/c/_/h(CACACAC)
s/_/ƿ/i/ch/_(CACACA)
s/_/ƿ/i/ch/_(CACACA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/c/h/_(CCACCA)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/c/h/_(CACACCA)
s/_/ƿ/i/c/h/_(CACACCA)
s/_/ƿ/i/ch/_(CACACA)
s/_/ƿ/i/ch/_(CACACA)
s/ƿ/i/c/h/_/_(CCACCAA)
s/ƿ/i/c/h/_/_(CCACCAA)
s/ƿ/i/ch/_/_(CCACAA)
s/ƿ/i/ch/_/_(CCACAA)
s/_/ƿ/i/c/_/_/h(CACACAAC)
s/_/ƿ/i/c/_/_/h(CACACAAC)
s/_/ƿ/i/ch/_/_(CACACAA)
s/_/ƿ/i/ch/_/_(CACACAA)
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/_/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				{'string': 's/_/ƿ/i/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_']
				{'string': 's/_/ƿ/i/ch/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				{'string': 's/ƿ/i/c/h/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				{'string': 's/ƿ/i/c/h/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_', '_']
				{'string': 's/ƿ/i/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_', '_']
				{'string': 's/ƿ/i/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/ƿ/i/c/_/_/h', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				{'string': 's/_/ƿ/i/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				{'string': 's/_/ƿ/i/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch', '_', '_']
				ANALYSING: swich
					resolving (16)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					> version: s/_/w/i/c/h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					> version: s/w/i/c/h/_
					> version: s/w/i/c/h/_
					> version: s/w/i/ch/_
					> version: s/w/i/ch/_
					> version: s/_/w/i/c/_/h
					TRYING: h
					> version: s/_/w/i/c/_/h
					TRYING: h
					> version: s/_/w/i/ch/_
					> version: s/_/w/i/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'w', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch', '_', '_']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/c/h/_(CCACCA)
s/w/i/c/h/_(CCACCA)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/c/_/h(CACACAC)
s/_/w/i/ch/_(CACACA)
s/_/w/i/ch/_(CACACA)
s/w/i/c/h/_(CCACCA)
s/w/i/c/h/_(CCACCA)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/c/h/_(CACACCA)
s/_/w/i/c/h/_(CACACCA)
s/_/w/i/ch/_(CACACA)
s/_/w/i/ch/_(CACACA)
s/w/i/c/h/_/_(CCACCAA)
s/w/i/c/h/_/_(CCACCAA)
s/w/i/ch/_/_(CCACAA)
s/w/i/ch/_/_(CCACAA)
s/_/w/i/c/_/_/h(CACACAAC)
s/_/w/i/c/_/_/h(CACACAAC)
s/_/w/i/ch/_/_(CACACAA)
s/_/w/i/ch/_/_(CACACAA)
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'c', '_', 'h']
				{'string': 's/_/w/i/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'c', '_', 'h']
				{'string': 's/_/w/i/c/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_']
				{'string': 's/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'c', 'h', '_']
				{'string': 's/_/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'w', 'i', 'c', 'h', '_']
				{'string': 's/_/w/i/c/h/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_']
				{'string': 's/_/w/i/ch/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_', '_']
				{'string': 's/w/i/c/h/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'w', 'i', 'c', 'h', '_', '_']
				{'string': 's/w/i/c/h/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h', '_', '_']
				version split: ['s', 'w', 'i', 'ch', '_', '_']
				{'string': 's/w/i/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_', '_']
				version split: ['s', 'w', 'i', 'ch', '_', '_']
				{'string': 's/w/i/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/w/i/c/_/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				{'string': 's/_/w/i/c/_/_/h', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', '_', '_', 'h']
				version split: ['s', '_', 'w', 'i', 'ch', '_', '_']
				{'string': 's/_/w/i/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_', '_']
				version split: ['s', '_', 'w', 'i', 'ch', '_', '_']
				{'string': 's/_/w/i/ch/_/_', 'rgx': '((s))/((_))/((w))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch', '_', '_']
				ANALYSING: sƿilc
					resolving (16)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					> version: s/ƿ/i/_/l/c
					> version: s/ƿ/i/_/l/c
					> version: s/_/ƿ/_/i/l/c
					TRYING: c
					> version: s/_/ƿ/_/i/l/c
					TRYING: c
					> version: s/ƿ/i/l/c/_
					> version: s/ƿ/i/l/c/_
					> version: s/_/ƿ/i/l/_/c
					TRYING: c
					> version: s/_/ƿ/i/l/_/c
					TRYING: c
					> version: s/ƿ/i/_/l/_/c
					TRYING: c
					> version: s/ƿ/i/_/l/_/c
					TRYING: c
					> version: s/_/ƿ/_/i/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/_/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/ƿ/i/l/c/_(CCACCA)
s/ƿ/i/l/c/_(CCACCA)
s/_/ƿ/i/l/_/c(CACACAC)
s/_/ƿ/i/l/_/c(CACACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/ƿ/i/_/l/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
s/_/ƿ/_/i/_/l/c(CACAAACC)
s/ƿ/i/l/c/_(CCACCA)
s/ƿ/i/l/c/_(CCACCA)
s/_/ƿ/i/l/c/_(CACACCA)
s/_/ƿ/i/l/c/_(CACACCA)
s/ƿ/i/_/l/c/_(CCAACCA)
s/ƿ/i/_/l/c/_(CCAACCA)
s/_/ƿ/_/i/l/_/c(CACAACAC)
s/_/ƿ/_/i/l/_/c(CACAACAC)
s/ƿ/i/l/c/_/_(CCACCAA)
s/ƿ/i/l/c/_/_(CCACCAA)
s/_/ƿ/i/l/_/_/c(CACACAAC)
s/_/ƿ/i/l/_/_/c(CACACAAC)
s/ƿ/i/_/l/_/_/c(CCAACAAC)
s/ƿ/i/_/l/_/_/c(CCAACAAC)
s/_/ƿ/_/i/_/_/l/c(CACAAAACC)
s/_/ƿ/_/i/_/_/l/c(CACAAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/_/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				{'string': 's/_/ƿ/i/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				{'string': 's/ƿ/i/_/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				{'string': 's/ƿ/i/_/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/_/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				{'string': 's/_/ƿ/_/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				{'string': 's/ƿ/i/l/c/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				{'string': 's/ƿ/i/l/c/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/ƿ/i/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				{'string': 's/ƿ/i/_/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c']
				ANALYSING: swilc
					resolving (16)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					> version: s/_/w/i/l/c
					> version: s/w/i/_/l/c
					> version: s/w/i/_/l/c
					> version: s/_/w/_/i/l/c
					TRYING: c
					> version: s/_/w/_/i/l/c
					TRYING: c
					> version: s/w/i/l/c/_
					> version: s/w/i/l/c/_
					> version: s/_/w/i/l/_/c
					TRYING: c
					> version: s/_/w/i/l/_/c
					TRYING: c
					> version: s/w/i/_/l/_/c
					TRYING: c
					> version: s/w/i/_/l/_/c
					TRYING: c
					> version: s/_/w/_/i/_/l/c
					TRYING: l
					> version: s/_/w/_/i/_/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
s/w/i/l/c/_(CCACCA)
s/w/i/l/c/_(CCACCA)
s/_/w/i/l/_/c(CACACAC)
s/_/w/i/l/_/c(CACACAC)
s/w/i/_/l/_/c(CCAACAC)
s/w/i/_/l/_/c(CCAACAC)
s/_/w/_/i/_/l/c(CACAAACC)
s/_/w/_/i/_/l/c(CACAAACC)
s/w/i/l/c/_(CCACCA)
s/w/i/l/c/_(CCACCA)
s/_/w/i/l/c/_(CACACCA)
s/_/w/i/l/c/_(CACACCA)
s/w/i/_/l/c/_(CCAACCA)
s/w/i/_/l/c/_(CCAACCA)
s/_/w/_/i/l/_/c(CACAACAC)
s/_/w/_/i/l/_/c(CACAACAC)
s/w/i/l/c/_/_(CCACCAA)
s/w/i/l/c/_/_(CCACCAA)
s/_/w/i/l/_/_/c(CACACAAC)
s/_/w/i/l/_/_/c(CACACAAC)
s/w/i/_/l/_/_/c(CCAACAAC)
s/w/i/_/l/_/_/c(CCAACAAC)
s/_/w/_/i/_/_/l/c(CACAAAACC)
s/_/w/_/i/_/_/l/c(CACAAAACC)
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'c']
				{'string': 's/_/w/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'c']
				{'string': 's/_/w/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'c']
				{'string': 's/w/i/_/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'c']
				{'string': 's/w/i/_/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/l/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', 'w', 'i', 'l', 'c', '_']
				{'string': 's/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'c', '_']
				{'string': 's/_/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'i', 'l', 'c', '_']
				{'string': 's/_/w/i/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c', '_']
				version split: ['s', 'w', 'i', '_', 'l', 'c', '_']
				{'string': 's/w/i/_/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c', '_']
				version split: ['s', 'w', 'i', '_', 'l', 'c', '_']
				{'string': 's/w/i/_/l/c/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c', '_']
				version split: ['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				{'string': 's/_/w/_/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				{'string': 's/_/w/_/i/l/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', '_', 'c']
				version split: ['s', 'w', 'i', 'l', 'c', '_', '_']
				{'string': 's/w/i/l/c/_/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_', '_']
				version split: ['s', 'w', 'i', 'l', 'c', '_', '_']
				{'string': 's/w/i/l/c/_/_', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c', '_', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/w/i/l/_/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				version split: ['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				{'string': 's/_/w/i/l/_/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				{'string': 's/w/i/_/l/_/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				version split: ['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				{'string': 's/w/i/_/l/_/_/c', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', '_', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/_/l', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				{'string': 's/_/w/_/i/_/_/l', 'rgx': '((s))/((_))/((w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', '_', 'l', 'c']
				ANALYSING: sƿilch
					resolving (32)
					> version: s/ƿ/i/l/c/h
					> version: s/ƿ/i/l/c/h
					> version: s/ƿ/i/l/ch
					> version: s/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/c/h
					TRYING: h
					> version: s/_/ƿ/i/l/c/h
					TRYING: h
					> version: s/_/ƿ/i/l/ch
					> version: s/_/ƿ/i/l/ch
					> version: s/ƿ/i/_/l/c/h
					TRYING: h
					> version: s/ƿ/i/_/l/c/h
					TRYING: h
					> version: s/ƿ/i/_/l/ch
					> version: s/ƿ/i/_/l/ch
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: c
					> version: s/_/ƿ/_/i/l/c/h
					TRYING: c
					> version: s/_/ƿ/_/i/l/ch
					TRYING: ch
					> version: s/_/ƿ/_/i/l/ch
					TRYING: ch
					> version: s/ƿ/i/l/c/_/h
					TRYING: h
					> version: s/ƿ/i/l/c/_/h
					TRYING: h
					> version: s/ƿ/i/l/ch/_
					> version: s/ƿ/i/l/ch/_
					> version: s/_/ƿ/i/l/_/c/h
					TRYING: c
					> version: s/_/ƿ/i/l/_/c/h
					TRYING: c
					> version: s/_/ƿ/i/l/_/ch
					TRYING: ch
					> version: s/_/ƿ/i/l/_/ch
					TRYING: ch
					> version: s/ƿ/i/_/l/_/c/h
					TRYING: c
					> version: s/ƿ/i/_/l/_/c/h
					TRYING: c
					> version: s/ƿ/i/_/l/_/ch
					TRYING: ch
					> version: s/ƿ/i/_/l/_/ch
					TRYING: ch
					> version: s/_/ƿ/_/i/_/l/c/h
					TRYING: l
					> version: s/_/ƿ/_/i/_/l/c/h
					TRYING: l
					> version: s/_/ƿ/_/i/_/l/ch
					TRYING: l
					> version: s/_/ƿ/_/i/_/l/ch
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				s/ƿ/i/l/c/h(CCCCCC)
s/ƿ/i/l/c/h(CCVCCC)
s/ƿ/i/l/ch(CCCCC)
s/ƿ/i/l/ch(CCVCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/c/h(CACACCC)
s/_/ƿ/i/l/ch(CACACC)
s/_/ƿ/i/l/ch(CACACC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/c/h(CCAACCC)
s/ƿ/i/_/l/ch(CCAACC)
s/ƿ/i/_/l/ch(CCAACC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/c/h(CACAACCC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/_/ƿ/_/i/l/ch(CACAACC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/c/_/h(CCACCAC)
s/ƿ/i/l/ch/_(CCACCA)
s/ƿ/i/l/ch/_(CCACCA)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/c/h(CACACACC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/_/ƿ/i/l/_/ch(CACACAC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/c/h(CCAACACC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/ƿ/i/_/l/_/ch(CCAACAC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/c/h(CACAAACCC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
s/_/ƿ/_/i/_/l/ch(CACAAACC)
s/ƿ/i/l/c/h/_(CCACCCA)
s/ƿ/i/l/c/h/_(CCACCCA)
s/ƿ/i/l/ch/_(CCACCA)
s/ƿ/i/l/ch/_(CCACCA)
s/_/ƿ/i/l/c/_/h(CACACCAC)
s/_/ƿ/i/l/c/_/h(CACACCAC)
s/_/ƿ/i/l/ch/_(CACACCA)
s/_/ƿ/i/l/ch/_(CACACCA)
s/ƿ/i/_/l/c/_/h(CCAACCAC)
s/ƿ/i/_/l/c/_/h(CCAACCAC)
s/ƿ/i/_/l/ch/_(CCAACCA)
s/ƿ/i/_/l/ch/_(CCAACCA)
s/_/ƿ/_/i/l/_/c/h(CACAACACC)
s/_/ƿ/_/i/l/_/c/h(CACAACACC)
s/_/ƿ/_/i/l/_/ch(CACAACAC)
s/_/ƿ/_/i/l/_/ch(CACAACAC)
s/ƿ/i/l/c/_/_/h(CCACCAAC)
s/ƿ/i/l/c/_/_/h(CCACCAAC)
s/ƿ/i/l/ch/_/_(CCACCAA)
s/ƿ/i/l/ch/_/_(CCACCAA)
s/_/ƿ/i/l/_/_/c/h(CACACAACC)
s/_/ƿ/i/l/_/_/c/h(CACACAACC)
s/_/ƿ/i/l/_/_/ch(CACACAAC)
s/_/ƿ/i/l/_/_/ch(CACACAAC)
s/ƿ/i/_/l/_/_/c/h(CCAACAACC)
s/ƿ/i/_/l/_/_/c/h(CCAACAACC)
s/ƿ/i/_/l/_/_/ch(CCAACAAC)
s/ƿ/i/_/l/_/_/ch(CCAACAAC)
s/_/ƿ/_/i/_/_/l/c/h(CACAAAACCC)
s/_/ƿ/_/i/_/_/l/c/h(CACAAAACCC)
s/_/ƿ/_/i/_/_/l/ch(CACAAAACC)
s/_/ƿ/_/i/_/_/l/ch(CACAAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				{'string': 's/ƿ/i/_/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch']
				{'string': 's/ƿ/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/c/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/l/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				{'string': 's/ƿ/i/l/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				{'string': 's/ƿ/i/l/c/h/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				{'string': 's/_/ƿ/i/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/_/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				{'string': 's/_/ƿ/i/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'ch', '_']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/_/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				{'string': 's/ƿ/i/_/l/c/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				{'string': 's/ƿ/i/_/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				{'string': 's/ƿ/i/_/l/ch/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'ch', '_']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				{'string': 's/_/ƿ/_/i/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/_/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				{'string': 's/_/ƿ/_/i/l/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'ch']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				{'string': 's/ƿ/i/l/c/_/_/h', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c', '_', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				{'string': 's/ƿ/i/l/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				{'string': 's/ƿ/i/l/ch/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'ch', '_', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				{'string': 's/_/ƿ/i/l/_/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				{'string': 's/ƿ/i/_/l/_/_/ch', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'ch']
				ANALYSING: swilk
					resolving (32)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					> version: s/_/w/i/l/k
					> version: s/w/i/_/l/k
					> version: s/w/i/_/l/k
					> version: s/_/w/_/i/l/k
					TRYING: k
					> version: s/_/w/_/i/l/k
					TRYING: k
					> version: s/w/i/l/_/k
					> version: s/w/i/l/_/k
					> version: s/_/w/i/_/l/k
					TRYING: k
					> version: s/_/w/i/_/l/k
					TRYING: k
					> version: s/w/i/_/_/l/k
					TRYING: k
					> version: s/w/i/_/_/l/k
					TRYING: k
					> version: s/_/w/_/_/i/l/k
					TRYING: l
					> version: s/_/w/_/_/i/l/k
					TRYING: l
					> version: s/w/i/l/k/_
					> version: s/w/i/l/k/_
					> version: s/_/w/i/l/_/k
					TRYING: k
					> version: s/_/w/i/l/_/k
					TRYING: k
					> version: s/w/i/_/l/_/k
					TRYING: k
					> version: s/w/i/_/l/_/k
					TRYING: k
					> version: s/_/w/_/i/_/l/k
					TRYING: l
					> version: s/_/w/_/i/_/l/k
					TRYING: l
					> version: s/w/i/l/_/_/k
					TRYING: k
					> version: s/w/i/l/_/_/k
					TRYING: k
					> version: s/_/w/i/_/_/l/k
					TRYING: l
					> version: s/_/w/i/_/_/l/k
					TRYING: l
					> version: s/w/i/_/_/_/l/k
					TRYING: l
					> version: s/w/i/_/_/_/l/k
					TRYING: l
					> version: s/_/w/_/_/_/i/l/k
					TRYING: i
					> version: s/_/w/_/_/_/i/l/k
					TRYING: i
					RESULT:  ['i']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/i/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', '_', '_', 'k']
				{'string': 's/w/i/l/_/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'w', 'i', 'l', '_', '_', 'k']
				{'string': 's/w/i/l/_/_/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', '_', 'k']
				version split: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/w/i/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/w/i/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/_/l/k', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/_/i/l', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/_/i/l', 'rgx': '((s))/((_))/((w))/((_))/((_))/((_))/((i))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				ANALYSING: sƿillc
					resolving (32)
					> version: s/ƿ/i/l/l/c
					> version: s/ƿ/i/l/l/c
					> version: s/ƿ/i/ll/c
					> version: s/ƿ/i/ll/c
					> version: s/_/ƿ/i/l/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/l/c
					TRYING: c
					> version: s/_/ƿ/i/ll/c
					> version: s/_/ƿ/i/ll/c
					> version: s/ƿ/i/_/l/l/c
					TRYING: c
					> version: s/ƿ/i/_/l/l/c
					TRYING: c
					> version: s/ƿ/i/_/ll/c
					> version: s/ƿ/i/_/ll/c
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/ll/c
					TRYING: c
					> version: s/_/ƿ/_/i/ll/c
					TRYING: c
					> version: s/ƿ/i/l/l/_/c
					TRYING: c
					> version: s/ƿ/i/l/l/_/c
					TRYING: c
					> version: s/ƿ/i/ll/c/_
					> version: s/ƿ/i/ll/c/_
					> version: s/_/ƿ/i/l/_/l/c
					TRYING: l
					> version: s/_/ƿ/i/l/_/l/c
					TRYING: l
					> version: s/_/ƿ/i/ll/_/c
					TRYING: c
					> version: s/_/ƿ/i/ll/_/c
					TRYING: c
					> version: s/ƿ/i/_/l/_/l/c
					TRYING: l
					> version: s/ƿ/i/_/l/_/l/c
					TRYING: l
					> version: s/ƿ/i/_/ll/_/c
					TRYING: c
					> version: s/ƿ/i/_/ll/_/c
					TRYING: c
					> version: s/_/ƿ/_/i/_/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/_/l/l/c
					TRYING: l
					> version: s/_/ƿ/_/i/_/ll/c
					TRYING: ll
					> version: s/_/ƿ/_/i/_/ll/c
					TRYING: ll
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				s/ƿ/i/l/l/c(CCCCCC)
s/ƿ/i/l/l/c(CCVCCC)
s/ƿ/i/ll/c(CCCCC)
s/ƿ/i/ll/c(CCVCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/l/l/c(CACACCC)
s/_/ƿ/i/ll/c(CACACC)
s/_/ƿ/i/ll/c(CACACC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/l/l/c(CCAACCC)
s/ƿ/i/_/ll/c(CCAACC)
s/ƿ/i/_/ll/c(CCAACC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/l/l/c(CACAACCC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/_/ƿ/_/i/ll/c(CACAACC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/l/l/_/c(CCACCAC)
s/ƿ/i/ll/c/_(CCACCA)
s/ƿ/i/ll/c/_(CCACCA)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/l/_/l/c(CACACACC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/_/ƿ/i/ll/_/c(CACACAC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/l/_/l/c(CCAACACC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/ƿ/i/_/ll/_/c(CCAACAC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/l/l/c(CACAAACCC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
s/_/ƿ/_/i/_/ll/c(CACAAACC)
s/ƿ/i/l/l/c/_(CCACCCA)
s/ƿ/i/l/l/c/_(CCACCCA)
s/ƿ/i/ll/c/_(CCACCA)
s/ƿ/i/ll/c/_(CCACCA)
s/_/ƿ/i/l/l/_/c(CACACCAC)
s/_/ƿ/i/l/l/_/c(CACACCAC)
s/_/ƿ/i/ll/c/_(CACACCA)
s/_/ƿ/i/ll/c/_(CACACCA)
s/ƿ/i/_/l/l/_/c(CCAACCAC)
s/ƿ/i/_/l/l/_/c(CCAACCAC)
s/ƿ/i/_/ll/c/_(CCAACCA)
s/ƿ/i/_/ll/c/_(CCAACCA)
s/_/ƿ/_/i/l/_/l/c(CACAACACC)
s/_/ƿ/_/i/l/_/l/c(CACAACACC)
s/_/ƿ/_/i/ll/_/c(CACAACAC)
s/_/ƿ/_/i/ll/_/c(CACAACAC)
s/ƿ/i/l/l/_/_/c(CCACCAAC)
s/ƿ/i/l/l/_/_/c(CCACCAAC)
s/ƿ/i/ll/c/_/_(CCACCAA)
s/ƿ/i/ll/c/_/_(CCACCAA)
s/_/ƿ/i/l/_/_/l/c(CACACAACC)
s/_/ƿ/i/l/_/_/l/c(CACACAACC)
s/_/ƿ/i/ll/_/_/c(CACACAAC)
s/_/ƿ/i/ll/_/_/c(CACACAAC)
s/ƿ/i/_/l/_/_/l/c(CCAACAACC)
s/ƿ/i/_/l/_/_/l/c(CCAACAACC)
s/ƿ/i/_/ll/_/_/c(CCAACAAC)
s/ƿ/i/_/ll/_/_/c(CCAACAAC)
s/_/ƿ/_/i/_/_/l/l/c(CACAAAACCC)
s/_/ƿ/_/i/_/_/l/l/c(CACAAAACCC)
s/_/ƿ/_/i/_/_/ll/c(CACAAAACC)
s/_/ƿ/_/i/_/_/ll/c(CACAAAACC)
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c']
				{'string': 's/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c']
				{'string': 's/_/ƿ/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				{'string': 's/ƿ/i/_/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c']
				{'string': 's/ƿ/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				{'string': 's/_/ƿ/_/i/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/l/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/l/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/ll/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', 'll', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				{'string': 's/ƿ/i/l/l/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				{'string': 's/_/ƿ/i/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/_/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				{'string': 's/_/ƿ/i/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', 'c', '_']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				{'string': 's/ƿ/i/_/l/l/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				{'string': 's/ƿ/i/_/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				version split: ['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				{'string': 's/ƿ/i/_/ll/c/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', 'c', '_']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/_/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				{'string': 's/_/ƿ/_/i/ll/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'll', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				{'string': 's/ƿ/i/l/l/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				{'string': 's/ƿ/i/ll/c/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				version split: ['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				{'string': 's/ƿ/i/ll/c/_/_', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'll', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/l/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				{'string': 's/_/ƿ/i/ll/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'll', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', '_', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				{'string': 's/ƿ/i/_/ll/_/_/c', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'll', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				{'string': 's/_/ƿ/_/i/_/_/l', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'l', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/_/ll', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				{'string': 's/_/ƿ/_/i/_/_/ll', 'rgx': '((s))/((_))/((ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', '_', '_', 'll', 'c']
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/ƿ/u/c/_
					> version: s/ƿ/u/c/_
					> version: s/_/ƿ/u/c/_
					> version: s/_/ƿ/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/c/_(CACACA)
s/_/ƿ/u/c/_(CACACA)
s/ƿ/u/c/_/_(CCACAA)
s/ƿ/u/c/_/_(CCACAA)
s/_/ƿ/u/c/_/_(CACACAA)
s/_/ƿ/u/c/_/_(CACACAA)
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_']
				{'string': 's/_/ƿ/u/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/_/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_']
				{'string': 's/_/ƿ/u/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_']
				ANALYSING: sƿucch
					resolving (32)
					> version: s/ƿ/u/c/c/h
					> version: s/ƿ/u/c/c/h
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/c/ch
					> version: s/ƿ/u/cch
					> version: s/ƿ/u/cch
					> version: s/_/ƿ/u/c/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/c/h
					TRYING: h
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/c/ch
					> version: s/_/ƿ/u/c/ch
					> version: s/_/ƿ/u/cch
					> version: s/_/ƿ/u/cch
					> version: s/ƿ/u/c/c/_/h
					TRYING: h
					> version: s/ƿ/u/c/c/_/h
					TRYING: h
					> version: s/ƿ/u/cch/_
					> version: s/ƿ/u/cch/_
					> version: s/ƿ/u/c/ch/_
					> version: s/ƿ/u/c/ch/_
					> version: s/ƿ/u/cch/_
					> version: s/ƿ/u/cch/_
					> version: s/_/ƿ/u/c/_/c/h
					TRYING: c
					> version: s/_/ƿ/u/c/_/c/h
					TRYING: c
					> version: s/_/ƿ/u/cch/_
					> version: s/_/ƿ/u/cch/_
					> version: s/_/ƿ/u/c/_/ch
					TRYING: ch
					> version: s/_/ƿ/u/c/_/ch
					TRYING: ch
					> version: s/_/ƿ/u/cch/_
					> version: s/_/ƿ/u/cch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				s/ƿ/u/c/c/h(CCCCCC)
s/ƿ/u/c/c/h(CCVCCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/ƿ/u/c/ch(CCCCC)
s/ƿ/u/c/ch(CCVCC)
s/ƿ/u/cch(CCCC)
s/ƿ/u/cch(CCVC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/c/c/h(CACACCC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/c/ch(CACACC)
s/_/ƿ/u/cch(CACAC)
s/_/ƿ/u/cch(CACAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/c/c/_/h(CCACCAC)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/c/_/c/h(CACACACC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/c/_/ch(CACACAC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/ƿ/u/c/c/h/_(CCACCCA)
s/ƿ/u/c/c/h/_(CCACCCA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/c/ch/_(CCACCA)
s/ƿ/u/cch/_(CCACA)
s/ƿ/u/cch/_(CCACA)
s/_/ƿ/u/c/c/_/h(CACACCAC)
s/_/ƿ/u/c/c/_/h(CACACCAC)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/c/ch/_(CACACCA)
s/_/ƿ/u/c/ch/_(CACACCA)
s/_/ƿ/u/cch/_(CACACA)
s/_/ƿ/u/cch/_(CACACA)
s/ƿ/u/c/c/_/_/h(CCACCAAC)
s/ƿ/u/c/c/_/_/h(CCACCAAC)
s/ƿ/u/cch/_/_(CCACAA)
s/ƿ/u/cch/_/_(CCACAA)
s/ƿ/u/c/ch/_/_(CCACCAA)
s/ƿ/u/c/ch/_/_(CCACCAA)
s/ƿ/u/cch/_/_(CCACAA)
s/ƿ/u/cch/_/_(CCACAA)
s/_/ƿ/u/c/_/_/c/h(CACACAACC)
s/_/ƿ/u/c/_/_/c/h(CACACAACC)
s/_/ƿ/u/cch/_/_(CACACAA)
s/_/ƿ/u/cch/_/_(CACACAA)
s/_/ƿ/u/c/_/_/ch(CACACAAC)
s/_/ƿ/u/c/_/_/ch(CACACAAC)
s/_/ƿ/u/cch/_/_(CACACAA)
s/_/ƿ/u/cch/_/_(CACACAA)
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'cch']
				{'string': 's/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 's/_/ƿ/u/c/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', '_', 'ƿ', 'u', 'cch']
				{'string': 's/_/ƿ/u/cch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_']
				{'string': 's/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/_/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				{'string': 's/_/ƿ/u/c/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_']
				{'string': 's/_/ƿ/u/cch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				{'string': 's/ƿ/u/c/c/_/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', '_', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				{'string': 's/ƿ/u/c/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				{'string': 's/ƿ/u/c/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/c/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/_/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/_/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				{'string': 's/_/ƿ/u/c/_/_/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/_/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				{'string': 's/_/ƿ/u/cch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c))/((c)|(cch)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', '_', '_']
				ANALYSING: sƿuch
					resolving (16)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					> version: s/_/ƿ/u/c/h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					> version: s/ƿ/u/c/h/_
					> version: s/ƿ/u/c/h/_
					> version: s/ƿ/u/ch/_
					> version: s/ƿ/u/ch/_
					> version: s/_/ƿ/u/c/_/h
					TRYING: h
					> version: s/_/ƿ/u/c/_/h
					TRYING: h
					> version: s/_/ƿ/u/ch/_
					> version: s/_/ƿ/u/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/c/_/h(CACACAC)
s/_/ƿ/u/ch/_(CACACA)
s/_/ƿ/u/ch/_(CACACA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/c/h/_(CCACCA)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/c/h/_(CACACCA)
s/_/ƿ/u/c/h/_(CACACCA)
s/_/ƿ/u/ch/_(CACACA)
s/_/ƿ/u/ch/_(CACACA)
s/ƿ/u/c/h/_/_(CCACCAA)
s/ƿ/u/c/h/_/_(CCACCAA)
s/ƿ/u/ch/_/_(CCACAA)
s/ƿ/u/ch/_/_(CCACAA)
s/_/ƿ/u/c/_/_/h(CACACAAC)
s/_/ƿ/u/c/_/_/h(CACACAAC)
s/_/ƿ/u/ch/_/_(CACACAA)
s/_/ƿ/u/ch/_/_(CACACAA)
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/_/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				{'string': 's/_/ƿ/u/c/h/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_']
				{'string': 's/_/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				{'string': 's/ƿ/u/c/h/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				{'string': 's/ƿ/u/c/h/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_', '_']
				{'string': 's/ƿ/u/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_', '_']
				{'string': 's/ƿ/u/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				{'string': 's/_/ƿ/u/c/_/_/h', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', '_', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				{'string': 's/_/ƿ/u/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				{'string': 's/_/ƿ/u/ch/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_', '_']
				ANALYSING: sƿuche
					resolving (16)
					> version: s/ƿ/u/c/h/e
					> version: s/ƿ/u/c/h/e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					> version: s/_/ƿ/u/ch/e
					> version: s/ƿ/u/c/h/_/e
					TRYING: e
					> version: s/ƿ/u/c/h/_/e
					TRYING: e
					> version: s/ƿ/u/ch/e/_
					> version: s/ƿ/u/ch/e/_
					> version: s/_/ƿ/u/c/_/h/e
					TRYING: h
					> version: s/_/ƿ/u/c/_/h/e
					TRYING: h
					> version: s/_/ƿ/u/ch/_/e
					TRYING: e
					> version: s/_/ƿ/u/ch/_/e
					TRYING: e
					RESULT:  ['e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				{'string': 's/ƿ/u/c/h/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				{'string': 's/ƿ/u/c/h/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e', '_']
				version split: ['s', 'ƿ', 'u', 'ch', 'e', '_']
				{'string': 's/ƿ/u/ch/e/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/ƿ/u/c/_/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/ƿ/u/c/_/h/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				{'string': 's/_/ƿ/u/ch/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				{'string': 's/_/ƿ/u/ch/_/e', 'rgx': '((s))/((_))/((u)|(ƿ))/((c)|(ch))/((c)|(ch))/((_))/((e))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', '_', 'e']
				ANALYSING: sƿulc
					resolving (16)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					> version: s/ƿ/u/_/l/c
					> version: s/ƿ/u/_/l/c
					> version: s/_/ƿ/_/u/l/c
					TRYING: c
					> version: s/_/ƿ/_/u/l/c
					TRYING: c
					> version: s/ƿ/u/l/c/_
					> version: s/ƿ/u/l/c/_
					> version: s/_/ƿ/u/l/_/c
					TRYING: c
					> version: s/_/ƿ/u/l/_/c
					TRYING: c
					> version: s/ƿ/u/_/l/_/c
					TRYING: c
					> version: s/ƿ/u/_/l/_/c
					TRYING: c
					> version: s/_/ƿ/_/u/_/l/c
					TRYING: l
					> version: s/_/ƿ/_/u/_/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/ƿ/u/l/c/_(CCACCA)
s/ƿ/u/l/c/_(CCACCA)
s/_/ƿ/u/l/_/c(CACACAC)
s/_/ƿ/u/l/_/c(CACACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/ƿ/u/_/l/_/c(CCAACAC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
s/_/ƿ/_/u/_/l/c(CACAAACC)
s/ƿ/u/l/c/_(CCACCA)
s/ƿ/u/l/c/_(CCACCA)
s/_/ƿ/u/l/c/_(CACACCA)
s/_/ƿ/u/l/c/_(CACACCA)
s/ƿ/u/_/l/c/_(CCAACCA)
s/ƿ/u/_/l/c/_(CCAACCA)
s/_/ƿ/_/u/l/_/c(CACAACAC)
s/_/ƿ/_/u/l/_/c(CACAACAC)
s/ƿ/u/l/c/_/_(CCACCAA)
s/ƿ/u/l/c/_/_(CCACCAA)
s/_/ƿ/u/l/_/_/c(CACACAAC)
s/_/ƿ/u/l/_/_/c(CACACAAC)
s/ƿ/u/_/l/_/_/c(CCAACAAC)
s/ƿ/u/_/l/_/_/c(CCAACAAC)
s/_/ƿ/_/u/_/_/l/c(CACAAAACC)
s/_/ƿ/_/u/_/_/l/c(CACAAAACC)
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/l/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/_/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				{'string': 's/_/ƿ/u/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				{'string': 's/ƿ/u/_/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				{'string': 's/ƿ/u/_/l/c/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c', '_']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/_/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				{'string': 's/_/ƿ/_/u/l/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				{'string': 's/ƿ/u/l/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				version split: ['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				{'string': 's/ƿ/u/l/c/_/_', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c', '_', '_']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				{'string': 's/_/ƿ/u/l/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				{'string': 's/ƿ/u/_/l/_/_/c', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/_/l', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				{'string': 's/_/ƿ/_/u/_/_/l', 'rgx': '((s))/((_))/((u)|(ƿ))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', '_', '_', 'l', 'c']
				ANALYSING: swulc
					resolving (16)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					> version: s/_/w/u/l/c
					> version: s/w/u/_/l/c
					> version: s/w/u/_/l/c
					> version: s/_/w/_/u/l/c
					TRYING: c
					> version: s/_/w/_/u/l/c
					TRYING: c
					> version: s/w/u/l/c/_
					> version: s/w/u/l/c/_
					> version: s/_/w/u/l/_/c
					TRYING: c
					> version: s/_/w/u/l/_/c
					TRYING: c
					> version: s/w/u/_/l/_/c
					TRYING: c
					> version: s/w/u/_/l/_/c
					TRYING: c
					> version: s/_/w/_/u/_/l/c
					TRYING: l
					> version: s/_/w/_/u/_/l/c
					TRYING: l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', 'w', 'u', 'l', 'c', '_', '_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
s/w/u/l/c/_(CCACCA)
s/w/u/l/c/_(CCACCA)
s/_/w/u/l/_/c(CACACAC)
s/_/w/u/l/_/c(CACACAC)
s/w/u/_/l/_/c(CCAACAC)
s/w/u/_/l/_/c(CCAACAC)
s/_/w/_/u/_/l/c(CACAAACC)
s/_/w/_/u/_/l/c(CACAAACC)
s/w/u/l/c/_(CCACCA)
s/w/u/l/c/_(CCACCA)
s/_/w/u/l/c/_(CACACCA)
s/_/w/u/l/c/_(CACACCA)
s/w/u/_/l/c/_(CCAACCA)
s/w/u/_/l/c/_(CCAACCA)
s/_/w/_/u/l/_/c(CACAACAC)
s/_/w/_/u/l/_/c(CACAACAC)
s/w/u/l/c/_/_(CCACCAA)
s/w/u/l/c/_/_(CCACCAA)
s/_/w/u/l/_/_/c(CACACAAC)
s/_/w/u/l/_/_/c(CACACAAC)
s/w/u/_/l/_/_/c(CCAACAAC)
s/w/u/_/l/_/_/c(CCAACAAC)
s/_/w/_/u/_/_/l/c(CACAAAACC)
s/_/w/_/u/_/_/l/c(CACAAAACC)
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', '_', 'c']
				{'string': 's/_/w/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'u', 'l', '_', 'c']
				{'string': 's/_/w/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', 'c']
				{'string': 's/w/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', 'c']
				{'string': 's/w/u/_/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/l/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', 'w', 'u', 'l', 'c', '_']
				{'string': 's/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', 'c', '_']
				{'string': 's/_/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c', '_']
				version split: ['s', '_', 'w', 'u', 'l', 'c', '_']
				{'string': 's/_/w/u/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c', '_']
				version split: ['s', 'w', 'u', '_', 'l', 'c', '_']
				{'string': 's/w/u/_/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c', '_']
				version split: ['s', 'w', 'u', '_', 'l', 'c', '_']
				{'string': 's/w/u/_/l/c/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c', '_']
				version split: ['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				{'string': 's/_/w/_/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				{'string': 's/_/w/_/u/l/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', '_', 'c']
				version split: ['s', 'w', 'u', 'l', 'c', '_', '_']
				{'string': 's/w/u/l/c/_/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_', '_']
				version split: ['s', 'w', 'u', 'l', 'c', '_', '_']
				{'string': 's/w/u/l/c/_/_', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c', '_', '_']
				version split: ['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				{'string': 's/_/w/u/l/_/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				version split: ['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				{'string': 's/_/w/u/l/_/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', '_', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				{'string': 's/w/u/_/l/_/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				version split: ['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				{'string': 's/w/u/_/l/_/_/c', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', '_', '_', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/_/l', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				{'string': 's/_/w/_/u/_/_/l', 'rgx': '((s))/((_))/((u)|(w))/((_))/((c))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', '_', '_', 'l', 'c']
				ANALYSING: zuich
					resolving (48)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					> version: _/z/u/i/c/h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					> version: z/_/u/i/c/h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: h
					> version: _/_/z/u/i/c/h
					TRYING: h
					> version: _/_/z/u/i/ch
					> version: _/_/z/u/i/ch
					> version: _/_/z/ui/c/h
					> version: _/_/z/ui/ch
					> version: z/u/i/c/h/_
					> version: z/u/i/c/h/_
					> version: z/u/i/ch/_
					> version: z/u/i/ch/_
					> version: z/ui/c/h/_
					> version: z/ui/ch/_
					> version: _/z/u/i/c/_/h
					TRYING: h
					> version: _/z/u/i/c/_/h
					TRYING: h
					> version: _/z/u/i/ch/_
					> version: _/z/u/i/ch/_
					> version: _/z/ui/c/h/_
					> version: _/z/ui/ch/_
					> version: z/_/u/i/c/_/h
					TRYING: h
					> version: z/_/u/i/c/_/h
					TRYING: h
					> version: z/_/u/i/ch/_
					> version: z/_/u/i/ch/_
					> version: z/_/ui/c/h/_
					> version: z/_/ui/ch/_
					> version: _/_/z/u/i/_/c/h
					TRYING: c
					> version: _/_/z/u/i/_/c/h
					TRYING: c
					> version: _/_/z/u/i/_/ch
					TRYING: ch
					> version: _/_/z/u/i/_/ch
					TRYING: ch
					> version: _/_/z/ui/c/_/h
					TRYING: h
					> version: _/_/z/ui/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'u', 'i', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['z', 'ui', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h', '_', '_']
				adding dashed alternative: ['_', 'z', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', '_', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch', '_', '_']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/c/h/_(CAACCA)
z/u/i/c/h/_(CAACCA)
z/u/i/ch/_(CAACA)
z/u/i/ch/_(CAACA)
z/ui/c/h/_(CVCCA)
z/ui/ch/_(CVCA)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/c/_/h(ACAACAC)
_/z/u/i/ch/_(ACAACA)
_/z/u/i/ch/_(ACAACA)
_/z/ui/c/h/_(ACVCCA)
_/z/ui/ch/_(ACVCA)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/c/_/h(CAAACAC)
z/_/u/i/ch/_(CAAACA)
z/_/u/i/ch/_(CAAACA)
z/_/ui/c/h/_(CAVCCA)
z/_/ui/ch/_(CAVCA)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/c/h(AACAAACC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/u/i/_/ch(AACAAAC)
_/_/z/ui/c/_/h(AACVCAC)
_/_/z/ui/ch/_(AACVCA)
z/u/i/c/h/_(CAACCA)
z/u/i/c/h/_(CAACCA)
z/u/i/ch/_(CAACA)
z/u/i/ch/_(CAACA)
z/ui/c/h/_(CVCCA)
z/ui/ch/_(CVCA)
_/z/u/i/c/h/_(ACAACCA)
_/z/u/i/c/h/_(ACAACCA)
_/z/u/i/ch/_(ACAACA)
_/z/u/i/ch/_(ACAACA)
_/z/ui/c/h/_(ACVCCA)
_/z/ui/ch/_(ACVCA)
z/_/u/i/c/h/_(CAAACCA)
z/_/u/i/c/h/_(CAAACCA)
z/_/u/i/ch/_(CAAACA)
z/_/u/i/ch/_(CAAACA)
z/_/ui/c/h/_(CAVCCA)
z/_/ui/ch/_(CAVCA)
_/_/z/u/i/c/_/h(AACAACAC)
_/_/z/u/i/c/_/h(AACAACAC)
_/_/z/u/i/ch/_(AACAACA)
_/_/z/u/i/ch/_(AACAACA)
_/_/z/ui/c/h/_(AACVCCA)
_/_/z/ui/ch/_(AACVCA)
z/u/i/c/h/_/_(CAACCAA)
z/u/i/c/h/_/_(CAACCAA)
z/u/i/ch/_/_(CAACAA)
z/u/i/ch/_/_(CAACAA)
z/ui/c/h/_/_(CVCCAA)
z/ui/ch/_/_(CVCAA)
_/z/u/i/c/_/_/h(ACAACAAC)
_/z/u/i/c/_/_/h(ACAACAAC)
_/z/u/i/ch/_/_(ACAACAA)
_/z/u/i/ch/_/_(ACAACAA)
_/z/ui/c/h/_/_(ACVCCAA)
_/z/ui/ch/_/_(ACVCAA)
z/_/u/i/c/_/_/h(CAAACAAC)
z/_/u/i/c/_/_/h(CAAACAAC)
z/_/u/i/ch/_/_(CAAACAA)
z/_/u/i/ch/_/_(CAAACAA)
z/_/ui/c/h/_/_(CAVCCAA)
z/_/ui/ch/_/_(CAVCAA)
_/_/z/u/i/_/_/c/h(AACAAAACC)
_/_/z/u/i/_/_/c/h(AACAAAACC)
_/_/z/u/i/_/_/ch(AACAAAAC)
_/_/z/u/i/_/_/ch(AACAAAAC)
_/_/z/ui/c/_/_/h(AACVCAAC)
_/_/z/ui/ch/_/_(AACVCAA)
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'ui', 'c', 'h', '_']
				{'string': 'z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h', '_']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'ui', 'c', 'h', '_']
				{'string': '_/z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h', '_']
				version split: ['_', 'z', 'ui', 'ch', '_']
				{'string': '_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/_/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/_/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'ui', 'c', 'h', '_']
				{'string': 'z/_/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h', '_']
				version split: ['z', '_', 'ui', 'ch', '_']
				{'string': 'z/_/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', '_', 'h']
				{'string': '_/_/z/ui/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch', '_']
				{'string': '_/_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'ui', 'c', 'h', '_']
				{'string': 'z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h', '_']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'c', 'h', '_']
				{'string': '_/z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h', '_']
				version split: ['_', 'z', 'u', 'i', 'c', 'h', '_']
				{'string': '_/z/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h', '_']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', 'z', 'ui', 'c', 'h', '_']
				{'string': '_/z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h', '_']
				version split: ['_', 'z', 'ui', 'ch', '_']
				{'string': '_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/_/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h', '_']
				version split: ['z', '_', 'u', 'i', 'c', 'h', '_']
				{'string': 'z/_/u/i/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h', '_']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'u', 'i', 'ch', '_']
				{'string': 'z/_/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_']
				version split: ['z', '_', 'ui', 'c', 'h', '_']
				{'string': 'z/_/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h', '_']
				version split: ['z', '_', 'ui', 'ch', '_']
				{'string': 'z/_/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				{'string': '_/_/z/u/i/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'i', 'ch', '_']
				{'string': '_/_/z/u/i/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch', '_']
				version split: ['_', '_', 'z', 'ui', 'c', 'h', '_']
				{'string': '_/_/z/ui/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h', '_']
				version split: ['_', '_', 'z', 'ui', 'ch', '_']
				{'string': '_/_/z/ui/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_', '_']
				{'string': 'z/u/i/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_', '_']
				version split: ['z', 'u', 'i', 'c', 'h', '_', '_']
				{'string': 'z/u/i/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h', '_', '_']
				version split: ['z', 'u', 'i', 'ch', '_', '_']
				{'string': 'z/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_', '_']
				version split: ['z', 'u', 'i', 'ch', '_', '_']
				{'string': 'z/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_', '_']
				version split: ['z', 'ui', 'c', 'h', '_', '_']
				{'string': 'z/ui/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'c', 'h', '_', '_']
				version split: ['z', 'ui', 'ch', '_', '_']
				{'string': 'z/ui/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'ui', 'ch', '_', '_']
				version split: ['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				{'string': '_/z/u/i/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				{'string': '_/z/u/i/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch', '_', '_']
				{'string': '_/z/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_', '_']
				version split: ['_', 'z', 'u', 'i', 'ch', '_', '_']
				{'string': '_/z/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch', '_', '_']
				version split: ['_', 'z', 'ui', 'c', 'h', '_', '_']
				{'string': '_/z/ui/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h', '_', '_']
				version split: ['_', 'z', 'ui', 'ch', '_', '_']
				{'string': '_/z/ui/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch', '_', '_']
				version split: ['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				{'string': 'z/_/u/i/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				{'string': 'z/_/u/i/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', '_', '_', 'h']
				version split: ['z', '_', 'u', 'i', 'ch', '_', '_']
				{'string': 'z/_/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_', '_']
				version split: ['z', '_', 'u', 'i', 'ch', '_', '_']
				{'string': 'z/_/u/i/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch', '_', '_']
				version split: ['z', '_', 'ui', 'c', 'h', '_', '_']
				{'string': 'z/_/ui/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h', '_', '_']
				version split: ['z', '_', 'ui', 'ch', '_', '_']
				{'string': 'z/_/ui/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'ui', 'ch', '_', '_']
				version split: ['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				{'string': '_/_/z/u/i/_/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				{'string': '_/_/z/u/i/_/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				{'string': '_/_/z/u/i/_/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', '_', '_', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', '_', '_', 'h']
				{'string': '_/_/z/ui/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', '_', '_', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch', '_', '_']
				{'string': '_/_/z/ui/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch', '_', '_']
				ANALYSING: zuych
					resolving (48)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					> version: _/z/u/y/c/h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					> version: z/_/u/y/c/h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: h
					> version: _/_/z/u/y/c/h
					TRYING: h
					> version: _/_/z/u/y/ch
					> version: _/_/z/u/y/ch
					> version: _/_/z/uy/c/h
					> version: _/_/z/uy/ch
					> version: z/u/y/c/h/_
					> version: z/u/y/c/h/_
					> version: z/u/y/ch/_
					> version: z/u/y/ch/_
					> version: z/uy/c/h/_
					> version: z/uy/ch/_
					> version: _/z/u/y/c/_/h
					TRYING: h
					> version: _/z/u/y/c/_/h
					TRYING: h
					> version: _/z/u/y/ch/_
					> version: _/z/u/y/ch/_
					> version: _/z/uy/c/h/_
					> version: _/z/uy/ch/_
					> version: z/_/u/y/c/_/h
					TRYING: h
					> version: z/_/u/y/c/_/h
					TRYING: h
					> version: z/_/u/y/ch/_
					> version: z/_/u/y/ch/_
					> version: z/_/uy/c/h/_
					> version: z/_/uy/ch/_
					> version: _/_/z/u/y/_/c/h
					TRYING: c
					> version: _/_/z/u/y/_/c/h
					TRYING: c
					> version: _/_/z/u/y/_/ch
					TRYING: ch
					> version: _/_/z/u/y/_/ch
					TRYING: ch
					> version: _/_/z/uy/c/_/h
					TRYING: h
					> version: _/_/z/uy/ch/_
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'u', 'y', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['z', 'uy', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h', '_', '_']
				adding dashed alternative: ['_', 'z', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch', '_', '_']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h', '_', '_']
				adding dashed alternative: ['z', '_', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', '_', '_', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch', '_', '_']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/c/h/_(CAACCA)
z/u/y/c/h/_(CAACCA)
z/u/y/ch/_(CAACA)
z/u/y/ch/_(CAACA)
z/uy/c/h/_(CVCCA)
z/uy/ch/_(CVCA)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/c/_/h(ACAACAC)
_/z/u/y/ch/_(ACAACA)
_/z/u/y/ch/_(ACAACA)
_/z/uy/c/h/_(ACVCCA)
_/z/uy/ch/_(ACVCA)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/c/_/h(CAAACAC)
z/_/u/y/ch/_(CAAACA)
z/_/u/y/ch/_(CAAACA)
z/_/uy/c/h/_(CAVCCA)
z/_/uy/ch/_(CAVCA)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/c/h(AACAAACC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/u/y/_/ch(AACAAAC)
_/_/z/uy/c/_/h(AACVCAC)
_/_/z/uy/ch/_(AACVCA)
z/u/y/c/h/_(CAACCA)
z/u/y/c/h/_(CAACCA)
z/u/y/ch/_(CAACA)
z/u/y/ch/_(CAACA)
z/uy/c/h/_(CVCCA)
z/uy/ch/_(CVCA)
_/z/u/y/c/h/_(ACAACCA)
_/z/u/y/c/h/_(ACAACCA)
_/z/u/y/ch/_(ACAACA)
_/z/u/y/ch/_(ACAACA)
_/z/uy/c/h/_(ACVCCA)
_/z/uy/ch/_(ACVCA)
z/_/u/y/c/h/_(CAAACCA)
z/_/u/y/c/h/_(CAAACCA)
z/_/u/y/ch/_(CAAACA)
z/_/u/y/ch/_(CAAACA)
z/_/uy/c/h/_(CAVCCA)
z/_/uy/ch/_(CAVCA)
_/_/z/u/y/c/_/h(AACAACAC)
_/_/z/u/y/c/_/h(AACAACAC)
_/_/z/u/y/ch/_(AACAACA)
_/_/z/u/y/ch/_(AACAACA)
_/_/z/uy/c/h/_(AACVCCA)
_/_/z/uy/ch/_(AACVCA)
z/u/y/c/h/_/_(CAACCAA)
z/u/y/c/h/_/_(CAACCAA)
z/u/y/ch/_/_(CAACAA)
z/u/y/ch/_/_(CAACAA)
z/uy/c/h/_/_(CVCCAA)
z/uy/ch/_/_(CVCAA)
_/z/u/y/c/_/_/h(ACAACAAC)
_/z/u/y/c/_/_/h(ACAACAAC)
_/z/u/y/ch/_/_(ACAACAA)
_/z/u/y/ch/_/_(ACAACAA)
_/z/uy/c/h/_/_(ACVCCAA)
_/z/uy/ch/_/_(ACVCAA)
z/_/u/y/c/_/_/h(CAAACAAC)
z/_/u/y/c/_/_/h(CAAACAAC)
z/_/u/y/ch/_/_(CAAACAA)
z/_/u/y/ch/_/_(CAAACAA)
z/_/uy/c/h/_/_(CAVCCAA)
z/_/uy/ch/_/_(CAVCAA)
_/_/z/u/y/_/_/c/h(AACAAAACC)
_/_/z/u/y/_/_/c/h(AACAAAACC)
_/_/z/u/y/_/_/ch(AACAAAAC)
_/_/z/u/y/_/_/ch(AACAAAAC)
_/_/z/uy/c/_/_/h(AACVCAAC)
_/_/z/uy/ch/_/_(AACVCAA)
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'uy', 'c', 'h', '_']
				{'string': 'z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h', '_']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'uy', 'c', 'h', '_']
				{'string': '_/z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h', '_']
				version split: ['_', 'z', 'uy', 'ch', '_']
				{'string': '_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/_/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/_/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'uy', 'c', 'h', '_']
				{'string': 'z/_/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h', '_']
				version split: ['z', '_', 'uy', 'ch', '_']
				{'string': 'z/_/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/c/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', '_', 'h']
				{'string': '_/_/z/uy/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch', '_']
				{'string': '_/_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'uy', 'c', 'h', '_']
				{'string': 'z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h', '_']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'c', 'h', '_']
				{'string': '_/z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h', '_']
				version split: ['_', 'z', 'u', 'y', 'c', 'h', '_']
				{'string': '_/z/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h', '_']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', 'z', 'uy', 'c', 'h', '_']
				{'string': '_/z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h', '_']
				version split: ['_', 'z', 'uy', 'ch', '_']
				{'string': '_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/_/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h', '_']
				version split: ['z', '_', 'u', 'y', 'c', 'h', '_']
				{'string': 'z/_/u/y/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h', '_']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'u', 'y', 'ch', '_']
				{'string': 'z/_/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_']
				version split: ['z', '_', 'uy', 'c', 'h', '_']
				{'string': 'z/_/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h', '_']
				version split: ['z', '_', 'uy', 'ch', '_']
				{'string': 'z/_/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				{'string': '_/_/z/u/y/c/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', '_', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', '_', 'z', 'u', 'y', 'ch', '_']
				{'string': '_/_/z/u/y/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch', '_']
				version split: ['_', '_', 'z', 'uy', 'c', 'h', '_']
				{'string': '_/_/z/uy/c/h/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h', '_']
				version split: ['_', '_', 'z', 'uy', 'ch', '_']
				{'string': '_/_/z/uy/ch/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_', '_']
				{'string': 'z/u/y/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_', '_']
				version split: ['z', 'u', 'y', 'c', 'h', '_', '_']
				{'string': 'z/u/y/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h', '_', '_']
				version split: ['z', 'u', 'y', 'ch', '_', '_']
				{'string': 'z/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_', '_']
				version split: ['z', 'u', 'y', 'ch', '_', '_']
				{'string': 'z/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_', '_']
				version split: ['z', 'uy', 'c', 'h', '_', '_']
				{'string': 'z/uy/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'c', 'h', '_', '_']
				version split: ['z', 'uy', 'ch', '_', '_']
				{'string': 'z/uy/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', 'uy', 'ch', '_', '_']
				version split: ['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				{'string': '_/z/u/y/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				{'string': '_/z/u/y/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch', '_', '_']
				{'string': '_/z/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_', '_']
				version split: ['_', 'z', 'u', 'y', 'ch', '_', '_']
				{'string': '_/z/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch', '_', '_']
				version split: ['_', 'z', 'uy', 'c', 'h', '_', '_']
				{'string': '_/z/uy/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h', '_', '_']
				version split: ['_', 'z', 'uy', 'ch', '_', '_']
				{'string': '_/z/uy/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch', '_', '_']
				version split: ['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				{'string': 'z/_/u/y/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				{'string': 'z/_/u/y/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', '_', '_', 'h']
				version split: ['z', '_', 'u', 'y', 'ch', '_', '_']
				{'string': 'z/_/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_', '_']
				version split: ['z', '_', 'u', 'y', 'ch', '_', '_']
				{'string': 'z/_/u/y/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch', '_', '_']
				version split: ['z', '_', 'uy', 'c', 'h', '_', '_']
				{'string': 'z/_/uy/c/h/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h', '_', '_']
				version split: ['z', '_', 'uy', 'ch', '_', '_']
				{'string': 'z/_/uy/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['z', '_', 'uy', 'ch', '_', '_']
				version split: ['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				{'string': '_/_/z/u/y/_/_/c', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				{'string': '_/_/z/u/y/_/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				{'string': '_/_/z/u/y/_/_/ch', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', '_', '_', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', '_', '_', 'h']
				{'string': '_/_/z/uy/c/_/_/h', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', '_', '_', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch', '_', '_']
				{'string': '_/_/z/uy/ch/_/_', 'rgx': '((_))/((_))/((u))/((h)|(c)|(ch))/((c)|(ch))/((_))/((_))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch', '_', '_']
		FAIL: 
		only one version left: ['s', 'h', 'u', 'c', '_', '_', '_']
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'u', 'ch', '_', '_', '_']
		only one version left: ['s', '_', 'u', 'ch', '_', '_', 'e']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		only one version left: ['s', '_', 'ƿ', '_', '_', '_', '_']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
		SPLIT: ['h', '_', 'ƿ', '_', 'c.cch', 'c.u.ch', '_', '----!']
		SPLIT: ['s', 'h', 'u', 'c', '_', '_', '_']
		['s', 'h', 'u', 'c', '_', '_', '_']
		['s', 'h', 'u', 'c', '_', '_', '_']
		SPLIT: ['s', '_', '_', 'k', '_', '_', 'e.i', '----!']
		SPLIT: ['s', '_', '_', 'h.c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', 'ch', '_', '_', '_']
		['s', '_', 'u', 'ch', '_', '_', '_']
		['s', '_', 'u', 'ch', '_', '_', '_']
		SPLIT: ['s', '_', 'u', 'ch', '_', '_', 'e']
		['s', '_', 'u', 'ch', '_', '_', 'e']
		['s', '_', 'u', 'ch', '_', '_', 'e']
		SPLIT: ['s', '_', 'u', 'h.c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', 'c', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', 'k', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', 'k', '_', '_', 'e', '----!']
		SPLIT: ['s', '_', 'u', 'h.c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', '_', '_', '_']
		['s', '_', 'ƿ', '_', '_', '_', '_']
		SPLIT: ['s', '_', 'w', 'c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', 'c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'w', 'c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'w', '_', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'w', '_', '_', '_', 'i', '----!']
		SPLIT: ['s', '_', 'ƿ', '_', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c', 'c.cch.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.ƿ', 'c.ch', 'c.ch', '_', 'e', '----!']
		SPLIT: ['s', '_', 'u.ƿ', '_', 'c', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.w', '_', 'c', '_', '_', '----!']
		SPLIT: ['_', '_', 'u', 'h.c.ch', 'c.ch', '_', '_', '----!']
		SPLIT: ['_', '_', 'u', 'h.c.ch', 'c.ch', '_', '_', '----!']
		version for pattern CCVCCCV is INVALID
		[{'h', 'ƿ', 'u', 'hu', '_'}, {'h', 'ch', 'u', '_', 'c'}]
		24
		OVERVIEW: version for pattern CCVCCCV
{'h', 'ƿ', 'u', 'hu', '_'}, {'h', 'ch', 'u', '_', 'c'}
faulty splits: 24
hƿc.cchc.u.ch----! <-! hsƿucch
ske.i----! <-! slike
sh.c.chc.ch----! <-! soch
suh.c.chc.ch----! <-! suich
succ----! <-! suilc
suk----! <-! suilk
suke----! <-! suilke
suh.c.chc.ch----! <-! suych
swc.chc.ch----! <-! swech
sƿc.chc.ch----! <-! sƿich
swc.chc.ch----! <-! swich
sƿc----! <-! sƿilc
swc----! <-! swilc
sƿc.ch----! <-! sƿilch
swi----! <-! swilk
sƿc----! <-! sƿillc
su.ƿcc----! <-! sƿuc
su.ƿcc.cch.ch----! <-! sƿucch
su.ƿc.chc.ch----! <-! sƿuch
su.ƿc.chc.che----! <-! sƿuche
su.ƿc----! <-! sƿulc
su.wc----! <-! swulc
uh.c.chc.ch----! <-! zuich
uh.c.chc.ch----! <-! zuych
s | ƿ | u | c | c | h | e
h | _ | ƿ | _ | c.cch | c.u.ch | _ | ----!
s | h | u | c | _ | _ | _
s | _ | _ | k | _ | _ | e.i | ----!
s | _ | _ | h.c.ch | c.ch | _ | _ | ----!
s | _ | u | ch | _ | _ | _
s | _ | u | ch | _ | _ | e
s | _ | u | h.c.ch | c.ch | _ | _ | ----!
s | _ | u | c | c | _ | _ | ----!
s | _ | u | k | _ | _ | _ | ----!
s | _ | u | k | _ | _ | e | ----!
s | _ | u | h.c.ch | c.ch | _ | _ | ----!
s | _ | ƿ | _ | _ | _ | _
s | _ | w | c.ch | c.ch | _ | _ | ----!
s | _ | ƿ | c.ch | c.ch | _ | _ | ----!
s | _ | w | c.ch | c.ch | _ | _ | ----!
s | _ | ƿ | _ | c | _ | _ | ----!
s | _ | w | _ | c | _ | _ | ----!
s | _ | ƿ | _ | c.ch | _ | _ | ----!
s | _ | w | _ | _ | _ | i | ----!
s | _ | ƿ | _ | c | _ | _ | ----!
s | _ | u.ƿ | c | c | _ | _ | ----!
s | _ | u.ƿ | c | c.cch.ch | _ | _ | ----!
s | _ | u.ƿ | c.ch | c.ch | _ | _ | ----!
s | _ | u.ƿ | c.ch | c.ch | _ | e | ----!
s | _ | u.ƿ | _ | c | _ | _ | ----!
s | _ | u.w | _ | c | _ | _ | ----!
_ | _ | u | h.c.ch | c.ch | _ | _ | ----!
_ | _ | u | h.c.ch | c.ch | _ | _ | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'ƿ', 's'},{'h', 'ƿ', 'u', 'hu', '_', 'l'},{'h', 'ƿ', 'u', 'w', 'hu', '_'},{'h', 'ƿ', 'u', 'hu', '_', 'z'},{'h', 'ƿ', 'u', 'hu', '_'}
3 : {'h', 'ch', 'k', '_', 'l', 'c'},{'c', 'u'},{'c', 'ƿ'},{'h', 'ch', 'k', '_', 'll', 'c'},{'h', 'ch', 'u', 'k', '_', 'c'},{'h', 'ch', 'k', '_', 'c', 'i'}
4 : {'h', 'ch', 'cch', '_', 'c'},{'ch', 'cch', '_', 'l', 'c'},{'c', '_', 'cch', 'i'},{'ch', 'cch', '_', 'c', 'i'},{'ch', 'k', 'cch', '_', 'c'},{'c', 'k', '_', 'cch'}
5 : {'h', 'ch', 'u', '_', 'c', 'i'},{'h', 'ch', 'u', 'k', '_', 'c'},{'h', 'ch', 'u', '_', 'c'},{'h', 'ch', 'u', '_', 'l', 'c'},{'h', 'ch', 'u', '_', 'll', 'c'}
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 4}], [{'lit': 'ch', 'ln': 2, 'index': 5}], [{'lit': 'cch', 'ln': 3, 'index': 4}, {'lit': 'ch', 'ln': 2, 'index': 5}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'hu', 'ln': 2, 'index': 1}], [{'lit': 'sh', 'ln': 2, 'index': 0}], [{'lit': 'hu', 'ln': 2, 'index': 1}, {'lit': 'sh', 'ln': 2, 'index': 0}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 2}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'll', 'ln': 2, 'index': 3}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'cch', 'ln': 3, 'index': 3}], [{'lit': 'ch', 'ln': 2, 'index': 4}], [{'lit': 'cch', 'ln': 3, 'index': 3}, {'lit': 'ch', 'ln': 2, 'index': 4}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'ui', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'ui', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}]]
	[[{'lit': 'ch', 'ln': 2, 'index': 3}], [{'lit': 'uy', 'ln': 2, 'index': 1}], [{'lit': 'ch', 'ln': 2, 'index': 3}, {'lit': 'uy', 'ln': 2, 'index': 1}]]
	MIN pattern length=5
	Pattern CCVC is invalid
	Pattern CVCC is invalid
	Pattern CCVCC is valid
	Pattern CCCC is invalid
	Pattern CCCVCC is valid
	Pattern CCCCCCC is invalid
	Pattern CCCCCC is invalid
	Pattern CCVCCV is valid
	Pattern CCCVC is valid
	Pattern CCVCV is valid
	Pattern CVCV is invalid
	Pattern CCCV is invalid
	Pattern CVVCC is invalid
	Pattern CCCVCCC is valid
	Pattern CCCCCV is invalid
	Pattern CVCCV is valid
	Pattern CVC is invalid
	Pattern CCCCCCV is invalid
	Pattern CVVCCV is invalid
	Pattern CCCCV is invalid
	Pattern CCC is invalid
	Pattern CCCCC is invalid
	Pattern CVVC is invalid
	Pattern CC is invalid
	Pattern CCVCCCV is valid
	Pattern CCVCCC is valid
	Making the selection for pattern: CCVCCC
	Selection for pattern: CCVCCC completed
	Making a version for pattern: CCVCCC
			___CCVCCC : 0___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/c/c/h
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/c/ch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					> version: h/s/ƿ/u/cch
					TRYING: h
					RESULT:  ['h']
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: s
					> version: s/h/u/c
					TRYING: s
					> version: s/hu/c
					TRYING: s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					> version: sh/u/c
					TRYING: sh
					adding blocked set: C = C >> h, sh, s
					RESULT:  ['s']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: s
					> version: s/l/i/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: s
					> version: s/o/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: s
					> version: s/u/c/h
					TRYING: s
					> version: s/u/ch
					TRYING: s
					> version: s/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/c/h/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					> version: s/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/c/h
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/u/i/ch
					TRYING: s
					> version: s/ui/c/h
					TRYING: s
					> version: s/ui/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: s
					> version: s/u/i/l/c
					TRYING: s
					> version: s/ui/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: s
					> version: s/u/i/l/k
					TRYING: s
					> version: s/ui/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/u/i/l/k/e
					TRYING: s
					> version: s/ui/l/k/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/c/h
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/u/y/ch
					TRYING: s
					> version: s/uy/c/h
					TRYING: s
					> version: s/uy/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: s
					> version: s/w/e/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/c/h
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					> version: s/ƿ/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/c/h
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					> version: s/w/i/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: s
					> version: s/ƿ/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: s
					> version: s/w/i/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: s
					> version: s/w/i/l/k
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: s
					> version: s/ƿ/u/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/c/h/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/c/ch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					> version: s/ƿ/u/cch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/c/h
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					> version: s/ƿ/u/ch
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/c/h/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					> version: s/ƿ/u/ch/e
					TRYING: s
					RESULT:  ['s']
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: s
					> version: s/ƿ/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: s
					> version: s/w/u/l/c
					TRYING: s
					RESULT:  ['s']
				ANALYSING: zuich
					resolving (6)
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, z, s
					> version: z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
				ANALYSING: zuych
					resolving (6)
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					> version: z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, _, z, s
					RESULT:  ['_']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
			___CCVCCC : 1___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (8)
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					> version: h/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> ƿ, s
					RESULT:  ['_']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: h
					> version: s/h/u/c
					TRYING: h
					> version: s/hu/c
					TRYING: hu
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					> version: sh/u/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'u', 'hu'}
					RESULT:  ['h', 'u', 'hu']
				ANALYSING: slike
					resolving (2)
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					> version: s/l/i/k/e
					TRYING: l
					adding blocked set: C = C >> h, ƿ, u, hu, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
				ANALYSING: soch
					resolving (2)
					> version: s/o/c/h
					TRYING: o
					> version: s/o/ch
					TRYING: o
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'o', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
				ANALYSING: such
					resolving (4)
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
				ANALYSING: suche
					resolving (4)
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
				ANALYSING: suich
					resolving (6)
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/c/h
					TRYING: ui
					> version: s/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
				ANALYSING: suilc
					resolving (3)
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/c
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/c
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
				ANALYSING: suilk
					resolving (3)
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
				ANALYSING: suilke
					resolving (3)
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/i/l/k/e
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ui/l/k/e
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
				ANALYSING: suych
					resolving (6)
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/uy/c/h
					TRYING: uy
					> version: s/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
				ANALYSING: sƿ
					resolving (1)
					> version: s/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
				ANALYSING: swech
					resolving (2)
					> version: s/w/e/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/e/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
				ANALYSING: sƿich
					resolving (4)
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
				ANALYSING: swich
					resolving (4)
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/c/h
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/ch
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
				ANALYSING: sƿilc
					resolving (2)
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/i/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
				ANALYSING: swilc
					resolving (2)
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
				ANALYSING: swilk
					resolving (2)
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/i/l/k
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
				ANALYSING: sƿuc
					resolving (2)
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
				ANALYSING: sƿucche
					resolving (8)
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/cch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
				ANALYSING: sƿuch
					resolving (4)
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
				ANALYSING: sƿuche
					resolving (4)
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/c/h/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/ch/e
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
				ANALYSING: sƿulc
					resolving (2)
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: s/ƿ/u/l/c
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, u, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
				ANALYSING: swulc
					resolving (2)
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					> version: s/w/u/l/c
					TRYING: w
					adding blocked set: C = C >> h, ƿ, u, w, hu, _
					RESULT:  ['_']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
				ANALYSING: zuich
					resolving (12)
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/ui/c/h
					TRYING: ui
					> version: z/ui/ch
					TRYING: ui
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/i/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/ui/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
				ANALYSING: zuych
					resolving (12)
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ƿ, u, hu, _
					> version: z/uy/c/h
					TRYING: uy
					> version: z/uy/ch
					TRYING: uy
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/u/y/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/c/h
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					> version: _/z/uy/ch
					TRYING: z
					adding blocked set: C = C >> h, ƿ, u, hu, _, z
					RESULT:  ['_']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
			___CCVCCC : 2___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (16)
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/c/c/h
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/c/ch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/s/ƿ/u/cch
					TRYING: ƿ
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/c/ch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					> version: h/_/s/ƿ/u/cch
					TRYING: s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: u
					> version: s/h/u/c
					TRYING: u
					> version: s/hu/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					> version: sh/u/c
					TRYING: c
					RESULT:  ['u']
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: i
					> version: s/l/i/k/e
					TRYING: i
					> version: s/_/l/i/k/e
					TRYING: l
					> version: s/_/l/i/k/e
					TRYING: l
					RESULT:  ['i']
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: c
					> version: s/o/ch
					TRYING: ch
					> version: s/_/o/c/h
					TRYING: o
					> version: s/_/o/ch
					TRYING: o
					RESULT:  ['o']
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: c
					> version: s/u/c/h
					TRYING: c
					> version: s/u/ch
					TRYING: ch
					> version: s/u/ch
					TRYING: ch
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/c/h
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					> version: s/_/u/ch
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/c/h/e
					TRYING: c
					> version: s/u/ch/e
					TRYING: ch
					> version: s/u/ch/e
					TRYING: ch
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/c/h/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					> version: s/_/u/ch/e
					TRYING: u
					RESULT:  ['u']
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/c/h
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/u/i/ch
					TRYING: i
					> version: s/ui/c/h
					TRYING: c
					> version: s/ui/ch
					TRYING: ch
					> version: s/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: i
					> version: s/u/i/l/c
					TRYING: i
					> version: s/ui/l/c
					TRYING: l
					> version: s/_/u/i/l/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/c
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/c
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: i
					> version: s/u/i/l/k
					TRYING: i
					> version: s/ui/l/k
					TRYING: l
					> version: s/_/u/i/l/k
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/k
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/k
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/u/i/l/k/e
					TRYING: i
					> version: s/ui/l/k/e
					TRYING: l
					> version: s/_/u/i/l/k/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/u/i/l/k/e
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: s/_/ui/l/k/e
					TRYING: ui
					adding blocked set: V = V >> u, o, _, ui, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/c/h
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/u/y/ch
					TRYING: y
					> version: s/uy/c/h
					TRYING: c
					> version: s/uy/ch
					TRYING: ch
					> version: s/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, _, uy, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: s/_/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, _, uy, i
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
				ANALYSING: sƿ
					resolving (2)
					> version: s/ƿ
					> version: s/_/ƿ
					TRYING: ƿ
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: e
					> version: s/w/e/ch
					TRYING: e
					> version: s/_/w/e/c/h
					TRYING: w
					> version: s/_/w/e/ch
					TRYING: w
					RESULT:  ['e']
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/c/h
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/ƿ/i/ch
					TRYING: i
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/c/h
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					> version: s/_/ƿ/i/ch
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/c/h
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/w/i/ch
					TRYING: i
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/c/h
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					> version: s/_/w/i/ch
					TRYING: w
					RESULT:  ['i']
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/ƿ/i/l/c
					TRYING: i
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					> version: s/_/ƿ/i/l/c
					TRYING: ƿ
					RESULT:  ['i']
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: i
					> version: s/w/i/l/c
					TRYING: i
					> version: s/_/w/i/l/c
					TRYING: w
					> version: s/_/w/i/l/c
					TRYING: w
					RESULT:  ['i']
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: i
					> version: s/w/i/l/k
					TRYING: i
					> version: s/_/w/i/l/k
					TRYING: w
					> version: s/_/w/i/l/k
					TRYING: w
					RESULT:  ['i']
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/ƿ/u/c
					TRYING: u
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					> version: s/_/ƿ/u/c
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/c/h/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/c/ch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/ƿ/u/cch/e
					TRYING: u
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: ƿ
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/cch/e
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/c/h
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/ƿ/u/ch
					TRYING: u
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/c/h
					TRYING: ƿ
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					> version: s/_/ƿ/u/ch
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/c/h/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/ƿ/u/ch/e
					TRYING: u
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/_/ƿ/u/c/h/e
					TRYING: ƿ
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					> version: s/_/ƿ/u/ch/e
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/ƿ/u/l/c
					TRYING: u
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					> version: s/_/ƿ/u/l/c
					TRYING: ƿ
					RESULT:  ['u']
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: u
					> version: s/w/u/l/c
					TRYING: u
					> version: s/_/w/u/l/c
					TRYING: w
					> version: s/_/w/u/l/c
					TRYING: w
					RESULT:  ['u']
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/c/h
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/u/i/ch
					TRYING: i
					> version: z/ui/c/h
					TRYING: c
					> version: z/ui/ch
					TRYING: ch
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/z/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/u/i/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/ui/c/h
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: z/_/ui/ch
					TRYING: ui
					adding blocked set: V = V >> u, o, e, _, ui, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/u/i/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					> version: _/_/z/ui/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'i'}
					RESULT:  ['u', 'i']
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/c/h
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/u/y/ch
					TRYING: y
					> version: z/uy/c/h
					TRYING: c
					> version: z/uy/ch
					TRYING: ch
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/z/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/c/h
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/u/y/ch
					TRYING: u
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/uy/c/h
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: z/_/uy/ch
					TRYING: uy
					adding blocked set: V = V >> u, o, e, _, uy, i, y
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/u/y/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/c/h
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					> version: _/_/z/uy/ch
					TRYING: z
					>>> MULTIPLE RESOLVE OPTIONS: {'u', 'y'}
					RESULT:  ['u', 'y']
			___CCVCCC : 3___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (32)
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
				ANALYSING: shuc
					resolving (7)
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/h/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
				ANALYSING: slike
					resolving (4)
					> version: s/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/l/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/i/_/k/e(CCAACV)
s/l/i/_/k/e(CCAACV)
s/_/l/_/i/k/e(CACAACV)
s/_/l/_/i/k/e(CACAACV)
				ANALYSING: soch
					resolving (4)
					> version: s/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/o/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/c/_/h(CVCAC)
s/o/ch/_(CVCA)
s/_/o/_/c/h(CAVACC)
s/_/o/_/ch(CAVAC)
				ANALYSING: such
					resolving (8)
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
				ANALYSING: suche
					resolving (8)
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/ch/e
					TRYING: e
					> version: s/u/ch/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/_/h/e(CACACV)
s/u/c/_/h/e(CACACV)
s/u/ch/_/e(CACAV)
s/u/ch/_/e(CACAV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/ch/e(CAAACV)
s/_/u/_/ch/e(CAAACV)
				ANALYSING: suich
					resolving (12)
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', '_', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/ch(CAAAC)
s/u/i/_/ch(CAAAC)
s/ui/c/_/h(CVCAC)
s/ui/ch/_(CVCA)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/ch(CAAAAC)
s/_/u/_/i/ch(CAAAAC)
s/_/ui/_/c/h(CAVACC)
s/_/ui/_/ch(CAVAC)
				ANALYSING: suilc
					resolving (6)
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/_/l/c(CAAACC)
s/u/i/_/l/c(CAAACC)
s/ui/l/_/c(CVCAC)
s/_/u/_/i/l/c(CAAAACC)
s/_/u/_/i/l/c(CAAAACC)
s/_/ui/_/l/c(CAVACC)
				ANALYSING: suilk
					resolving (6)
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/_/l/k(CAAACC)
s/u/i/_/l/k(CAAACC)
s/ui/l/_/k(CVCAC)
s/_/u/_/i/l/k(CAAAACC)
s/_/u/_/i/l/k(CAAAACC)
s/_/ui/_/l/k(CAVACC)
				ANALYSING: suilke
					resolving (6)
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/_/l/k/e(CAAACCV)
s/u/i/_/l/k/e(CAAACCV)
s/ui/l/_/k/e(CVCACV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/ui/_/l/k/e(CAVACCV)
				ANALYSING: suych
					resolving (12)
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', '_', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/ch(CAAAC)
s/u/y/_/ch(CAAAC)
s/uy/c/_/h(CVCAC)
s/uy/ch/_(CVCA)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/ch(CAAAAC)
s/_/u/_/y/ch(CAAAAC)
s/_/uy/_/c/h(CAVACC)
s/_/uy/_/ch(CAVAC)
				ANALYSING: sƿ
					resolving (4)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
				ANALYSING: swech
					resolving (4)
					> version: s/w/e/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/e/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/w/e/c/h
					TRYING: e
					> version: s/_/w/e/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'e', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/_/c/h(CCVACC)
s/w/e/_/ch(CCVAC)
s/_/w/_/e/c/h(CACAVCC)
s/_/w/_/e/ch(CACAVC)
				ANALYSING: sƿich
					resolving (8)
					> version: s/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/ch(CCAAC)
s/ƿ/i/_/ch(CCAAC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/ch(CACAAC)
s/_/ƿ/_/i/ch(CACAAC)
				ANALYSING: swich
					resolving (8)
					> version: s/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/ch(CCAAC)
s/w/i/_/ch(CCAAC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/ch(CACAAC)
s/_/w/_/i/ch(CACAAC)
				ANALYSING: sƿilc
					resolving (4)
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
				ANALYSING: swilc
					resolving (4)
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
				ANALYSING: swilk
					resolving (4)
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
				ANALYSING: sƿuc
					resolving (4)
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/_/c(CCAAC)
s/ƿ/u/_/c(CCAAC)
s/_/ƿ/_/u/c(CACAAC)
s/_/ƿ/_/u/c(CACAAC)
				ANALYSING: sƿucche
					resolving (16)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
s/_/ƿ/_/u/c/c/h/e(CACAACCCV)
s/_/ƿ/_/u/c/c/h/e(CACAACCCV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/c/ch/e(CACAACCV)
s/_/ƿ/_/u/c/ch/e(CACAACCV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/cch/e(CACAACV)
				ANALYSING: sƿuch
					resolving (8)
					> version: s/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/ch(CCAAC)
s/ƿ/u/_/ch(CCAAC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/ch(CACAAC)
s/_/ƿ/_/u/ch(CACAAC)
				ANALYSING: sƿuche
					resolving (8)
					> version: s/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/ch/e(CCAACV)
s/ƿ/u/_/ch/e(CCAACV)
s/_/ƿ/_/u/c/h/e(CACAACCV)
s/_/ƿ/_/u/c/h/e(CACAACCV)
s/_/ƿ/_/u/ch/e(CACAACV)
s/_/ƿ/_/u/ch/e(CACAACV)
				ANALYSING: sƿulc
					resolving (4)
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
				ANALYSING: swulc
					resolving (4)
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/w/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
				ANALYSING: zuich
					resolving (24)
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/ui/c/h
					TRYING: ui
					> version: _/_/z/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/ch(CAAAC)
z/u/i/_/ch(CAAAC)
z/ui/c/_/h(CVCAC)
z/ui/ch/_(CVCA)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/ch(ACAAAC)
_/z/u/_/i/ch(ACAAAC)
_/z/ui/_/c/h(ACVACC)
_/z/ui/_/ch(ACVAC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/ch(CAAAAC)
z/_/u/_/i/ch(CAAAAC)
z/_/ui/_/c/h(CAVACC)
z/_/ui/_/ch(CAVAC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/ui/c/h(AACAVCC)
_/_/z/_/ui/ch(AACAVC)
				ANALYSING: zuych
					resolving (24)
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/uy/c/h
					TRYING: uy
					> version: _/_/z/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/ch(CAAAC)
z/u/y/_/ch(CAAAC)
z/uy/c/_/h(CVCAC)
z/uy/ch/_(CVCA)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/ch(ACAAAC)
_/z/u/_/y/ch(ACAAAC)
_/z/uy/_/c/h(ACVACC)
_/z/uy/_/ch(ACVAC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/ch(CAAAAC)
z/_/u/_/y/ch(CAAAAC)
z/_/uy/_/c/h(CAVACC)
z/_/uy/_/ch(CAVAC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/uy/c/h(AACAVCC)
_/_/z/_/uy/ch(AACAVC)
			___CCVCCC : 4___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (64)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> c, l
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					adding blocked set: C = C >> c, l
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> c, l, cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> c, l, cch
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					adding blocked set: C = C >> c, l
					> version: h/s/ƿ/u/c/ch
					TRYING: c
					adding blocked set: C = C >> c, l
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> c, l, cch
					> version: h/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> c, l, cch
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> c, u, l
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, l
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: s
					adding blocked set: C = C >> c, l, s
					RESULT:  ['_']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', 'u', '_', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				adding dashed alternative: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				adding dashed alternative: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				h/s/ƿ/u/c/c/h(CCCCCCC)
h/s/ƿ/u/c/c/h(CCCVCCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/s/ƿ/u/c/ch(CCCCCC)
h/s/ƿ/u/c/ch(CCCVCC)
h/s/ƿ/u/cch(CCCCC)
h/s/ƿ/u/cch(CCCVC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/c/c/h(CACCACCC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/c/ch(CACCACC)
h/_/s/ƿ/u/cch(CACCAC)
h/_/s/ƿ/u/cch(CACCAC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/c/c/h(CCACACCC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/c/ch(CCACACC)
h/s/_/ƿ/u/cch(CCACAC)
h/s/_/ƿ/u/cch(CCACAC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/c/c/h(CAACCACCC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/c/ch(CAACCACC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/_/_/s/ƿ/u/cch(CAACCAC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/c/c/h(CCCAACCC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/c/ch(CCCAACC)
h/s/ƿ/_/u/cch(CCCAAC)
h/s/ƿ/_/u/cch(CCCAAC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/c/c/h(CACACACCC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/c/ch(CACACACC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/_/s/_/ƿ/u/cch(CACACAC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/c/c/h(CCAACACCC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/c/ch(CCAACACC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/s/_/_/ƿ/u/cch(CCAACAC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/c/c/h(CAAACCACCC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/c/ch(CAAACCACC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/_/_/_/s/ƿ/u/cch(CAAACCAC)
h/s/ƿ/u/_/c/c/h(CCCAACCC)
h/s/ƿ/u/_/c/c/h(CCCAACCC)
h/s/ƿ/u/_/cch(CCCAAC)
h/s/ƿ/u/_/cch(CCCAAC)
h/s/ƿ/u/_/c/ch(CCCAACC)
h/s/ƿ/u/_/c/ch(CCCAACC)
h/s/ƿ/u/_/cch(CCCAAC)
h/s/ƿ/u/_/cch(CCCAAC)
h/_/s/ƿ/_/u/c/c/h(CACCAACCC)
h/_/s/ƿ/_/u/c/c/h(CACCAACCC)
h/_/s/ƿ/_/u/cch(CACCAAC)
h/_/s/ƿ/_/u/cch(CACCAAC)
h/_/s/ƿ/_/u/c/ch(CACCAACC)
h/_/s/ƿ/_/u/c/ch(CACCAACC)
h/_/s/ƿ/_/u/cch(CACCAAC)
h/_/s/ƿ/_/u/cch(CACCAAC)
h/s/_/ƿ/_/u/c/c/h(CCACAACCC)
h/s/_/ƿ/_/u/c/c/h(CCACAACCC)
h/s/_/ƿ/_/u/cch(CCACAAC)
h/s/_/ƿ/_/u/cch(CCACAAC)
h/s/_/ƿ/_/u/c/ch(CCACAACC)
h/s/_/ƿ/_/u/c/ch(CCACAACC)
h/s/_/ƿ/_/u/cch(CCACAAC)
h/s/_/ƿ/_/u/cch(CCACAAC)
h/_/_/s/_/ƿ/u/c/c/h(CAACACACCC)
h/_/_/s/_/ƿ/u/c/c/h(CAACACACCC)
h/_/_/s/_/ƿ/u/cch(CAACACAC)
h/_/_/s/_/ƿ/u/cch(CAACACAC)
h/_/_/s/_/ƿ/u/c/ch(CAACACACC)
h/_/_/s/_/ƿ/u/c/ch(CAACACACC)
h/_/_/s/_/ƿ/u/cch(CAACACAC)
h/_/_/s/_/ƿ/u/cch(CAACACAC)
h/s/ƿ/_/_/u/c/c/h(CCCAAACCC)
h/s/ƿ/_/_/u/c/c/h(CCCAAACCC)
h/s/ƿ/_/_/u/cch(CCCAAAC)
h/s/ƿ/_/_/u/cch(CCCAAAC)
h/s/ƿ/_/_/u/c/ch(CCCAAACC)
h/s/ƿ/_/_/u/c/ch(CCCAAACC)
h/s/ƿ/_/_/u/cch(CCCAAAC)
h/s/ƿ/_/_/u/cch(CCCAAAC)
h/_/s/_/_/ƿ/u/c/c/h(CACAACACCC)
h/_/s/_/_/ƿ/u/c/c/h(CACAACACCC)
h/_/s/_/_/ƿ/u/cch(CACAACAC)
h/_/s/_/_/ƿ/u/cch(CACAACAC)
h/_/s/_/_/ƿ/u/c/ch(CACAACACC)
h/_/s/_/_/ƿ/u/c/ch(CACAACACC)
h/_/s/_/_/ƿ/u/cch(CACAACAC)
h/_/s/_/_/ƿ/u/cch(CACAACAC)
h/s/_/_/_/ƿ/u/c/c/h(CCAAACACCC)
h/s/_/_/_/ƿ/u/c/c/h(CCAAACACCC)
h/s/_/_/_/ƿ/u/cch(CCAAACAC)
h/s/_/_/_/ƿ/u/cch(CCAAACAC)
h/s/_/_/_/ƿ/u/c/ch(CCAAACACC)
h/s/_/_/_/ƿ/u/c/ch(CCAAACACC)
h/s/_/_/_/ƿ/u/cch(CCAAACAC)
h/s/_/_/_/ƿ/u/cch(CCAAACAC)
h/_/_/_/_/s/ƿ/u/c/c/h(CAAAACCACCC)
h/_/_/_/_/s/ƿ/u/c/c/h(CAAAACCACCC)
h/_/_/_/_/s/ƿ/u/cch(CAAAACCAC)
h/_/_/_/_/s/ƿ/u/cch(CAAAACCAC)
h/_/_/_/_/s/ƿ/u/c/ch(CAAAACCACC)
h/_/_/_/_/s/ƿ/u/c/ch(CAAAACCACC)
h/_/_/_/_/s/ƿ/u/cch(CAAAACCAC)
h/_/_/_/_/s/ƿ/u/cch(CAAAACCAC)
				ANALYSING: shuc
					resolving (14)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/h/u/_/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					RESULT:  ['_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', 'c', '_']
				adding dashed alternative: ['s', 'hu', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_']
				adding dashed alternative: ['s', 'h', 'u', '_', '_', 'c']
				adding dashed alternative: ['s', 'h', 'u', '_', '_', 'c']
				adding dashed alternative: ['s', 'hu', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				adding dashed alternative: ['sh', 'u', 'c', '_', '_']
				s/h/u/c(CCCC)
s/h/u/c(CCVC)
s/hu/c(CCC)
sh/u/c(CCC)
sh/u/c(CVC)
sh/u/c(CCC)
sh/u/c(CVC)
s/h/u/_/c(CCAAC)
s/h/u/_/c(CCAAC)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/c/_(CCACA)
s/h/u/c/_(CCACA)
s/hu/c/_(CCCA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
sh/u/c/_(CACA)
s/h/u/_/_/c(CCAAAC)
s/h/u/_/_/c(CCAAAC)
s/hu/c/_/_(CCCAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
sh/u/c/_/_(CACAA)
				ANALYSING: slike
					resolving (8)
					> version: s/l/i/k/e
					TRYING: e
					> version: s/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/l/i/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/l/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/i/_/k/e(CCAACV)
s/l/i/_/k/e(CCAACV)
s/_/l/_/i/k/e(CACAACV)
s/_/l/_/i/k/e(CACAACV)
s/l/i/k/_/e(CCACAV)
s/l/i/k/_/e(CCACAV)
s/_/l/i/_/k/e(CACAACV)
s/_/l/i/_/k/e(CACAACV)
s/l/i/_/_/k/e(CCAAACV)
s/l/i/_/_/k/e(CCAAACV)
s/_/l/_/_/i/k/e(CACAAACV)
s/_/l/_/_/i/k/e(CACAAACV)
				ANALYSING: soch
					resolving (8)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/o/ch
					> version: s/o/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/o/ch/_
					> version: s/_/o/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/o/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'o', 'c', 'h', '_']
				adding dashed alternative: ['s', 'o', 'ch', '_']
				adding dashed alternative: ['s', '_', 'o', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'o', 'ch', '_']
				adding dashed alternative: ['s', 'o', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'o', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'o', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'o', '_', '_', 'ch']
				s/o/c/h(CVCC)
s/o/ch(CVC)
s/_/o/c/h(CAVCC)
s/_/o/ch(CAVC)
s/o/c/_/h(CVCAC)
s/o/ch/_(CVCA)
s/_/o/_/c/h(CAVACC)
s/_/o/_/ch(CAVAC)
s/o/c/h/_(CVCCA)
s/o/ch/_(CVCA)
s/_/o/c/_/h(CAVCAC)
s/_/o/ch/_(CAVCA)
s/o/c/_/_/h(CVCAAC)
s/o/ch/_/_(CVCAA)
s/_/o/_/_/c/h(CAVAACC)
s/_/o/_/_/ch(CAVAAC)
				ANALYSING: such
					resolving (16)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch']
				s/u/c/h(CCCC)
s/u/c/h(CVCC)
s/u/ch(CCC)
s/u/ch(CVC)
s/_/u/c/h(CAACC)
s/_/u/c/h(CAACC)
s/_/u/ch(CAAC)
s/_/u/ch(CAAC)
s/u/c/_/h(CACAC)
s/u/c/_/h(CACAC)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/_/c/h(CAAACC)
s/_/u/_/c/h(CAAACC)
s/_/u/_/ch(CAAAC)
s/_/u/_/ch(CAAAC)
s/u/c/h/_(CACCA)
s/u/c/h/_(CACCA)
s/u/ch/_(CACA)
s/u/ch/_(CACA)
s/_/u/c/_/h(CAACAC)
s/_/u/c/_/h(CAACAC)
s/_/u/ch/_(CAACA)
s/_/u/ch/_(CAACA)
s/u/c/_/_/h(CACAAC)
s/u/c/_/_/h(CACAAC)
s/u/ch/_/_(CACAA)
s/u/ch/_/_(CACAA)
s/_/u/_/_/c/h(CAAAACC)
s/_/u/_/_/c/h(CAAAACC)
s/_/u/_/_/ch(CAAAAC)
s/_/u/_/_/ch(CAAAAC)
				ANALYSING: suche
					resolving (16)
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/c/h/e
					TRYING: e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/_/u/ch/e
					TRYING: e
					> version: s/u/c/_/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/c/_/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/u/ch/_/e
					TRYING: e
					> version: s/_/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'c', 'h', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', 'u', 'ch', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'c', '_', '_', 'h', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_', 'e']
				adding dashed alternative: ['s', 'u', 'ch', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'ch', 'e']
				s/u/c/h/e(CCCCV)
s/u/c/h/e(CVCCV)
s/u/ch/e(CCCV)
s/u/ch/e(CVCV)
s/_/u/c/h/e(CAACCV)
s/_/u/c/h/e(CAACCV)
s/_/u/ch/e(CAACV)
s/_/u/ch/e(CAACV)
s/u/c/_/h/e(CACACV)
s/u/c/_/h/e(CACACV)
s/u/ch/_/e(CACAV)
s/u/ch/_/e(CACAV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/c/h/e(CAAACCV)
s/_/u/_/ch/e(CAAACV)
s/_/u/_/ch/e(CAAACV)
s/u/c/h/_/e(CACCAV)
s/u/c/h/_/e(CACCAV)
s/u/ch/e/_(CACVA)
s/u/ch/e/_(CACVA)
s/_/u/c/_/h/e(CAACACV)
s/_/u/c/_/h/e(CAACACV)
s/_/u/ch/_/e(CAACAV)
s/_/u/ch/_/e(CAACAV)
s/u/c/_/_/h/e(CACAACV)
s/u/c/_/_/h/e(CACAACV)
s/u/ch/_/_/e(CACAAV)
s/u/ch/_/_/e(CACAAV)
s/_/u/_/_/c/h/e(CAAAACCV)
s/_/u/_/_/c/h/e(CAAAACCV)
s/_/u/_/_/ch/e(CAAAACV)
s/_/u/_/_/ch/e(CAAAACV)
				ANALYSING: suich
					resolving (24)
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/ui/ch
					> version: s/u/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/u/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ui/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ui/ch/_
					> version: s/_/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ui/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['s', 'ui', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', 'ui', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', 'ch']
				s/u/i/c/h(CCCCC)
s/u/i/c/h(CVVCC)
s/u/i/ch(CCCC)
s/u/i/ch(CVVC)
s/ui/c/h(CVCC)
s/ui/ch(CVC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/c/h(CAAACC)
s/_/u/i/ch(CAAAC)
s/_/u/i/ch(CAAAC)
s/_/ui/c/h(CAVCC)
s/_/ui/ch(CAVC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/c/h(CAAACC)
s/u/i/_/ch(CAAAC)
s/u/i/_/ch(CAAAC)
s/ui/c/_/h(CVCAC)
s/ui/ch/_(CVCA)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/c/h(CAAAACC)
s/_/u/_/i/ch(CAAAAC)
s/_/u/_/i/ch(CAAAAC)
s/_/ui/_/c/h(CAVACC)
s/_/ui/_/ch(CAVAC)
s/u/i/c/_/h(CAACAC)
s/u/i/c/_/h(CAACAC)
s/u/i/ch/_(CAACA)
s/u/i/ch/_(CAACA)
s/ui/c/h/_(CVCCA)
s/ui/ch/_(CVCA)
s/_/u/i/_/c/h(CAAAACC)
s/_/u/i/_/c/h(CAAAACC)
s/_/u/i/_/ch(CAAAAC)
s/_/u/i/_/ch(CAAAAC)
s/_/ui/c/_/h(CAVCAC)
s/_/ui/ch/_(CAVCA)
s/u/i/_/_/c/h(CAAAACC)
s/u/i/_/_/c/h(CAAAACC)
s/u/i/_/_/ch(CAAAAC)
s/u/i/_/_/ch(CAAAAC)
s/ui/c/_/_/h(CVCAAC)
s/ui/ch/_/_(CVCAA)
s/_/u/_/_/i/c/h(CAAAAACC)
s/_/u/_/_/i/c/h(CAAAAACC)
s/_/u/_/_/i/ch(CAAAAAC)
s/_/u/_/_/i/ch(CAAAAAC)
s/_/ui/_/_/c/h(CAVAACC)
s/_/ui/_/_/ch(CAVAAC)
				ANALYSING: suilc
					resolving (12)
					> version: s/u/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ui/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/_/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ui', 'l', 'c', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'c']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ui', 'l', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', 'l', 'c']
				s/u/i/l/c(CCCCC)
s/u/i/l/c(CVVCC)
s/ui/l/c(CVCC)
s/_/u/i/l/c(CAAACC)
s/_/u/i/l/c(CAAACC)
s/_/ui/l/c(CAVCC)
s/u/i/_/l/c(CAAACC)
s/u/i/_/l/c(CAAACC)
s/ui/l/_/c(CVCAC)
s/_/u/_/i/l/c(CAAAACC)
s/_/u/_/i/l/c(CAAAACC)
s/_/ui/_/l/c(CAVACC)
s/u/i/l/_/c(CAACAC)
s/u/i/l/_/c(CAACAC)
s/ui/l/c/_(CVCCA)
s/_/u/i/_/l/c(CAAAACC)
s/_/u/i/_/l/c(CAAAACC)
s/_/ui/l/_/c(CAVCAC)
s/u/i/_/_/l/c(CAAAACC)
s/u/i/_/_/l/c(CAAAACC)
s/ui/l/_/_/c(CVCAAC)
s/_/u/_/_/i/l/c(CAAAAACC)
s/_/u/_/_/i/l/c(CAAAAACC)
s/_/ui/_/_/l/c(CAVAACC)
				ANALYSING: suilk
					resolving (12)
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ui/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/_/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/u/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/_/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/_/l/k(CAAACC)
s/u/i/_/l/k(CAAACC)
s/ui/l/_/k(CVCAC)
s/_/u/_/i/l/k(CAAAACC)
s/_/u/_/i/l/k(CAAAACC)
s/_/ui/_/l/k(CAVACC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
s/u/i/_/_/l/k(CAAAACC)
s/u/i/_/_/l/k(CAAAACC)
s/ui/l/_/_/k(CVCAAC)
s/_/u/_/_/i/l/k(CAAAAACC)
s/_/u/_/_/i/l/k(CAAAAACC)
s/_/ui/_/_/l/k(CAVAACC)
				ANALYSING: suilke
					resolving (12)
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/ui/l/k/e
					TRYING: e
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ui/l/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ui/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/u/_/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/u/_/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ui/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/_/l/k/e(CAAACCV)
s/u/i/_/l/k/e(CAAACCV)
s/ui/l/_/k/e(CVCACV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/ui/_/l/k/e(CAVACCV)
s/u/i/l/_/k/e(CAACACV)
s/u/i/l/_/k/e(CAACACV)
s/ui/l/k/_/e(CVCCAV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/ui/l/_/k/e(CAVCACV)
s/u/i/_/_/l/k/e(CAAAACCV)
s/u/i/_/_/l/k/e(CAAAACCV)
s/ui/l/_/_/k/e(CVCAACV)
s/_/u/_/_/i/l/k/e(CAAAAACCV)
s/_/u/_/_/i/l/k/e(CAAAAACCV)
s/_/ui/_/_/l/k/e(CAVAACCV)
				ANALYSING: suych
					resolving (24)
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/_/uy/ch
					> version: s/u/y/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/y/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/u/y/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/u/y/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/uy/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/uy/ch/_
					> version: s/_/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: s/_/uy/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/uy/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['s', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['s', 'uy', 'ch', '_']
				adding dashed alternative: ['s', '_', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', '_', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['s', '_', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['s', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['s', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['s', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['s', 'uy', 'c', '_', '_', 'h']
				adding dashed alternative: ['s', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['s', '_', 'uy', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'uy', '_', '_', 'ch']
				s/u/y/c/h(CCCCC)
s/u/y/c/h(CVVCC)
s/u/y/ch(CCCC)
s/u/y/ch(CVVC)
s/uy/c/h(CVCC)
s/uy/ch(CVC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/c/h(CAAACC)
s/_/u/y/ch(CAAAC)
s/_/u/y/ch(CAAAC)
s/_/uy/c/h(CAVCC)
s/_/uy/ch(CAVC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/c/h(CAAACC)
s/u/y/_/ch(CAAAC)
s/u/y/_/ch(CAAAC)
s/uy/c/_/h(CVCAC)
s/uy/ch/_(CVCA)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/c/h(CAAAACC)
s/_/u/_/y/ch(CAAAAC)
s/_/u/_/y/ch(CAAAAC)
s/_/uy/_/c/h(CAVACC)
s/_/uy/_/ch(CAVAC)
s/u/y/c/_/h(CAACAC)
s/u/y/c/_/h(CAACAC)
s/u/y/ch/_(CAACA)
s/u/y/ch/_(CAACA)
s/uy/c/h/_(CVCCA)
s/uy/ch/_(CVCA)
s/_/u/y/_/c/h(CAAAACC)
s/_/u/y/_/c/h(CAAAACC)
s/_/u/y/_/ch(CAAAAC)
s/_/u/y/_/ch(CAAAAC)
s/_/uy/c/_/h(CAVCAC)
s/_/uy/ch/_(CAVCA)
s/u/y/_/_/c/h(CAAAACC)
s/u/y/_/_/c/h(CAAAACC)
s/u/y/_/_/ch(CAAAAC)
s/u/y/_/_/ch(CAAAAC)
s/uy/c/_/_/h(CVCAAC)
s/uy/ch/_/_(CVCAA)
s/_/u/_/_/y/c/h(CAAAAACC)
s/_/u/_/_/y/c/h(CAAAAACC)
s/_/u/_/_/y/ch(CAAAAAC)
s/_/u/_/_/y/ch(CAAAAAC)
s/_/uy/_/_/c/h(CAVAACC)
s/_/uy/_/_/ch(CAVAAC)
				ANALYSING: sƿ
					resolving (8)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/_/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> ƿ, c, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/ƿ/_(CAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/_/_/ƿ(CAAAAC)
				ANALYSING: swech
					resolving (8)
					> version: s/w/e/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/e/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/w/e/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/e/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/w/_/e/c/h
					TRYING: e
					> version: s/_/w/_/e/ch
					TRYING: e
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'e', 'c', '_', 'h']
				adding dashed alternative: ['s', 'w', 'e', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'e', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'e', '_', 'ch']
				adding dashed alternative: ['s', 'w', 'e', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'e', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'e', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'e', 'ch']
				s/w/e/c/h(CCVCC)
s/w/e/ch(CCVC)
s/_/w/e/c/h(CACVCC)
s/_/w/e/ch(CACVC)
s/w/e/_/c/h(CCVACC)
s/w/e/_/ch(CCVAC)
s/_/w/_/e/c/h(CACAVCC)
s/_/w/_/e/ch(CACAVC)
s/w/e/c/_/h(CCVCAC)
s/w/e/ch/_(CCVCA)
s/_/w/e/_/c/h(CACVACC)
s/_/w/e/_/ch(CACVAC)
s/w/e/_/_/c/h(CCVAACC)
s/w/e/_/_/ch(CCVAAC)
s/_/w/_/_/e/c/h(CACAAVCC)
s/_/w/_/_/e/ch(CACAAVC)
				ANALYSING: sƿich
					resolving (16)
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				s/ƿ/i/c/h(CCCCC)
s/ƿ/i/c/h(CCVCC)
s/ƿ/i/ch(CCCC)
s/ƿ/i/ch(CCVC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/c/h(CACACC)
s/_/ƿ/i/ch(CACAC)
s/_/ƿ/i/ch(CACAC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/c/h(CCAACC)
s/ƿ/i/_/ch(CCAAC)
s/ƿ/i/_/ch(CCAAC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/c/h(CACAACC)
s/_/ƿ/_/i/ch(CACAAC)
s/_/ƿ/_/i/ch(CACAAC)
s/ƿ/i/c/_/h(CCACAC)
s/ƿ/i/c/_/h(CCACAC)
s/ƿ/i/ch/_(CCACA)
s/ƿ/i/ch/_(CCACA)
s/_/ƿ/i/_/c/h(CACAACC)
s/_/ƿ/i/_/c/h(CACAACC)
s/_/ƿ/i/_/ch(CACAAC)
s/_/ƿ/i/_/ch(CACAAC)
s/ƿ/i/_/_/c/h(CCAAACC)
s/ƿ/i/_/_/c/h(CCAAACC)
s/ƿ/i/_/_/ch(CCAAAC)
s/ƿ/i/_/_/ch(CCAAAC)
s/_/ƿ/_/_/i/c/h(CACAAACC)
s/_/ƿ/_/_/i/c/h(CACAAACC)
s/_/ƿ/_/_/i/ch(CACAAAC)
s/_/ƿ/_/_/i/ch(CACAAAC)
				ANALYSING: swich
					resolving (16)
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/w/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/w/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/w/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/w/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/w/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'w', 'i', 'c', '_', 'h']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', 'w', 'i', 'ch', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'ch']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'ch']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'ch']
				s/w/i/c/h(CCCCC)
s/w/i/c/h(CCVCC)
s/w/i/ch(CCCC)
s/w/i/ch(CCVC)
s/_/w/i/c/h(CACACC)
s/_/w/i/c/h(CACACC)
s/_/w/i/ch(CACAC)
s/_/w/i/ch(CACAC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/c/h(CCAACC)
s/w/i/_/ch(CCAAC)
s/w/i/_/ch(CCAAC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/c/h(CACAACC)
s/_/w/_/i/ch(CACAAC)
s/_/w/_/i/ch(CACAAC)
s/w/i/c/_/h(CCACAC)
s/w/i/c/_/h(CCACAC)
s/w/i/ch/_(CCACA)
s/w/i/ch/_(CCACA)
s/_/w/i/_/c/h(CACAACC)
s/_/w/i/_/c/h(CACAACC)
s/_/w/i/_/ch(CACAAC)
s/_/w/i/_/ch(CACAAC)
s/w/i/_/_/c/h(CCAAACC)
s/w/i/_/_/c/h(CCAAACC)
s/w/i/_/_/ch(CCAAAC)
s/w/i/_/_/ch(CCAAAC)
s/_/w/_/_/i/c/h(CACAAACC)
s/_/w/_/_/i/c/h(CACAAACC)
s/_/w/_/_/i/ch(CACAAAC)
s/_/w/_/_/i/ch(CACAAAC)
				ANALYSING: sƿilc
					resolving (8)
					> version: s/ƿ/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/ƿ/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				s/ƿ/i/l/c(CCCCC)
s/ƿ/i/l/c(CCVCC)
s/_/ƿ/i/l/c(CACACC)
s/_/ƿ/i/l/c(CACACC)
s/ƿ/i/_/l/c(CCAACC)
s/ƿ/i/_/l/c(CCAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/_/ƿ/_/i/l/c(CACAACC)
s/ƿ/i/l/_/c(CCACAC)
s/ƿ/i/l/_/c(CCACAC)
s/_/ƿ/i/_/l/c(CACAACC)
s/_/ƿ/i/_/l/c(CACAACC)
s/ƿ/i/_/_/l/c(CCAAACC)
s/ƿ/i/_/_/l/c(CCAAACC)
s/_/ƿ/_/_/i/l/c(CACAAACC)
s/_/ƿ/_/_/i/l/c(CACAAACC)
				ANALYSING: swilc
					resolving (8)
					> version: s/w/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				s/w/i/l/c(CCCCC)
s/w/i/l/c(CCVCC)
s/_/w/i/l/c(CACACC)
s/_/w/i/l/c(CACACC)
s/w/i/_/l/c(CCAACC)
s/w/i/_/l/c(CCAACC)
s/_/w/_/i/l/c(CACAACC)
s/_/w/_/i/l/c(CACAACC)
s/w/i/l/_/c(CCACAC)
s/w/i/l/_/c(CCACAC)
s/_/w/i/_/l/c(CACAACC)
s/_/w/i/_/l/c(CACAACC)
s/w/i/_/_/l/c(CCAAACC)
s/w/i/_/_/l/c(CCAAACC)
s/_/w/_/_/i/l/c(CACAAACC)
s/_/w/_/_/i/l/c(CACAAACC)
				ANALYSING: swilk
					resolving (8)
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> c, k, _, l
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/i/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: s/_/w/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/i/l/_/k(CCACAC)
s/w/i/l/_/k(CCACAC)
s/_/w/i/_/l/k(CACAACC)
s/_/w/i/_/l/k(CACAACC)
s/w/i/_/_/l/k(CCAAACC)
s/w/i/_/_/l/k(CCAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
				ANALYSING: sƿuc
					resolving (8)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/_/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c']
				s/ƿ/u/c(CCCC)
s/ƿ/u/c(CCVC)
s/_/ƿ/u/c(CACAC)
s/_/ƿ/u/c(CACAC)
s/ƿ/u/_/c(CCAAC)
s/ƿ/u/_/c(CCAAC)
s/_/ƿ/_/u/c(CACAAC)
s/_/ƿ/_/u/c(CACAAC)
s/ƿ/u/c/_(CCACA)
s/ƿ/u/c/_(CCACA)
s/_/ƿ/u/_/c(CACAAC)
s/_/ƿ/u/_/c(CACAAC)
s/ƿ/u/_/_/c(CCAAAC)
s/ƿ/u/_/_/c(CCAAAC)
s/_/ƿ/_/_/u/c(CACAAAC)
s/_/ƿ/_/_/u/c(CACAAAC)
				ANALYSING: sƿucche
					resolving (32)
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/c/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					TRYING: e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/_/ƿ/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/_/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c/ch/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> c, _, l, cch
					> version: s/_/ƿ/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				s/ƿ/u/c/c/h/e(CCCCCCV)
s/ƿ/u/c/c/h/e(CCVCCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/ƿ/u/c/ch/e(CCCCCV)
s/ƿ/u/c/ch/e(CCVCCV)
s/ƿ/u/cch/e(CCCCV)
s/ƿ/u/cch/e(CCVCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/c/c/h/e(CACACCCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/c/ch/e(CACACCV)
s/_/ƿ/u/cch/e(CACACV)
s/_/ƿ/u/cch/e(CACACV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/c/c/h/e(CCAACCCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/c/ch/e(CCAACCV)
s/ƿ/u/_/cch/e(CCAACV)
s/ƿ/u/_/cch/e(CCAACV)
s/_/ƿ/_/u/c/c/h/e(CACAACCCV)
s/_/ƿ/_/u/c/c/h/e(CACAACCCV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/c/ch/e(CACAACCV)
s/_/ƿ/_/u/c/ch/e(CACAACCV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/_/ƿ/_/u/cch/e(CACAACV)
s/ƿ/u/c/_/c/h/e(CCACACCV)
s/ƿ/u/c/_/c/h/e(CCACACCV)
s/ƿ/u/cch/_/e(CCACAV)
s/ƿ/u/cch/_/e(CCACAV)
s/ƿ/u/c/_/ch/e(CCACACV)
s/ƿ/u/c/_/ch/e(CCACACV)
s/ƿ/u/cch/_/e(CCACAV)
s/ƿ/u/cch/_/e(CCACAV)
s/_/ƿ/u/_/c/c/h/e(CACAACCCV)
s/_/ƿ/u/_/c/c/h/e(CACAACCCV)
s/_/ƿ/u/_/cch/e(CACAACV)
s/_/ƿ/u/_/cch/e(CACAACV)
s/_/ƿ/u/_/c/ch/e(CACAACCV)
s/_/ƿ/u/_/c/ch/e(CACAACCV)
s/_/ƿ/u/_/cch/e(CACAACV)
s/_/ƿ/u/_/cch/e(CACAACV)
s/ƿ/u/_/_/c/c/h/e(CCAAACCCV)
s/ƿ/u/_/_/c/c/h/e(CCAAACCCV)
s/ƿ/u/_/_/cch/e(CCAAACV)
s/ƿ/u/_/_/cch/e(CCAAACV)
s/ƿ/u/_/_/c/ch/e(CCAAACCV)
s/ƿ/u/_/_/c/ch/e(CCAAACCV)
s/ƿ/u/_/_/cch/e(CCAAACV)
s/ƿ/u/_/_/cch/e(CCAAACV)
s/_/ƿ/_/_/u/c/c/h/e(CACAAACCCV)
s/_/ƿ/_/_/u/c/c/h/e(CACAAACCCV)
s/_/ƿ/_/_/u/cch/e(CACAAACV)
s/_/ƿ/_/_/u/cch/e(CACAAACV)
s/_/ƿ/_/_/u/c/ch/e(CACAAACCV)
s/_/ƿ/_/_/u/c/ch/e(CACAAACCV)
s/_/ƿ/_/_/u/cch/e(CACAAACV)
s/_/ƿ/_/_/u/cch/e(CACAAACV)
				ANALYSING: sƿuch
					resolving (16)
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/u/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/u/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'ch']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				s/ƿ/u/c/h(CCCCC)
s/ƿ/u/c/h(CCVCC)
s/ƿ/u/ch(CCCC)
s/ƿ/u/ch(CCVC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/c/h(CACACC)
s/_/ƿ/u/ch(CACAC)
s/_/ƿ/u/ch(CACAC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/c/h(CCAACC)
s/ƿ/u/_/ch(CCAAC)
s/ƿ/u/_/ch(CCAAC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/c/h(CACAACC)
s/_/ƿ/_/u/ch(CACAAC)
s/_/ƿ/_/u/ch(CACAAC)
s/ƿ/u/c/_/h(CCACAC)
s/ƿ/u/c/_/h(CCACAC)
s/ƿ/u/ch/_(CCACA)
s/ƿ/u/ch/_(CCACA)
s/_/ƿ/u/_/c/h(CACAACC)
s/_/ƿ/u/_/c/h(CACAACC)
s/_/ƿ/u/_/ch(CACAAC)
s/_/ƿ/u/_/ch(CACAAC)
s/ƿ/u/_/_/c/h(CCAAACC)
s/ƿ/u/_/_/c/h(CCAAACC)
s/ƿ/u/_/_/ch(CCAAAC)
s/ƿ/u/_/_/ch(CCAAAC)
s/_/ƿ/_/_/u/c/h(CACAAACC)
s/_/ƿ/_/_/u/c/h(CACAAACC)
s/_/ƿ/_/_/u/ch(CACAAAC)
s/_/ƿ/_/_/u/ch(CACAAAC)
				ANALYSING: sƿuche
					resolving (16)
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/u/c/h/e
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/u/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/c/h/e
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/ƿ/u/_/ch/e
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: s/_/ƿ/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', 'ch', '_', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				s/ƿ/u/c/h/e(CCCCCV)
s/ƿ/u/c/h/e(CCVCCV)
s/ƿ/u/ch/e(CCCCV)
s/ƿ/u/ch/e(CCVCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/c/h/e(CACACCV)
s/_/ƿ/u/ch/e(CACACV)
s/_/ƿ/u/ch/e(CACACV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/c/h/e(CCAACCV)
s/ƿ/u/_/ch/e(CCAACV)
s/ƿ/u/_/ch/e(CCAACV)
s/_/ƿ/_/u/c/h/e(CACAACCV)
s/_/ƿ/_/u/c/h/e(CACAACCV)
s/_/ƿ/_/u/ch/e(CACAACV)
s/_/ƿ/_/u/ch/e(CACAACV)
s/ƿ/u/c/_/h/e(CCACACV)
s/ƿ/u/c/_/h/e(CCACACV)
s/ƿ/u/ch/_/e(CCACAV)
s/ƿ/u/ch/_/e(CCACAV)
s/_/ƿ/u/_/c/h/e(CACAACCV)
s/_/ƿ/u/_/c/h/e(CACAACCV)
s/_/ƿ/u/_/ch/e(CACAACV)
s/_/ƿ/u/_/ch/e(CACAACV)
s/ƿ/u/_/_/c/h/e(CCAAACCV)
s/ƿ/u/_/_/c/h/e(CCAAACCV)
s/ƿ/u/_/_/ch/e(CCAAACV)
s/ƿ/u/_/_/ch/e(CCAAACV)
s/_/ƿ/_/_/u/c/h/e(CACAAACCV)
s/_/ƿ/_/_/u/c/h/e(CACAAACCV)
s/_/ƿ/_/_/u/ch/e(CACAAACV)
s/_/ƿ/_/_/u/ch/e(CACAAACV)
				ANALYSING: sƿulc
					resolving (8)
					> version: s/ƿ/u/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/ƿ/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				s/ƿ/u/l/c(CCCCC)
s/ƿ/u/l/c(CCVCC)
s/_/ƿ/u/l/c(CACACC)
s/_/ƿ/u/l/c(CACACC)
s/ƿ/u/_/l/c(CCAACC)
s/ƿ/u/_/l/c(CCAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/_/ƿ/_/u/l/c(CACAACC)
s/ƿ/u/l/_/c(CCACAC)
s/ƿ/u/l/_/c(CCACAC)
s/_/ƿ/u/_/l/c(CACAACC)
s/_/ƿ/u/_/l/c(CACAACC)
s/ƿ/u/_/_/l/c(CCAAACC)
s/ƿ/u/_/_/l/c(CCAAACC)
s/_/ƿ/_/_/u/l/c(CACAAACC)
s/_/ƿ/_/_/u/l/c(CACAAACC)
				ANALYSING: swulc
					resolving (8)
					> version: s/w/u/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/w/u/l/c
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/u/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> c, _, l
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: s/_/w/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', 'w', 'u', 'l', '_', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', 'u', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', 'w', 'u', '_', '_', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				adding dashed alternative: ['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				s/w/u/l/c(CCCCC)
s/w/u/l/c(CCVCC)
s/_/w/u/l/c(CACACC)
s/_/w/u/l/c(CACACC)
s/w/u/_/l/c(CCAACC)
s/w/u/_/l/c(CCAACC)
s/_/w/_/u/l/c(CACAACC)
s/_/w/_/u/l/c(CACAACC)
s/w/u/l/_/c(CCACAC)
s/w/u/l/_/c(CCACAC)
s/_/w/u/_/l/c(CACAACC)
s/_/w/u/_/l/c(CACAACC)
s/w/u/_/_/l/c(CCAAACC)
s/w/u/_/_/l/c(CCAAACC)
s/_/w/_/_/u/l/c(CACAAACC)
s/_/w/_/_/u/l/c(CACAAACC)
				ANALYSING: zuich
					resolving (48)
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/u/i/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/u/i/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/i/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/ui/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/_/z/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/_/z/u/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/_/z/ui/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/_/z/ui/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/i/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/i/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/ui/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/ui/ch/_
					> version: _/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: _/z/ui/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/ui/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> c, _, l, i
					> version: z/_/ui/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/ui/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/_/z/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/ui/c/h
					TRYING: ui
					> version: _/_/z/_/ui/ch
					TRYING: ui
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', 'u', 'i', 'c', '_', 'h']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'i', 'ch', '_']
				adding dashed alternative: ['z', 'ui', 'c', 'h', '_']
				adding dashed alternative: ['z', 'ui', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'ui', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'i', '_', 'ch']
				adding dashed alternative: ['z', '_', 'ui', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'ui', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'ui', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'ui', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'i', '_', '_', 'ch']
				adding dashed alternative: ['z', 'ui', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', 'ui', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['_', 'z', 'ui', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'ui', '_', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'i', 'ch']
				adding dashed alternative: ['z', '_', 'ui', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'ui', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'ui', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'ui', 'ch']
				z/u/i/c/h(CCCCC)
z/u/i/c/h(CVVCC)
z/u/i/ch(CCCC)
z/u/i/ch(CVVC)
z/ui/c/h(CVCC)
z/ui/ch(CVC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/c/h(ACAACC)
_/z/u/i/ch(ACAAC)
_/z/u/i/ch(ACAAC)
_/z/ui/c/h(ACVCC)
_/z/ui/ch(ACVC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/c/h(CAAACC)
z/_/u/i/ch(CAAAC)
z/_/u/i/ch(CAAAC)
z/_/ui/c/h(CAVCC)
z/_/ui/ch(CAVC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/c/h(AACAACC)
_/_/z/u/i/ch(AACAAC)
_/_/z/u/i/ch(AACAAC)
_/_/z/ui/c/h(AACVCC)
_/_/z/ui/ch(AACVC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/c/h(CAAACC)
z/u/i/_/ch(CAAAC)
z/u/i/_/ch(CAAAC)
z/ui/c/_/h(CVCAC)
z/ui/ch/_(CVCA)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/c/h(ACAAACC)
_/z/u/_/i/ch(ACAAAC)
_/z/u/_/i/ch(ACAAAC)
_/z/ui/_/c/h(ACVACC)
_/z/ui/_/ch(ACVAC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/c/h(CAAAACC)
z/_/u/_/i/ch(CAAAAC)
z/_/u/_/i/ch(CAAAAC)
z/_/ui/_/c/h(CAVACC)
z/_/ui/_/ch(CAVAC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/c/h(AACAAACC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/u/i/ch(AACAAAC)
_/_/z/_/ui/c/h(AACAVCC)
_/_/z/_/ui/ch(AACAVC)
z/u/i/c/_/h(CAACAC)
z/u/i/c/_/h(CAACAC)
z/u/i/ch/_(CAACA)
z/u/i/ch/_(CAACA)
z/ui/c/h/_(CVCCA)
z/ui/ch/_(CVCA)
_/z/u/i/_/c/h(ACAAACC)
_/z/u/i/_/c/h(ACAAACC)
_/z/u/i/_/ch(ACAAAC)
_/z/u/i/_/ch(ACAAAC)
_/z/ui/c/_/h(ACVCAC)
_/z/ui/ch/_(ACVCA)
z/_/u/i/_/c/h(CAAAACC)
z/_/u/i/_/c/h(CAAAACC)
z/_/u/i/_/ch(CAAAAC)
z/_/u/i/_/ch(CAAAAC)
z/_/ui/c/_/h(CAVCAC)
z/_/ui/ch/_(CAVCA)
_/_/z/u/_/i/c/h(AACAAACC)
_/_/z/u/_/i/c/h(AACAAACC)
_/_/z/u/_/i/ch(AACAAAC)
_/_/z/u/_/i/ch(AACAAAC)
_/_/z/ui/_/c/h(AACVACC)
_/_/z/ui/_/ch(AACVAC)
z/u/i/_/_/c/h(CAAAACC)
z/u/i/_/_/c/h(CAAAACC)
z/u/i/_/_/ch(CAAAAC)
z/u/i/_/_/ch(CAAAAC)
z/ui/c/_/_/h(CVCAAC)
z/ui/ch/_/_(CVCAA)
_/z/u/_/_/i/c/h(ACAAAACC)
_/z/u/_/_/i/c/h(ACAAAACC)
_/z/u/_/_/i/ch(ACAAAAC)
_/z/u/_/_/i/ch(ACAAAAC)
_/z/ui/_/_/c/h(ACVAACC)
_/z/ui/_/_/ch(ACVAAC)
z/_/u/_/_/i/c/h(CAAAAACC)
z/_/u/_/_/i/c/h(CAAAAACC)
z/_/u/_/_/i/ch(CAAAAAC)
z/_/u/_/_/i/ch(CAAAAAC)
z/_/ui/_/_/c/h(CAVAACC)
z/_/ui/_/_/ch(CAVAAC)
_/_/z/_/_/u/i/c/h(AACAAAACC)
_/_/z/_/_/u/i/c/h(AACAAAACC)
_/_/z/_/_/u/i/ch(AACAAAAC)
_/_/z/_/_/u/i/ch(AACAAAAC)
_/_/z/_/_/ui/c/h(AACAAVCC)
_/_/z/_/_/ui/ch(AACAAVC)
				ANALYSING: zuych
					resolving (48)
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/u/y/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/z/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/u/y/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/y/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/uy/c/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/_/z/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/_/z/u/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/_/z/uy/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/_/z/uy/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/y/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/y/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/u/y/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/u/y/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/uy/c/_/h
					TRYING: h
					adding blocked set: C = C >> h, c, _, l
					> version: z/uy/ch/_
					> version: _/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: _/z/uy/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: _/z/uy/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: z/_/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> c, _, l, y
					> version: z/_/uy/_/c/h
					TRYING: c
					adding blocked set: C = C >> c, _, l
					> version: z/_/uy/_/ch
					TRYING: ch
					adding blocked set: C = C >> c, _, l, ch
					> version: _/_/z/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> c, u, _, l
					> version: _/_/z/_/uy/c/h
					TRYING: uy
					> version: _/_/z/_/uy/ch
					TRYING: uy
					RESULT:  ['_']
				adding dashed alternative: ['z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', 'u', 'y', 'c', '_', 'h']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'u', 'y', 'ch', '_']
				adding dashed alternative: ['z', 'uy', 'c', 'h', '_']
				adding dashed alternative: ['z', 'uy', 'ch', '_']
				adding dashed alternative: ['_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', 'z', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['_', 'z', 'uy', 'ch', '_']
				adding dashed alternative: ['z', '_', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', 'y', '_', 'ch']
				adding dashed alternative: ['z', '_', 'uy', 'c', '_', 'h']
				adding dashed alternative: ['z', '_', 'uy', 'ch', '_']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'u', '_', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', 'uy', '_', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', 'uy', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['z', 'u', 'y', '_', '_', 'ch']
				adding dashed alternative: ['z', 'uy', 'c', '_', '_', 'h']
				adding dashed alternative: ['z', 'uy', 'ch', '_', '_']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['_', 'z', 'uy', '_', '_', 'c', 'h']
				adding dashed alternative: ['_', 'z', 'uy', '_', '_', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'u', '_', '_', 'y', 'ch']
				adding dashed alternative: ['z', '_', 'uy', '_', '_', 'c', 'h']
				adding dashed alternative: ['z', '_', 'uy', '_', '_', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'uy', 'c', 'h']
				adding dashed alternative: ['_', '_', 'z', '_', '_', 'uy', 'ch']
				z/u/y/c/h(CCCCC)
z/u/y/c/h(CVVCC)
z/u/y/ch(CCCC)
z/u/y/ch(CVVC)
z/uy/c/h(CVCC)
z/uy/ch(CVC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/c/h(ACAACC)
_/z/u/y/ch(ACAAC)
_/z/u/y/ch(ACAAC)
_/z/uy/c/h(ACVCC)
_/z/uy/ch(ACVC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/c/h(CAAACC)
z/_/u/y/ch(CAAAC)
z/_/u/y/ch(CAAAC)
z/_/uy/c/h(CAVCC)
z/_/uy/ch(CAVC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/c/h(AACAACC)
_/_/z/u/y/ch(AACAAC)
_/_/z/u/y/ch(AACAAC)
_/_/z/uy/c/h(AACVCC)
_/_/z/uy/ch(AACVC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/c/h(CAAACC)
z/u/y/_/ch(CAAAC)
z/u/y/_/ch(CAAAC)
z/uy/c/_/h(CVCAC)
z/uy/ch/_(CVCA)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/c/h(ACAAACC)
_/z/u/_/y/ch(ACAAAC)
_/z/u/_/y/ch(ACAAAC)
_/z/uy/_/c/h(ACVACC)
_/z/uy/_/ch(ACVAC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/c/h(CAAAACC)
z/_/u/_/y/ch(CAAAAC)
z/_/u/_/y/ch(CAAAAC)
z/_/uy/_/c/h(CAVACC)
z/_/uy/_/ch(CAVAC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/c/h(AACAAACC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/u/y/ch(AACAAAC)
_/_/z/_/uy/c/h(AACAVCC)
_/_/z/_/uy/ch(AACAVC)
z/u/y/c/_/h(CAACAC)
z/u/y/c/_/h(CAACAC)
z/u/y/ch/_(CAACA)
z/u/y/ch/_(CAACA)
z/uy/c/h/_(CVCCA)
z/uy/ch/_(CVCA)
_/z/u/y/_/c/h(ACAAACC)
_/z/u/y/_/c/h(ACAAACC)
_/z/u/y/_/ch(ACAAAC)
_/z/u/y/_/ch(ACAAAC)
_/z/uy/c/_/h(ACVCAC)
_/z/uy/ch/_(ACVCA)
z/_/u/y/_/c/h(CAAAACC)
z/_/u/y/_/c/h(CAAAACC)
z/_/u/y/_/ch(CAAAAC)
z/_/u/y/_/ch(CAAAAC)
z/_/uy/c/_/h(CAVCAC)
z/_/uy/ch/_(CAVCA)
_/_/z/u/_/y/c/h(AACAAACC)
_/_/z/u/_/y/c/h(AACAAACC)
_/_/z/u/_/y/ch(AACAAAC)
_/_/z/u/_/y/ch(AACAAAC)
_/_/z/uy/_/c/h(AACVACC)
_/_/z/uy/_/ch(AACVAC)
z/u/y/_/_/c/h(CAAAACC)
z/u/y/_/_/c/h(CAAAACC)
z/u/y/_/_/ch(CAAAAC)
z/u/y/_/_/ch(CAAAAC)
z/uy/c/_/_/h(CVCAAC)
z/uy/ch/_/_(CVCAA)
_/z/u/_/_/y/c/h(ACAAAACC)
_/z/u/_/_/y/c/h(ACAAAACC)
_/z/u/_/_/y/ch(ACAAAAC)
_/z/u/_/_/y/ch(ACAAAAC)
_/z/uy/_/_/c/h(ACVAACC)
_/z/uy/_/_/ch(ACVAAC)
z/_/u/_/_/y/c/h(CAAAAACC)
z/_/u/_/_/y/c/h(CAAAAACC)
z/_/u/_/_/y/ch(CAAAAAC)
z/_/u/_/_/y/ch(CAAAAAC)
z/_/uy/_/_/c/h(CAVAACC)
z/_/uy/_/_/ch(CAVAAC)
_/_/z/_/_/u/y/c/h(AACAAAACC)
_/_/z/_/_/u/y/c/h(AACAAAACC)
_/_/z/_/_/u/y/ch(AACAAAAC)
_/_/z/_/_/u/y/ch(AACAAAAC)
_/_/z/_/_/uy/c/h(AACAAVCC)
_/_/z/_/_/uy/ch(AACAAVC)
			___CCVCCC : 5___
				ANALYSING: sƿilch
				adding littera based on matching pattern
				ANALYSING: sƿillc
				adding littera based on matching pattern
				ANALYSING: sƿucch
				adding littera based on matching pattern
				ANALYSING: hsƿucch
					resolving (128)
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/c/c/h
					TRYING: c
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/cch
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/c/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/u/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/ƿ/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/s/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/c/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/c/ch
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/u/_/cch
					TRYING: cch
					adding blocked set: C = C >> h, c, cch
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/ƿ/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/s/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/c/c/h
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/c/ch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/ƿ/_/_/u/cch
					TRYING: u
					adding blocked set: C = C >> h, c, u
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/s/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/c/c/h
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/c/ch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/s/_/_/_/ƿ/u/cch
					TRYING: ƿ
					adding blocked set: C = C >> h, c, ƿ
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/c/c/h
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/cch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/cch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/c/ch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/cch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					> version: h/_/_/_/_/s/ƿ/u/cch
					TRYING: s
					>>> MULTIPLE RESOLVE OPTIONS: {'c', 's', 'ch'}
					RESULT:  ['c', 's', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/c/c/h', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/u/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/u/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/ƿ/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/ƿ/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/s/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/_/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/u/_/c/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/s/ƿ/u/_/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'cch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/s/ƿ/u/_/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'cch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 'h/s/ƿ/u/_/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				{'string': 'h/s/ƿ/u/_/c/ch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'c', 'ch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/s/ƿ/u/_/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'cch']
				version split: ['h', 's', 'ƿ', 'u', '_', 'cch']
				{'string': 'h/s/ƿ/u/_/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', 'u', '_', 'cch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/_/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/_/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/_/s/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/_/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/_/s/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/_/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/_/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				{'string': 'h/s/_/ƿ/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'c', 'ch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/_/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				{'string': 'h/s/_/ƿ/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', 'ƿ', '_', 'u', 'cch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/s/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', 's', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				{'string': 'h/s/ƿ/_/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'c', 'c', 'h']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				{'string': 'h/s/ƿ/_/_/u/c', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'c', 'ch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				version split: ['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				{'string': 'h/s/ƿ/_/_/u/cch', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', 'ƿ', '_', '_', 'u', 'cch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/_/s/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', 's', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				{'string': 'h/s/_/_/_/ƿ/u', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', 's', '_', '_', '_', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'c', 'h']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'c', 'ch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				version split: ['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				{'string': 'h/_/_/_/_/s/ƿ', 'rgx': '((h))/((_))/((_))/((_))/((_))/((c)|(s)|(ch))$'}
				_____REMOVING________['h', '_', '_', '_', '_', 's', 'ƿ', 'u', 'cch']
				ANALYSING: shuc
					resolving (28)
					> version: s/h/u/c
					> version: s/h/u/c
					> version: s/hu/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: sh/u/c
					> version: s/h/u/_/c
					> version: s/h/u/_/c
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/c/_
					> version: s/h/u/c/_
					> version: s/hu/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: sh/u/c/_
					> version: s/h/u/_/_/c
					TRYING: c
					> version: s/h/u/_/_/c
					TRYING: c
					> version: s/hu/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					> version: sh/u/c/_/_
					RESULT:  ['c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'h', 'u', 'c']
				{'string': 's/h/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c']
				version split: ['s', 'hu', 'c']
				{'string': 's/hu/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['sh', 'u', 'c']
				{'string': 'sh/u/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'h', 'u', '_', 'c']
				{'string': 's/h/u/_/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', '_', 'c']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'h', 'u', 'c', '_']
				{'string': 's/h/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'h', 'u', 'c', '_']
				version split: ['s', 'hu', 'c', '_']
				{'string': 's/hu/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['sh', 'u', 'c', '_']
				{'string': 'sh/u/c/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_']
				version split: ['s', 'h', 'u', '_', '_', 'c']
				{'string': 's/h/u/_/_/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				version split: ['s', 'h', 'u', '_', '_', 'c']
				{'string': 's/h/u/_/_/c', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				version split: ['s', 'hu', 'c', '_', '_']
				{'string': 's/hu/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'hu', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				version split: ['sh', 'u', 'c', '_', '_']
				{'string': 'sh/u/c/_/_', 'rgx': '((s))/((h)|(u)|(hu))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['sh', 'u', 'c', '_', '_']
				ANALYSING: slike
					resolving (16)
					> version: s/l/i/k/e
					> version: s/l/i/k/e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/_/l/i/k/e
					TRYING: e
					> version: s/l/i/_/k/e
					TRYING: e
					> version: s/l/i/_/k/e
					TRYING: e
					> version: s/_/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/_/l/_/i/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/l/i/k/_/e
					TRYING: e
					> version: s/l/i/k/_/e
					TRYING: e
					> version: s/_/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/_/l/i/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/l/i/_/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/l/i/_/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, s, c
					> version: s/_/l/_/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, s, c, i
					> version: s/_/l/_/_/i/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, s, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', 'l', 'i', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', 'l', 'i', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				adding dashed alternative: ['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				s/l/i/k/e(CCCCV)
s/l/i/k/e(CCVCV)
s/_/l/i/k/e(CACACV)
s/_/l/i/k/e(CACACV)
s/l/i/_/k/e(CCAACV)
s/l/i/_/k/e(CCAACV)
s/_/l/_/i/k/e(CACAACV)
s/_/l/_/i/k/e(CACAACV)
s/l/i/k/_/e(CCACAV)
s/l/i/k/_/e(CCACAV)
s/_/l/i/_/k/e(CACAACV)
s/_/l/i/_/k/e(CACAACV)
s/l/i/_/_/k/e(CCAAACV)
s/l/i/_/_/k/e(CCAAACV)
s/_/l/_/_/i/k/e(CACAAACV)
s/_/l/_/_/i/k/e(CACAAACV)
s/l/i/k/e/_(CCACVA)
s/l/i/k/e/_(CCACVA)
s/_/l/i/k/_/e(CACACAV)
s/_/l/i/k/_/e(CACACAV)
s/l/i/_/k/_/e(CCAACAV)
s/l/i/_/k/_/e(CCAACAV)
s/_/l/_/i/_/k/e(CACAAACV)
s/_/l/_/i/_/k/e(CACAAACV)
s/l/i/k/_/_/e(CCACAAV)
s/l/i/k/_/_/e(CCACAAV)
s/_/l/i/_/_/k/e(CACAAACV)
s/_/l/i/_/_/k/e(CACAAACV)
s/l/i/_/_/_/k/e(CCAAAACV)
s/l/i/_/_/_/k/e(CCAAAACV)
s/_/l/_/_/_/i/k/e(CACAAAACV)
s/_/l/_/_/_/i/k/e(CACAAAACV)
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e']
				{'string': 's/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', '_', 'l', 'i', 'k', 'e']
				{'string': 's/_/l/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', '_', 'k', 'e']
				{'string': 's/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', 'k', 'e']
				{'string': 's/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', '_', 'l', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/i/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', 'l', 'i', 'k', '_', 'e']
				{'string': 's/l/i/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', 'i', '_', 'k', 'e']
				{'string': 's/_/l/i/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/l/i/_/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/l/i/_/_/k/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/_/i/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				version split: ['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/_/i/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', '_', 'i', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', 'l', 'i', 'k', 'e', '_']
				{'string': 's/l/i/k/e/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', 'e', '_']
				version split: ['s', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/l/i/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', '_', 'e']
				version split: ['s', '_', 'l', 'i', 'k', '_', 'e']
				{'string': 's/_/l/i/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', 'k', '_', 'e']
				version split: ['s', 'l', 'i', '_', 'k', '_', 'e']
				{'string': 's/l/i/_/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', '_', 'e']
				version split: ['s', 'l', 'i', '_', 'k', '_', 'e']
				{'string': 's/l/i/_/k/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', 'k', '_', 'e']
				version split: ['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/_/l/_/i/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				{'string': 's/_/l/_/i/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', 'i', '_', 'k', 'e']
				version split: ['s', 'l', 'i', 'k', '_', '_', 'e']
				{'string': 's/l/i/k/_/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', '_', 'e']
				version split: ['s', 'l', 'i', 'k', '_', '_', 'e']
				{'string': 's/l/i/k/_/_/e', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', 'k', '_', '_', 'e']
				version split: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/_/l/i/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				{'string': 's/_/l/i/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', 'i', '_', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				{'string': 's/l/i/_/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				version split: ['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				{'string': 's/l/i/_/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'l', 'i', '_', '_', '_', 'k', 'e']
				version split: ['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/_/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				version split: ['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				{'string': 's/_/l/_/_/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'l', '_', '_', '_', 'i', 'k', 'e']
				ANALYSING: soch
					resolving (16)
					> version: s/o/c/h
					> version: s/o/ch
					> version: s/_/o/c/h
					> version: s/_/o/ch
					> version: s/o/c/_/h
					> version: s/o/ch/_
					> version: s/_/o/_/c/h
					TRYING: h
					> version: s/_/o/_/ch
					> version: s/o/c/h/_
					> version: s/o/ch/_
					> version: s/_/o/c/_/h
					TRYING: h
					> version: s/_/o/ch/_
					> version: s/o/c/_/_/h
					TRYING: h
					> version: s/o/ch/_/_
					> version: s/_/o/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/o/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'o', 'c', 'h']
				{'string': 's/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', 'h']
				version split: ['s', 'o', 'ch']
				{'string': 's/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch']
				version split: ['s', '_', 'o', 'c', 'h']
				{'string': 's/_/o/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'c', 'h']
				version split: ['s', '_', 'o', 'ch']
				{'string': 's/_/o/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'ch']
				version split: ['s', 'o', 'c', '_', 'h']
				{'string': 's/o/c/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', '_', 'h']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', '_', 'c', 'h']
				{'string': 's/_/o/_/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', '_', 'c', 'h']
				version split: ['s', '_', 'o', '_', 'ch']
				{'string': 's/_/o/_/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', '_', 'ch']
				version split: ['s', 'o', 'c', 'h', '_']
				{'string': 's/o/c/h/_', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', 'h', '_']
				version split: ['s', 'o', 'ch', '_']
				{'string': 's/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch', '_']
				version split: ['s', '_', 'o', 'c', '_', 'h']
				{'string': 's/_/o/c/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'c', '_', 'h']
				version split: ['s', '_', 'o', 'ch', '_']
				{'string': 's/_/o/ch/_', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', 'ch', '_']
				version split: ['s', 'o', 'c', '_', '_', 'h']
				{'string': 's/o/c/_/_/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'c', '_', '_', 'h']
				version split: ['s', 'o', 'ch', '_', '_']
				{'string': 's/o/ch/_/_', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'o', 'ch', '_', '_']
				version split: ['s', '_', 'o', '_', '_', 'c', 'h']
				{'string': 's/_/o/_/_/c/h', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'o', '_', '_', 'c', 'h']
				version split: ['s', '_', 'o', '_', '_', 'ch']
				{'string': 's/_/o/_/_/ch', 'rgx': '((s))/((_))/((o))/((_))/((_))/((h)|(c)|(ch))$'}
				ANALYSING: such
					resolving (32)
					> version: s/u/c/h
					> version: s/u/c/h
					> version: s/u/ch
					> version: s/u/ch
					> version: s/_/u/c/h
					> version: s/_/u/c/h
					> version: s/_/u/ch
					> version: s/_/u/ch
					> version: s/u/c/_/h
					> version: s/u/c/_/h
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/c/h
					TRYING: h
					> version: s/_/u/_/ch
					> version: s/_/u/_/ch
					> version: s/u/c/h/_
					> version: s/u/c/h/_
					> version: s/u/ch/_
					> version: s/u/ch/_
					> version: s/_/u/c/_/h
					TRYING: h
					> version: s/_/u/c/_/h
					TRYING: h
					> version: s/_/u/ch/_
					> version: s/_/u/ch/_
					> version: s/u/c/_/_/h
					TRYING: h
					> version: s/u/c/_/_/h
					TRYING: h
					> version: s/u/ch/_/_
					> version: s/u/ch/_/_
					> version: s/_/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'c', 'h']
				{'string': 's/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', 'u', 'ch']
				{'string': 's/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'c', 'h']
				{'string': 's/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', '_', 'u', 'ch']
				{'string': 's/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'c', '_', 'h']
				{'string': 's/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'c', 'h']
				{'string': 's/_/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', '_', 'u', '_', 'ch']
				{'string': 's/_/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'c', 'h', '_']
				{'string': 's/u/c/h/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', 'u', 'ch', '_']
				{'string': 's/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'c', '_', 'h']
				{'string': 's/_/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', '_', 'u', 'ch', '_']
				{'string': 's/_/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_']
				version split: ['s', 'u', 'c', '_', '_', 'h']
				{'string': 's/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h']
				version split: ['s', 'u', 'c', '_', '_', 'h']
				{'string': 's/u/c/_/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', 'u', 'ch', '_', '_']
				{'string': 's/u/ch/_/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h']
				{'string': 's/_/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h']
				{'string': 's/_/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'ch']
				{'string': 's/_/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				version split: ['s', '_', 'u', '_', '_', 'ch']
				{'string': 's/_/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				ANALYSING: suche
					resolving (32)
					> version: s/u/c/h/e
					> version: s/u/c/h/e
					> version: s/u/ch/e
					> version: s/u/ch/e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/c/h/e
					TRYING: e
					> version: s/_/u/ch/e
					> version: s/_/u/ch/e
					> version: s/u/c/_/h/e
					TRYING: e
					> version: s/u/c/_/h/e
					TRYING: e
					> version: s/u/ch/_/e
					> version: s/u/ch/_/e
					> version: s/_/u/_/c/h/e
					TRYING: h
					> version: s/_/u/_/c/h/e
					TRYING: h
					> version: s/_/u/_/ch/e
					TRYING: e
					> version: s/_/u/_/ch/e
					TRYING: e
					> version: s/u/c/h/_/e
					TRYING: e
					> version: s/u/c/h/_/e
					TRYING: e
					> version: s/u/ch/e/_
					> version: s/u/ch/e/_
					> version: s/_/u/c/_/h/e
					TRYING: h
					> version: s/_/u/c/_/h/e
					TRYING: h
					> version: s/_/u/ch/_/e
					TRYING: e
					> version: s/_/u/ch/_/e
					TRYING: e
					> version: s/u/c/_/_/h/e
					TRYING: h
					> version: s/u/c/_/_/h/e
					TRYING: h
					> version: s/u/ch/_/_/e
					TRYING: e
					> version: s/u/ch/_/_/e
					TRYING: e
					> version: s/_/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'c', 'h', 'e']
				{'string': 's/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', 'u', 'ch', 'e']
				{'string': 's/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'u', 'ch', 'e']
				{'string': 's/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'c', '_', 'h', 'e']
				{'string': 's/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', 'ch', '_', 'e']
				{'string': 's/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', 'ch', 'e']
				{'string': 's/_/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', 'e']
				version split: ['s', '_', 'u', '_', 'ch', 'e']
				{'string': 's/_/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'ch', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'c', 'h', '_', 'e']
				{'string': 's/u/c/h/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', 'h', '_', 'e']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', 'u', 'ch', 'e', '_']
				{'string': 's/u/ch/e/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', 'e', '_']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'c', '_', 'h', 'e']
				{'string': 's/_/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'c', '_', 'h', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'u', 'ch', '_', 'e']
				{'string': 's/_/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'ch', '_', 'e']
				version split: ['s', 'u', 'c', '_', '_', 'h', 'e']
				{'string': 's/u/c/_/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h', 'e']
				version split: ['s', 'u', 'c', '_', '_', 'h', 'e']
				{'string': 's/u/c/_/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'c', '_', '_', 'h', 'e']
				version split: ['s', 'u', 'ch', '_', '_', 'e']
				{'string': 's/u/ch/_/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_', 'e']
				version split: ['s', 'u', 'ch', '_', '_', 'e']
				{'string': 's/u/ch/_/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'ch', '_', '_', 'e']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/_/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'u', '_', '_', 'ch', 'e']
				{'string': 's/_/u/_/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'ch', 'e']
				version split: ['s', '_', 'u', '_', '_', 'ch', 'e']
				{'string': 's/_/u/_/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'ch', 'e']
				ANALYSING: suich
					resolving (48)
					> version: s/u/i/c/h
					> version: s/u/i/c/h
					> version: s/u/i/ch
					> version: s/u/i/ch
					> version: s/ui/c/h
					> version: s/ui/ch
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/c/h
					TRYING: h
					> version: s/_/u/i/ch
					> version: s/_/u/i/ch
					> version: s/_/ui/c/h
					> version: s/_/ui/ch
					> version: s/u/i/_/c/h
					TRYING: h
					> version: s/u/i/_/c/h
					TRYING: h
					> version: s/u/i/_/ch
					> version: s/u/i/_/ch
					> version: s/ui/c/_/h
					> version: s/ui/ch/_
					> version: s/_/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/c/h/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/c/_/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ui/ch/_/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ui/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'c', 'h']
				{'string': 's/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', 'h']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'u', 'i', 'ch']
				{'string': 's/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch']
				version split: ['s', 'ui', 'c', 'h']
				{'string': 's/ui/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', 'h']
				version split: ['s', 'ui', 'ch']
				{'string': 's/ui/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'c', 'h']
				{'string': 's/_/u/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'c', 'h']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'u', 'i', 'ch']
				{'string': 's/_/u/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'ch']
				version split: ['s', '_', 'ui', 'c', 'h']
				{'string': 's/_/ui/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'c', 'h']
				version split: ['s', '_', 'ui', 'ch']
				{'string': 's/_/ui/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'ch']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'c', 'h']
				{'string': 's/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'ch']
				version split: ['s', 'u', 'i', '_', 'ch']
				{'string': 's/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'ch']
				version split: ['s', 'ui', 'c', '_', 'h']
				{'string': 's/ui/c/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', '_', 'h']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/i/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'i', 'ch']
				{'string': 's/_/u/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'ch']
				version split: ['s', '_', 'u', '_', 'i', 'ch']
				{'string': 's/_/u/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'ch']
				version split: ['s', '_', 'ui', '_', 'c', 'h']
				{'string': 's/_/ui/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'c', 'h']
				version split: ['s', '_', 'ui', '_', 'ch']
				{'string': 's/_/ui/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'ch']
				version split: ['s', 'u', 'i', 'c', '_', 'h']
				{'string': 's/u/i/c/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', '_', 'h']
				version split: ['s', 'u', 'i', 'c', '_', 'h']
				{'string': 's/u/i/c/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'c', '_', 'h']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'u', 'i', 'ch', '_']
				{'string': 's/u/i/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', 'ch', '_']
				version split: ['s', 'ui', 'c', 'h', '_']
				{'string': 's/ui/c/h/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', 'h', '_']
				version split: ['s', 'ui', 'ch', '_']
				{'string': 's/ui/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch', '_']
				version split: ['s', '_', 'u', 'i', '_', 'c', 'h']
				{'string': 's/_/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'u', 'i', '_', 'c', 'h']
				{'string': 's/_/u/i/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'u', 'i', '_', 'ch']
				{'string': 's/_/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'ch']
				version split: ['s', '_', 'u', 'i', '_', 'ch']
				{'string': 's/_/u/i/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'ch']
				version split: ['s', '_', 'ui', 'c', '_', 'h']
				{'string': 's/_/ui/c/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'c', '_', 'h']
				version split: ['s', '_', 'ui', 'ch', '_']
				{'string': 's/_/ui/ch/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', 'ch', '_']
				version split: ['s', 'u', 'i', '_', '_', 'c', 'h']
				{'string': 's/u/i/_/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', '_', 'c', 'h']
				{'string': 's/u/i/_/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'u', 'i', '_', '_', 'ch']
				{'string': 's/u/i/_/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'ch']
				version split: ['s', 'u', 'i', '_', '_', 'ch']
				{'string': 's/u/i/_/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'ch']
				version split: ['s', 'ui', 'c', '_', '_', 'h']
				{'string': 's/ui/c/_/_/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'c', '_', '_', 'h']
				version split: ['s', 'ui', 'ch', '_', '_']
				{'string': 's/ui/ch/_/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ui', 'ch', '_', '_']
				version split: ['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/_/i/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/u/_/_/i/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'i', 'ch']
				{'string': 's/_/u/_/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'ch']
				version split: ['s', '_', 'u', '_', '_', 'i', 'ch']
				{'string': 's/_/u/_/_/i/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'ch']
				version split: ['s', '_', 'ui', '_', '_', 'c', 'h']
				{'string': 's/_/ui/_/_/c/h', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', 'c', 'h']
				version split: ['s', '_', 'ui', '_', '_', 'ch']
				{'string': 's/_/ui/_/_/ch', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', 'ch']
				ANALYSING: suilc
					resolving (24)
					> version: s/u/i/l/c
					> version: s/u/i/l/c
					> version: s/ui/l/c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/u/i/l/c
					TRYING: c
					> version: s/_/ui/l/c
					> version: s/u/i/_/l/c
					TRYING: c
					> version: s/u/i/_/l/c
					TRYING: c
					> version: s/ui/l/_/c
					> version: s/_/u/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/_/l/c
					TRYING: c
					> version: s/u/i/l/_/c
					TRYING: c
					> version: s/u/i/l/_/c
					TRYING: c
					> version: s/ui/l/c/_
					> version: s/_/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/l/_/c
					TRYING: c
					> version: s/u/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/u/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ui/l/_/_/c
					TRYING: c
					> version: s/_/u/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/u/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/ui/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					RESULT:  ['c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', 'c']
				{'string': 's/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'c']
				version split: ['s', 'ui', 'l', 'c']
				{'string': 's/ui/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'u', 'i', 'l', 'c']
				{'string': 's/_/u/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', 'c']
				{'string': 's/_/ui/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'u', 'i', '_', 'l', 'c']
				{'string': 's/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'c']
				version split: ['s', 'ui', 'l', '_', 'c']
				{'string': 's/ui/l/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'c']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/i/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', '_', 'l', 'c']
				{'string': 's/_/ui/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'c']
				version split: ['s', 'u', 'i', 'l', '_', 'c']
				{'string': 's/u/i/l/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'c']
				version split: ['s', 'u', 'i', 'l', '_', 'c']
				{'string': 's/u/i/l/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'c']
				version split: ['s', 'ui', 'l', 'c', '_']
				{'string': 's/ui/l/c/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', 'c', '_']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'c']
				{'string': 's/_/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'c']
				{'string': 's/_/u/i/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ui', 'l', '_', 'c']
				{'string': 's/_/ui/l/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'c']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'c']
				{'string': 's/u/i/_/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'c']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'c']
				{'string': 's/u/i/_/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'c']
				version split: ['s', 'ui', 'l', '_', '_', 'c']
				{'string': 's/ui/l/_/_/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ui', 'l', '_', '_', 'c']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ui', '_', '_', 'l', 'c']
				{'string': 's/_/ui/_/_/l/c', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', 'l', 'c']
				ANALYSING: suilk
					resolving (24)
					> version: s/u/i/l/k
					> version: s/u/i/l/k
					> version: s/ui/l/k
					> version: s/_/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/u/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/ui/l/k
					> version: s/u/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/ui/l/_/k
					> version: s/_/u/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/ui/l/k/_
					> version: s/_/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/u/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ui/l/_/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/u/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/u/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/ui/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k', '_']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'ui', 'l', '_', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', '_', 'l', 'k']
				s/u/i/l/k(CCCCC)
s/u/i/l/k(CVVCC)
s/ui/l/k(CVCC)
s/_/u/i/l/k(CAAACC)
s/_/u/i/l/k(CAAACC)
s/_/ui/l/k(CAVCC)
s/u/i/_/l/k(CAAACC)
s/u/i/_/l/k(CAAACC)
s/ui/l/_/k(CVCAC)
s/_/u/_/i/l/k(CAAAACC)
s/_/u/_/i/l/k(CAAAACC)
s/_/ui/_/l/k(CAVACC)
s/u/i/l/_/k(CAACAC)
s/u/i/l/_/k(CAACAC)
s/ui/l/k/_(CVCCA)
s/_/u/i/_/l/k(CAAAACC)
s/_/u/i/_/l/k(CAAAACC)
s/_/ui/l/_/k(CAVCAC)
s/u/i/_/_/l/k(CAAAACC)
s/u/i/_/_/l/k(CAAAACC)
s/ui/l/_/_/k(CVCAAC)
s/_/u/_/_/i/l/k(CAAAAACC)
s/_/u/_/_/i/l/k(CAAAAACC)
s/_/ui/_/_/l/k(CAVAACC)
s/u/i/l/k/_(CAACCA)
s/u/i/l/k/_(CAACCA)
s/ui/l/k/_(CVCCA)
s/_/u/i/l/_/k(CAAACAC)
s/_/u/i/l/_/k(CAAACAC)
s/_/ui/l/k/_(CAVCCA)
s/u/i/_/l/_/k(CAAACAC)
s/u/i/_/l/_/k(CAAACAC)
s/ui/l/_/k/_(CVCACA)
s/_/u/_/i/_/l/k(CAAAAACC)
s/_/u/_/i/_/l/k(CAAAAACC)
s/_/ui/_/l/_/k(CAVACAC)
s/u/i/l/_/_/k(CAACAAC)
s/u/i/l/_/_/k(CAACAAC)
s/ui/l/k/_/_(CVCCAA)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/u/i/_/_/l/k(CAAAAACC)
s/_/ui/l/_/_/k(CAVCAAC)
s/u/i/_/_/_/l/k(CAAAAACC)
s/u/i/_/_/_/l/k(CAAAAACC)
s/ui/l/_/_/_/k(CVCAAAC)
s/_/u/_/_/_/i/l/k(CAAAAAACC)
s/_/u/_/_/_/i/l/k(CAAAAAACC)
s/_/ui/_/_/_/l/k(CAVAAACC)
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k']
				{'string': 's/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k']
				version split: ['s', 'ui', 'l', 'k']
				{'string': 's/ui/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'u', 'i', 'l', 'k']
				{'string': 's/_/u/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', 'k']
				{'string': 's/_/ui/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'u', 'i', '_', 'l', 'k']
				{'string': 's/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k']
				version split: ['s', 'ui', 'l', '_', 'k']
				{'string': 's/ui/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', '_', 'l', 'k']
				{'string': 's/_/ui/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', 'k']
				{'string': 's/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', 'k']
				{'string': 's/_/ui/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'ui', 'l', '_', '_', 'k']
				{'string': 's/ui/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', '_', 'k']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', '_', '_', 'l', 'k']
				{'string': 's/_/ui/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', 'l', 'k']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'u', 'i', 'l', 'k', '_']
				{'string': 's/u/i/l/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_']
				version split: ['s', 'ui', 'l', 'k', '_']
				{'string': 's/ui/l/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'ui', 'l', 'k', '_']
				{'string': 's/_/ui/l/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_']
				version split: ['s', 'u', 'i', '_', 'l', '_', 'k']
				{'string': 's/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', '_', 'k']
				version split: ['s', 'u', 'i', '_', 'l', '_', 'k']
				{'string': 's/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', '_', 'k']
				version split: ['s', 'ui', 'l', '_', 'k', '_']
				{'string': 's/ui/l/_/k/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k', '_']
				version split: ['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/u/_/i/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/u/_/i/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'ui', '_', 'l', '_', 'k']
				{'string': 's/_/ui/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'ui', 'l', 'k', '_', '_']
				{'string': 's/ui/l/k/_/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/u/i/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'ui', 'l', '_', '_', 'k']
				{'string': 's/_/ui/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', '_', 'k']
				version split: ['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', 'ui', 'l', '_', '_', '_', 'k']
				{'string': 's/ui/l/_/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', '_', '_', 'k']
				version split: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/_/_/i', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/u/_/_/_/i', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'ui', '_', '_', '_', 'l', 'k']
				{'string': 's/_/ui/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', '_', 'l', 'k']
				ANALYSING: suilke
					resolving (24)
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/u/i/l/k/e
					TRYING: e
					> version: s/ui/l/k/e
					> version: s/_/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/u/i/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/ui/l/k/e
					TRYING: e
					> version: s/u/i/_/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/_/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/ui/l/_/k/e
					TRYING: e
					> version: s/_/u/_/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/_/i/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/_/l/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/ui/l/k/_/e
					TRYING: e
					> version: s/_/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/u/i/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ui/l/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/u/i/_/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/u/i/_/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ui/l/_/_/k/e
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/u/_/_/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/u/_/_/i/l/k/e
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/ui/_/_/l/k/e
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', 'e', '_']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', 'k', '_', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', 'k', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', '_', 'l', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', 'k', '_', '_', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				adding dashed alternative: ['s', 'ui', 'l', '_', '_', '_', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				adding dashed alternative: ['s', '_', 'ui', '_', '_', '_', 'l', 'k', 'e']
				s/u/i/l/k/e(CCCCCV)
s/u/i/l/k/e(CVVCCV)
s/ui/l/k/e(CVCCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/u/i/l/k/e(CAAACCV)
s/_/ui/l/k/e(CAVCCV)
s/u/i/_/l/k/e(CAAACCV)
s/u/i/_/l/k/e(CAAACCV)
s/ui/l/_/k/e(CVCACV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/u/_/i/l/k/e(CAAAACCV)
s/_/ui/_/l/k/e(CAVACCV)
s/u/i/l/_/k/e(CAACACV)
s/u/i/l/_/k/e(CAACACV)
s/ui/l/k/_/e(CVCCAV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/u/i/_/l/k/e(CAAAACCV)
s/_/ui/l/_/k/e(CAVCACV)
s/u/i/_/_/l/k/e(CAAAACCV)
s/u/i/_/_/l/k/e(CAAAACCV)
s/ui/l/_/_/k/e(CVCAACV)
s/_/u/_/_/i/l/k/e(CAAAAACCV)
s/_/u/_/_/i/l/k/e(CAAAAACCV)
s/_/ui/_/_/l/k/e(CAVAACCV)
s/u/i/l/k/_/e(CAACCAV)
s/u/i/l/k/_/e(CAACCAV)
s/ui/l/k/e/_(CVCCVA)
s/_/u/i/l/_/k/e(CAAACACV)
s/_/u/i/l/_/k/e(CAAACACV)
s/_/ui/l/k/_/e(CAVCCAV)
s/u/i/_/l/_/k/e(CAAACACV)
s/u/i/_/l/_/k/e(CAAACACV)
s/ui/l/_/k/_/e(CVCACAV)
s/_/u/_/i/_/l/k/e(CAAAAACCV)
s/_/u/_/i/_/l/k/e(CAAAAACCV)
s/_/ui/_/l/_/k/e(CAVACACV)
s/u/i/l/_/_/k/e(CAACAACV)
s/u/i/l/_/_/k/e(CAACAACV)
s/ui/l/k/_/_/e(CVCCAAV)
s/_/u/i/_/_/l/k/e(CAAAAACCV)
s/_/u/i/_/_/l/k/e(CAAAAACCV)
s/_/ui/l/_/_/k/e(CAVCAACV)
s/u/i/_/_/_/l/k/e(CAAAAACCV)
s/u/i/_/_/_/l/k/e(CAAAAACCV)
s/ui/l/_/_/_/k/e(CVCAAACV)
s/_/u/_/_/_/i/l/k/e(CAAAAAACCV)
s/_/u/_/_/_/i/l/k/e(CAAAAAACCV)
s/_/ui/_/_/_/l/k/e(CAVAAACCV)
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e']
				{'string': 's/ui/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/i/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', 'e']
				{'string': 's/_/ui/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/ui/l/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', '_', 'l', 'k', 'e']
				{'string': 's/_/ui/_/l/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/u/i/l/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', '_', 'e']
				{'string': 's/ui/l/k/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', '_', 'k', 'e']
				{'string': 's/_/ui/l/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', '_', 'k', 'e']
				{'string': 's/ui/l/_/_/k/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', '_', 'k', 'e']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/_/i/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/ui/_/_/l/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', 'u', 'i', 'l', 'k', '_', 'e']
				{'string': 's/u/i/l/k/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', 'k', '_', 'e']
				version split: ['s', 'ui', 'l', 'k', 'e', '_']
				{'string': 's/ui/l/k/e/_', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', 'e', '_']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				{'string': 's/_/u/i/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', 'l', '_', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', 'k', '_', 'e']
				{'string': 's/_/ui/l/k/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', 'k', '_', 'e']
				version split: ['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				{'string': 's/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				{'string': 's/u/i/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', 'l', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', 'k', '_', 'e']
				{'string': 's/ui/l/_/k/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', 'k', '_', 'e']
				version split: ['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				{'string': 's/_/u/_/i/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', 'i', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', '_', 'l', '_', 'k', 'e']
				{'string': 's/_/ui/_/l/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', 'l', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				version split: ['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				{'string': 's/u/i/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', 'l', '_', '_', 'k', 'e']
				version split: ['s', 'ui', 'l', 'k', '_', '_', 'e']
				{'string': 's/ui/l/k/_/_/e', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', 'k', '_', '_', 'e']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/u/i/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', 'i', '_', '_', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				{'string': 's/_/ui/l/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', 'l', '_', '_', 'k', 'e']
				version split: ['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				version split: ['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				{'string': 's/u/i/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'u', 'i', '_', '_', '_', 'l', 'k', 'e']
				version split: ['s', 'ui', 'l', '_', '_', '_', 'k', 'e']
				{'string': 's/ui/l/_/_/_/k', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ui', 'l', '_', '_', '_', 'k', 'e']
				version split: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/_/_/i', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				{'string': 's/_/u/_/_/_/i', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', '_', 'i', 'l', 'k', 'e']
				version split: ['s', '_', 'ui', '_', '_', '_', 'l', 'k', 'e']
				{'string': 's/_/ui/_/_/_/l', 'rgx': '((s))/((_))/((u)|(i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ui', '_', '_', '_', 'l', 'k', 'e']
				ANALYSING: suych
					resolving (48)
					> version: s/u/y/c/h
					> version: s/u/y/c/h
					> version: s/u/y/ch
					> version: s/u/y/ch
					> version: s/uy/c/h
					> version: s/uy/ch
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/c/h
					TRYING: h
					> version: s/_/u/y/ch
					> version: s/_/u/y/ch
					> version: s/_/uy/c/h
					> version: s/_/uy/ch
					> version: s/u/y/_/c/h
					TRYING: h
					> version: s/u/y/_/c/h
					TRYING: h
					> version: s/u/y/_/ch
					> version: s/u/y/_/ch
					> version: s/uy/c/_/h
					> version: s/uy/ch/_
					> version: s/_/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/c/h/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/u/y/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/c/_/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/uy/ch/_/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/uy/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'c', 'h']
				{'string': 's/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', 'h']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'u', 'y', 'ch']
				{'string': 's/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch']
				version split: ['s', 'uy', 'c', 'h']
				{'string': 's/uy/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', 'h']
				version split: ['s', 'uy', 'ch']
				{'string': 's/uy/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'c', 'h']
				{'string': 's/_/u/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'c', 'h']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'u', 'y', 'ch']
				{'string': 's/_/u/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', 'ch']
				version split: ['s', '_', 'uy', 'c', 'h']
				{'string': 's/_/uy/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'c', 'h']
				version split: ['s', '_', 'uy', 'ch']
				{'string': 's/_/uy/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'ch']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'c', 'h']
				{'string': 's/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'ch']
				version split: ['s', 'u', 'y', '_', 'ch']
				{'string': 's/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', 'ch']
				version split: ['s', 'uy', 'c', '_', 'h']
				{'string': 's/uy/c/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', '_', 'h']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/y/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', 'y', 'ch']
				{'string': 's/_/u/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'ch']
				version split: ['s', '_', 'u', '_', 'y', 'ch']
				{'string': 's/_/u/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', 'y', 'ch']
				version split: ['s', '_', 'uy', '_', 'c', 'h']
				{'string': 's/_/uy/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', '_', 'c', 'h']
				version split: ['s', '_', 'uy', '_', 'ch']
				{'string': 's/_/uy/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', '_', 'ch']
				version split: ['s', 'u', 'y', 'c', '_', 'h']
				{'string': 's/u/y/c/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', '_', 'h']
				version split: ['s', 'u', 'y', 'c', '_', 'h']
				{'string': 's/u/y/c/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'c', '_', 'h']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'u', 'y', 'ch', '_']
				{'string': 's/u/y/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', 'ch', '_']
				version split: ['s', 'uy', 'c', 'h', '_']
				{'string': 's/uy/c/h/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', 'h', '_']
				version split: ['s', 'uy', 'ch', '_']
				{'string': 's/uy/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch', '_']
				version split: ['s', '_', 'u', 'y', '_', 'c', 'h']
				{'string': 's/_/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', '_', 'c', 'h']
				version split: ['s', '_', 'u', 'y', '_', 'c', 'h']
				{'string': 's/_/u/y/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', '_', 'c', 'h']
				version split: ['s', '_', 'u', 'y', '_', 'ch']
				{'string': 's/_/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', '_', 'ch']
				version split: ['s', '_', 'u', 'y', '_', 'ch']
				{'string': 's/_/u/y/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', 'y', '_', 'ch']
				version split: ['s', '_', 'uy', 'c', '_', 'h']
				{'string': 's/_/uy/c/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'c', '_', 'h']
				version split: ['s', '_', 'uy', 'ch', '_']
				{'string': 's/_/uy/ch/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', 'ch', '_']
				version split: ['s', 'u', 'y', '_', '_', 'c', 'h']
				{'string': 's/u/y/_/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', '_', 'c', 'h']
				{'string': 's/u/y/_/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['s', 'u', 'y', '_', '_', 'ch']
				{'string': 's/u/y/_/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', '_', 'ch']
				version split: ['s', 'u', 'y', '_', '_', 'ch']
				{'string': 's/u/y/_/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'u', 'y', '_', '_', 'ch']
				version split: ['s', 'uy', 'c', '_', '_', 'h']
				{'string': 's/uy/c/_/_/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'c', '_', '_', 'h']
				version split: ['s', 'uy', 'ch', '_', '_']
				{'string': 's/uy/ch/_/_', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'uy', 'ch', '_', '_']
				version split: ['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/_/y/c', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				{'string': 's/_/u/_/_/y/c', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['s', '_', 'u', '_', '_', 'y', 'ch']
				{'string': 's/_/u/_/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'y', 'ch']
				version split: ['s', '_', 'u', '_', '_', 'y', 'ch']
				{'string': 's/_/u/_/_/y/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'u', '_', '_', 'y', 'ch']
				version split: ['s', '_', 'uy', '_', '_', 'c', 'h']
				{'string': 's/_/uy/_/_/c/h', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', '_', '_', 'c', 'h']
				version split: ['s', '_', 'uy', '_', '_', 'ch']
				{'string': 's/_/uy/_/_/ch', 'rgx': '((s))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'uy', '_', '_', 'ch']
				ANALYSING: sƿ
					resolving (16)
					> version: s/ƿ
					> version: s/_/ƿ
					> version: s/ƿ/_
					> version: s/_/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/_/_/ƿ
					> version: s/ƿ/_
					> version: s/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/_/ƿ/_
					> version: s/ƿ/_/_
					> version: s/_/ƿ/_/_
					> version: s/ƿ/_/_/_
					> version: s/_/_/_/_/ƿ
					TRYING: ƿ
					adding blocked set: C = C >> h, ƿ, ch, _, s, c
					RESULT:  ['_']
				adding dashed alternative: ['s', 'ƿ', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', 'ƿ', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', 'ƿ', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', '_', 'ƿ', '_', '_', '_']
				adding dashed alternative: ['s', 'ƿ', '_', '_', '_', '_']
				adding dashed alternative: ['s', '_', '_', '_', '_', '_', 'ƿ']
				s/ƿ(CC)
s/_/ƿ(CAC)
s/ƿ/_(CCA)
s/_/_/ƿ(CAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/_/ƿ(CAAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/ƿ/_(CAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/_/_/ƿ(CAAAAC)
s/ƿ/_(CCA)
s/_/ƿ/_(CACA)
s/ƿ/_/_(CCAA)
s/_/_/ƿ/_(CAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/_/ƿ/_(CAAACA)
s/ƿ/_/_(CCAA)
s/_/ƿ/_/_(CACAA)
s/ƿ/_/_/_(CCAAA)
s/_/_/ƿ/_/_(CAACAA)
s/ƿ/_/_/_(CCAAA)
s/_/ƿ/_/_/_(CACAAA)
s/ƿ/_/_/_/_(CCAAAA)
s/_/_/_/_/_/ƿ(CAAAAAC)
				version split: ['s', 'ƿ']
				{'string': 's/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ']
				version split: ['s', '_', 'ƿ']
				{'string': 's/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', '_', 'ƿ']
				{'string': 's/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', 'ƿ', '_']
				{'string': 's/_/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', '_', 'ƿ']
				version split: ['s', 'ƿ', '_']
				{'string': 's/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_']
				version split: ['s', '_', 'ƿ', '_']
				{'string': 's/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', '_', 'ƿ', '_']
				{'string': 's/_/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', '_', '_', 'ƿ', '_']
				{'string': 's/_/_/_/ƿ/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', 'ƿ', '_']
				version split: ['s', 'ƿ', '_', '_']
				{'string': 's/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_']
				{'string': 's/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', '_', 'ƿ', '_', '_']
				{'string': 's/_/_/ƿ/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', 'ƿ', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_']
				{'string': 's/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_']
				version split: ['s', '_', 'ƿ', '_', '_', '_']
				{'string': 's/_/ƿ/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', '_']
				version split: ['s', 'ƿ', '_', '_', '_', '_']
				{'string': 's/ƿ/_/_/_/_', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'ƿ', '_', '_', '_', '_']
				version split: ['s', '_', '_', '_', '_', '_', 'ƿ']
				{'string': 's/_/_/_/_/_/ƿ', 'rgx': '((s))/((_))/((_))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', '_', '_', '_', '_', 'ƿ']
				ANALYSING: swech
					resolving (16)
					> version: s/w/e/c/h
					> version: s/w/e/ch
					> version: s/_/w/e/c/h
					TRYING: h
					> version: s/_/w/e/ch
					> version: s/w/e/_/c/h
					TRYING: h
					> version: s/w/e/_/ch
					> version: s/_/w/_/e/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/_/e/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/e/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/e/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/e/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/e/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/e/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/e/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/e/c/h
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/e/ch
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'w', 'e', 'c', 'h']
				{'string': 's/w/e/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'c', 'h']
				version split: ['s', 'w', 'e', 'ch']
				{'string': 's/w/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'ch']
				version split: ['s', '_', 'w', 'e', 'c', 'h']
				{'string': 's/_/w/e/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'c', 'h']
				version split: ['s', '_', 'w', 'e', 'ch']
				{'string': 's/_/w/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'e', 'ch']
				version split: ['s', 'w', 'e', '_', 'c', 'h']
				{'string': 's/w/e/_/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', '_', 'c', 'h']
				version split: ['s', 'w', 'e', '_', 'ch']
				{'string': 's/w/e/_/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', '_', 'ch']
				version split: ['s', '_', 'w', '_', 'e', 'c', 'h']
				{'string': 's/_/w/_/e/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'e', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'e', 'ch']
				{'string': 's/_/w/_/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'e', 'ch']
				version split: ['s', 'w', 'e', 'c', '_', 'h']
				{'string': 's/w/e/c/_/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'c', '_', 'h']
				version split: ['s', 'w', 'e', 'ch', '_']
				{'string': 's/w/e/ch/_', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', 'ch', '_']
				version split: ['s', '_', 'w', 'e', '_', 'c', 'h']
				{'string': 's/_/w/e/_/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'e', '_', 'c', 'h']
				version split: ['s', '_', 'w', 'e', '_', 'ch']
				{'string': 's/_/w/e/_/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'e', '_', 'ch']
				version split: ['s', 'w', 'e', '_', '_', 'c', 'h']
				{'string': 's/w/e/_/_/c/h', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', '_', '_', 'c', 'h']
				version split: ['s', 'w', 'e', '_', '_', 'ch']
				{'string': 's/w/e/_/_/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'e', '_', '_', 'ch']
				version split: ['s', '_', 'w', '_', '_', 'e', 'c', 'h']
				{'string': 's/_/w/_/_/e/c', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'e', 'c', 'h']
				version split: ['s', '_', 'w', '_', '_', 'e', 'ch']
				{'string': 's/_/w/_/_/e/ch', 'rgx': '((s))/((_))/((e))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'e', 'ch']
				ANALYSING: sƿich
					resolving (32)
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/c/h
					> version: s/ƿ/i/ch
					> version: s/ƿ/i/ch
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/c/h
					TRYING: h
					> version: s/_/ƿ/i/ch
					> version: s/_/ƿ/i/ch
					> version: s/ƿ/i/_/c/h
					TRYING: h
					> version: s/ƿ/i/_/c/h
					TRYING: h
					> version: s/ƿ/i/_/ch
					> version: s/ƿ/i/_/ch
					> version: s/_/ƿ/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'c', 'h']
				{'string': 's/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', 'h']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'ch']
				{'string': 's/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'c', 'h']
				{'string': 's/_/ƿ/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', '_', 'ƿ', 'i', 'ch']
				{'string': 's/_/ƿ/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', 'ch']
				{'string': 's/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', 'ch']
				{'string': 's/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'ch']
				version split: ['s', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'c', '_', 'h']
				{'string': 's/ƿ/i/c/_/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', 'ƿ', 'i', 'ch', '_']
				{'string': 's/ƿ/i/ch/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				{'string': 's/_/ƿ/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'i', '_', 'ch']
				{'string': 's/_/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'i', '_', 'ch']
				{'string': 's/_/ƿ/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				{'string': 's/ƿ/i/_/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'i', '_', '_', 'ch']
				{'string': 's/ƿ/i/_/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'ch']
				version split: ['s', 'ƿ', 'i', '_', '_', 'ch']
				{'string': 's/ƿ/i/_/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/ƿ/_/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				{'string': 's/_/ƿ/_/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'ch']
				ANALYSING: swich
					resolving (32)
					> version: s/w/i/c/h
					> version: s/w/i/c/h
					> version: s/w/i/ch
					> version: s/w/i/ch
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/c/h
					TRYING: h
					> version: s/_/w/i/ch
					> version: s/_/w/i/ch
					> version: s/w/i/_/c/h
					TRYING: h
					> version: s/w/i/_/c/h
					TRYING: h
					> version: s/w/i/_/ch
					> version: s/w/i/_/ch
					> version: s/_/w/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/w/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/w/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/w/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'c', 'h']
				{'string': 's/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', 'h']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', 'ch']
				{'string': 's/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'c', 'h']
				{'string': 's/_/w/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'c', 'h']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', '_', 'w', 'i', 'ch']
				{'string': 's/_/w/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'ch']
				version split: ['s', 'w', 'i', '_', 'c', 'h']
				{'string': 's/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', 'c', 'h']
				{'string': 's/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', 'ch']
				{'string': 's/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'ch']
				version split: ['s', 'w', 'i', '_', 'ch']
				{'string': 's/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'ch']
				version split: ['s', '_', 'w', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/i/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', 'i', 'ch']
				{'string': 's/_/w/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'ch']
				version split: ['s', '_', 'w', '_', 'i', 'ch']
				{'string': 's/_/w/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'ch']
				version split: ['s', 'w', 'i', 'c', '_', 'h']
				{'string': 's/w/i/c/_/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', '_', 'h']
				version split: ['s', 'w', 'i', 'c', '_', 'h']
				{'string': 's/w/i/c/_/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'c', '_', 'h']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', 'w', 'i', 'ch', '_']
				{'string': 's/w/i/ch/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', 'ch', '_']
				version split: ['s', '_', 'w', 'i', '_', 'c', 'h']
				{'string': 's/_/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'w', 'i', '_', 'c', 'h']
				{'string': 's/_/w/i/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'c', 'h']
				version split: ['s', '_', 'w', 'i', '_', 'ch']
				{'string': 's/_/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'ch']
				version split: ['s', '_', 'w', 'i', '_', 'ch']
				{'string': 's/_/w/i/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'ch']
				version split: ['s', 'w', 'i', '_', '_', 'c', 'h']
				{'string': 's/w/i/_/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', '_', 'c', 'h']
				{'string': 's/w/i/_/_/c/h', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'c', 'h']
				version split: ['s', 'w', 'i', '_', '_', 'ch']
				{'string': 's/w/i/_/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'ch']
				version split: ['s', 'w', 'i', '_', '_', 'ch']
				{'string': 's/w/i/_/_/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'ch']
				version split: ['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				{'string': 's/_/w/_/_/i/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'c', 'h']
				version split: ['s', '_', 'w', '_', '_', 'i', 'ch']
				{'string': 's/_/w/_/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'ch']
				version split: ['s', '_', 'w', '_', '_', 'i', 'ch']
				{'string': 's/_/w/_/_/i/ch', 'rgx': '((s))/((_))/((i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'ch']
				ANALYSING: sƿilc
					resolving (16)
					> version: s/ƿ/i/l/c
					> version: s/ƿ/i/l/c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/_/ƿ/i/l/c
					TRYING: c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					> version: s/ƿ/i/_/l/c
					TRYING: c
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/i/l/_/c
					TRYING: c
					> version: s/ƿ/i/l/_/c
					TRYING: c
					> version: s/_/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/ƿ/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', 'c']
				{'string': 's/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', 'l', 'c']
				{'string': 's/_/ƿ/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'i', 'l', 'c']
				version split: ['s', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'i', 'l', '_', 'c']
				{'string': 's/ƿ/i/l/_/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				{'string': 's/_/ƿ/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'i', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				{'string': 's/ƿ/i/_/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'i', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/ƿ/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'i', 'l', 'c']
				ANALYSING: swilc
					resolving (16)
					> version: s/w/i/l/c
					> version: s/w/i/l/c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/_/w/i/l/c
					TRYING: c
					> version: s/w/i/_/l/c
					TRYING: c
					> version: s/w/i/_/l/c
					TRYING: c
					> version: s/_/w/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/i/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/l/_/c
					TRYING: c
					> version: s/w/i/l/_/c
					TRYING: c
					> version: s/_/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/i/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/w/_/_/i/l/c
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					RESULT:  ['c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', 'c']
				{'string': 's/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', '_', 'w', 'i', 'l', 'c']
				{'string': 's/_/w/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', 'l', 'c']
				{'string': 's/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/i/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'c']
				version split: ['s', 'w', 'i', 'l', '_', 'c']
				{'string': 's/w/i/l/_/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'c']
				version split: ['s', 'w', 'i', 'l', '_', 'c']
				{'string': 's/w/i/l/_/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'c']
				{'string': 's/_/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'c']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'c']
				{'string': 's/_/w/i/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'c']
				{'string': 's/w/i/_/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'c']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'c']
				{'string': 's/w/i/_/_/l/c', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				{'string': 's/_/w/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'c']
				ANALYSING: swilk
					resolving (16)
					> version: s/w/i/l/k
					> version: s/w/i/l/k
					> version: s/_/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/w/i/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/w/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/w/i/_/l/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/w/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/i/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/w/i/l/_/k
					TRYING: k
					adding blocked set: C = C >> h, ch, k, _, s, c
					> version: s/_/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/i/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/i/_/_/l/k
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					> version: s/_/w/_/_/i/l/k
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					RESULT:  ['_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', 'w', 'i', 'l', 'k', '_']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', 'l', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', 'w', 'i', 'l', '_', '_', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				adding dashed alternative: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				s/w/i/l/k(CCCCC)
s/w/i/l/k(CCVCC)
s/_/w/i/l/k(CACACC)
s/_/w/i/l/k(CACACC)
s/w/i/_/l/k(CCAACC)
s/w/i/_/l/k(CCAACC)
s/_/w/_/i/l/k(CACAACC)
s/_/w/_/i/l/k(CACAACC)
s/w/i/l/_/k(CCACAC)
s/w/i/l/_/k(CCACAC)
s/_/w/i/_/l/k(CACAACC)
s/_/w/i/_/l/k(CACAACC)
s/w/i/_/_/l/k(CCAAACC)
s/w/i/_/_/l/k(CCAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/_/w/_/_/i/l/k(CACAAACC)
s/w/i/l/k/_(CCACCA)
s/w/i/l/k/_(CCACCA)
s/_/w/i/l/_/k(CACACAC)
s/_/w/i/l/_/k(CACACAC)
s/w/i/_/l/_/k(CCAACAC)
s/w/i/_/l/_/k(CCAACAC)
s/_/w/_/i/_/l/k(CACAAACC)
s/_/w/_/i/_/l/k(CACAAACC)
s/w/i/l/_/_/k(CCACAAC)
s/w/i/l/_/_/k(CCACAAC)
s/_/w/i/_/_/l/k(CACAAACC)
s/_/w/i/_/_/l/k(CACAAACC)
s/w/i/_/_/_/l/k(CCAAAACC)
s/w/i/_/_/_/l/k(CCAAAACC)
s/_/w/_/_/_/i/l/k(CACAAAACC)
s/_/w/_/_/_/i/l/k(CACAAAACC)
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k']
				{'string': 's/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', '_', 'w', 'i', 'l', 'k']
				{'string': 's/_/w/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', 'l', 'k']
				{'string': 's/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/i/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', 'l', '_', 'k']
				{'string': 's/w/i/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', 'i', '_', 'l', 'k']
				{'string': 's/_/w/i/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/l/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/i/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'i', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', 'w', 'i', 'l', 'k', '_']
				{'string': 's/w/i/l/k/_', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', 'k', '_']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', '_', 'w', 'i', 'l', '_', 'k']
				{'string': 's/_/w/i/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', 'w', 'i', '_', 'l', '_', 'k']
				{'string': 's/w/i/_/l/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', 'l', '_', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				{'string': 's/_/w/_/i/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', 'i', '_', 'l', 'k']
				version split: ['s', 'w', 'i', 'l', '_', '_', 'k']
				{'string': 's/w/i/l/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', '_', 'k']
				version split: ['s', 'w', 'i', 'l', '_', '_', 'k']
				{'string': 's/w/i/l/_/_/k', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', 'l', '_', '_', 'k']
				version split: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/w/i/_/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				{'string': 's/_/w/i/_/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', 'i', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				{'string': 's/w/i/_/_/_/l', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', 'w', 'i', '_', '_', '_', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				version split: ['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				{'string': 's/_/w/_/_/_/i', 'rgx': '((s))/((_))/((i))/((_))/((_))/((_))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', '_', 'i', 'l', 'k']
				ANALYSING: sƿuc
					resolving (16)
					> version: s/ƿ/u/c
					> version: s/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/_/ƿ/u/c
					> version: s/ƿ/u/_/c
					> version: s/ƿ/u/_/c
					> version: s/_/ƿ/_/u/c
					TRYING: c
					> version: s/_/ƿ/_/u/c
					TRYING: c
					> version: s/ƿ/u/c/_
					> version: s/ƿ/u/c/_
					> version: s/_/ƿ/u/_/c
					TRYING: c
					> version: s/_/ƿ/u/_/c
					TRYING: c
					> version: s/ƿ/u/_/_/c
					TRYING: c
					> version: s/ƿ/u/_/_/c
					TRYING: c
					> version: s/_/ƿ/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					> version: s/_/ƿ/_/_/u/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c']
				{'string': 's/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'c']
				{'string': 's/_/ƿ/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'c']
				{'string': 's/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', 'ƿ', 'u', 'c', '_']
				{'string': 's/ƿ/u/c/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c']
				{'string': 's/_/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c']
				{'string': 's/_/ƿ/u/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c']
				{'string': 's/ƿ/u/_/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c']
				{'string': 's/ƿ/u/_/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c']
				ANALYSING: sƿucche
					resolving (64)
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/c/c/h/e
					TRYING: h
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/c/ch/e
					TRYING: e
					> version: s/ƿ/u/cch/e
					> version: s/ƿ/u/cch/e
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/c/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/cch/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/cch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/cch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/cch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/cch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/ch/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/cch/e
					TRYING: cch
					adding blocked set: C = C >> h, ch, cch, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/cch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/c/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/u/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/_/u/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/u/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				{'string': 's/ƿ/u/cch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				{'string': 's/ƿ/u/cch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				{'string': 's/ƿ/u/c/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				{'string': 's/ƿ/u/c/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				{'string': 's/ƿ/u/cch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'cch', '_', 'e']
				{'string': 's/ƿ/u/cch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'cch', '_', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/_/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/_/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/u/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/_/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				{'string': 's/_/ƿ/u/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/_/c/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				{'string': 's/ƿ/u/_/_/c/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				{'string': 's/ƿ/u/_/_/cch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				{'string': 's/_/ƿ/_/_/u/cch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'cch', 'e']
				ANALYSING: sƿuch
					resolving (32)
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/c/h
					> version: s/ƿ/u/ch
					> version: s/ƿ/u/ch
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/c/h
					TRYING: h
					> version: s/_/ƿ/u/ch
					> version: s/_/ƿ/u/ch
					> version: s/ƿ/u/_/c/h
					TRYING: h
					> version: s/ƿ/u/_/c/h
					TRYING: h
					> version: s/ƿ/u/_/ch
					> version: s/ƿ/u/_/ch
					> version: s/_/ƿ/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/u/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'c', 'h']
				{'string': 's/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'ch']
				{'string': 's/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h']
				{'string': 's/_/ƿ/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', '_', 'ƿ', 'u', 'ch']
				{'string': 's/_/ƿ/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', 'ch']
				{'string': 's/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch']
				version split: ['s', 'ƿ', 'u', '_', 'ch']
				{'string': 's/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'h']
				{'string': 's/ƿ/u/c/_/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'h']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', 'ƿ', 'u', 'ch', '_']
				{'string': 's/ƿ/u/ch/_', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				{'string': 's/_/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'h']
				version split: ['s', '_', 'ƿ', 'u', '_', 'ch']
				{'string': 's/_/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'ch']
				version split: ['s', '_', 'ƿ', 'u', '_', 'ch']
				{'string': 's/_/ƿ/u/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'ch']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				{'string': 's/ƿ/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'h']
				version split: ['s', 'ƿ', 'u', '_', '_', 'ch']
				{'string': 's/ƿ/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'ch']
				version split: ['s', 'ƿ', 'u', '_', '_', 'ch']
				{'string': 's/ƿ/u/_/_/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'ch']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				{'string': 's/_/ƿ/_/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'ch']
				ANALYSING: sƿuche
					resolving (32)
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/c/h/e
					TRYING: e
					> version: s/ƿ/u/ch/e
					> version: s/ƿ/u/ch/e
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/c/h/e
					TRYING: h
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					> version: s/_/ƿ/u/ch/e
					TRYING: e
					> version: s/ƿ/u/_/c/h/e
					TRYING: h
					> version: s/ƿ/u/_/c/h/e
					TRYING: h
					> version: s/ƿ/u/_/ch/e
					TRYING: e
					> version: s/ƿ/u/_/ch/e
					TRYING: e
					> version: s/_/ƿ/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/u/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: s/_/ƿ/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/u/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/h/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/c/_/h/e
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/ch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/ch/_/e
					TRYING: e
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/u/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/c/h/e
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/ƿ/u/_/_/ch/e
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/c/h/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: s/_/ƿ/_/_/u/ch/e
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/c/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/u/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/_/u/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				{'string': 's/ƿ/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				{'string': 's/ƿ/u/c/_/h/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'c', '_', 'h', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', '_', 'e']
				{'string': 's/ƿ/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_', 'e']
				version split: ['s', 'ƿ', 'u', 'ch', '_', 'e']
				{'string': 's/ƿ/u/ch/_/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'ch', '_', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				{'string': 's/_/ƿ/u/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/_/ƿ/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				version split: ['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				{'string': 's/_/ƿ/u/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				{'string': 's/ƿ/u/_/_/c/h', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'c', 'h', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				version split: ['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				{'string': 's/ƿ/u/_/_/ch/e', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				{'string': 's/_/ƿ/_/_/u/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'c', 'h', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/_/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				{'string': 's/_/ƿ/_/_/u/ch', 'rgx': '((s))/((_))/((u))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'ch', 'e']
				ANALYSING: sƿulc
					resolving (16)
					> version: s/ƿ/u/l/c
					> version: s/ƿ/u/l/c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/_/ƿ/u/l/c
					TRYING: c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					> version: s/ƿ/u/_/l/c
					TRYING: c
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/u/l/_/c
					TRYING: c
					> version: s/ƿ/u/l/_/c
					TRYING: c
					> version: s/_/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/u/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/ƿ/u/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/ƿ/_/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					> version: s/_/ƿ/_/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					RESULT:  ['c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', 'c']
				{'string': 's/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', 'l', 'c']
				{'string': 's/_/ƿ/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', 'u', 'l', 'c']
				version split: ['s', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', 'ƿ', 'u', 'l', '_', 'c']
				{'string': 's/ƿ/u/l/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				{'string': 's/_/ƿ/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', 'u', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				version split: ['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				{'string': 's/ƿ/u/_/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'ƿ', 'u', '_', '_', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				{'string': 's/_/ƿ/_/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'ƿ', '_', '_', 'u', 'l', 'c']
				ANALYSING: swulc
					resolving (16)
					> version: s/w/u/l/c
					> version: s/w/u/l/c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/_/w/u/l/c
					TRYING: c
					> version: s/w/u/_/l/c
					TRYING: c
					> version: s/w/u/_/l/c
					TRYING: c
					> version: s/_/w/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/u/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/u/l/_/c
					TRYING: c
					> version: s/w/u/l/_/c
					TRYING: c
					> version: s/_/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/u/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/u/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/w/u/_/_/l/c
					TRYING: l
					adding blocked set: C = C >> h, ch, _, l, s, c
					> version: s/_/w/_/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					> version: s/_/w/_/_/u/l/c
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					RESULT:  ['c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', 'c']
				{'string': 's/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', '_', 'w', 'u', 'l', 'c']
				{'string': 's/_/w/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', 'l', 'c']
				{'string': 's/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/u/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', 'u', 'l', 'c']
				version split: ['s', 'w', 'u', 'l', '_', 'c']
				{'string': 's/w/u/l/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', '_', 'c']
				version split: ['s', 'w', 'u', 'l', '_', 'c']
				{'string': 's/w/u/l/_/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', 'l', '_', 'c']
				version split: ['s', '_', 'w', 'u', '_', 'l', 'c']
				{'string': 's/_/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', '_', 'l', 'c']
				version split: ['s', '_', 'w', 'u', '_', 'l', 'c']
				{'string': 's/_/w/u/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', 'u', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', '_', 'l', 'c']
				{'string': 's/w/u/_/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', '_', '_', 'l', 'c']
				version split: ['s', 'w', 'u', '_', '_', 'l', 'c']
				{'string': 's/w/u/_/_/l/c', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', 'w', 'u', '_', '_', 'l', 'c']
				version split: ['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				version split: ['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				{'string': 's/_/w/_/_/u/l', 'rgx': '((s))/((_))/((u))/((_))/((_))/((c))$'}
				_____REMOVING________['s', '_', 'w', '_', '_', 'u', 'l', 'c']
				ANALYSING: zuich
					resolving (96)
					> version: z/u/i/c/h
					> version: z/u/i/c/h
					> version: z/u/i/ch
					> version: z/u/i/ch
					> version: z/ui/c/h
					> version: z/ui/ch
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/c/h
					TRYING: h
					> version: _/z/u/i/ch
					> version: _/z/u/i/ch
					> version: _/z/ui/c/h
					> version: _/z/ui/ch
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/c/h
					TRYING: h
					> version: z/_/u/i/ch
					> version: z/_/u/i/ch
					> version: z/_/ui/c/h
					> version: z/_/ui/ch
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/c/_/h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/i/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/i/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/ui/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/ui/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/c/h/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/i/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/ui/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/i/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/c/_/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/ui/ch/_/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/ui/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/i/c/h
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/i/ch
					TRYING: i
					adding blocked set: C = C >> h, ch, _, s, c, i
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/ui/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/i/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/i/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/ui/c/h
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/ui/ch
					TRYING: ui
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'c', 'h']
				{'string': 'z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', 'h']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'u', 'i', 'ch']
				{'string': 'z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch']
				version split: ['z', 'ui', 'c', 'h']
				{'string': 'z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', 'h']
				version split: ['z', 'ui', 'ch']
				{'string': 'z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'u', 'i', 'ch']
				{'string': '_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', 'ch']
				version split: ['_', 'z', 'ui', 'c', 'h']
				{'string': '_/z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', 'h']
				version split: ['_', 'z', 'ui', 'ch']
				{'string': '_/z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'c', 'h']
				{'string': 'z/_/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'c', 'h']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'u', 'i', 'ch']
				{'string': 'z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', 'ch']
				version split: ['z', '_', 'ui', 'c', 'h']
				{'string': 'z/_/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'c', 'h']
				version split: ['z', '_', 'ui', 'ch']
				{'string': 'z/_/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/u/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', 'i', 'ch']
				{'string': '_/_/z/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', 'c', 'h']
				{'string': '_/_/z/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', 'ch']
				{'string': '_/_/z/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', 'ch']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'u', 'i', '_', 'ch']
				{'string': 'z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', 'ch']
				version split: ['z', 'ui', 'c', '_', 'h']
				{'string': 'z/ui/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', '_', 'h']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', 'z', 'ui', '_', 'c', 'h']
				{'string': '_/z/ui/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'c', 'h']
				version split: ['_', 'z', 'ui', '_', 'ch']
				{'string': '_/z/ui/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', 'ch']
				version split: ['z', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/i/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'i', 'ch']
				{'string': 'z/_/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'ch']
				version split: ['z', '_', 'u', '_', 'i', 'ch']
				{'string': 'z/_/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'i', 'ch']
				version split: ['z', '_', 'ui', '_', 'c', 'h']
				{'string': 'z/_/ui/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', '_', 'c', 'h']
				version split: ['z', '_', 'ui', '_', 'ch']
				{'string': 'z/_/ui/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', '_', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/u/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/u/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/u/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', 'ui', 'c', 'h']
				{'string': '_/_/z/_/ui/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'ui', 'ch']
				{'string': '_/_/z/_/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'ui', 'ch']
				version split: ['z', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/u/i/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', '_', 'h']
				version split: ['z', 'u', 'i', 'c', '_', 'h']
				{'string': 'z/u/i/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'c', '_', 'h']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'u', 'i', 'ch', '_']
				{'string': 'z/u/i/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', 'ch', '_']
				version split: ['z', 'ui', 'c', 'h', '_']
				{'string': 'z/ui/c/h/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', 'h', '_']
				version split: ['z', 'ui', 'ch', '_']
				{'string': 'z/ui/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch', '_']
				version split: ['_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', '_', 'c', 'h']
				{'string': '_/z/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', '_', 'c', 'h']
				version split: ['_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', 'z', 'u', 'i', '_', 'ch']
				{'string': '_/z/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'i', '_', 'ch']
				version split: ['_', 'z', 'ui', 'c', '_', 'h']
				{'string': '_/z/ui/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'c', '_', 'h']
				version split: ['_', 'z', 'ui', 'ch', '_']
				{'string': '_/z/ui/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', 'ch', '_']
				version split: ['z', '_', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/_/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', '_', 'c', 'h']
				version split: ['z', '_', 'u', 'i', '_', 'c', 'h']
				{'string': 'z/_/u/i/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', '_', 'c', 'h']
				version split: ['z', '_', 'u', 'i', '_', 'ch']
				{'string': 'z/_/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', '_', 'ch']
				version split: ['z', '_', 'u', 'i', '_', 'ch']
				{'string': 'z/_/u/i/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'i', '_', 'ch']
				version split: ['z', '_', 'ui', 'c', '_', 'h']
				{'string': 'z/_/ui/c/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'c', '_', 'h']
				version split: ['z', '_', 'ui', 'ch', '_']
				{'string': 'z/_/ui/ch/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', 'ch', '_']
				version split: ['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/_/z/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				{'string': '_/_/z/u/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'i', 'c', 'h']
				version split: ['_', '_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', '_', 'z', 'u', '_', 'i', 'ch']
				{'string': '_/_/z/u/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'i', 'ch']
				version split: ['_', '_', 'z', 'ui', '_', 'c', 'h']
				{'string': '_/_/z/ui/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'ui', '_', 'ch']
				{'string': '_/_/z/ui/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'ui', '_', 'ch']
				version split: ['z', 'u', 'i', '_', '_', 'c', 'h']
				{'string': 'z/u/i/_/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', '_', 'c', 'h']
				{'string': 'z/u/i/_/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', '_', 'c', 'h']
				version split: ['z', 'u', 'i', '_', '_', 'ch']
				{'string': 'z/u/i/_/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', '_', 'ch']
				version split: ['z', 'u', 'i', '_', '_', 'ch']
				{'string': 'z/u/i/_/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'i', '_', '_', 'ch']
				version split: ['z', 'ui', 'c', '_', '_', 'h']
				{'string': 'z/ui/c/_/_/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'c', '_', '_', 'h']
				version split: ['z', 'ui', 'ch', '_', '_']
				{'string': 'z/ui/ch/_/_', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'ui', 'ch', '_', '_']
				version split: ['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				{'string': '_/z/u/_/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['_', 'z', 'u', '_', '_', 'i', 'ch']
				{'string': '_/z/u/_/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'i', 'ch']
				version split: ['_', 'z', 'u', '_', '_', 'i', 'ch']
				{'string': '_/z/u/_/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'i', 'ch']
				version split: ['_', 'z', 'ui', '_', '_', 'c', 'h']
				{'string': '_/z/ui/_/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', '_', 'c', 'h']
				version split: ['_', 'z', 'ui', '_', '_', 'ch']
				{'string': '_/z/ui/_/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'ui', '_', '_', 'ch']
				version split: ['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				{'string': 'z/_/u/_/_/i/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'i', 'c', 'h']
				version split: ['z', '_', 'u', '_', '_', 'i', 'ch']
				{'string': 'z/_/u/_/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'i', 'ch']
				version split: ['z', '_', 'u', '_', '_', 'i', 'ch']
				{'string': 'z/_/u/_/_/i/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'i', 'ch']
				version split: ['z', '_', 'ui', '_', '_', 'c', 'h']
				{'string': 'z/_/ui/_/_/c/h', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', '_', '_', 'c', 'h']
				version split: ['z', '_', 'ui', '_', '_', 'ch']
				{'string': 'z/_/ui/_/_/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'ui', '_', '_', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				{'string': '_/_/z/_/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'i', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				{'string': '_/_/z/_/_/u/i', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'i', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'ui', 'c', 'h']
				{'string': '_/_/z/_/_/ui/c', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'ui', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'ui', 'ch']
				{'string': '_/_/z/_/_/ui/ch', 'rgx': '((_))/((_))/((u)|(i))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'ui', 'ch']
				ANALYSING: zuych
					resolving (96)
					> version: z/u/y/c/h
					> version: z/u/y/c/h
					> version: z/u/y/ch
					> version: z/u/y/ch
					> version: z/uy/c/h
					> version: z/uy/ch
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/c/h
					TRYING: h
					> version: _/z/u/y/ch
					> version: _/z/u/y/ch
					> version: _/z/uy/c/h
					> version: _/z/uy/ch
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/c/h
					TRYING: h
					> version: z/_/u/y/ch
					> version: z/_/u/y/ch
					> version: z/_/uy/c/h
					> version: z/_/uy/ch
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/c/_/h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/y/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/y/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/_/c/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/_/ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/u/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/uy/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/uy/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/c/h/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/y/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/c/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/ch/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/u/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/uy/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/u/y/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/c/_/_/h
					TRYING: h
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/uy/ch/_/_
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/z/uy/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/y/c/h
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/u/_/_/y/ch
					TRYING: y
					adding blocked set: C = C >> h, ch, _, s, c, y
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/_/_/c/h
					TRYING: c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: z/_/uy/_/_/ch
					TRYING: ch
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/y/c/h
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/u/y/ch
					TRYING: u
					adding blocked set: C = C >> h, ch, u, _, s, c
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/uy/c/h
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					> version: _/_/z/_/_/uy/ch
					TRYING: uy
					>>> MULTIPLE RESOLVE OPTIONS: {'h', 'c', 'ch'}
					RESULT:  ['h', 'c', 'ch']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'c', 'h']
				{'string': 'z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', 'h']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'u', 'y', 'ch']
				{'string': 'z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch']
				version split: ['z', 'uy', 'c', 'h']
				{'string': 'z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', 'h']
				version split: ['z', 'uy', 'ch']
				{'string': 'z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'u', 'y', 'ch']
				{'string': '_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', 'ch']
				version split: ['_', 'z', 'uy', 'c', 'h']
				{'string': '_/z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', 'h']
				version split: ['_', 'z', 'uy', 'ch']
				{'string': '_/z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'c', 'h']
				{'string': 'z/_/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'c', 'h']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'u', 'y', 'ch']
				{'string': 'z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', 'ch']
				version split: ['z', '_', 'uy', 'c', 'h']
				{'string': 'z/_/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'c', 'h']
				version split: ['z', '_', 'uy', 'ch']
				{'string': 'z/_/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/u/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', 'y', 'ch']
				{'string': '_/_/z/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', 'c', 'h']
				{'string': '_/_/z/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', 'ch']
				{'string': '_/_/z/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', 'ch']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'u', 'y', '_', 'ch']
				{'string': 'z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', 'ch']
				version split: ['z', 'uy', 'c', '_', 'h']
				{'string': 'z/uy/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', '_', 'h']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', 'z', 'uy', '_', 'c', 'h']
				{'string': '_/z/uy/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'c', 'h']
				version split: ['_', 'z', 'uy', '_', 'ch']
				{'string': '_/z/uy/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', 'ch']
				version split: ['z', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/y/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', 'y', 'ch']
				{'string': 'z/_/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'ch']
				version split: ['z', '_', 'u', '_', 'y', 'ch']
				{'string': 'z/_/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', 'y', 'ch']
				version split: ['z', '_', 'uy', '_', 'c', 'h']
				{'string': 'z/_/uy/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', '_', 'c', 'h']
				version split: ['z', '_', 'uy', '_', 'ch']
				{'string': 'z/_/uy/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', '_', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/u/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/u/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/u/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', 'uy', 'c', 'h']
				{'string': '_/_/z/_/uy/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', '_', 'uy', 'ch']
				{'string': '_/_/z/_/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', 'uy', 'ch']
				version split: ['z', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/u/y/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', '_', 'h']
				version split: ['z', 'u', 'y', 'c', '_', 'h']
				{'string': 'z/u/y/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'c', '_', 'h']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'u', 'y', 'ch', '_']
				{'string': 'z/u/y/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', 'ch', '_']
				version split: ['z', 'uy', 'c', 'h', '_']
				{'string': 'z/uy/c/h/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', 'h', '_']
				version split: ['z', 'uy', 'ch', '_']
				{'string': 'z/uy/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch', '_']
				version split: ['_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', '_', 'c', 'h']
				{'string': '_/z/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', '_', 'c', 'h']
				version split: ['_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', 'z', 'u', 'y', '_', 'ch']
				{'string': '_/z/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', 'y', '_', 'ch']
				version split: ['_', 'z', 'uy', 'c', '_', 'h']
				{'string': '_/z/uy/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'c', '_', 'h']
				version split: ['_', 'z', 'uy', 'ch', '_']
				{'string': '_/z/uy/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', 'ch', '_']
				version split: ['z', '_', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/_/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', '_', 'c', 'h']
				version split: ['z', '_', 'u', 'y', '_', 'c', 'h']
				{'string': 'z/_/u/y/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', '_', 'c', 'h']
				version split: ['z', '_', 'u', 'y', '_', 'ch']
				{'string': 'z/_/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', '_', 'ch']
				version split: ['z', '_', 'u', 'y', '_', 'ch']
				{'string': 'z/_/u/y/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', 'y', '_', 'ch']
				version split: ['z', '_', 'uy', 'c', '_', 'h']
				{'string': 'z/_/uy/c/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'c', '_', 'h']
				version split: ['z', '_', 'uy', 'ch', '_']
				{'string': 'z/_/uy/ch/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', 'ch', '_']
				version split: ['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/_/z/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				{'string': '_/_/z/u/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'y', 'c', 'h']
				version split: ['_', '_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', '_', 'z', 'u', '_', 'y', 'ch']
				{'string': '_/_/z/u/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'u', '_', 'y', 'ch']
				version split: ['_', '_', 'z', 'uy', '_', 'c', 'h']
				{'string': '_/_/z/uy/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', '_', 'c', 'h']
				version split: ['_', '_', 'z', 'uy', '_', 'ch']
				{'string': '_/_/z/uy/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', 'uy', '_', 'ch']
				version split: ['z', 'u', 'y', '_', '_', 'c', 'h']
				{'string': 'z/u/y/_/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', '_', 'c', 'h']
				{'string': 'z/u/y/_/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', '_', 'c', 'h']
				version split: ['z', 'u', 'y', '_', '_', 'ch']
				{'string': 'z/u/y/_/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', '_', 'ch']
				version split: ['z', 'u', 'y', '_', '_', 'ch']
				{'string': 'z/u/y/_/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'u', 'y', '_', '_', 'ch']
				version split: ['z', 'uy', 'c', '_', '_', 'h']
				{'string': 'z/uy/c/_/_/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'c', '_', '_', 'h']
				version split: ['z', 'uy', 'ch', '_', '_']
				{'string': 'z/uy/ch/_/_', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', 'uy', 'ch', '_', '_']
				version split: ['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				{'string': '_/z/u/_/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['_', 'z', 'u', '_', '_', 'y', 'ch']
				{'string': '_/z/u/_/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'y', 'ch']
				version split: ['_', 'z', 'u', '_', '_', 'y', 'ch']
				{'string': '_/z/u/_/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'u', '_', '_', 'y', 'ch']
				version split: ['_', 'z', 'uy', '_', '_', 'c', 'h']
				{'string': '_/z/uy/_/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', '_', 'c', 'h']
				version split: ['_', 'z', 'uy', '_', '_', 'ch']
				{'string': '_/z/uy/_/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', 'z', 'uy', '_', '_', 'ch']
				version split: ['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				{'string': 'z/_/u/_/_/y/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'y', 'c', 'h']
				version split: ['z', '_', 'u', '_', '_', 'y', 'ch']
				{'string': 'z/_/u/_/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'y', 'ch']
				version split: ['z', '_', 'u', '_', '_', 'y', 'ch']
				{'string': 'z/_/u/_/_/y/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'u', '_', '_', 'y', 'ch']
				version split: ['z', '_', 'uy', '_', '_', 'c', 'h']
				{'string': 'z/_/uy/_/_/c/h', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', '_', '_', 'c', 'h']
				version split: ['z', '_', 'uy', '_', '_', 'ch']
				{'string': 'z/_/uy/_/_/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['z', '_', 'uy', '_', '_', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				{'string': '_/_/z/_/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'y', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				{'string': '_/_/z/_/_/u/y', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'u', 'y', 'ch']
				version split: ['_', '_', 'z', '_', '_', 'uy', 'c', 'h']
				{'string': '_/_/z/_/_/uy/c', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'uy', 'c', 'h']
				version split: ['_', '_', 'z', '_', '_', 'uy', 'ch']
				{'string': '_/_/z/_/_/uy/ch', 'rgx': '((_))/((_))/((u)|(y))/((_))/((_))/((h)|(c)|(ch))$'}
				_____REMOVING________['_', '_', 'z', '_', '_', 'uy', 'ch']
		FAIL: 
		only one version left: ['s', 'h', 'u', '_', '_', 'c']
		FAIL: 
		only one version left: ['s', '_', 'o', '_', '_', 'ch']
		only one version left: ['s', '_', 'u', '_', '_', 'ch']
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		FAIL: 
		SPLIT: ['s', 'ƿ', 'i', 'l', 'c', 'h']
		SPLIT: ['s', 'ƿ', 'i', 'l', 'l', 'c']
		SPLIT: ['s', 'ƿ', 'u', 'c', 'c', 'h']
		SPLIT: ['h', '_', '_', '_', '_', 'c.s.ch', '----!']
		SPLIT: ['s', 'h', 'u', '_', '_', 'c']
		['s', 'h', 'u', '_', '_', 'c']
		['s', 'h', 'u', '_', '_', 'c']
		SPLIT: ['s', '_', 'i', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'o', '_', '_', 'ch']
		['s', '_', 'o', '_', '_', 'ch']
		SPLIT: ['s', '_', 'u', '_', '_', 'ch']
		['s', '_', 'u', '_', '_', 'ch']
		['s', '_', 'u', '_', '_', 'ch']
		SPLIT: ['s', '_', 'u', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'u.i', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'u.i', '_', '_', 'c', '----!']
		SPLIT: ['s', '_', 'u.i', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.i', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'u.y', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', '_', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'e', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', 'c', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', 'c', '----!']
		SPLIT: ['s', '_', 'i', '_', '_', '_', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'c', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'c', '----!']
		SPLIT: ['s', '_', 'u', '_', '_', 'c', '----!']
		SPLIT: ['_', '_', 'u.i', '_', '_', 'h.c.ch', '----!']
		SPLIT: ['_', '_', 'u.y', '_', '_', 'h.c.ch', '----!']
		version for pattern CCVCCC is INVALID
		[{'h', 'ƿ', 'u', 'hu', '_'}, {'c', '_', 'l'}, {'c', '_', 'l'}]
		23
		POSSIBLE CHANGE: 3 : Palatal Vicinity l-deletion
		POSSIBLE CHANGE: 4 : Palatal Vicinity l-deletion
		OVERVIEW: version for pattern CCVCCC
{'h', 'ƿ', 'u', 'hu', '_'}, {'c', '_', 'l'}, {'c', '_', 'l'}
faulty splits: 23
hc.s.ch----! <-! hsƿucch
si----! <-! slike
suh.c.ch----! <-! suche
su.ih.c.ch----! <-! suich
su.ic----! <-! suilc
su.i----! <-! suilk
su.i----! <-! suilke
su.yh.c.ch----! <-! suych
s----! <-! sƿ
seh.c.ch----! <-! swech
sih.c.ch----! <-! sƿich
sih.c.ch----! <-! swich
sic----! <-! sƿilc
sic----! <-! swilc
si----! <-! swilk
suc----! <-! sƿuc
suh.c.ch----! <-! sƿucche
suh.c.ch----! <-! sƿuch
suh.c.ch----! <-! sƿuche
suc----! <-! sƿulc
suc----! <-! swulc
u.ih.c.ch----! <-! zuich
u.yh.c.ch----! <-! zuych
s | ƿ | i | l | c | h
s | ƿ | i | l | l | c
s | ƿ | u | c | c | h
h | _ | _ | _ | _ | c.s.ch | ----!
s | h | u | _ | _ | c
s | _ | i | _ | _ | _ | ----!
s | _ | o | _ | _ | ch
s | _ | u | _ | _ | ch
s | _ | u | _ | _ | h.c.ch | ----!
s | _ | u.i | _ | _ | h.c.ch | ----!
s | _ | u.i | _ | _ | c | ----!
s | _ | u.i | _ | _ | _ | ----!
s | _ | u.i | _ | _ | _ | ----!
s | _ | u.y | _ | _ | h.c.ch | ----!
s | _ | _ | _ | _ | _ | ----!
s | _ | e | _ | _ | h.c.ch | ----!
s | _ | i | _ | _ | h.c.ch | ----!
s | _ | i | _ | _ | h.c.ch | ----!
s | _ | i | _ | _ | c | ----!
s | _ | i | _ | _ | c | ----!
s | _ | i | _ | _ | _ | ----!
s | _ | u | _ | _ | c | ----!
s | _ | u | _ | _ | h.c.ch | ----!
s | _ | u | _ | _ | h.c.ch | ----!
s | _ | u | _ | _ | h.c.ch | ----!
s | _ | u | _ | _ | c | ----!
s | _ | u | _ | _ | c | ----!
_ | _ | u.i | _ | _ | h.c.ch | ----!
_ | _ | u.y | _ | _ | h.c.ch | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'ƿ', 's'},{'h', 'ƿ', 'u', 'hu', '_', 'l'},{'h', 'ƿ', 'u', 'w', 'hu', '_'},{'h', 'ƿ', 'u', 'hu', '_', 'z'},{'h', 'ƿ', 'u', 'hu', '_'}
3 : {'c', '_', 'l', 'ch'},{'c', '_', 'l', 'y'},{'h', 'c', '_', 'l'},{'c', '_', 'l'},{'ƿ', 'c', '_', 'l'},{'c', 'k', '_', 'l'},{'c', 'l', 's'},{'c', '_', 'l', 'cch'},{'ƿ', 'c', 'l'},{'c', '_', 'l', 'i'},{'c', 'u', 'l'},{'c', 'u', '_', 'l'}
4 : {'c', '_', 'l', 'ch'},{'c', '_', 'l', 'y'},{'h', 'c', '_', 'l'},{'c', '_', 'l'},{'ƿ', 'c', '_', 'l'},{'c', 'k', '_', 'l'},{'c', 'l', 'cch'},{'c', 'l', 's'},{'c', 'l'},{'c', '_', 'l', 'cch'},{'ƿ', 'c', 'l'},{'c', '_', 'l', 'i'},{'c', 'u', 'l'},{'c', 'u', '_', 'l'}
5 : {'h', 'ch', '_', 's', 'c', 'i'},{'h', 'ch', 's', 'c', 'i'},{'h', 'ch', '_', 'l', 's', 'c'},{'h', 'ch', 'k', 's', 'c'},{'h', 'ch', 'k', '_', 's', 'c'},{'h', 'ƿ', 'ch', '_', 's', 'c'}
	FOUND __ 0 __ VALID VERSION(S)
	POSSIBLE CHANGE: 3 : Palatal Vicinity l-deletion
	OVERVIEW: version for pattern CCVCC
{'ll', 'c', '_', 'l'}
faulty splits: 10
hc----! <-! hsƿucch
sik----! <-! slike
suh.c.ch----! <-! suche
suic----! <-! suilc
suik----! <-! suilk
suik----! <-! suilke
sƿuc.ch----! <-! sƿucche
sƿuh.c.ch----! <-! sƿuche
uu.ih.c.ch----! <-! zuich
uu.yh.c.ch----! <-! zuych
s | w | e | c | h
s | ƿ | i | c | h
s | w | i | c | h
s | ƿ | i | l | c
s | w | i | l | c
s | ƿ | i | l | ch
s | w | i | l | k
s | ƿ | i | ll | c
s | ƿ | u | c | ch
s | ƿ | u | c | h
s | ƿ | u | l | c
s | w | u | l | c
h | _ | _ | _ | c | ----!
s | h | u | _ | c
s | _ | i | _ | k | ----!
s | _ | o | _ | ch
s | u | _ | _ | ch
s | u | _ | _ | h.c.ch | ----!
s | u | i | _ | ch
s | u | i | _ | c | ----!
s | u | i | _ | k | ----!
s | u | i | _ | k | ----!
s | u | y | _ | ch
s | ƿ | _ | _ | _
s | ƿ | u | _ | c
s | ƿ | u | _ | c.ch | ----!
s | ƿ | u | _ | h.c.ch | ----!
_ | u | u.i | _ | h.c.ch | ----!
_ | u | u.y | _ | h.c.ch | ----!
0 : {'h', 'z', 's'},{'h', '_', 'z', 's'}
1 : {'h', 'ƿ', 'u', 'w', '_', 'l'},{'w', 'ƿ', 's'}
3 : {'k', '_', 'l', 'll', 'c'},{'ll', 'c', 'l', 's'},{'_', 'l', 'll', 'c', 'y'},{'ch', '_', 'l', 'll', 'c'},{'cch', '_', 'l', 'll', 'c'},{'ll', 'c', '_', 'l'},{'_', 'l', 'll', 'c', 'i'},{'h', '_', 'l', 'll', 'c'},{'ll', 'c', 'u', 'l'},{'ƿ', 'll', 'c', 'l'}
	{'CCVCCV', 'CCCVCCV', 'CCCVCCC', 'CCCVCC', 'CCCCVCC', 'CCCCVCCC', 'CVCCCV', 'CCCVCCCV', 'CCCCVC', 'CCVCCCV', 'CCVCCC', 'CCVCCCCV', 'CCVCCCC'}
